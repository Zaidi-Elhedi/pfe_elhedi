
FLASH_SwapBank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005550  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080058b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b34  20000070  08005920  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000ba4  08005920  00020ba4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000120c4  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029de  00000000  00000000  000321a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef0  00000000  00000000  00034b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b75  00000000  00000000  00035a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039aee  00000000  00000000  000365ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013988  00000000  00000000  000700db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001766ea  00000000  00000000  00083a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003cc8  00000000  00000000  001fa150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000c7  00000000  00000000  001fde18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000070 	.word	0x20000070
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080057d0 	.word	0x080057d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000074 	.word	0x20000074
 80002d4:	080057d0 	.word	0x080057d0

080002d8 <MFXSTM32L152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Init(MFXSTM32L152_Object_t *pObj)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d11c      	bne.n	8000328 <MFXSTM32L152_Init+0x50>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4798      	blx	r3

    if(MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 80002f4:	2102      	movs	r1, #2
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 f8d5 	bl	80004a6 <MFXSTM32L152_SetIrqOutPinPolarity>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d003      	beq.n	800030a <MFXSTM32L152_Init+0x32>
    {
      ret = MFXSTM32L152_ERROR;
 8000302:	f04f 33ff 	mov.w	r3, #4294967295
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e00e      	b.n	8000328 <MFXSTM32L152_Init+0x50>
    }
    else if(MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 800030a:	2101      	movs	r1, #1
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f000 f900 	bl	8000512 <MFXSTM32L152_SetIrqOutPinType>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <MFXSTM32L152_Init+0x48>
    {
      ret = MFXSTM32L152_ERROR;
 8000318:	f04f 33ff 	mov.w	r3, #4294967295
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	e003      	b.n	8000328 <MFXSTM32L152_Init+0x50>
    }
    else
    {
      pObj->IsInitialized = 1U;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2201      	movs	r2, #1
 8000324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
  }

  return ret;
 8000328:	68fb      	ldr	r3, [r7, #12]
}
 800032a:	4618      	mov	r0, r3
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <MFXSTM32L152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000340:	2b01      	cmp	r3, #1
 8000342:	d103      	bne.n	800034c <MFXSTM32L152_DeInit+0x1a>
  {
    pObj->IsInitialized = 0U;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <MFXSTM32L152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Reset(MFXSTM32L152_Object_t *pObj)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b084      	sub	sp, #16
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = MFXSTM32L152_SWRST;
 8000366:	2380      	movs	r3, #128	; 0x80
 8000368:	72fb      	strb	r3, [r7, #11]

  /* Soft Reset */
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f103 0018 	add.w	r0, r3, #24
 8000370:	f107 020b 	add.w	r2, r7, #11
 8000374:	2301      	movs	r3, #1
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	f000 fd9c 	bl	8000eb4 <mfxstm32l152_write_reg>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <MFXSTM32L152_Reset+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000388:	68fb      	ldr	r3, [r7, #12]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <MFXSTM32L152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  pObj   Pointer to component object.
  * @retval The Device ID (two bytes).
  */
int32_t MFXSTM32L152_ReadID(MFXSTM32L152_Object_t *pObj, uint32_t *Id)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b084      	sub	sp, #16
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  uint8_t id;

  /* Initialize IO BUS layer */
  pObj->IO.Init();
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4798      	blx	r3

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f103 0018 	add.w	r0, r3, #24
 80003ac:	f107 020b 	add.w	r2, r7, #11
 80003b0:	2301      	movs	r3, #1
 80003b2:	2100      	movs	r1, #0
 80003b4:	f000 fd67 	bl	8000e86 <mfxstm32l152_read_reg>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d003      	beq.n	80003c6 <MFXSTM32L152_ReadID+0x34>
  {
    ret = MFXSTM32L152_ERROR;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	e003      	b.n	80003ce <MFXSTM32L152_ReadID+0x3c>
  }
  else
  {
  /* Store the device ID value */
  *Id = id;
 80003c6:	7afb      	ldrb	r3, [r7, #11]
 80003c8:	461a      	mov	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MFXSTM32L152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_EnableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f103 0018 	add.w	r0, r3, #24
 80003ee:	f107 020b 	add.w	r2, r7, #11
 80003f2:	2301      	movs	r3, #1
 80003f4:	2142      	movs	r1, #66	; 0x42
 80003f6:	f000 fd46 	bl	8000e86 <mfxstm32l152_read_reg>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d003      	beq.n	8000408 <MFXSTM32L152_EnableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8000400:	f04f 33ff 	mov.w	r3, #4294967295
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e013      	b.n	8000430 <MFXSTM32L152_EnableITSource+0x58>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp |= Source;
 8000408:	7afa      	ldrb	r2, [r7, #11]
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	4313      	orrs	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f103 0018 	add.w	r0, r3, #24
 8000418:	f107 020b 	add.w	r2, r7, #11
 800041c:	2301      	movs	r3, #1
 800041e:	2142      	movs	r1, #66	; 0x42
 8000420:	f000 fd48 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d002      	beq.n	8000430 <MFXSTM32L152_EnableITSource+0x58>
    {
      ret = MFXSTM32L152_ERROR;
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <MFXSTM32L152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_DisableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b084      	sub	sp, #16
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	460b      	mov	r3, r1
 8000444:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f103 0018 	add.w	r0, r3, #24
 8000450:	f107 020b 	add.w	r2, r7, #11
 8000454:	2301      	movs	r3, #1
 8000456:	2142      	movs	r1, #66	; 0x42
 8000458:	f000 fd15 	bl	8000e86 <mfxstm32l152_read_reg>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d003      	beq.n	800046a <MFXSTM32L152_DisableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e018      	b.n	800049c <MFXSTM32L152_DisableITSource+0x62>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp &= ~Source;
 800046a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800046e:	43db      	mvns	r3, r3
 8000470:	b25a      	sxtb	r2, r3
 8000472:	7afb      	ldrb	r3, [r7, #11]
 8000474:	b25b      	sxtb	r3, r3
 8000476:	4013      	ands	r3, r2
 8000478:	b25b      	sxtb	r3, r3
 800047a:	b2db      	uxtb	r3, r3
 800047c:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f103 0018 	add.w	r0, r3, #24
 8000484:	f107 020b 	add.w	r2, r7, #11
 8000488:	2301      	movs	r3, #1
 800048a:	2142      	movs	r1, #66	; 0x42
 800048c:	f000 fd12 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <MFXSTM32L152_DisableITSource+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <MFXSTM32L152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinPolarity(MFXSTM32L152_Object_t *pObj, uint8_t Polarity)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b084      	sub	sp, #16
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	460b      	mov	r3, r1
 80004b0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f103 0018 	add.w	r0, r3, #24
 80004bc:	f107 020b 	add.w	r2, r7, #11
 80004c0:	2301      	movs	r3, #1
 80004c2:	2141      	movs	r1, #65	; 0x41
 80004c4:	f000 fcdf 	bl	8000e86 <mfxstm32l152_read_reg>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <MFXSTM32L152_SetIrqOutPinPolarity+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e018      	b.n	8000508 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  }
  else
  {
  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 80004d6:	7afb      	ldrb	r3, [r7, #11]
 80004d8:	f023 0302 	bic.w	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	72fb      	strb	r3, [r7, #11]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 80004e0:	7afa      	ldrb	r2, [r7, #11]
 80004e2:	78fb      	ldrb	r3, [r7, #3]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	72fb      	strb	r3, [r7, #11]

  /* Set the new register value */
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f103 0018 	add.w	r0, r3, #24
 80004f0:	f107 020b 	add.w	r2, r7, #11
 80004f4:	2301      	movs	r3, #1
 80004f6:	2141      	movs	r1, #65	; 0x41
 80004f8:	f000 fcdc 	bl	8000eb4 <mfxstm32l152_write_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  {
    ret = MFXSTM32L152_ERROR;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	60fb      	str	r3, [r7, #12]
  }
  }

  return ret;
 8000508:	68fb      	ldr	r3, [r7, #12]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <MFXSTM32L152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinType(MFXSTM32L152_Object_t *pObj, uint8_t Type)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b084      	sub	sp, #16
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	460b      	mov	r3, r1
 800051c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f103 0018 	add.w	r0, r3, #24
 8000528:	f107 020b 	add.w	r2, r7, #11
 800052c:	2301      	movs	r3, #1
 800052e:	2141      	movs	r1, #65	; 0x41
 8000530:	f000 fca9 	bl	8000e86 <mfxstm32l152_read_reg>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d003      	beq.n	8000542 <MFXSTM32L152_SetIrqOutPinType+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e018      	b.n	8000574 <MFXSTM32L152_SetIrqOutPinType+0x62>
  }
  else
  {
    /* Mask the type bits */
    tmp &= ~(uint8_t)0x01;
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Type;
 800054c:	7afa      	ldrb	r2, [r7, #11]
 800054e:	78fb      	ldrb	r3, [r7, #3]
 8000550:	4313      	orrs	r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f103 0018 	add.w	r0, r3, #24
 800055c:	f107 020b 	add.w	r2, r7, #11
 8000560:	2301      	movs	r3, #1
 8000562:	2141      	movs	r1, #65	; 0x41
 8000564:	f000 fca6 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <MFXSTM32L152_SetIrqOutPinType+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <MFXSTM32L152_IO_Start>:
  * @param  pObj   Pointer to component object.
  * @param  IO_Pin IO pin
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Start(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  uint8_t mode;

  /* Get the current register value */
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 0018 	add.w	r0, r3, #24
 8000592:	f107 020b 	add.w	r2, r7, #11
 8000596:	2301      	movs	r3, #1
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	f000 fc74 	bl	8000e86 <mfxstm32l152_read_reg>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <MFXSTM32L152_IO_Start+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e022      	b.n	80005f2 <MFXSTM32L152_IO_Start+0x74>
  }
  else
  {
    /* Set the IO Functionalities to be Enabled */
    mode |= MFXSTM32L152_GPIO_EN;
 80005ac:	7afb      	ldrb	r3, [r7, #11]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	72fb      	strb	r3, [r7, #11]
    /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
    /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
    /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
    /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
    /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
    if (IO_Pin > 0xFFFFU)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005bc:	d305      	bcc.n	80005ca <MFXSTM32L152_IO_Start+0x4c>
    {
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80005be:	7afb      	ldrb	r3, [r7, #11]
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	72fb      	strb	r3, [r7, #11]
 80005c8:	e004      	b.n	80005d4 <MFXSTM32L152_IO_Start+0x56>
    }
    else
    {
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80005ca:	7afb      	ldrb	r3, [r7, #11]
 80005cc:	f023 0308 	bic.w	r3, r3, #8
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	72fb      	strb	r3, [r7, #11]
    }

    /* Write the new register value */
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0018 	add.w	r0, r3, #24
 80005da:	f107 020b 	add.w	r2, r7, #11
 80005de:	2301      	movs	r3, #1
 80005e0:	2140      	movs	r1, #64	; 0x40
 80005e2:	f000 fc67 	bl	8000eb4 <mfxstm32l152_write_reg>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <MFXSTM32L152_IO_Start+0x74>
    {
      ret = MFXSTM32L152_ERROR;
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MFXSTM32L152_IO_Init>:
  * @param  IoInit Pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Init(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_Init_t *IoInit)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]

  /* IT enable/disable */
  switch(IoInit->Mode)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	2b04      	cmp	r3, #4
 8000610:	d903      	bls.n	800061a <MFXSTM32L152_IO_Init+0x1e>
 8000612:	3b05      	subs	r3, #5
 8000614:	2b03      	cmp	r3, #3
 8000616:	d813      	bhi.n	8000640 <MFXSTM32L152_IO_Init+0x44>
 8000618:	e00a      	b.n	8000630 <MFXSTM32L152_IO_Init+0x34>
  case MFXSTM32L152_GPIO_MODE_OFF:
  case MFXSTM32L152_GPIO_MODE_ANALOG:
  case MFXSTM32L152_GPIO_MODE_INPUT:
  case MFXSTM32L152_GPIO_MODE_OUTPUT_OD:
  case MFXSTM32L152_GPIO_MODE_OUTPUT_PP:
    ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 fa53 	bl	8000acc <MFXSTM32L152_IO_DisablePinIT>
 8000626:	4602      	mov	r2, r0
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
    break;
 800062e:	e008      	b.n	8000642 <MFXSTM32L152_IO_Init+0x46>

  case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
  case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
  case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
  case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 fa09 	bl	8000a48 <MFXSTM32L152_IO_EnableIT>
 8000636:	4602      	mov	r2, r0
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
    break;
 800063e:	e000      	b.n	8000642 <MFXSTM32L152_IO_Init+0x46>
  default:
    break;
 8000640:	bf00      	nop
  }

  /* Set direction IN/OUT */
  if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d003      	beq.n	8000652 <MFXSTM32L152_IO_Init+0x56>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d10b      	bne.n	800066a <MFXSTM32L152_IO_Init+0x6e>
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f936 	bl	80008cc <MFXSTM32L152_IO_InitPin>
 8000660:	4602      	mov	r2, r0
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e00a      	b.n	8000680 <MFXSTM32L152_IO_Init+0x84>
  }
  else
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f92a 	bl	80008cc <MFXSTM32L152_IO_InitPin>
 8000678:	4602      	mov	r2, r0
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4413      	add	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
  }

  /* Set Push-Pull type */
  switch(IoInit->Pull)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <MFXSTM32L152_IO_Init+0x94>
 8000688:	3b01      	subs	r3, #1
 800068a:	2b01      	cmp	r3, #1
 800068c:	d818      	bhi.n	80006c0 <MFXSTM32L152_IO_Init+0xc4>
 800068e:	e00b      	b.n	80006a8 <MFXSTM32L152_IO_Init+0xac>
  {
  case MFXSTM32L152_GPIO_NOPULL:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2164      	movs	r1, #100	; 0x64
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fb05 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 800069e:	4602      	mov	r2, r0
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
    break;
 80006a6:	e00c      	b.n	80006c2 <MFXSTM32L152_IO_Init+0xc6>
  case MFXSTM32L152_GPIO_PULLUP:
  case MFXSTM32L152_GPIO_PULLDOWN:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	2164      	movs	r1, #100	; 0x64
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 faf9 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 80006b6:	4602      	mov	r2, r0
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
    break;
 80006be:	e000      	b.n	80006c2 <MFXSTM32L152_IO_Init+0xc6>
  default:
    break;
 80006c0:	bf00      	nop
  }

  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d10a      	bne.n	80006e0 <MFXSTM32L152_IO_Init+0xe4>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2164      	movs	r1, #100	; 0x64
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 fae8 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 80006d8:	4602      	mov	r2, r0
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4413      	add	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
  }

  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d10a      	bne.n	80006fe <MFXSTM32L152_IO_Init+0x102>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	2164      	movs	r1, #100	; 0x64
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fad9 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 80006f6:	4602      	mov	r2, r0
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set Pullup-Pulldown */
  switch(IoInit->Pull)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d033      	beq.n	800076e <MFXSTM32L152_IO_Init+0x172>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d83d      	bhi.n	8000786 <MFXSTM32L152_IO_Init+0x18a>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <MFXSTM32L152_IO_Init+0x118>
 800070e:	2b01      	cmp	r3, #1
 8000710:	d021      	beq.n	8000756 <MFXSTM32L152_IO_Init+0x15a>
    break;
  case MFXSTM32L152_GPIO_PULLDOWN:
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
    break;
  default:
    break;
 8000712:	e038      	b.n	8000786 <MFXSTM32L152_IO_Init+0x18a>
    if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d003      	beq.n	8000724 <MFXSTM32L152_IO_Init+0x128>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10c      	bne.n	800073e <MFXSTM32L152_IO_Init+0x142>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	2300      	movs	r3, #0
 800072a:	2168      	movs	r1, #104	; 0x68
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 fabb 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 8000732:	4602      	mov	r2, r0
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	bf00      	nop
    break;
 800073c:	e024      	b.n	8000788 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	2301      	movs	r3, #1
 8000744:	2168      	movs	r1, #104	; 0x68
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 faae 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 800074c:	4602      	mov	r2, r0
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4413      	add	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
    break;
 8000754:	e018      	b.n	8000788 <MFXSTM32L152_IO_Init+0x18c>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 faa2 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    break;
 800076c:	e00c      	b.n	8000788 <MFXSTM32L152_IO_Init+0x18c>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2168      	movs	r1, #104	; 0x68
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 fa96 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 800077c:	4602      	mov	r2, r0
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
    break;
 8000784:	e000      	b.n	8000788 <MFXSTM32L152_IO_Init+0x18c>
    break;
 8000786:	bf00      	nop
  }

  /* Set Irq event and type mode */
  switch(IoInit->Mode)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	3b05      	subs	r3, #5
 800078e:	2b03      	cmp	r3, #3
 8000790:	f200 8090 	bhi.w	80008b4 <MFXSTM32L152_IO_Init+0x2b8>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <MFXSTM32L152_IO_Init+0x1a0>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007ef 	.word	0x080007ef
 80007a4:	08000873 	.word	0x08000873
 80007a8:	08000831 	.word	0x08000831
  {
  case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f8a3 	bl	8000900 <MFXSTM32L152_IO_SetIrqEvtMode>
 80007ba:	4602      	mov	r2, r0
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f8b2 	bl	8000934 <MFXSTM32L152_IO_SetIrqTypeMode>
 80007d0:	4602      	mov	r2, r0
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4413      	add	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f95c 	bl	8000a9c <MFXSTM32L152_IO_EnablePinIT>
 80007e4:	4602      	mov	r2, r0
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
    break;
 80007ec:	e063      	b.n	80008b6 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f882 	bl	8000900 <MFXSTM32L152_IO_SetIrqEvtMode>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f891 	bl	8000934 <MFXSTM32L152_IO_SetIrqTypeMode>
 8000812:	4602      	mov	r2, r0
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f93b 	bl	8000a9c <MFXSTM32L152_IO_EnablePinIT>
 8000826:	4602      	mov	r2, r0
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
    break;
 800082e:	e042      	b.n	80008b6 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f861 	bl	8000900 <MFXSTM32L152_IO_SetIrqEvtMode>
 800083e:	4602      	mov	r2, r0
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f870 	bl	8000934 <MFXSTM32L152_IO_SetIrqTypeMode>
 8000854:	4602      	mov	r2, r0
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4413      	add	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f91a 	bl	8000a9c <MFXSTM32L152_IO_EnablePinIT>
 8000868:	4602      	mov	r2, r0
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
    break;
 8000870:	e021      	b.n	80008b6 <MFXSTM32L152_IO_Init+0x2ba>
  case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f840 	bl	8000900 <MFXSTM32L152_IO_SetIrqEvtMode>
 8000880:	4602      	mov	r2, r0
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f84f 	bl	8000934 <MFXSTM32L152_IO_SetIrqTypeMode>
 8000896:	4602      	mov	r2, r0
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f8f9 	bl	8000a9c <MFXSTM32L152_IO_EnablePinIT>
 80008aa:	4602      	mov	r2, r0
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
    break;
 80008b2:	e000      	b.n	80008b6 <MFXSTM32L152_IO_Init+0x2ba>
  default:
    break;
 80008b4:	bf00      	nop
  }

  if(ret != MFXSTM32L152_OK)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <MFXSTM32L152_IO_Init+0x2c6>
  {
    ret = MFXSTM32L152_ERROR;
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <MFXSTM32L152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_InitPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Direction)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	2160      	movs	r1, #96	; 0x60
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f000 f9df 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <MFXSTM32L152_IO_InitPin+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80008f6:	697b      	ldr	r3, [r7, #20]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFXSTM32L152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqEvtMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Evt)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4613      	mov	r3, r2
 800090c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	214c      	movs	r1, #76	; 0x4c
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f000 f9c5 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <MFXSTM32L152_IO_SetIrqEvtMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800092a:	697b      	ldr	r3, [r7, #20]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <MFXSTM32L152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqTypeMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Type)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	4613      	mov	r3, r2
 8000940:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	2150      	movs	r1, #80	; 0x50
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f9ab 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <MFXSTM32L152_IO_SetIrqTypeMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800095e:	697b      	ldr	r3, [r7, #20]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <MFXSTM32L152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_WritePin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t PinState)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	4613      	mov	r3, r2
 8000974:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

  /* Apply the bit value to the selected pin */
  if (PinState != 0U)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00c      	beq.n	800099a <MFXSTM32L152_IO_WritePin+0x32>
  {
    /* Set the SET register */
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8000980:	2301      	movs	r3, #1
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	216c      	movs	r1, #108	; 0x6c
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f98e 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00f      	beq.n	80009b2 <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e00b      	b.n	80009b2 <MFXSTM32L152_IO_WritePin+0x4a>
    }
  }
  else
  {
    /* Set the CLEAR register */
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 800099a:	2301      	movs	r3, #1
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	2170      	movs	r1, #112	; 0x70
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f000 f981 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80009b2:	697b      	ldr	r3, [r7, #20]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <MFXSTM32L152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
int32_t MFXSTM32L152_IO_ReadPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint8_t tmpreg[3];
  uint32_t tmp;

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f103 0018 	add.w	r0, r3, #24
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	2301      	movs	r3, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	f000 fa57 	bl	8000e86 <mfxstm32l152_read_reg>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <MFXSTM32L152_IO_ReadPin+0x28>
  {
    return MFXSTM32L152_ERROR;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	e02d      	b.n	8000a40 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f103 0018 	add.w	r0, r3, #24
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	2301      	movs	r3, #1
 80009f2:	2111      	movs	r1, #17
 80009f4:	f000 fa47 	bl	8000e86 <mfxstm32l152_read_reg>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <MFXSTM32L152_IO_ReadPin+0x48>
  {
    return MFXSTM32L152_ERROR;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e01d      	b.n	8000a40 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f103 0018 	add.w	r0, r3, #24
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	1c9a      	adds	r2, r3, #2
 8000a10:	2301      	movs	r3, #1
 8000a12:	2112      	movs	r1, #18
 8000a14:	f000 fa37 	bl	8000e86 <mfxstm32l152_read_reg>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <MFXSTM32L152_IO_ReadPin+0x68>
  {
    return MFXSTM32L152_ERROR;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e00d      	b.n	8000a40 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	461a      	mov	r2, r3
 8000a28:	7a7b      	ldrb	r3, [r7, #9]
 8000a2a:	021b      	lsls	r3, r3, #8
 8000a2c:	441a      	add	r2, r3
 8000a2e:	7abb      	ldrb	r3, [r7, #10]
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]

  return(int32_t)(tmp);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <MFXSTM32L152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnableIT(MFXSTM32L152_Object_t *pObj)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Enable global IO IT source */
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8000a54:	2101      	movs	r1, #1
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fcbe 	bl	80003d8 <MFXSTM32L152_EnableITSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <MFXSTM32L152_IO_EnableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000a68:	68fb      	ldr	r3, [r7, #12]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <MFXSTM32L152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisableIT(MFXSTM32L152_Object_t *pObj)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Disable global IO IT source */
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fcda 	bl	800043a <MFXSTM32L152_DisableITSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <MFXSTM32L152_IO_DisableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <MFXSTM32L152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 8000aaa:	2301      	movs	r3, #1
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	2148      	movs	r1, #72	; 0x48
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f8f9 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <MFXSTM32L152_IO_EnablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MFXSTM32L152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]

  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 8000ada:	2300      	movs	r3, #0
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	2148      	movs	r1, #72	; 0x48
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f8e1 	bl	8000ca8 <MFXSTM32L152_reg24_setPinValue>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <MFXSTM32L152_IO_DisablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <MFXSTM32L152_IO_ITStatus>:
  * @param  IO_Pin The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
int32_t MFXSTM32L152_IO_ITStatus(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  /* Get the Interrupt status */
  uint8_t tmpreg[3];
  uint32_t tmp;

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f103 0018 	add.w	r0, r3, #24
 8000b0c:	f107 0208 	add.w	r2, r7, #8
 8000b10:	2301      	movs	r3, #1
 8000b12:	210c      	movs	r1, #12
 8000b14:	f000 f9b7 	bl	8000e86 <mfxstm32l152_read_reg>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <MFXSTM32L152_IO_ITStatus+0x28>
  {
    return MFXSTM32L152_ERROR;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e02d      	b.n	8000b80 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f103 0018 	add.w	r0, r3, #24
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	2301      	movs	r3, #1
 8000b32:	210d      	movs	r1, #13
 8000b34:	f000 f9a7 	bl	8000e86 <mfxstm32l152_read_reg>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <MFXSTM32L152_IO_ITStatus+0x48>
  {
    return MFXSTM32L152_ERROR;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e01d      	b.n	8000b80 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f103 0018 	add.w	r0, r3, #24
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	1c9a      	adds	r2, r3, #2
 8000b50:	2301      	movs	r3, #1
 8000b52:	210e      	movs	r1, #14
 8000b54:	f000 f997 	bl	8000e86 <mfxstm32l152_read_reg>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <MFXSTM32L152_IO_ITStatus+0x68>
  {
    return MFXSTM32L152_ERROR;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e00d      	b.n	8000b80 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8000b64:	7a3b      	ldrb	r3, [r7, #8]
 8000b66:	461a      	mov	r2, r3
 8000b68:	7a7b      	ldrb	r3, [r7, #9]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	441a      	add	r2, r3
 8000b6e:	7abb      	ldrb	r3, [r7, #10]
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]

  return(int32_t)tmp;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <MFXSTM32L152_IO_ClearIT>:
  * @param  IO_Pin the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_ClearIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	73bb      	strb	r3, [r7, #14]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	0c1b      	lsrs	r3, r3, #16
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	737b      	strb	r3, [r7, #13]

  if (pin_0_7 != 0U)
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00e      	beq.n	8000bd0 <MFXSTM32L152_IO_ClearIT+0x48>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f103 0018 	add.w	r0, r3, #24
 8000bb8:	f107 020f 	add.w	r2, r7, #15
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2154      	movs	r1, #84	; 0x54
 8000bc0:	f000 f978 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <MFXSTM32L152_IO_ClearIT+0x48>
    {
      return MFXSTM32L152_ERROR;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e024      	b.n	8000c1a <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_8_15 != 0U)
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00e      	beq.n	8000bf4 <MFXSTM32L152_IO_ClearIT+0x6c>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f103 0018 	add.w	r0, r3, #24
 8000bdc:	f107 020e 	add.w	r2, r7, #14
 8000be0:	2301      	movs	r3, #1
 8000be2:	2155      	movs	r1, #85	; 0x55
 8000be4:	f000 f966 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <MFXSTM32L152_IO_ClearIT+0x6c>
    {
      return MFXSTM32L152_ERROR;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e012      	b.n	8000c1a <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_16_23 != 0U)
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00e      	beq.n	8000c18 <MFXSTM32L152_IO_ClearIT+0x90>
  {
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f103 0018 	add.w	r0, r3, #24
 8000c00:	f107 020d 	add.w	r2, r7, #13
 8000c04:	2301      	movs	r3, #1
 8000c06:	2156      	movs	r1, #86	; 0x56
 8000c08:	f000 f954 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <MFXSTM32L152_IO_ClearIT+0x90>
    {
      return MFXSTM32L152_ERROR;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e000      	b.n	8000c1a <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }

  return MFXSTM32L152_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <MFXSTM32L152_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Component status
  */
int32_t MFXSTM32L152_RegisterBusIO (MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_t *pIO)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d103      	bne.n	8000c3c <MFXSTM32L152_RegisterBusIO+0x18>
  {
    ret = MFXSTM32L152_ERROR;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e02c      	b.n	8000c96 <MFXSTM32L152_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	891a      	ldrh	r2, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691a      	ldr	r2, [r3, #16]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695a      	ldr	r2, [r3, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <MFXSTM32L152_RegisterBusIO+0x7c>)
 8000c70:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <MFXSTM32L152_RegisterBusIO+0x80>)
 8000c76:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d004      	beq.n	8000c90 <MFXSTM32L152_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4798      	blx	r3
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	e002      	b.n	8000c96 <MFXSTM32L152_RegisterBusIO+0x72>
    }
    else
    {
      ret = MFXSTM32L152_ERROR;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08000e23 	.word	0x08000e23
 8000ca4:	08000e55 	.word	0x08000e55

08000ca8 <MFXSTM32L152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval Component status
  */
static int32_t MFXSTM32L152_reg24_setPinValue(MFXSTM32L152_Object_t *pObj, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	72fb      	strb	r3, [r7, #11]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MFXSTM32L152_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  uint8_t tmp;
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = (uint8_t)(PinPosition & 0x0000ffU);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	74fb      	strb	r3, [r7, #19]
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	74bb      	strb	r3, [r7, #18]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0c1b      	lsrs	r3, r3, #16
 8000cce:	747b      	strb	r3, [r7, #17]

  if (pin_0_7 != 0U)
 8000cd0:	7cfb      	ldrb	r3, [r7, #19]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d02e      	beq.n	8000d34 <MFXSTM32L152_reg24_setPinValue+0x8c>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f103 0018 	add.w	r0, r3, #24
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	f107 0210 	add.w	r2, r7, #16
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f000 f8ce 	bl	8000e86 <mfxstm32l152_read_reg>
 8000cea:	4602      	mov	r2, r0
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8000cf2:	7abb      	ldrb	r3, [r7, #10]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <MFXSTM32L152_reg24_setPinValue+0x5c>
    {
      tmp |= (uint8_t)pin_0_7;
 8000cf8:	7c3a      	ldrb	r2, [r7, #16]
 8000cfa:	7cfb      	ldrb	r3, [r7, #19]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	743b      	strb	r3, [r7, #16]
 8000d02:	e009      	b.n	8000d18 <MFXSTM32L152_reg24_setPinValue+0x70>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8000d04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	7c3b      	ldrb	r3, [r7, #16]
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f103 0018 	add.w	r0, r3, #24
 8000d1e:	7afb      	ldrb	r3, [r7, #11]
 8000d20:	b299      	uxth	r1, r3
 8000d22:	f107 0210 	add.w	r2, r7, #16
 8000d26:	2301      	movs	r3, #1
 8000d28:	f000 f8c4 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	4413      	add	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
  }

  if (pin_8_15 != 0U)
 8000d34:	7cbb      	ldrb	r3, [r7, #18]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d032      	beq.n	8000da0 <MFXSTM32L152_reg24_setPinValue+0xf8>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f103 0018 	add.w	r0, r3, #24
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	b299      	uxth	r1, r3
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f000 f89a 	bl	8000e86 <mfxstm32l152_read_reg>
 8000d52:	4602      	mov	r2, r0
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	4413      	add	r3, r2
 8000d58:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8000d5a:	7abb      	ldrb	r3, [r7, #10]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <MFXSTM32L152_reg24_setPinValue+0xc4>
    {
      tmp |= (uint8_t)pin_8_15;
 8000d60:	7c3a      	ldrb	r2, [r7, #16]
 8000d62:	7cbb      	ldrb	r3, [r7, #18]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	743b      	strb	r3, [r7, #16]
 8000d6a:	e009      	b.n	8000d80 <MFXSTM32L152_reg24_setPinValue+0xd8>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8000d6c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	b25a      	sxtb	r2, r3
 8000d74:	7c3b      	ldrb	r3, [r7, #16]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f103 0018 	add.w	r0, r3, #24
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	f107 0210 	add.w	r2, r7, #16
 8000d92:	2301      	movs	r3, #1
 8000d94:	f000 f88e 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
  }

  if (pin_16_23 != 0U)
 8000da0:	7c7b      	ldrb	r3, [r7, #17]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d032      	beq.n	8000e0c <MFXSTM32L152_reg24_setPinValue+0x164>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f103 0018 	add.w	r0, r3, #24
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	3302      	adds	r3, #2
 8000db2:	b299      	uxth	r1, r3
 8000db4:	f107 0210 	add.w	r2, r7, #16
 8000db8:	2301      	movs	r3, #1
 8000dba:	f000 f864 	bl	8000e86 <mfxstm32l152_read_reg>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8000dc6:	7abb      	ldrb	r3, [r7, #10]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <MFXSTM32L152_reg24_setPinValue+0x130>
    {
      tmp |= (uint8_t)pin_16_23;
 8000dcc:	7c3a      	ldrb	r2, [r7, #16]
 8000dce:	7c7b      	ldrb	r3, [r7, #17]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	743b      	strb	r3, [r7, #16]
 8000dd6:	e009      	b.n	8000dec <MFXSTM32L152_reg24_setPinValue+0x144>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8000dd8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b25a      	sxtb	r2, r3
 8000de0:	7c3b      	ldrb	r3, [r7, #16]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f103 0018 	add.w	r0, r3, #24
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3302      	adds	r3, #2
 8000df8:	b299      	uxth	r1, r3
 8000dfa:	f107 0210 	add.w	r2, r7, #16
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f000 f858 	bl	8000eb4 <mfxstm32l152_write_reg>
 8000e04:	4602      	mov	r2, r0
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	4413      	add	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
  }

  if(ret != MFXSTM32L152_OK)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <MFXSTM32L152_reg24_setPinValue+0x170>
  {
    ret = MFXSTM32L152_ERROR;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000e18:	697b      	ldr	r3, [r7, #20]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000e22:	b590      	push	{r4, r7, lr}
 8000e24:	b087      	sub	sp, #28
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	460b      	mov	r3, r1
 8000e30:	817b      	strh	r3, [r7, #10]
 8000e32:	4613      	mov	r3, r2
 8000e34:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	691c      	ldr	r4, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	8918      	ldrh	r0, [r3, #8]
 8000e42:	893b      	ldrh	r3, [r7, #8]
 8000e44:	8979      	ldrh	r1, [r7, #10]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	47a0      	blx	r4
 8000e4a:	4603      	mov	r3, r0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}

08000e54 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	460b      	mov	r3, r1
 8000e62:	817b      	strh	r3, [r7, #10]
 8000e64:	4613      	mov	r3, r2
 8000e66:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	68dc      	ldr	r4, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	8918      	ldrh	r0, [r3, #8]
 8000e74:	893b      	ldrh	r3, [r7, #8]
 8000e76:	8979      	ldrh	r1, [r7, #10]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	47a0      	blx	r4
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}

08000e86 <mfxstm32l152_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 8000e86:	b590      	push	{r4, r7, lr}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	461a      	mov	r2, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	817b      	strh	r3, [r7, #10]
 8000e96:	4613      	mov	r3, r2
 8000e98:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	685c      	ldr	r4, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6898      	ldr	r0, [r3, #8]
 8000ea2:	893b      	ldrh	r3, [r7, #8]
 8000ea4:	8979      	ldrh	r1, [r7, #10]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	47a0      	blx	r4
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}

08000eb4 <mfxstm32l152_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681c      	ldr	r4, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6898      	ldr	r0, [r3, #8]
 8000ed0:	893b      	ldrh	r3, [r7, #8]
 8000ed2:	8979      	ldrh	r1, [r7, #10]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	47a0      	blx	r4
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}
	...

08000ee4 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led == LED1) || (Led == LED3))
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <BSP_LED_Init+0x1a>
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d144      	bne.n	8000f88 <BSP_LED_Init+0xa4>
  {
    /* Enable the GPIO_LED clock   */
    if(Led == LED1)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10f      	bne.n	8000f24 <BSP_LED_Init+0x40>
    {

      LED1_GPIO_CLK_ENABLE();
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <BSP_LED_Init+0xf8>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <BSP_LED_Init+0xf8>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <BSP_LED_Init+0xf8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	e00e      	b.n	8000f42 <BSP_LED_Init+0x5e>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <BSP_LED_Init+0xf8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <BSP_LED_Init+0xf8>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <BSP_LED_Init+0xf8>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
    }

    /* Configure the GPIO_LED pin   */
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Pin = LED_PIN [Led];
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <BSP_LED_Init+0xfc>)
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <BSP_LED_Init+0x100>)
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	f107 0220 	add.w	r2, r7, #32
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 f876 	bl	8003058 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <BSP_LED_Init+0x100>)
 8000f70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <BSP_LED_Init+0xfc>)
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f002 fb3b 	bl	80035fc <HAL_GPIO_WritePin>
 8000f86:	e024      	b.n	8000fd2 <BSP_LED_Init+0xee>
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    BSP_IO_Init_t io_init_structure;

    io_init_structure.Pin  = LED_PIN[Led];
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <BSP_LED_Init+0xfc>)
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	60fb      	str	r3, [r7, #12]
    io_init_structure.Pull = IO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 8000f96:	2304      	movs	r3, #4
 8000f98:	613b      	str	r3, [r7, #16]
    /* Initialize MFX   */
    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 fdf9 	bl	8001b98 <BSP_IO_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <BSP_LED_Init+0xd0>
    {
      ret = BSP_ERROR_NO_INIT;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb2:	e00e      	b.n	8000fd2 <BSP_LED_Init+0xee>
    }
    else
    {
      if(BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_SET) != BSP_ERROR_NONE)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <BSP_LED_Init+0xfc>)
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fe49 	bl	8001c58 <BSP_IO_WritePin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <BSP_LED_Init+0xee>
      {
        ret = BSP_ERROR_NO_INIT;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
#endif /* (USE_BSP_IO_CLASS > 0)   */
  }

  return ret;
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3738      	adds	r7, #56	; 0x38
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	080057e8 	.word	0x080057e8
 8000fe4:	2000002c 	.word	0x2000002c

08000fe8 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]

  if((Led == LED1)||(Led == LED3))
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <BSP_LED_Off+0x1a>
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d10d      	bne.n	800101e <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <BSP_LED_Off+0x54>)
 8001006:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <BSP_LED_Off+0x58>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	f002 faf0 	bl	80035fc <HAL_GPIO_WritePin>
 800101c:	e009      	b.n	8001032 <BSP_LED_Off+0x4a>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_SET);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <BSP_LED_Off+0x58>)
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fe14 	bl	8001c58 <BSP_IO_WritePin>
 8001030:	60f8      	str	r0, [r7, #12]
#endif /* (USE_BSP_IO_CLASS > 0)   */
  }

  return ret;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000002c 	.word	0x2000002c
 8001040:	080057e8 	.word	0x080057e8

08001044 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]

  if((Led == LED1) || (Led == LED3))
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <BSP_LED_Toggle+0x1a>
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d10d      	bne.n	800107a <BSP_LED_Toggle+0x36>
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <BSP_LED_Toggle+0x54>)
 8001062:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <BSP_LED_Toggle+0x58>)
 800106a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f002 fadb 	bl	800362e <HAL_GPIO_TogglePin>
 8001078:	e008      	b.n	800108c <BSP_LED_Toggle+0x48>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_TogglePin(0, LED_PIN[Led]);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <BSP_LED_Toggle+0x58>)
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	4619      	mov	r1, r3
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fe19 	bl	8001cbc <BSP_IO_TogglePin>
 800108a:	60f8      	str	r0, [r7, #12]
#endif /* (USE_BSP_IO_CLASS > 0)   */
  }

  return ret;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000002c 	.word	0x2000002c
 800109c:	080057e8 	.word	0x080057e8

080010a0 <BSP_PB_Init>:
  *       and key buttons) are mapped on the same push button named "Wakeup/Tamper"
  *       on the board serigraphy.
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
                                                     BUTTON_WAKEUP_EXTI_LINE,
                                                     BUTTON_TAMPER_EXTI_LINE,
                                                     BUTTON_USER_EXTI_LINE,
                                                   };
  /* Enable the BUTTON clock  */
  if(Button == BUTTON_WAKEUP)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10f      	bne.n	80010d6 <BSP_PB_Init+0x36>
  {
    BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <BSP_PB_Init+0x130>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a44      	ldr	r2, [pc, #272]	; (80011d0 <BSP_PB_Init+0x130>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <BSP_PB_Init+0x130>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	e021      	b.n	800111a <BSP_PB_Init+0x7a>
  }
  else if(Button == BUTTON_TAMPER)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10f      	bne.n	80010fc <BSP_PB_Init+0x5c>
  {
    BUTTON_TAMPER_GPIO_CLK_ENABLE();
 80010dc:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <BSP_PB_Init+0x130>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a3b      	ldr	r2, [pc, #236]	; (80011d0 <BSP_PB_Init+0x130>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <BSP_PB_Init+0x130>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	e00e      	b.n	800111a <BSP_PB_Init+0x7a>
  }
  else
  {
    BUTTON_USER_GPIO_CLK_ENABLE();
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <BSP_PB_Init+0x130>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <BSP_PB_Init+0x130>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <BSP_PB_Init+0x130>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  }
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a2d      	ldr	r2, [pc, #180]	; (80011d4 <BSP_PB_Init+0x134>)
 800111e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001122:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]

  if(Button == BUTTON_TAMPER)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <BSP_PB_Init+0x96>
  {
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
  }

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10c      	bne.n	8001156 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input   */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <BSP_PB_Init+0x138>)
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	f107 0214 	add.w	r2, r7, #20
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f001 ff82 	bl	8003058 <HAL_GPIO_Init>
 8001154:	e037      	b.n	80011c6 <BSP_PB_Init+0x126>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI)   */
  {
    /* Configure Button pin as input with External interrupt   */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115a:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <BSP_PB_Init+0x138>)
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	f107 0214 	add.w	r2, r7, #20
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f001 ff74 	bl	8003058 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <BSP_PB_Init+0x13c>)
 8001176:	441a      	add	r2, r3
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4919      	ldr	r1, [pc, #100]	; (80011e0 <BSP_PB_Init+0x140>)
 800117c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f001 f9af 	bl	80024e6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <BSP_PB_Init+0x13c>)
 800118e:	1898      	adds	r0, r3, r2
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <BSP_PB_Init+0x144>)
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	461a      	mov	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f001 f984 	bl	80024a8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority   */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <BSP_PB_Init+0x148>)
 80011a4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <BSP_PB_Init+0x14c>)
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	f001 f8c3 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <BSP_PB_Init+0x148>)
 80011bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 f8d6 	bl	8002372 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58024400 	.word	0x58024400
 80011d4:	080057f8 	.word	0x080057f8
 80011d8:	2000003c 	.word	0x2000003c
 80011dc:	2000008c 	.word	0x2000008c
 80011e0:	08005808 	.word	0x08005808
 80011e4:	20000048 	.word	0x20000048
 80011e8:	08005800 	.word	0x08005800
 80011ec:	20000054 	.word	0x20000054

080011f0 <BSP_PB_GetState>:
  *            @arg  BUTTON_TAMPER: Tamper Push Button
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <BSP_PB_GetState+0x2c>)
 80011fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4906      	ldr	r1, [pc, #24]	; (8001220 <BSP_PB_GetState+0x30>)
 8001206:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800120a:	4619      	mov	r1, r3
 800120c:	4610      	mov	r0, r2
 800120e:	f002 f9dd 	bl	80035cc <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000003c 	.word	0x2000003c
 8001220:	080057f8 	.word	0x080057f8

08001224 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning   */
  UNUSED(Button);
  /* This function should be implemented by the user application.
  It is called into this driver when an event on Button is triggered.   */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <BUTTON_WAKEUP_EXTI_Callback>:
/**
  * @brief  WAKEUP EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_WAKEUP_EXTI_Callback(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_WAKEUP);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fff0 	bl	8001224 <BSP_PB_Callback>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <BUTTON_TAMPER_EXTI_Callback>:
/**
  * @brief  TAMPER EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_TAMPER_EXTI_Callback(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_TAMPER);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ffe9 	bl	8001224 <BSP_PB_Callback>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800125a:	2002      	movs	r0, #2
 800125c:	f7ff ffe2 	bl	8001224 <BSP_PB_Callback>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <BSP_I2C1_Init+0x68>)
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <BSP_I2C1_Init+0x6c>)
 8001272:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <BSP_I2C1_Init+0x70>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d122      	bne.n	80012c2 <BSP_I2C1_Init+0x5e>
  {
    I2c1InitCounter++;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <BSP_I2C1_Init+0x70>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <BSP_I2C1_Init+0x70>)
 8001284:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <BSP_I2C1_Init+0x68>)
 8001288:	f002 fd12 	bl	8003cb0 <HAL_I2C_GetState>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d117      	bne.n	80012c2 <BSP_I2C1_Init+0x5e>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <BSP_I2C1_Init+0x68>)
 8001294:	f000 fb66 	bl	8001964 <I2C1_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d111      	bne.n	80012c2 <BSP_I2C1_Init+0x5e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 800129e:	f004 f865 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 80012a2:	4603      	mov	r3, r0
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <BSP_I2C1_Init+0x74>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8e6 	bl	8001478 <I2C_GetTiming>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <BSP_I2C1_Init+0x68>)
 80012b2:	f000 f83b 	bl	800132c <MX_I2C1_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BSP_I2C1_Init+0x5e>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012bc:	f06f 0307 	mvn.w	r3, #7
 80012c0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000aac 	.word	0x20000aac
 80012d0:	40005400 	.word	0x40005400
 80012d4:	200000a4 	.word	0x200000a4
 80012d8:	000186a0 	.word	0x000186a0

080012dc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C1_DeInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <BSP_I2C1_DeInit+0x48>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <BSP_I2C1_DeInit+0x48>)
 80012ee:	6013      	str	r3, [r2, #0]

  if (--I2c1InitCounter == 0U)
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <BSP_I2C1_DeInit+0x48>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <BSP_I2C1_DeInit+0x48>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <BSP_I2C1_DeInit+0x48>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10b      	bne.n	800131a <BSP_I2C1_DeInit+0x3e>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <BSP_I2C1_DeInit+0x4c>)
 8001304:	f000 fb98 	bl	8001a38 <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <BSP_I2C1_DeInit+0x4c>)
 800130a:	f002 fa5f 	bl	80037cc <HAL_I2C_DeInit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <BSP_I2C1_DeInit+0x3e>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001314:	f06f 0307 	mvn.w	r3, #7
 8001318:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000a4 	.word	0x200000a4
 8001328:	20000aac 	.word	0x20000aac

0800132c <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f002 f99e 	bl	80036ac <HAL_I2C_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e014      	b.n	80013a6 <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f002 ff66 	bl	8004254 <HAL_I2CEx_ConfigAnalogFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e008      	b.n	80013a6 <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f002 ffa7 	bl	80042ea <HAL_I2CEx_ConfigDigitalFilter>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <BSP_I2C1_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	81fb      	strh	r3, [r7, #14]
 80013be:	460b      	mov	r3, r1
 80013c0:	81bb      	strh	r3, [r7, #12]
 80013c2:	4613      	mov	r3, r2
 80013c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80013c6:	89b9      	ldrh	r1, [r7, #12]
 80013c8:	89f8      	ldrh	r0, [r7, #14]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f000 fb53 	bl	8001a7c <I2C1_WriteReg>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <BSP_I2C1_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00c      	b.n	80013fc <BSP_I2C1_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 80013e2:	4809      	ldr	r0, [pc, #36]	; (8001408 <BSP_I2C1_WriteReg+0x58>)
 80013e4:	f002 fc72 	bl	8003ccc <HAL_I2C_GetError>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d103      	bne.n	80013f6 <BSP_I2C1_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e002      	b.n	80013fc <BSP_I2C1_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013f6:	f06f 0303 	mvn.w	r3, #3
 80013fa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80013fc:	697b      	ldr	r3, [r7, #20]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000aac 	.word	0x20000aac

0800140c <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	461a      	mov	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	81fb      	strh	r3, [r7, #14]
 800141a:	460b      	mov	r3, r1
 800141c:	81bb      	strh	r3, [r7, #12]
 800141e:	4613      	mov	r3, r2
 8001420:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001422:	89b9      	ldrh	r1, [r7, #12]
 8001424:	89f8      	ldrh	r0, [r7, #14]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2201      	movs	r2, #1
 800142e:	f000 fb4b 	bl	8001ac8 <I2C1_ReadReg>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <BSP_I2C1_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00c      	b.n	8001458 <BSP_I2C1_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <BSP_I2C1_ReadReg+0x58>)
 8001440:	f002 fc44 	bl	8003ccc <HAL_I2C_GetError>
 8001444:	4603      	mov	r3, r0
 8001446:	2b04      	cmp	r3, #4
 8001448:	d103      	bne.n	8001452 <BSP_I2C1_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800144a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e002      	b.n	8001458 <BSP_I2C1_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001452:	f06f 0303 	mvn.w	r3, #3
 8001456:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001458:	697b      	ldr	r3, [r7, #20]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000aac 	.word	0x20000aac

08001468 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800146c:	f000 fe3a 	bl	80020e4 <HAL_GetTick>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d06b      	beq.n	8001564 <I2C_GetTiming+0xec>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d068      	beq.n	8001564 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e060      	b.n	800155a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001498:	4a35      	ldr	r2, [pc, #212]	; (8001570 <I2C_GetTiming+0xf8>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	212c      	movs	r1, #44	; 0x2c
 800149e:	fb01 f303 	mul.w	r3, r1, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d352      	bcc.n	8001554 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80014ae:	4a30      	ldr	r2, [pc, #192]	; (8001570 <I2C_GetTiming+0xf8>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	212c      	movs	r1, #44	; 0x2c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	3308      	adds	r3, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d847      	bhi.n	8001554 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f856 	bl	8001578 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80014cc:	6939      	ldr	r1, [r7, #16]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f940 	bl	8001754 <I2C_Compute_SCLL_SCLH>
 80014d4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b7f      	cmp	r3, #127	; 0x7f
 80014da:	d842      	bhi.n	8001562 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80014dc:	4925      	ldr	r1, [pc, #148]	; (8001574 <I2C_GetTiming+0xfc>)
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80014ee:	4821      	ldr	r0, [pc, #132]	; (8001574 <I2C_GetTiming+0xfc>)
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4403      	add	r3, r0
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	051b      	lsls	r3, r3, #20
 8001502:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001506:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001508:	481a      	ldr	r0, [pc, #104]	; (8001574 <I2C_GetTiming+0xfc>)
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4403      	add	r3, r0
 8001516:	3308      	adds	r3, #8
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	041b      	lsls	r3, r3, #16
 800151c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001520:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <I2C_GetTiming+0xfc>)
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4403      	add	r3, r0
 8001530:	330c      	adds	r3, #12
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001538:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <I2C_GetTiming+0xfc>)
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4403      	add	r3, r0
 8001548:	3310      	adds	r3, #16
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800154e:	430b      	orrs	r3, r1
 8001550:	617b      	str	r3, [r7, #20]
        }
        break;
 8001552:	e006      	b.n	8001562 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	3301      	adds	r3, #1
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d99b      	bls.n	8001498 <I2C_GetTiming+0x20>
 8001560:	e000      	b.n	8001564 <I2C_GetTiming+0xec>
        break;
 8001562:	bf00      	nop
      }
    }
  }

  return ret;
 8001564:	697b      	ldr	r3, [r7, #20]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	08005814 	.word	0x08005814
 8001574:	200000a8 	.word	0x200000a8

08001578 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001578:	b480      	push	{r7}
 800157a:	b08f      	sub	sp, #60	; 0x3c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001582:	2310      	movs	r3, #16
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	085a      	lsrs	r2, r3, #1
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800158c:	4413      	add	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	fbb3 f3f2 	udiv	r3, r3, r2
 8001594:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8001596:	2332      	movs	r3, #50	; 0x32
 8001598:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 800159a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800159e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80015a0:	4a69      	ldr	r2, [pc, #420]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3324      	adds	r3, #36	; 0x24
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	4a65      	ldr	r2, [pc, #404]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	330c      	adds	r3, #12
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80015c4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80015c6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80015c8:	495f      	ldr	r1, [pc, #380]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	202c      	movs	r0, #44	; 0x2c
 80015ce:	fb00 f303 	mul.w	r3, r0, r3
 80015d2:	440b      	add	r3, r1
 80015d4:	3328      	adds	r3, #40	; 0x28
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3303      	adds	r3, #3
 80015da:	69f9      	ldr	r1, [r7, #28]
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3310      	adds	r3, #16
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	4a54      	ldr	r2, [pc, #336]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3320      	adds	r3, #32
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001608:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800160a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800160c:	494e      	ldr	r1, [pc, #312]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	202c      	movs	r0, #44	; 0x2c
 8001612:	fb00 f303 	mul.w	r3, r0, r3
 8001616:	440b      	add	r3, r1
 8001618:	3328      	adds	r3, #40	; 0x28
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3304      	adds	r3, #4
 800161e:	69f9      	ldr	r1, [r7, #28]
 8001620:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8001628:	4a47      	ldr	r2, [pc, #284]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3320      	adds	r3, #32
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	4a43      	ldr	r2, [pc, #268]	; (8001748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	212c      	movs	r1, #44	; 0x2c
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4413      	add	r3, r2
 8001646:	3314      	adds	r3, #20
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4403      	add	r3, r0
 800164c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	2b00      	cmp	r3, #0
 8001652:	dc01      	bgt.n	8001658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	2b00      	cmp	r3, #0
 800165c:	dc01      	bgt.n	8001662 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 8001666:	e062      	b.n	800172e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
 800166c:	e059      	b.n	8001722 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001674:	3201      	adds	r2, #1
 8001676:	fb03 f202 	mul.w	r2, r3, r2
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	429a      	cmp	r2, r3
 8001688:	d348      	bcc.n	800171c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
 800168e:	e042      	b.n	8001716 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	3301      	adds	r3, #1
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d332      	bcc.n	8001710 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d82e      	bhi.n	8001710 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80016b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d02a      	beq.n	8001710 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4924      	ldr	r1, [pc, #144]	; (8001750 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016cc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	491f      	ldr	r1, [pc, #124]	; (8001750 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	3304      	adds	r3, #4
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4919      	ldr	r1, [pc, #100]	; (8001750 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	3308      	adds	r3, #8
 80016f6:	6a3a      	ldr	r2, [r7, #32]
 80016f8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001706:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b7f      	cmp	r3, #127	; 0x7f
 800170e:	d812      	bhi.n	8001736 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	3301      	adds	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d9b9      	bls.n	8001690 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	3301      	adds	r3, #1
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d9a2      	bls.n	800166e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	3301      	adds	r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d999      	bls.n	8001668 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001734:	e000      	b.n	8001738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8001736:	bf00      	nop
          }
        }
      }
    }
  }
}
 8001738:	373c      	adds	r7, #60	; 0x3c
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	3b9aca00 	.word	0x3b9aca00
 8001748:	08005814 	.word	0x08005814
 800174c:	20000aa8 	.word	0x20000aa8
 8001750:	200000a8 	.word	0x200000a8

08001754 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001754:	b480      	push	{r7}
 8001756:	b093      	sub	sp, #76	; 0x4c
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	085a      	lsrs	r2, r3, #1
 8001768:	4b7a      	ldr	r3, [pc, #488]	; (8001954 <I2C_Compute_SCLL_SCLH+0x200>)
 800176a:	4413      	add	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8001774:	4a78      	ldr	r2, [pc, #480]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	085a      	lsrs	r2, r3, #1
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <I2C_Compute_SCLL_SCLH+0x200>)
 8001786:	4413      	add	r3, r2
 8001788:	4973      	ldr	r1, [pc, #460]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	202c      	movs	r0, #44	; 0x2c
 800178e:	fb00 f202 	mul.w	r2, r0, r2
 8001792:	440a      	add	r2, r1
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	fbb3 f3f2 	udiv	r3, r3, r2
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 800179c:	2332      	movs	r3, #50	; 0x32
 800179e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80017a0:	4a6d      	ldr	r2, [pc, #436]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3328      	adds	r3, #40	; 0x28
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80017b8:	4a67      	ldr	r2, [pc, #412]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3304      	adds	r3, #4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a62      	ldr	r2, [pc, #392]	; (8001954 <I2C_Compute_SCLL_SCLH+0x200>)
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80017d0:	4a61      	ldr	r2, [pc, #388]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3308      	adds	r3, #8
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a5c      	ldr	r2, [pc, #368]	; (8001954 <I2C_Compute_SCLL_SCLH+0x200>)
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
 80017f0:	e0a3      	b.n	800193a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80017f2:	495a      	ldr	r1, [pc, #360]	; (800195c <I2C_Compute_SCLL_SCLH+0x208>)
 80017f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800180c:	2300      	movs	r3, #0
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001810:	e08c      	b.n	800192c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	441a      	add	r2, r3
 8001818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181a:	3301      	adds	r3, #1
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	fb03 f101 	mul.w	r1, r3, r1
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	4413      	add	r3, r2
 800182a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800182c:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3318      	adds	r3, #24
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	429a      	cmp	r2, r3
 8001840:	d971      	bls.n	8001926 <I2C_Compute_SCLL_SCLH+0x1d2>
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	1ad2      	subs	r2, r2, r3
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001850:	429a      	cmp	r2, r3
 8001852:	d268      	bcs.n	8001926 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
 8001858:	e062      	b.n	8001920 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	441a      	add	r2, r3
 8001860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001862:	3301      	adds	r3, #1
 8001864:	6979      	ldr	r1, [r7, #20]
 8001866:	fb03 f101 	mul.w	r1, r3, r1
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	440b      	add	r3, r1
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	441a      	add	r2, r3
 800187a:	4937      	ldr	r1, [pc, #220]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	202c      	movs	r0, #44	; 0x2c
 8001880:	fb00 f303 	mul.w	r3, r0, r3
 8001884:	440b      	add	r3, r1
 8001886:	3320      	adds	r3, #32
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	441a      	add	r2, r3
 800188c:	4932      	ldr	r1, [pc, #200]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	202c      	movs	r0, #44	; 0x2c
 8001892:	fb00 f303 	mul.w	r3, r0, r3
 8001896:	440b      	add	r3, r1
 8001898:	3324      	adds	r3, #36	; 0x24
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4413      	add	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d338      	bcc.n	800191a <I2C_Compute_SCLL_SCLH+0x1c6>
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d834      	bhi.n	800191a <I2C_Compute_SCLL_SCLH+0x1c6>
 80018b0:	4a29      	ldr	r2, [pc, #164]	; (8001958 <I2C_Compute_SCLL_SCLH+0x204>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	331c      	adds	r3, #28
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d329      	bcc.n	800191a <I2C_Compute_SCLL_SCLH+0x1c6>
 80018c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d225      	bcs.n	800191a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da02      	bge.n	80018e2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	425b      	negs	r3, r3
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d917      	bls.n	800191a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80018ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80018ee:	491b      	ldr	r1, [pc, #108]	; (800195c <I2C_Compute_SCLL_SCLH+0x208>)
 80018f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3310      	adds	r3, #16
 80018fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001900:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8001902:	4916      	ldr	r1, [pc, #88]	; (800195c <I2C_Compute_SCLL_SCLH+0x208>)
 8001904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	330c      	adds	r3, #12
 8001912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001914:	601a      	str	r2, [r3, #0]
              ret = count;
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800191a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191c:	3301      	adds	r3, #1
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d999      	bls.n	800185a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001928:	3301      	adds	r3, #1
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192e:	2bff      	cmp	r3, #255	; 0xff
 8001930:	f67f af6f 	bls.w	8001812 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	3301      	adds	r3, #1
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <I2C_Compute_SCLL_SCLH+0x20c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001940:	429a      	cmp	r2, r3
 8001942:	f4ff af56 	bcc.w	80017f2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8001946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001948:	4618      	mov	r0, r3
 800194a:	374c      	adds	r7, #76	; 0x4c
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	3b9aca00 	.word	0x3b9aca00
 8001958:	08005814 	.word	0x08005814
 800195c:	200000a8 	.word	0x200000a8
 8001960:	20000aa8 	.word	0x20000aa8

08001964 <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <I2C1_MspInit+0xcc>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <I2C1_MspInit+0xcc>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <I2C1_MspInit+0xcc>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <I2C1_MspInit+0xcc>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <I2C1_MspInit+0xcc>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <I2C1_MspInit+0xcc>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 80019b8:	2304      	movs	r3, #4
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	481c      	ldr	r0, [pc, #112]	; (8001a34 <I2C1_MspInit+0xd0>)
 80019c4:	f001 fb48 	bl	8003058 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 80019cc:	2312      	movs	r3, #18
 80019ce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 80019d8:	2304      	movs	r3, #4
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <I2C1_MspInit+0xd0>)
 80019e4:	f001 fb38 	bl	8003058 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <I2C1_MspInit+0xcc>)
 80019ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <I2C1_MspInit+0xcc>)
 80019f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <I2C1_MspInit+0xcc>)
 80019fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <I2C1_MspInit+0xcc>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <I2C1_MspInit+0xcc>)
 8001a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <I2C1_MspInit+0xcc>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <I2C1_MspInit+0xcc>)
 8001a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020400 	.word	0x58020400

08001a38 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
 8001a40:	2340      	movs	r3, #64	; 0x40
 8001a42:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4619      	mov	r1, r3
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <I2C1_MspDeInit+0x3c>)
 8001a4a:	f001 fcb5 	bl	80033b8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <I2C1_MspDeInit+0x3c>)
 8001a58:	f001 fcae 	bl	80033b8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <I2C1_MspDeInit+0x40>)
 8001a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <I2C1_MspDeInit+0x40>)
 8001a64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	58020400 	.word	0x58020400
 8001a78:	58024400 	.word	0x58024400

08001a7c <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	81bb      	strh	r3, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001a90:	8978      	ldrh	r0, [r7, #10]
 8001a92:	89ba      	ldrh	r2, [r7, #12]
 8001a94:	89f9      	ldrh	r1, [r7, #14]
 8001a96:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	8b3b      	ldrh	r3, [r7, #24]
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <I2C1_WriteReg+0x48>)
 8001aa8:	f001 fed4 	bl	8003854 <HAL_I2C_Mem_Write>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e001      	b.n	8001aba <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001ab6:	f06f 0307 	mvn.w	r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000aac 	.word	0x20000aac

08001ac8 <I2C1_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	81fb      	strh	r3, [r7, #14]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	81bb      	strh	r3, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001adc:	8978      	ldrh	r0, [r7, #10]
 8001ade:	89ba      	ldrh	r2, [r7, #12]
 8001ae0:	89f9      	ldrh	r1, [r7, #14]
 8001ae2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ae6:	9302      	str	r3, [sp, #8]
 8001ae8:	8b3b      	ldrh	r3, [r7, #24]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4603      	mov	r3, r0
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <I2C1_ReadReg+0x48>)
 8001af4:	f001 ffc2 	bl	8003a7c <HAL_I2C_Mem_Read>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e001      	b.n	8001b06 <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001b02:	f06f 0307 	mvn.w	r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000aac 	.word	0x20000aac

08001b14 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32H743I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <BSP_IOEXPANDER_Init+0x1a>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d003      	beq.n	8001b36 <BSP_IOEXPANDER_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b2e:	f06f 0301 	mvn.w	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e024      	b.n	8001b80 <BSP_IOEXPANDER_Init+0x6c>
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <BSP_IOEXPANDER_Init+0x78>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10e      	bne.n	8001b60 <BSP_IOEXPANDER_Init+0x4c>
    {
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f96c 	bl	8001e20 <MFXSTM32L152_Probe>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <BSP_IOEXPANDER_Init+0x42>
      {
        ret = BSP_ERROR_NO_INIT;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e004      	b.n	8001b60 <BSP_IOEXPANDER_Init+0x4c>
      }
      else
      {
        IO_Ctx[Instance].IsInitialized = 1;
 8001b56:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <BSP_IOEXPANDER_Init+0x78>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      }
    }

    if (IO_Ctx[Instance].IsInitialized == 1U)
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <BSP_IOEXPANDER_Init+0x78>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d109      	bne.n	8001b80 <BSP_IOEXPANDER_Init+0x6c>
    {
      if (Function == IOEXPANDER_IO_MODE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d103      	bne.n	8001b7a <BSP_IOEXPANDER_Init+0x66>
      {
        Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <BSP_IOEXPANDER_Init+0x7c>)
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <BSP_IOEXPANDER_Init+0x80>)
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e002      	b.n	8001b80 <BSP_IOEXPANDER_Init+0x6c>
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
 8001b7a:	f06f 0301 	mvn.w	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000b00 	.word	0x20000b00
 8001b90:	20000b38 	.word	0x20000b38
 8001b94:	20000000 	.word	0x20000000

08001b98 <BSP_IO_Init>:
  * @param  Init     pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval BSP status
  */
int32_t BSP_IO_Init(uint32_t Instance, BSP_IO_Init_t *Init)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <BSP_IO_Init+0x1a>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <BSP_IO_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bb2:	f06f 0301 	mvn.w	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e042      	b.n	8001c40 <BSP_IO_Init+0xa8>
  }
  else
  {
    if((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 8001bba:	4a24      	ldr	r2, [pc, #144]	; (8001c4c <BSP_IO_Init+0xb4>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d124      	bne.n	8001c16 <BSP_IO_Init+0x7e>
    {
      if(BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 8001bcc:	2101      	movs	r1, #1
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa0 	bl	8001b14 <BSP_IOEXPANDER_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <BSP_IO_Init+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bda:	f06f 0304 	mvn.w	r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e019      	b.n	8001c16 <BSP_IO_Init+0x7e>
      }
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <BSP_IO_Init+0xb8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001bec:	4819      	ldr	r0, [pc, #100]	; (8001c54 <BSP_IO_Init+0xbc>)
 8001bee:	4798      	blx	r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da03      	bge.n	8001bfe <BSP_IO_Init+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bf6:	f06f 0304 	mvn.w	r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e00b      	b.n	8001c16 <BSP_IO_Init+0x7e>
      }
      else
      {
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <BSP_IO_Init+0xb4>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	490f      	ldr	r1, [pc, #60]	; (8001c4c <BSP_IO_Init+0xb4>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	605a      	str	r2, [r3, #4]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d111      	bne.n	8001c40 <BSP_IO_Init+0xa8>
    {
      /* If IT mode is selected, configures MFX low level interrupt */
      if(Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d901      	bls.n	8001c28 <BSP_IO_Init+0x90>
      {
        BSP_IOEXPANDER_ITConfig();
 8001c24:	f000 f898 	bl	8001d58 <BSP_IOEXPANDER_ITConfig>
      }

      /* Initializes IO pin */
      if(Io_Drv->Init(&Io_CompObj, Init) < 0)
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <BSP_IO_Init+0xb8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <BSP_IO_Init+0xbc>)
 8001c32:	4798      	blx	r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da02      	bge.n	8001c40 <BSP_IO_Init+0xa8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c3a:	f06f 0304 	mvn.w	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000b00 	.word	0x20000b00
 8001c50:	20000b38 	.word	0x20000b38
 8001c54:	20000b08 	.word	0x20000b08

08001c58 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState  New pins state to write
  * @retval BSP status
  */
int32_t BSP_IO_WritePin(uint32_t Instance, uint32_t IoPin, uint32_t PinState)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <BSP_IO_WritePin+0x28>
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <BSP_IO_WritePin+0x58>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <BSP_IO_WritePin+0x30>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c80:	f06f 0301 	mvn.w	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e00d      	b.n	8001ca4 <BSP_IO_WritePin+0x4c>
  }
  else
  {
    /* Set the Pin state */
    if(Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <BSP_IO_WritePin+0x5c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <BSP_IO_WritePin+0x60>)
 8001c96:	4798      	blx	r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da02      	bge.n	8001ca4 <BSP_IO_WritePin+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c9e:	f06f 0304 	mvn.w	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001ca4:	697b      	ldr	r3, [r7, #20]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000b00 	.word	0x20000b00
 8001cb4:	20000b38 	.word	0x20000b38
 8001cb8:	20000b08 	.word	0x20000b08

08001cbc <BSP_IO_TogglePin>:
  *          This parameter can be any combination of the IO pins.
  * @note   This function is only used to toggle one pin in the same time
  * @retval None
  */
int32_t BSP_IO_TogglePin(uint32_t Instance, uint32_t IoPin)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  int32_t pinState;

  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <BSP_IO_TogglePin+0x26>
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <BSP_IO_TogglePin+0x90>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <BSP_IO_TogglePin+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ce2:	f06f 0301 	mvn.w	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e02b      	b.n	8001d42 <BSP_IO_TogglePin+0x86>
  }
  else
  {
    /* Toggle the current pin state */
    pinState = Io_Drv->ReadPin(&Io_CompObj, IoPin);
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <BSP_IO_TogglePin+0x94>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	4818      	ldr	r0, [pc, #96]	; (8001d54 <BSP_IO_TogglePin+0x98>)
 8001cf4:	4798      	blx	r3
 8001cf6:	60b8      	str	r0, [r7, #8]
    if (pinState < 0)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da03      	bge.n	8001d06 <BSP_IO_TogglePin+0x4a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cfe:	f06f 0304 	mvn.w	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e01d      	b.n	8001d42 <BSP_IO_TogglePin+0x86>
    }
    else
    {
      if (pinState == 0) /* Reset state */
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <BSP_IO_TogglePin+0x6c>
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_SET) < 0)
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <BSP_IO_TogglePin+0x94>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2201      	movs	r2, #1
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	480f      	ldr	r0, [pc, #60]	; (8001d54 <BSP_IO_TogglePin+0x98>)
 8001d18:	4798      	blx	r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da10      	bge.n	8001d42 <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d20:	f06f 0304 	mvn.w	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e00c      	b.n	8001d42 <BSP_IO_TogglePin+0x86>
        }
      }
      else /* Set state */
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_RESET) < 0)
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <BSP_IO_TogglePin+0x94>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <BSP_IO_TogglePin+0x98>)
 8001d34:	4798      	blx	r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da02      	bge.n	8001d42 <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d3c:	f06f 0304 	mvn.w	r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000b00 	.word	0x20000b00
 8001d50:	20000b38 	.word	0x20000b38
 8001d54:	20000b08 	.word	0x20000b08

08001d58 <BSP_IOEXPANDER_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void BSP_IOEXPANDER_ITConfig(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
  static uint32_t mfx_io_it_enabled = 0U;
  GPIO_InitTypeDef  gpio_init_structure;

  if(mfx_io_it_enabled == 0U)
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d141      	bne.n	8001dea <BSP_IOEXPANDER_ITConfig+0x92>
  {
    mfx_io_it_enabled = 1U;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
    /* Enable the GPIO EXTI clock */
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8001d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8001d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 8001da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dac:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8001db6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480e      	ldr	r0, [pc, #56]	; (8001dfc <BSP_IOEXPANDER_ITConfig+0xa4>)
 8001dc4:	f001 f948 	bl	8003058 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hio_exti, IO_EXTI_LINE);
 8001dc8:	490d      	ldr	r1, [pc, #52]	; (8001e00 <BSP_IOEXPANDER_ITConfig+0xa8>)
 8001dca:	480e      	ldr	r0, [pc, #56]	; (8001e04 <BSP_IOEXPANDER_ITConfig+0xac>)
 8001dcc:	f000 fb8b 	bl	80024e6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hio_exti,  HAL_EXTI_COMMON_CB_ID, IO_EXTI_Callback);
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <BSP_IOEXPANDER_ITConfig+0xb0>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	480b      	ldr	r0, [pc, #44]	; (8001e04 <BSP_IOEXPANDER_ITConfig+0xac>)
 8001dd6:	f000 fb67 	bl	80024a8 <HAL_EXTI_RegisterCallback>

    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn), BSP_IOEXPANDER_IT_PRIORITY, 0x0F);
 8001dda:	220f      	movs	r2, #15
 8001ddc:	210f      	movs	r1, #15
 8001dde:	2017      	movs	r0, #23
 8001de0:	f000 faad 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn));
 8001de4:	2017      	movs	r0, #23
 8001de6:	f000 fac4 	bl	8002372 <HAL_NVIC_EnableIRQ>
  }
}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000b3c 	.word	0x20000b3c
 8001df8:	58024400 	.word	0x58024400
 8001dfc:	58022000 	.word	0x58022000
 8001e00:	16300008 	.word	0x16300008
 8001e04:	20000b30 	.word	0x20000b30
 8001e08:	08001ee9 	.word	0x08001ee9

08001e0c <BSP_IO_Callback>:
  * @brief  BSP TS Callback.
  * @param  Instance IO instance
  * @retval None.
  */
__weak void BSP_IO_Callback(uint32_t Instance)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* This function should be implemented by the user application.
     It is called into this driver when an event on TS touch detection */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <MFXSTM32L152_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance IO instance
  * @retval error status
  */
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  int32_t              ret = BSP_ERROR_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id, i;
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8001e2c:	f248 6384 	movw	r3, #34436	; 0x8684
 8001e30:	813b      	strh	r3, [r7, #8]

  /* Configure the audio driver */
  IOCtx.Init        = BSP_I2C1_Init;
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <MFXSTM32L152_Probe+0xb0>)
 8001e34:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <MFXSTM32L152_Probe+0xb4>)
 8001e38:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8001e3a:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <MFXSTM32L152_Probe+0xb8>)
 8001e3c:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <MFXSTM32L152_Probe+0xbc>)
 8001e40:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MFXSTM32L152_Probe+0xc0>)
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0U; i < 2U; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4a:	e036      	b.n	8001eba <MFXSTM32L152_Probe+0x9a>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8001e4c:	f107 0208 	add.w	r2, r7, #8
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	833b      	strh	r3, [r7, #24]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <MFXSTM32L152_Probe+0xc4>)
 8001e62:	f7fe fedf 	bl	8000c24 <MFXSTM32L152_RegisterBusIO>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <MFXSTM32L152_Probe+0x54>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001e6c:	f06f 0307 	mvn.w	r3, #7
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e72:	e01f      	b.n	8001eb4 <MFXSTM32L152_Probe+0x94>
    }
    else if(MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <MFXSTM32L152_Probe+0xc4>)
 8001e7c:	f7fe fa89 	bl	8000392 <MFXSTM32L152_ReadID>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <MFXSTM32L152_Probe+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e86:	f06f 0303 	mvn.w	r3, #3
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	e012      	b.n	8001eb4 <MFXSTM32L152_Probe+0x94>
    }
    else
    {
      if((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b7b      	cmp	r3, #123	; 0x7b
 8001e92:	d002      	beq.n	8001e9a <MFXSTM32L152_Probe+0x7a>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b79      	cmp	r3, #121	; 0x79
 8001e98:	d109      	bne.n	8001eae <MFXSTM32L152_Probe+0x8e>
      {
        if(MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8001e9a:	4812      	ldr	r0, [pc, #72]	; (8001ee4 <MFXSTM32L152_Probe+0xc4>)
 8001e9c:	f7fe fa1c 	bl	80002d8 <MFXSTM32L152_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <MFXSTM32L152_Probe+0xa2>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ea6:	f06f 0304 	mvn.w	r3, #4
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        break;
 8001eac:	e009      	b.n	8001ec2 <MFXSTM32L152_Probe+0xa2>
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001eae:	f06f 0306 	mvn.w	r3, #6
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(i = 0U; i < 2U; i++)
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d9c5      	bls.n	8001e4c <MFXSTM32L152_Probe+0x2c>
 8001ec0:	e000      	b.n	8001ec4 <MFXSTM32L152_Probe+0xa4>
        break;
 8001ec2:	bf00      	nop
      }
    }
  }

  return ret;
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3730      	adds	r7, #48	; 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	08001265 	.word	0x08001265
 8001ed4:	080012dd 	.word	0x080012dd
 8001ed8:	0800140d 	.word	0x0800140d
 8001edc:	080013b1 	.word	0x080013b1
 8001ee0:	08001469 	.word	0x08001469
 8001ee4:	20000b08 	.word	0x20000b08

08001ee8 <IO_EXTI_Callback>:
/**
  * @brief  IO EXTI touch detection callbacks.
  * @retval None
  */
static void IO_EXTI_Callback(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  BSP_IO_Callback(0);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff ff8d 	bl	8001e0c <BSP_IO_Callback>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <SystemInit+0xb4>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <SystemInit+0xb4>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <SystemInit+0xb8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <SystemInit+0xb8>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <SystemInit+0xb8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <SystemInit+0xb8>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4923      	ldr	r1, [pc, #140]	; (8001fb0 <SystemInit+0xb8>)
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <SystemInit+0xbc>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <SystemInit+0xb8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <SystemInit+0xb8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <SystemInit+0xb8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <SystemInit+0xb8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <SystemInit+0xb8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <SystemInit+0xb8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <SystemInit+0xb8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <SystemInit+0xb8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <SystemInit+0xb8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <SystemInit+0xb8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <SystemInit+0xb8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <SystemInit+0xb8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <SystemInit+0xb8>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <SystemInit+0xb8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <SystemInit+0xc0>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <SystemInit+0xc4>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f8a:	d202      	bcs.n	8001f92 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <SystemInit+0xc8>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <SystemInit+0xcc>)
 8001f94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f98:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SystemInit+0xb4>)
 8001f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa0:	609a      	str	r2, [r3, #8]
#endif  


}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fb8:	5c001000 	.word	0x5c001000
 8001fbc:	ffff0000 	.word	0xffff0000
 8001fc0:	51008108 	.word	0x51008108
 8001fc4:	52004000 	.word	0x52004000

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f000 f9aa 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd4:	f003 f820 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_Init+0x68>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	4913      	ldr	r1, [pc, #76]	; (8002034 <HAL_Init+0x6c>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_Init+0x68>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_Init+0x6c>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_Init+0x70>)
 800200a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_Init+0x74>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f81c 	bl	8002050 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e002      	b.n	8002028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002022:	f000 f80d 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024400 	.word	0x58024400
 8002034:	08005898 	.word	0x08005898
 8002038:	20000064 	.word	0x20000064
 800203c:	20000060 	.word	0x20000060

08002040 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_InitTick+0x60>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e021      	b.n	80020a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_InitTick+0x64>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_InitTick+0x60>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f98b 	bl	8002396 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f951 	bl	800233e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x68>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000006c 	.word	0x2000006c
 80020b4:	20000060 	.word	0x20000060
 80020b8:	20000068 	.word	0x20000068

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000006c 	.word	0x2000006c
 80020e0:	20000b40 	.word	0x20000b40

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000b40 	.word	0x20000b40

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000006c 	.word	0x2000006c

08002144 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_GetREVID+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0c1b      	lsrs	r3, r3, #16
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	5c001000 	.word	0x5c001000

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	05fa0000 	.word	0x05fa0000

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022bc:	f3bf 8f4f 	dsb	sy
}
 80022c0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <__NVIC_SystemReset+0x24>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022ca:	4904      	ldr	r1, [pc, #16]	; (80022dc <__NVIC_SystemReset+0x24>)
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_SystemReset+0x28>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022d2:	f3bf 8f4f 	dsb	sy
}
 80022d6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <__NVIC_SystemReset+0x20>
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	05fa0004 	.word	0x05fa0004

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff78 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff13 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff2a 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff7a 	bl	8002250 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff49 	bl	80021fc <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff1d 	bl	80021c0 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002392:	f7ff ff91 	bl	80022b8 <__NVIC_SystemReset>

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffa0 	bl	80022e4 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023b4:	f3bf 8f5f 	dmb	sy
}
 80023b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_MPU_Disable+0x28>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_MPU_Disable+0x28>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_MPU_Disable+0x2c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	e000ed90 	.word	0xe000ed90

080023e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <HAL_MPU_Enable+0x38>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_MPU_Enable+0x3c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_MPU_Enable+0x3c>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80023fe:	f3bf 8f4f 	dsb	sy
}
 8002402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002404:	f3bf 8f6f 	isb	sy
}
 8002408:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed90 	.word	0xe000ed90
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	785a      	ldrb	r2, [r3, #1]
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_MPU_ConfigRegion+0x84>)
 800242e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d029      	beq.n	800248c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002438:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_MPU_ConfigRegion+0x84>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7b1b      	ldrb	r3, [r3, #12]
 8002444:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7adb      	ldrb	r3, [r3, #11]
 800244a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800244c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7a9b      	ldrb	r3, [r3, #10]
 8002452:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002454:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7b5b      	ldrb	r3, [r3, #13]
 800245a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800245c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7b9b      	ldrb	r3, [r3, #14]
 8002462:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002464:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7bdb      	ldrb	r3, [r3, #15]
 800246a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800246c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7a5b      	ldrb	r3, [r3, #9]
 8002472:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002474:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7a1b      	ldrb	r3, [r3, #8]
 800247a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800247c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002486:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002488:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800248a:	e005      	b.n	8002498 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_MPU_ConfigRegion+0x84>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_MPU_ConfigRegion+0x84>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed90 	.word	0xe000ed90

080024a8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	460b      	mov	r3, r1
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e00a      	b.n	80024da <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
      break;
 80024d0:	e002      	b.n	80024d8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
      break;
 80024d6:	bf00      	nop
  }

  return status;
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e003      	b.n	8002502 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <HAL_FLASH_Unlock+0x6c>)
 8002524:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_FLASH_Unlock+0x70>)
 800252a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e018      	b.n	800256e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 800253e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d010      	beq.n	800256c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_FLASH_Unlock+0x6c>)
 800254e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_FLASH_Unlock+0x70>)
 8002556:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_FLASH_Unlock+0x68>)
 800255c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	52002000 	.word	0x52002000
 800257c:	45670123 	.word	0x45670123
 8002580:	cdef89ab 	.word	0xcdef89ab

08002584 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_FLASH_OB_Unlock+0x38>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00d      	beq.n	80025b0 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_FLASH_OB_Unlock+0x38>)
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_FLASH_OB_Unlock+0x3c>)
 8002598:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_FLASH_OB_Unlock+0x38>)
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_FLASH_OB_Unlock+0x40>)
 800259e:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_FLASH_OB_Unlock+0x38>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	52002000 	.word	0x52002000
 80025c0:	08192a3b 	.word	0x08192a3b
 80025c4:	4c5d6e7f 	.word	0x4c5d6e7f

080025c8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80025ce:	2101      	movs	r1, #1
 80025d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025d4:	f000 f902 	bl	80027dc <FLASH_CRC_WaitForLastOperation>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	e00c      	b.n	80025fe <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80025e4:	2102      	movs	r1, #2
 80025e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ea:	f000 f8f7 	bl	80027dc <FLASH_CRC_WaitForLastOperation>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	e001      	b.n	80025fe <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_FLASH_OB_Launch+0x60>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_FLASH_OB_Launch+0x60>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002610:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002614:	f000 f8a6 	bl	8002764 <FLASH_OB_WaitForLastOperation>
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800261c:	79fb      	ldrb	r3, [r7, #7]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	52002000 	.word	0x52002000

0800262c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8002636:	2304      	movs	r3, #4
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800263e:	f7ff fd51 	bl	80020e4 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d113      	bne.n	8002672 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <FLASH_WaitForLastOperation+0x124>)
 800264c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800264e:	e010      	b.n	8002672 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d00c      	beq.n	8002672 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002658:	f7ff fd44 	bl	80020e4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <FLASH_WaitForLastOperation+0x42>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e06a      	b.n	8002748 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4b37      	ldr	r3, [pc, #220]	; (8002754 <FLASH_WaitForLastOperation+0x128>)
 8002676:	4013      	ands	r3, r2
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	429a      	cmp	r2, r3
 800267c:	d10a      	bne.n	8002694 <FLASH_WaitForLastOperation+0x68>
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	4013      	ands	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e00c      	b.n	80026ae <FLASH_WaitForLastOperation+0x82>
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 8002696:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800269a:	43da      	mvns	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	4013      	ands	r3, r2
 80026a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ce      	bne.n	8002650 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <FLASH_WaitForLastOperation+0x130>)
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	e007      	b.n	80026d4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 80026c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <FLASH_WaitForLastOperation+0x130>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026d2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d017      	beq.n	800270e <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <FLASH_WaitForLastOperation+0x134>)
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <FLASH_WaitForLastOperation+0x134>)
 80026e8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <FLASH_WaitForLastOperation+0x128>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d103      	bne.n	80026fe <FLASH_WaitForLastOperation+0xd2>
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6153      	str	r3, [r2, #20]
 80026fc:	e005      	b.n	800270a <FLASH_WaitForLastOperation+0xde>
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002706:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01c      	b.n	8002748 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d10b      	bne.n	800272c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d111      	bne.n	8002746 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 8002724:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	e00c      	b.n	8002746 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 800272e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273a:	d104      	bne.n	8002746 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <FLASH_WaitForLastOperation+0x12c>)
 800273e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002742:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	80000004 	.word	0x80000004
 8002754:	1fef000f 	.word	0x1fef000f
 8002758:	52002000 	.word	0x52002000
 800275c:	17ee0000 	.word	0x17ee0000
 8002760:	20000b44 	.word	0x20000b44

08002764 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff fcba 	bl	80020e4 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8002772:	e010      	b.n	8002796 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d00c      	beq.n	8002796 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7ff fcb2 	bl	80020e4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <FLASH_OB_WaitForLastOperation+0x2e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e01a      	b.n	80027cc <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <FLASH_OB_WaitForLastOperation+0x70>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e8      	bne.n	8002774 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <FLASH_OB_WaitForLastOperation+0x70>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00d      	beq.n	80027ca <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <FLASH_OB_WaitForLastOperation+0x74>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027b6:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <FLASH_OB_WaitForLastOperation+0x74>)
 80027b8:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <FLASH_OB_WaitForLastOperation+0x70>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <FLASH_OB_WaitForLastOperation+0x70>)
 80027c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027c4:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	52002000 	.word	0x52002000
 80027d8:	20000b44 	.word	0x20000b44

080027dc <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 80027e6:	f7ff fc7d 	bl	80020e4 <HAL_GetTick>
 80027ea:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 80027f2:	2308      	movs	r3, #8
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e013      	b.n	8002820 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 80027f8:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <FLASH_CRC_WaitForLastOperation+0xe4>)
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80027fc:	e010      	b.n	8002820 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d00c      	beq.n	8002820 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7ff fc6d 	bl	80020e4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <FLASH_CRC_WaitForLastOperation+0x40>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e04b      	b.n	80028b8 <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <FLASH_CRC_WaitForLastOperation+0xe8>)
 8002824:	4013      	ands	r3, r2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d10a      	bne.n	8002842 <FLASH_CRC_WaitForLastOperation+0x66>
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <FLASH_CRC_WaitForLastOperation+0xec>)
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4013      	ands	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	429a      	cmp	r2, r3
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e00c      	b.n	800285c <FLASH_CRC_WaitForLastOperation+0x80>
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8002844:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002848:	43da      	mvns	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ce      	bne.n	80027fe <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d112      	bne.n	800288c <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002872:	d120      	bne.n	80028b6 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <FLASH_CRC_WaitForLastOperation+0xf0>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	4a13      	ldr	r2, [pc, #76]	; (80028cc <FLASH_CRC_WaitForLastOperation+0xf0>)
 800287e:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <FLASH_CRC_WaitForLastOperation+0xec>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e015      	b.n	80028b8 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <FLASH_CRC_WaitForLastOperation+0xec>)
 800288e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289a:	d10c      	bne.n	80028b6 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <FLASH_CRC_WaitForLastOperation+0xf0>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <FLASH_CRC_WaitForLastOperation+0xf0>)
 80028a6:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <FLASH_CRC_WaitForLastOperation+0xec>)
 80028aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	80000008 	.word	0x80000008
 80028c4:	1fef000f 	.word	0x1fef000f
 80028c8:	52002000 	.word	0x52002000
 80028cc:	20000b44 	.word	0x20000b44

080028d0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028d8:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_FLASHEx_OBProgram+0x144>)
 80028da:	7d1b      	ldrb	r3, [r3, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_FLASHEx_OBProgram+0x14>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e092      	b.n	8002a0a <HAL_FLASHEx_OBProgram+0x13a>
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_FLASHEx_OBProgram+0x144>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_FLASHEx_OBProgram+0x144>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80028f0:	2101      	movs	r1, #1
 80028f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028f6:	f7ff fe99 	bl	800262c <FLASH_WaitForLastOperation>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e00c      	b.n	8002920 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002906:	2102      	movs	r1, #2
 8002908:	f24c 3050 	movw	r0, #50000	; 0xc350
 800290c:	f7ff fe8e 	bl	800262c <FLASH_WaitForLastOperation>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e001      	b.n	8002920 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d16d      	bne.n	8002a02 <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d014      	beq.n	800295c <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f000 f8c3 	bl	8002ad0 <FLASH_OB_EnableWRP>
 800294a:	e007      	b.n	800295c <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 f8e4 	bl	8002b24 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f92f 	bl	8002bd0 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 f951 	bl	8002c30 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a18      	ldr	r0, [r3, #32]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f000 f9f9 	bl	8002da0 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fa66 	bl	8002e90 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	461a      	mov	r2, r3
 80029de:	f000 fa79 	bl	8002ed4 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f000 faaf 	bl	8002f60 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_FLASHEx_OBProgram+0x144>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	751a      	strb	r2, [r3, #20]

  return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000b44 	.word	0x20000b44

08002a18 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2216      	movs	r2, #22
 8002a24:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002a26:	f000 f8e7 	bl	8002bf8 <FLASH_OB_GetRDP>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002a30:	f000 f9a0 	bl	8002d74 <FLASH_OB_GetUser>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8002a3a:	f000 fa3d 	bl	8002eb8 <FLASH_OB_GetBOR>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d003      	beq.n	8002a54 <HAL_FLASHEx_OBGetConfig+0x3c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d129      	bne.n	8002aa8 <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f043 0229 	orr.w	r2, r3, #41	; 0x29
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	1d18      	adds	r0, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 0108 	add.w	r1, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f000 f880 	bl	8002b74 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0020 	add.w	r0, r3, #32
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f000 f9bf 	bl	8002e0c <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f000 fa96 	bl	8002fd4 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3334      	adds	r3, #52	; 0x34
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f000 fa37 	bl	8002f28 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <FLASH_OB_EnableWRP+0x50>)
 8002ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	490c      	ldr	r1, [pc, #48]	; (8002b20 <FLASH_OB_EnableWRP+0x50>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <FLASH_OB_EnableWRP+0x50>)
 8002b00:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4905      	ldr	r1, [pc, #20]	; (8002b20 <FLASH_OB_EnableWRP+0x50>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	52002000 	.word	0x52002000

08002b24 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <FLASH_OB_DisableWRP+0x4c>)
 8002b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	490b      	ldr	r1, [pc, #44]	; (8002b70 <FLASH_OB_DisableWRP+0x4c>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <FLASH_OB_DisableWRP+0x4c>)
 8002b52:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4905      	ldr	r1, [pc, #20]	; (8002b70 <FLASH_OB_DisableWRP+0x4c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	52002000 	.word	0x52002000

08002b74 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <FLASH_OB_GetWRP+0x58>)
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d103      	bne.n	8002b9e <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <FLASH_OB_GetWRP+0x58>)
 8002b98:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002b9c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 8002bb6:	e002      	b.n	8002bbe <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	52002000 	.word	0x52002000

08002bd0 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <FLASH_OB_RDPConfig+0x24>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be0:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <FLASH_OB_RDPConfig+0x24>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	620b      	str	r3, [r1, #32]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	52002000 	.word	0x52002000

08002bf8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <FLASH_OB_GetRDP+0x34>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c06:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8002c0e:	d006      	beq.n	8002c1e <FLASH_OB_GetRDP+0x26>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 8002c16:	d002      	beq.n	8002c1e <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 8002c18:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 8002c1c:	e000      	b.n	8002c20 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 8002c1e:	687b      	ldr	r3, [r7, #4]
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	52002000 	.word	0x52002000

08002c30 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f043 0310 	orr.w	r3, r3, #16
 8002c5e:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7c:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb8:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd6:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8002cf4:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d12:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d4e:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <FLASH_OB_UserConfig+0x140>)
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	401a      	ands	r2, r3
 8002d5a:	4905      	ldr	r1, [pc, #20]	; (8002d70 <FLASH_OB_UserConfig+0x140>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	620b      	str	r3, [r1, #32]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	52002000 	.word	0x52002000

08002d74 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <FLASH_OB_GetUser+0x24>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <FLASH_OB_GetUser+0x28>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	607b      	str	r3, [r7, #4]

  return userConfig;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	52002000 	.word	0x52002000
 8002d9c:	ffff00f3 	.word	0xffff00f3

08002da0 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002dbe:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8002dd2:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8002de4:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8002df0:	431a      	orrs	r2, r3
 8002df2:	4905      	ldr	r1, [pc, #20]	; (8002e08 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8002df8:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	52002000 	.word	0x52002000

08002e0c <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <FLASH_OB_GetPCROP+0x7c>)
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8002e2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e32:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d106      	bne.n	8002e48 <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <FLASH_OB_GetPCROP+0x7c>)
 8002e3c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002e40:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 8002e42:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8002e46:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <FLASH_OB_GetPCROP+0x80>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	441a      	add	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	52002000 	.word	0x52002000
 8002e8c:	000fff00 	.word	0x000fff00

08002e90 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <FLASH_OB_BOR_LevelConfig+0x24>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 020c 	bic.w	r2, r3, #12
 8002ea0:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <FLASH_OB_BOR_LevelConfig+0x24>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	620b      	str	r3, [r1, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	52002000 	.word	0x52002000

08002eb8 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <FLASH_OB_GetBOR+0x18>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	52002000 	.word	0x52002000

08002ed4 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <FLASH_OB_BootAddConfig+0x4c>)
 8002eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <FLASH_OB_BootAddConfig+0x50>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	0c12      	lsrs	r2, r2, #16
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <FLASH_OB_BootAddConfig+0x4c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <FLASH_OB_BootAddConfig+0x4c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <FLASH_OB_BootAddConfig+0x4c>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	52002000 	.word	0x52002000
 8002f24:	ffff0000 	.word	0xffff0000

08002f28 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <FLASH_OB_GetBootAdd+0x30>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	041a      	lsls	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <FLASH_OB_GetBootAdd+0x34>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	52002000 	.word	0x52002000
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00f      	beq.n	8002f98 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002f7e:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8002f8a:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8002f92:	490f      	ldr	r1, [pc, #60]	; (8002fd0 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8002f94:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8002f96:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8002fa8:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8002fb4:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8002fbc:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8002fbe:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 8002fc0:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	52002000 	.word	0x52002000

08002fd4 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <FLASH_OB_GetSecureArea+0x7c>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8002ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ffa:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d106      	bne.n	8003010 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <FLASH_OB_GetSecureArea+0x7c>)
 8003004:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003008:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 800300a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800300e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	021a      	lsls	r2, r3, #8
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <FLASH_OB_GetSecureArea+0x80>)
 8003020:	4013      	ands	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	441a      	add	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	441a      	add	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	52002000 	.word	0x52002000
 8003054:	000fff00 	.word	0x000fff00

08003058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003066:	4b89      	ldr	r3, [pc, #548]	; (800328c <HAL_GPIO_Init+0x234>)
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800306a:	e194      	b.n	8003396 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8186 	beq.w	8003390 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d005      	beq.n	800309c <HAL_GPIO_Init+0x44>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 0201 	and.w	r2, r3, #1
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b03      	cmp	r3, #3
 8003108:	d017      	beq.n	800313a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d123      	bne.n	800318e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	69b9      	ldr	r1, [r7, #24]
 800318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80e0 	beq.w	8003390 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d0:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_GPIO_Init+0x238>)
 80031d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <HAL_GPIO_Init+0x238>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_GPIO_Init+0x238>)
 80031e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_GPIO_Init+0x23c>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a20      	ldr	r2, [pc, #128]	; (8003298 <HAL_GPIO_Init+0x240>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d052      	beq.n	80032c0 <HAL_GPIO_Init+0x268>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1f      	ldr	r2, [pc, #124]	; (800329c <HAL_GPIO_Init+0x244>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_GPIO_Init+0x22e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <HAL_GPIO_Init+0x248>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02b      	beq.n	8003282 <HAL_GPIO_Init+0x22a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_GPIO_Init+0x24c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d025      	beq.n	800327e <HAL_GPIO_Init+0x226>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <HAL_GPIO_Init+0x250>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <HAL_GPIO_Init+0x222>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <HAL_GPIO_Init+0x254>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d019      	beq.n	8003276 <HAL_GPIO_Init+0x21e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_GPIO_Init+0x258>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0x21a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <HAL_GPIO_Init+0x25c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_Init+0x216>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_GPIO_Init+0x260>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_Init+0x212>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_GPIO_Init+0x264>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_Init+0x20e>
 8003262:	2309      	movs	r3, #9
 8003264:	e02d      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 8003266:	230a      	movs	r3, #10
 8003268:	e02b      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 800326a:	2308      	movs	r3, #8
 800326c:	e029      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 800326e:	2307      	movs	r3, #7
 8003270:	e027      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 8003272:	2306      	movs	r3, #6
 8003274:	e025      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 8003276:	2305      	movs	r3, #5
 8003278:	e023      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 800327a:	2304      	movs	r3, #4
 800327c:	e021      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 800327e:	2303      	movs	r3, #3
 8003280:	e01f      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 8003282:	2302      	movs	r3, #2
 8003284:	e01d      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 8003286:	2301      	movs	r3, #1
 8003288:	e01b      	b.n	80032c2 <HAL_GPIO_Init+0x26a>
 800328a:	bf00      	nop
 800328c:	58000080 	.word	0x58000080
 8003290:	58024400 	.word	0x58024400
 8003294:	58000400 	.word	0x58000400
 8003298:	58020000 	.word	0x58020000
 800329c:	58020400 	.word	0x58020400
 80032a0:	58020800 	.word	0x58020800
 80032a4:	58020c00 	.word	0x58020c00
 80032a8:	58021000 	.word	0x58021000
 80032ac:	58021400 	.word	0x58021400
 80032b0:	58021800 	.word	0x58021800
 80032b4:	58021c00 	.word	0x58021c00
 80032b8:	58022000 	.word	0x58022000
 80032bc:	58022400 	.word	0x58022400
 80032c0:	2300      	movs	r3, #0
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	f002 0203 	and.w	r2, r2, #3
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	4093      	lsls	r3, r2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d2:	4938      	ldr	r1, [pc, #224]	; (80033b4 <HAL_GPIO_Init+0x35c>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3301      	adds	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f47f ae63 	bne.w	800306c <HAL_GPIO_Init+0x14>
  }
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	3724      	adds	r7, #36	; 0x24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	58000400 	.word	0x58000400

080033b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033c6:	4b75      	ldr	r3, [pc, #468]	; (800359c <HAL_GPIO_DeInit+0x1e4>)
 80033c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80033ca:	e0d9      	b.n	8003580 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80033cc:	2201      	movs	r2, #1
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4013      	ands	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80cc 	beq.w	800357a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80033e2:	4a6f      	ldr	r2, [pc, #444]	; (80035a0 <HAL_GPIO_DeInit+0x1e8>)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <HAL_GPIO_DeInit+0x1ec>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d037      	beq.n	800347c <HAL_GPIO_DeInit+0xc4>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a66      	ldr	r2, [pc, #408]	; (80035a8 <HAL_GPIO_DeInit+0x1f0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_GPIO_DeInit+0xc0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_GPIO_DeInit+0x1f4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d02b      	beq.n	8003474 <HAL_GPIO_DeInit+0xbc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a64      	ldr	r2, [pc, #400]	; (80035b0 <HAL_GPIO_DeInit+0x1f8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d025      	beq.n	8003470 <HAL_GPIO_DeInit+0xb8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a63      	ldr	r2, [pc, #396]	; (80035b4 <HAL_GPIO_DeInit+0x1fc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d01f      	beq.n	800346c <HAL_GPIO_DeInit+0xb4>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a62      	ldr	r2, [pc, #392]	; (80035b8 <HAL_GPIO_DeInit+0x200>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d019      	beq.n	8003468 <HAL_GPIO_DeInit+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a61      	ldr	r2, [pc, #388]	; (80035bc <HAL_GPIO_DeInit+0x204>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_GPIO_DeInit+0xac>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <HAL_GPIO_DeInit+0x208>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00d      	beq.n	8003460 <HAL_GPIO_DeInit+0xa8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a5f      	ldr	r2, [pc, #380]	; (80035c4 <HAL_GPIO_DeInit+0x20c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <HAL_GPIO_DeInit+0xa4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a5e      	ldr	r2, [pc, #376]	; (80035c8 <HAL_GPIO_DeInit+0x210>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_GPIO_DeInit+0xa0>
 8003454:	2309      	movs	r3, #9
 8003456:	e012      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003458:	230a      	movs	r3, #10
 800345a:	e010      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 800345c:	2308      	movs	r3, #8
 800345e:	e00e      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003460:	2307      	movs	r3, #7
 8003462:	e00c      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003464:	2306      	movs	r3, #6
 8003466:	e00a      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003468:	2305      	movs	r3, #5
 800346a:	e008      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 800346c:	2304      	movs	r3, #4
 800346e:	e006      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003470:	2303      	movs	r3, #3
 8003472:	e004      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003474:	2302      	movs	r3, #2
 8003476:	e002      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_GPIO_DeInit+0xc6>
 800347c:	2300      	movs	r3, #0
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	f002 0203 	and.w	r2, r2, #3
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	4093      	lsls	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d136      	bne.n	80034fc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80034aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b8:	4013      	ands	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ca:	4013      	ands	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034de:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <HAL_GPIO_DeInit+0x1e8>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	482c      	ldr	r0, [pc, #176]	; (80035a0 <HAL_GPIO_DeInit+0x1e8>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	400a      	ands	r2, r1
 80034f6:	3302      	adds	r3, #2
 80034f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2103      	movs	r1, #3
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	08d2      	lsrs	r2, r2, #3
 8003530:	4019      	ands	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2103      	movs	r1, #3
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	2101      	movs	r1, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2103      	movs	r1, #3
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]
    }

    position++;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f af1f 	bne.w	80033cc <HAL_GPIO_DeInit+0x14>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	58000080 	.word	0x58000080
 80035a0:	58000400 	.word	0x58000400
 80035a4:	58020000 	.word	0x58020000
 80035a8:	58020400 	.word	0x58020400
 80035ac:	58020800 	.word	0x58020800
 80035b0:	58020c00 	.word	0x58020c00
 80035b4:	58021000 	.word	0x58021000
 80035b8:	58021400 	.word	0x58021400
 80035bc:	58021800 	.word	0x58021800
 80035c0:	58021c00 	.word	0x58021c00
 80035c4:	58022000 	.word	0x58022000
 80035c8:	58022400 	.word	0x58022400

080035cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e001      	b.n	80035ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003618:	e003      	b.n	8003622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	619a      	str	r2, [r3, #24]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003640:	887a      	ldrh	r2, [r7, #2]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	041a      	lsls	r2, r3, #16
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43d9      	mvns	r1, r3
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	400b      	ands	r3, r1
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	619a      	str	r2, [r3, #24]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800367c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f804 	bl	8003696 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8a9 	bl	800382a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800370c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e006      	b.n	8003734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d104      	bne.n	8003746 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_I2C_Init+0x11c>)
 8003752:	430b      	orrs	r3, r1
 8003754:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003764:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	02008000 	.word	0x02008000

080037cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e021      	b.n	8003822 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2224      	movs	r2, #36	; 0x24
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f821 	bl	800383e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 80f9 	bne.w	8003a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_I2C_Mem_Write+0x34>
 8003882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ed      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Mem_Write+0x4e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0e6      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038aa:	f7fe fc1b 	bl	80020e4 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fadd 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d1      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2221      	movs	r2, #33	; 0x21
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f4:	88f8      	ldrh	r0, [r7, #6]
 80038f6:	893a      	ldrh	r2, [r7, #8]
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4603      	mov	r3, r0
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9ed 	bl	8003ce4 <I2C_RequestMemoryWrite>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0a9      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2bff      	cmp	r3, #255	; 0xff
 8003924:	d90e      	bls.n	8003944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	; 0xff
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	8979      	ldrh	r1, [r7, #10]
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc57 	bl	80041f0 <I2C_TransferConfig>
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fc46 	bl	80041f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fad6 	bl	8003f1a <I2C_WaitOnTXISFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07b      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d034      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa59 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04d      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d90e      	bls.n	80039fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fbfb 	bl	80041f0 <I2C_TransferConfig>
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fbea 	bl	80041f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d19e      	bne.n	8003964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fabc 	bl	8003fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01a      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_I2C_Mem_Write+0x224>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fe00e800 	.word	0xfe00e800

08003a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	f040 80fd 	bne.w	8003c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x34>
 8003aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0f1      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2C_Mem_Read+0x4e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ea      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad2:	f7fe fb07 	bl	80020e4 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2319      	movs	r3, #25
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f9c9 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d5      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2222      	movs	r2, #34	; 0x22
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	; 0x40
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1c:	88f8      	ldrh	r0, [r7, #6]
 8003b1e:	893a      	ldrh	r2, [r7, #8]
 8003b20:	8979      	ldrh	r1, [r7, #10]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f92d 	bl	8003d8c <I2C_RequestMemoryRead>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0ad      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2bff      	cmp	r3, #255	; 0xff
 8003b4c:	d90e      	bls.n	8003b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b52      	ldr	r3, [pc, #328]	; (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fb43 	bl	80041f0 <I2C_TransferConfig>
 8003b6a:	e00f      	b.n	8003b8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb32 	bl	80041f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	2200      	movs	r2, #0
 8003b94:	2104      	movs	r1, #4
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f970 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07c      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d034      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d130      	bne.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f941 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e04d      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d90e      	bls.n	8003c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fae3 	bl	80041f0 <I2C_TransferConfig>
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fad2 	bl	80041f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d19a      	bne.n	8003b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f9a4 	bl	8003fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01a      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_I2C_Mem_Read+0x230>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	80002400 	.word	0x80002400
 8003cac:	fe00e800 	.word	0xfe00e800

08003cb0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbe:	b2db      	uxtb	r3, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	813b      	strh	r3, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <I2C_RequestMemoryWrite+0xa4>)
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa6f 	bl	80041f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f8ff 	bl	8003f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e02c      	b.n	8003d80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2c:	893b      	ldrh	r3, [r7, #8]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
 8003d36:	e015      	b.n	8003d64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	69b9      	ldr	r1, [r7, #24]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8e5 	bl	8003f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e012      	b.n	8003d80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f884 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	80002000 	.word	0x80002000

08003d8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	4608      	mov	r0, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	813b      	strh	r3, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <I2C_RequestMemoryRead+0xa4>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2300      	movs	r3, #0
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fa1c 	bl	80041f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f8ac 	bl	8003f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e02c      	b.n	8003e26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd2:	893b      	ldrh	r3, [r7, #8]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28
 8003ddc:	e015      	b.n	8003e0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f892 	bl	8003f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e012      	b.n	8003e26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f831 	bl	8003e7c <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	80002000 	.word	0x80002000

08003e34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d103      	bne.n	8003e52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d007      	beq.n	8003e70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	619a      	str	r2, [r3, #24]
  }
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e8c:	e031      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d02d      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e96:	f7fe f925 	bl	80020e4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d122      	bne.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d113      	bne.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d0be      	beq.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f26:	e033      	b.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f87f 	bl	8004030 <I2C_IsErrorOccurred>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e031      	b.n	8003fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d025      	beq.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	f7fe f8ce 	bl	80020e4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11a      	bne.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d013      	beq.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e007      	b.n	8003fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d1c4      	bne.n	8003f28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb4:	e02f      	b.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f838 	bl	8004030 <I2C_IsErrorOccurred>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02d      	b.n	8004026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe f88b 	bl	80020e4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d11a      	bne.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d013      	beq.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e007      	b.n	8004026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d1c8      	bne.n	8003fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d068      	beq.n	800412e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2210      	movs	r2, #16
 8004062:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004064:	e049      	b.n	80040fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d045      	beq.n	80040fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fe f839 	bl	80020e4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <I2C_IsErrorOccurred+0x54>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d13a      	bne.n	80040fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004096:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a6:	d121      	bne.n	80040ec <I2C_IsErrorOccurred+0xbc>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ae:	d01d      	beq.n	80040ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d01a      	beq.n	80040ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040c6:	f7fe f80d 	bl	80020e4 <HAL_GetTick>
 80040ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040cc:	e00e      	b.n	80040ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040ce:	f7fe f809 	bl	80020e4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b19      	cmp	r3, #25
 80040da:	d907      	bls.n	80040ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f043 0320 	orr.w	r3, r3, #32
 80040e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80040ea:	e006      	b.n	80040fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d1e9      	bne.n	80040ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b20      	cmp	r3, #32
 8004106:	d003      	beq.n	8004110 <I2C_IsErrorOccurred+0xe0>
 8004108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0aa      	beq.n	8004066 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2220      	movs	r2, #32
 800411e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004150:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f043 0308 	orr.w	r3, r3, #8
 8004168:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004194:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800419c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01c      	beq.n	80041de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff fe45 	bl	8003e34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <I2C_IsErrorOccurred+0x1bc>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80041de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3728      	adds	r7, #40	; 0x28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	fe00e800 	.word	0xfe00e800

080041f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	4613      	mov	r3, r2
 8004200:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004202:	897b      	ldrh	r3, [r7, #10]
 8004204:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004208:	7a7b      	ldrb	r3, [r7, #9]
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004210:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	4313      	orrs	r3, r2
 800421a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800421e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	0d5b      	lsrs	r3, r3, #21
 800422a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <I2C_TransferConfig+0x60>)
 8004230:	430b      	orrs	r3, r1
 8004232:	43db      	mvns	r3, r3
 8004234:	ea02 0103 	and.w	r1, r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	03ff63ff 	.word	0x03ff63ff

08004254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	d138      	bne.n	80042dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004274:	2302      	movs	r3, #2
 8004276:	e032      	b.n	80042de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d139      	bne.n	8004374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800430a:	2302      	movs	r3, #2
 800430c:	e033      	b.n	8004376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	; 0x24
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800433c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_PWREx_ConfigSupply+0x70>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d00a      	beq.n	80043ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004398:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <HAL_PWREx_ConfigSupply+0x70>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d001      	beq.n	80043aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e01f      	b.n	80043ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e01d      	b.n	80043ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <HAL_PWREx_ConfigSupply+0x70>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f023 0207 	bic.w	r2, r3, #7
 80043b6:	490f      	ldr	r1, [pc, #60]	; (80043f4 <HAL_PWREx_ConfigSupply+0x70>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043be:	f7fd fe91 	bl	80020e4 <HAL_GetTick>
 80043c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043c4:	e009      	b.n	80043da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043c6:	f7fd fe8d 	bl	80020e4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d4:	d901      	bls.n	80043da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e007      	b.n	80043ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_PWREx_ConfigSupply+0x70>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e6:	d1ee      	bne.n	80043c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	58024800 	.word	0x58024800

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08c      	sub	sp, #48	; 0x30
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f000 bc48 	b.w	8004c9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8088 	beq.w	800452a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441a:	4b99      	ldr	r3, [pc, #612]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004424:	4b96      	ldr	r3, [pc, #600]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	2b10      	cmp	r3, #16
 800442e:	d007      	beq.n	8004440 <HAL_RCC_OscConfig+0x48>
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	2b18      	cmp	r3, #24
 8004434:	d111      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b8f      	ldr	r3, [pc, #572]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d06d      	beq.n	8004528 <HAL_RCC_OscConfig+0x130>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d169      	bne.n	8004528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f000 bc21 	b.w	8004c9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d106      	bne.n	8004472 <HAL_RCC_OscConfig+0x7a>
 8004464:	4b86      	ldr	r3, [pc, #536]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a85      	ldr	r2, [pc, #532]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e02e      	b.n	80044d0 <HAL_RCC_OscConfig+0xd8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x9c>
 800447a:	4b81      	ldr	r3, [pc, #516]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a80      	ldr	r2, [pc, #512]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7d      	ldr	r2, [pc, #500]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800448c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e01d      	b.n	80044d0 <HAL_RCC_OscConfig+0xd8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0xc0>
 800449e:	4b78      	ldr	r3, [pc, #480]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a77      	ldr	r2, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b75      	ldr	r3, [pc, #468]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a74      	ldr	r2, [pc, #464]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0xd8>
 80044b8:	4b71      	ldr	r3, [pc, #452]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a70      	ldr	r2, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b6e      	ldr	r3, [pc, #440]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6d      	ldr	r2, [pc, #436]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d013      	beq.n	8004500 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fe04 	bl	80020e4 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fd fe00 	bl	80020e4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e3d4      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044f2:	4b63      	ldr	r3, [pc, #396]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0xe8>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd fdf0 	bl	80020e4 <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fd fdec 	bl	80020e4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e3c0      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800451a:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x110>
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80ca 	beq.w	80046cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004538:	4b51      	ldr	r3, [pc, #324]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004540:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004542:	4b4f      	ldr	r3, [pc, #316]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_RCC_OscConfig+0x166>
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2b18      	cmp	r3, #24
 8004552:	d156      	bne.n	8004602 <HAL_RCC_OscConfig+0x20a>
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d151      	bne.n	8004602 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800455e:	4b48      	ldr	r3, [pc, #288]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x17e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e392      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004576:	4b42      	ldr	r3, [pc, #264]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0219 	bic.w	r2, r3, #25
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	493f      	ldr	r1, [pc, #252]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fdac 	bl	80020e4 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004590:	f7fd fda8 	bl	80020e4 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e37c      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	f7fd fdc9 	bl	8002144 <HAL_GetREVID>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d817      	bhi.n	80045ec <HAL_RCC_OscConfig+0x1f4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d108      	bne.n	80045d6 <HAL_RCC_OscConfig+0x1de>
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045cc:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d4:	e07a      	b.n	80046cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	4926      	ldr	r1, [pc, #152]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ea:	e06f      	b.n	80046cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	4921      	ldr	r1, [pc, #132]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004600:	e064      	b.n	80046cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d047      	beq.n	800469a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0219 	bic.w	r2, r3, #25
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	491a      	ldr	r1, [pc, #104]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd fd62 	bl	80020e4 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fd fd5e 	bl	80020e4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e332      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	f7fd fd7f 	bl	8002144 <HAL_GetREVID>
 8004646:	4603      	mov	r3, r0
 8004648:	f241 0203 	movw	r2, #4099	; 0x1003
 800464c:	4293      	cmp	r3, r2
 800464e:	d819      	bhi.n	8004684 <HAL_RCC_OscConfig+0x28c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d108      	bne.n	800466a <HAL_RCC_OscConfig+0x272>
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	6053      	str	r3, [r2, #4]
 8004668:	e030      	b.n	80046cc <HAL_RCC_OscConfig+0x2d4>
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	031b      	lsls	r3, r3, #12
 8004678:	4901      	ldr	r1, [pc, #4]	; (8004680 <HAL_RCC_OscConfig+0x288>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]
 800467e:	e025      	b.n	80046cc <HAL_RCC_OscConfig+0x2d4>
 8004680:	58024400 	.word	0x58024400
 8004684:	4b9a      	ldr	r3, [pc, #616]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	4997      	ldr	r1, [pc, #604]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
 8004698:	e018      	b.n	80046cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469a:	4b95      	ldr	r3, [pc, #596]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a94      	ldr	r2, [pc, #592]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd fd1d 	bl	80020e4 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fd fd19 	bl	80020e4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e2ed      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046c0:	4b8b      	ldr	r3, [pc, #556]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a9 	beq.w	800482c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046da:	4b85      	ldr	r3, [pc, #532]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046e4:	4b82      	ldr	r3, [pc, #520]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d007      	beq.n	8004700 <HAL_RCC_OscConfig+0x308>
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b18      	cmp	r3, #24
 80046f4:	d13a      	bne.n	800476c <HAL_RCC_OscConfig+0x374>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d135      	bne.n	800476c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004700:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_OscConfig+0x320>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e2c1      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004718:	f7fd fd14 	bl	8002144 <HAL_GetREVID>
 800471c:	4603      	mov	r3, r0
 800471e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004722:	4293      	cmp	r3, r2
 8004724:	d817      	bhi.n	8004756 <HAL_RCC_OscConfig+0x35e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	2b20      	cmp	r3, #32
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x348>
 800472e:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004736:	4a6e      	ldr	r2, [pc, #440]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800473e:	e075      	b.n	800482c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004740:	4b6b      	ldr	r3, [pc, #428]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	069b      	lsls	r3, r3, #26
 800474e:	4968      	ldr	r1, [pc, #416]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004754:	e06a      	b.n	800482c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004756:	4b66      	ldr	r3, [pc, #408]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	4962      	ldr	r1, [pc, #392]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800476a:	e05f      	b.n	800482c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d042      	beq.n	80047fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004774:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a5d      	ldr	r2, [pc, #372]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fcb0 	bl	80020e4 <HAL_GetTick>
 8004784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004788:	f7fd fcac 	bl	80020e4 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e280      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800479a:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047a6:	f7fd fccd 	bl	8002144 <HAL_GetREVID>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d817      	bhi.n	80047e4 <HAL_RCC_OscConfig+0x3ec>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d108      	bne.n	80047ce <HAL_RCC_OscConfig+0x3d6>
 80047bc:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047c4:	4a4a      	ldr	r2, [pc, #296]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ca:	6053      	str	r3, [r2, #4]
 80047cc:	e02e      	b.n	800482c <HAL_RCC_OscConfig+0x434>
 80047ce:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	069b      	lsls	r3, r3, #26
 80047dc:	4944      	ldr	r1, [pc, #272]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	604b      	str	r3, [r1, #4]
 80047e2:	e023      	b.n	800482c <HAL_RCC_OscConfig+0x434>
 80047e4:	4b42      	ldr	r3, [pc, #264]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	493f      	ldr	r1, [pc, #252]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
 80047f8:	e018      	b.n	800482c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3c      	ldr	r2, [pc, #240]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd fc6d 	bl	80020e4 <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800480e:	f7fd fc69 	bl	80020e4 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e23d      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004820:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f0      	bne.n	800480e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d036      	beq.n	80048a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d019      	beq.n	8004874 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fc4a 	bl	80020e4 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004854:	f7fd fc46 	bl	80020e4 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e21a      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004866:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x45c>
 8004872:	e018      	b.n	80048a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd fc30 	bl	80020e4 <HAL_GetTick>
 8004884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004888:	f7fd fc2c 	bl	80020e4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e200      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 800489c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d039      	beq.n	8004926 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80048c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048c6:	f7fd fc0d 	bl	80020e4 <HAL_GetTick>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ce:	f7fd fc09 	bl	80020e4 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1dd      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_OscConfig+0x4f8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x4d6>
 80048ec:	e01b      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048f4:	4b9b      	ldr	r3, [pc, #620]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a9a      	ldr	r2, [pc, #616]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80048fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004900:	f7fd fbf0 	bl	80020e4 <HAL_GetTick>
 8004904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004908:	f7fd fbec 	bl	80020e4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e1c0      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800491a:	4b92      	ldr	r3, [pc, #584]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8081 	beq.w	8004a36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <HAL_RCC_OscConfig+0x770>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a8b      	ldr	r2, [pc, #556]	; (8004b68 <HAL_RCC_OscConfig+0x770>)
 800493a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004940:	f7fd fbd0 	bl	80020e4 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004948:	f7fd fbcc 	bl	80020e4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1a0      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495a:	4b83      	ldr	r3, [pc, #524]	; (8004b68 <HAL_RCC_OscConfig+0x770>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d106      	bne.n	800497c <HAL_RCC_OscConfig+0x584>
 800496e:	4b7d      	ldr	r3, [pc, #500]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a7c      	ldr	r2, [pc, #496]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
 800497a:	e02d      	b.n	80049d8 <HAL_RCC_OscConfig+0x5e0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10c      	bne.n	800499e <HAL_RCC_OscConfig+0x5a6>
 8004984:	4b77      	ldr	r3, [pc, #476]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a76      	ldr	r2, [pc, #472]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	4b74      	ldr	r3, [pc, #464]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a73      	ldr	r2, [pc, #460]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
 800499c:	e01c      	b.n	80049d8 <HAL_RCC_OscConfig+0x5e0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x5c8>
 80049a6:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a6e      	ldr	r2, [pc, #440]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	f043 0304 	orr.w	r3, r3, #4
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
 80049b2:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a6b      	ldr	r2, [pc, #428]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	e00b      	b.n	80049d8 <HAL_RCC_OscConfig+0x5e0>
 80049c0:	4b68      	ldr	r3, [pc, #416]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a67      	ldr	r2, [pc, #412]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
 80049cc:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a64      	ldr	r2, [pc, #400]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	f023 0304 	bic.w	r3, r3, #4
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fd fb80 	bl	80020e4 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7fd fb7c 	bl	80020e4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e14e      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049fe:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ee      	beq.n	80049e8 <HAL_RCC_OscConfig+0x5f0>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fd fb6a 	bl	80020e4 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fd fb66 	bl	80020e4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e138      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a2a:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ee      	bne.n	8004a14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 812d 	beq.w	8004c9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a40:	4b48      	ldr	r3, [pc, #288]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a48:	2b18      	cmp	r3, #24
 8004a4a:	f000 80bd 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	f040 809e 	bne.w	8004b94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a41      	ldr	r2, [pc, #260]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fb3e 	bl	80020e4 <HAL_GetTick>
 8004a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fd fb3a 	bl	80020e4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e10e      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCC_OscConfig+0x774>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a9a:	0112      	lsls	r2, r2, #4
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	4931      	ldr	r1, [pc, #196]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	628b      	str	r3, [r1, #40]	; 0x28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	025b      	lsls	r3, r3, #9
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	3b01      	subs	r3, #1
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ad4:	4923      	ldr	r1, [pc, #140]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aea:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <HAL_RCC_OscConfig+0x778>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004af2:	00d2      	lsls	r2, r2, #3
 8004af4:	491b      	ldr	r1, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f023 020c 	bic.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4917      	ldr	r1, [pc, #92]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b0c:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f023 0202 	bic.w	r2, r3, #2
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b18:	4912      	ldr	r1, [pc, #72]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_RCC_OscConfig+0x76c>)
 8004b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fd fac3 	bl	80020e4 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b60:	e011      	b.n	8004b86 <HAL_RCC_OscConfig+0x78e>
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
 8004b68:	58024800 	.word	0x58024800
 8004b6c:	fffffc0c 	.word	0xfffffc0c
 8004b70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd fab6 	bl	80020e4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e08a      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x77c>
 8004b92:	e082      	b.n	8004c9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd faa0 	bl	80020e4 <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fd fa9c 	bl	80020e4 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e070      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bba:	4b3a      	ldr	r3, [pc, #232]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x7b0>
 8004bc6:	e068      	b.n	8004c9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bce:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d031      	beq.n	8004c40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f003 0203 	and.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d12a      	bne.n	8004c40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d122      	bne.n	8004c40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d11a      	bne.n	8004c40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	0a5b      	lsrs	r3, r3, #9
 8004c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d111      	bne.n	8004c40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d108      	bne.n	8004c40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e02b      	b.n	8004c9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d01f      	beq.n	8004c9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c66:	f7fd fa3d 	bl	80020e4 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c6c:	bf00      	nop
 8004c6e:	f7fd fa39 	bl	80020e4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d0f9      	beq.n	8004c6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <HAL_RCC_OscConfig+0x8b0>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c86:	00d2      	lsls	r2, r2, #3
 8004c88:	4906      	ldr	r1, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_RCC_OscConfig+0x8ac>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3730      	adds	r7, #48	; 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	ffff0007 	.word	0xffff0007

08004cac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e19c      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b8a      	ldr	r3, [pc, #552]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d910      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b87      	ldr	r3, [pc, #540]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 020f 	bic.w	r2, r3, #15
 8004cd6:	4985      	ldr	r1, [pc, #532]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b83      	ldr	r3, [pc, #524]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e184      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d908      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d0c:	4b78      	ldr	r3, [pc, #480]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	4975      	ldr	r1, [pc, #468]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d010      	beq.n	8004d4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	4b70      	ldr	r3, [pc, #448]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d908      	bls.n	8004d4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d3a:	4b6d      	ldr	r3, [pc, #436]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	496a      	ldr	r1, [pc, #424]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	4b64      	ldr	r3, [pc, #400]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d908      	bls.n	8004d7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d68:	4b61      	ldr	r3, [pc, #388]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	495e      	ldr	r1, [pc, #376]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d010      	beq.n	8004da8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	4b59      	ldr	r3, [pc, #356]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d908      	bls.n	8004da8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d96:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4953      	ldr	r1, [pc, #332]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	4b4d      	ldr	r3, [pc, #308]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d908      	bls.n	8004dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc4:	4b4a      	ldr	r3, [pc, #296]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f023 020f 	bic.w	r2, r3, #15
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4947      	ldr	r1, [pc, #284]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d055      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004de2:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4940      	ldr	r1, [pc, #256]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dfc:	4b3c      	ldr	r3, [pc, #240]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d121      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0f6      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e14:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d115      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0ea      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e2c:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0de      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0d6      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f023 0207 	bic.w	r2, r3, #7
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4925      	ldr	r1, [pc, #148]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fd f941 	bl	80020e4 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f7fd f93d 	bl	80020e4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0be      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1eb      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d208      	bcs.n	8004ebc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f023 020f 	bic.w	r2, r3, #15
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d214      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 020f 	bic.w	r2, r3, #15
 8004ed2:	4906      	ldr	r1, [pc, #24]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <HAL_RCC_ClockConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d005      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e086      	b.n	8004ffa <HAL_RCC_ClockConfig+0x34e>
 8004eec:	52002000 	.word	0x52002000
 8004ef0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d208      	bcs.n	8004f22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f10:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	4939      	ldr	r1, [pc, #228]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d010      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d208      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	492e      	ldr	r1, [pc, #184]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	4b28      	ldr	r3, [pc, #160]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d208      	bcs.n	8004f7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f6c:	4b25      	ldr	r3, [pc, #148]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4922      	ldr	r1, [pc, #136]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d208      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	4917      	ldr	r1, [pc, #92]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fac:	f000 f834 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	4912      	ldr	r1, [pc, #72]	; (8005008 <HAL_RCC_ClockConfig+0x35c>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fca:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <HAL_RCC_ClockConfig+0x358>)
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <HAL_RCC_ClockConfig+0x35c>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	4a0a      	ldr	r2, [pc, #40]	; (800500c <HAL_RCC_ClockConfig+0x360>)
 8004fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fe4:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <HAL_RCC_ClockConfig+0x364>)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <HAL_RCC_ClockConfig+0x368>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd f82e 	bl	8002050 <HAL_InitTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	58024400 	.word	0x58024400
 8005008:	08005898 	.word	0x08005898
 800500c:	20000064 	.word	0x20000064
 8005010:	20000060 	.word	0x20000060
 8005014:	20000068 	.word	0x20000068

08005018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800501e:	4bb3      	ldr	r3, [pc, #716]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005026:	2b18      	cmp	r3, #24
 8005028:	f200 8155 	bhi.w	80052d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <HAL_RCC_GetSysClockFreq+0x1c>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005099 	.word	0x08005099
 8005038:	080052d7 	.word	0x080052d7
 800503c:	080052d7 	.word	0x080052d7
 8005040:	080052d7 	.word	0x080052d7
 8005044:	080052d7 	.word	0x080052d7
 8005048:	080052d7 	.word	0x080052d7
 800504c:	080052d7 	.word	0x080052d7
 8005050:	080052d7 	.word	0x080052d7
 8005054:	080050bf 	.word	0x080050bf
 8005058:	080052d7 	.word	0x080052d7
 800505c:	080052d7 	.word	0x080052d7
 8005060:	080052d7 	.word	0x080052d7
 8005064:	080052d7 	.word	0x080052d7
 8005068:	080052d7 	.word	0x080052d7
 800506c:	080052d7 	.word	0x080052d7
 8005070:	080052d7 	.word	0x080052d7
 8005074:	080050c5 	.word	0x080050c5
 8005078:	080052d7 	.word	0x080052d7
 800507c:	080052d7 	.word	0x080052d7
 8005080:	080052d7 	.word	0x080052d7
 8005084:	080052d7 	.word	0x080052d7
 8005088:	080052d7 	.word	0x080052d7
 800508c:	080052d7 	.word	0x080052d7
 8005090:	080052d7 	.word	0x080052d7
 8005094:	080050cb 	.word	0x080050cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005098:	4b94      	ldr	r3, [pc, #592]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050a4:	4b91      	ldr	r3, [pc, #580]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	4a90      	ldr	r2, [pc, #576]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050b6:	e111      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050b8:	4b8d      	ldr	r3, [pc, #564]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050ba:	61bb      	str	r3, [r7, #24]
      break;
 80050bc:	e10e      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050be:	4b8d      	ldr	r3, [pc, #564]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050c0:	61bb      	str	r3, [r7, #24]
      break;
 80050c2:	e10b      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050c4:	4b8c      	ldr	r3, [pc, #560]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050c6:	61bb      	str	r3, [r7, #24]
      break;
 80050c8:	e108      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ca:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050d4:	4b85      	ldr	r3, [pc, #532]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050e0:	4b82      	ldr	r3, [pc, #520]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050ea:	4b80      	ldr	r3, [pc, #512]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80e1 	beq.w	80052d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b02      	cmp	r3, #2
 8005112:	f000 8083 	beq.w	800521c <HAL_RCC_GetSysClockFreq+0x204>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b02      	cmp	r3, #2
 800511a:	f200 80a1 	bhi.w	8005260 <HAL_RCC_GetSysClockFreq+0x248>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x114>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d056      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800512a:	e099      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512c:	4b6f      	ldr	r3, [pc, #444]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02d      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005138:	4b6c      	ldr	r3, [pc, #432]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	4a6b      	ldr	r2, [pc, #428]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b62      	ldr	r3, [pc, #392]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a02 	vldr	s12, [r7, #8]
 8005176:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005192:	e087      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005300 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b51      	ldr	r3, [pc, #324]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051d6:	e065      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b40      	ldr	r3, [pc, #256]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800521a:	e043      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005308 <HAL_RCC_GetSysClockFreq+0x2f0>
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005242:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800525e:	e021      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005304 <HAL_RCC_GetSysClockFreq+0x2ec>
 800526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	ed97 6a02 	vldr	s12, [r7, #8]
 8005286:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	0a5b      	lsrs	r3, r3, #9
 80052aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ae:	3301      	adds	r3, #1
 80052b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c8:	ee17 3a90 	vmov	r3, s15
 80052cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052ce:	e005      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
      break;
 80052d4:	e002      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052d8:	61bb      	str	r3, [r7, #24]
      break;
 80052da:	bf00      	nop
  }

  return sysclockfreq;
 80052dc:	69bb      	ldr	r3, [r7, #24]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3724      	adds	r7, #36	; 0x24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	58024400 	.word	0x58024400
 80052f0:	03d09000 	.word	0x03d09000
 80052f4:	003d0900 	.word	0x003d0900
 80052f8:	017d7840 	.word	0x017d7840
 80052fc:	46000000 	.word	0x46000000
 8005300:	4c742400 	.word	0x4c742400
 8005304:	4a742400 	.word	0x4a742400
 8005308:	4bbebc20 	.word	0x4bbebc20

0800530c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005312:	f7ff fe81 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8005316:	4602      	mov	r2, r0
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <HAL_RCC_GetHCLKFreq+0x50>)
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	490f      	ldr	r1, [pc, #60]	; (8005360 <HAL_RCC_GetHCLKFreq+0x54>)
 8005324:	5ccb      	ldrb	r3, [r1, r3]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	fa22 f303 	lsr.w	r3, r2, r3
 800532e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_RCC_GetHCLKFreq+0x50>)
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <HAL_RCC_GetHCLKFreq+0x54>)
 800533a:	5cd3      	ldrb	r3, [r2, r3]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	4a07      	ldr	r2, [pc, #28]	; (8005364 <HAL_RCC_GetHCLKFreq+0x58>)
 8005348:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <HAL_RCC_GetHCLKFreq+0x5c>)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <HAL_RCC_GetHCLKFreq+0x58>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	58024400 	.word	0x58024400
 8005360:	08005898 	.word	0x08005898
 8005364:	20000064 	.word	0x20000064
 8005368:	20000060 	.word	0x20000060

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005370:	f7ff ffcc 	bl	800530c <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	58024400 	.word	0x58024400
 8005394:	08005898 	.word	0x08005898

08005398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800539c:	f7fc fdac 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053a0:	480c      	ldr	r0, [pc, #48]	; (80053d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053a2:	490d      	ldr	r1, [pc, #52]	; (80053d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053a8:	e002      	b.n	80053b0 <LoopCopyDataInit>

080053aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ae:	3304      	adds	r3, #4

080053b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053b4:	d3f9      	bcc.n	80053aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80053b8:	4c0a      	ldr	r4, [pc, #40]	; (80053e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80053ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053bc:	e001      	b.n	80053c2 <LoopFillZerobss>

080053be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053c0:	3204      	adds	r2, #4

080053c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053c4:	d3fb      	bcc.n	80053be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053c6:	f000 f9df 	bl	8005788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053ca:	f000 f80f 	bl	80053ec <main>
  bx  lr
 80053ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80053dc:	080058b0 	.word	0x080058b0
  ldr r2, =_sbss
 80053e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80053e4:	20000ba4 	.word	0x20000ba4

080053e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053e8:	e7fe      	b.n	80053e8 <ADC3_IRQHandler>
	...

080053ec <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes */
  MPU_Config();
 80053f0:	f000 f96e 	bl	80056d0 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80053f4:	f000 f8fe 	bl	80055f4 <CPU_CACHE_Enable>
     duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
     handled in milliseconds basis.
     - Set NVIC Group Priority to 4
     - Low Level Initialization
   */
  HAL_Init();
 80053f8:	f7fc fde6 	bl	8001fc8 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 80053fc:	f000 f87e 	bl	80054fc <SystemClock_Config>

  /* Configure Tamper push-button */
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);
 8005400:	2100      	movs	r1, #0
 8005402:	2001      	movs	r0, #1
 8005404:	f7fb fe4c 	bl	80010a0 <BSP_PB_Init>

  /* Initialize LED1, LED2 and LED3 */
  BSP_LED_Init(LED1);
 8005408:	2000      	movs	r0, #0
 800540a:	f7fb fd6b 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800540e:	2001      	movs	r0, #1
 8005410:	f7fb fd68 	bl	8000ee4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8005414:	2002      	movs	r0, #2
 8005416:	f7fb fd65 	bl	8000ee4 <BSP_LED_Init>

  
  /* Unlock the User Flash area */
  HAL_FLASH_Unlock();
 800541a:	f7fd f879 	bl	8002510 <HAL_FLASH_Unlock>
  
  HAL_FLASH_OB_Unlock();
 800541e:	f7fd f8b1 	bl	8002584 <HAL_FLASH_OB_Unlock>
  /*--- If Wake-up button is pushed, Swap Bank1/Bank2 contents ---*/

  while (1)
  {
    /* Wait for BUTTON_TAMPER is released */
    if (BSP_PB_GetState(BUTTON_TAMPER) == RESET)
 8005422:	2001      	movs	r0, #1
 8005424:	f7fb fee4 	bl	80011f0 <BSP_PB_GetState>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d158      	bne.n	80054e0 <main+0xf4>
    {
      while (BSP_PB_GetState(BUTTON_TAMPER) == SET);
 800542e:	bf00      	nop
 8005430:	2001      	movs	r0, #1
 8005432:	f7fb fedd 	bl	80011f0 <BSP_PB_GetState>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d0f9      	beq.n	8005430 <main+0x44>

      /* Get the Dual boot configuration status */
      HAL_FLASHEx_OBGetConfig(&OBInit);
 800543c:	482d      	ldr	r0, [pc, #180]	; (80054f4 <main+0x108>)
 800543e:	f7fd faeb 	bl	8002a18 <HAL_FLASHEx_OBGetConfig>

      /* Get FLASH_WRP_SECTORS write protection status */
      OBInit.Banks     = FLASH_BANK_1;
 8005442:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <main+0x108>)
 8005444:	2201      	movs	r2, #1
 8005446:	61da      	str	r2, [r3, #28]
      HAL_FLASHEx_OBGetConfig(&OBInit);
 8005448:	482a      	ldr	r0, [pc, #168]	; (80054f4 <main+0x108>)
 800544a:	f7fd fae5 	bl	8002a18 <HAL_FLASHEx_OBGetConfig>
      
      /* Check Swap Flash banks  status */
      if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE) 
 800544e:	4b29      	ldr	r3, [pc, #164]	; (80054f4 <main+0x108>)
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db22      	blt.n	800549c <main+0xb0>
      {
        /*Swap to bank2 */
        /*Set OB SWAP_BANK_OPT to swap Bank2*/
        OBInit.OptionType = OPTIONBYTE_USER;
 8005456:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <main+0x108>)
 8005458:	2204      	movs	r2, #4
 800545a:	601a      	str	r2, [r3, #0]
        OBInit.USERType   = OB_USER_SWAP_BANK;
 800545c:	4b25      	ldr	r3, [pc, #148]	; (80054f4 <main+0x108>)
 800545e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005462:	615a      	str	r2, [r3, #20]
        OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 8005464:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <main+0x108>)
 8005466:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800546a:	619a      	str	r2, [r3, #24]
        HAL_FLASHEx_OBProgram(&OBInit);
 800546c:	4821      	ldr	r0, [pc, #132]	; (80054f4 <main+0x108>)
 800546e:	f7fd fa2f 	bl	80028d0 <HAL_FLASHEx_OBProgram>
        
        /* Launch Option bytes loading */
        HAL_FLASH_OB_Launch();
 8005472:	f7fd f8a9 	bl	80025c8 <HAL_FLASH_OB_Launch>
        
        HAL_NVIC_SystemReset();
 8005476:	f7fc ff8a 	bl	800238e <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800547a:	f3bf 8f4f 	dsb	sy
}
 800547e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005480:	f3bf 8f6f 	isb	sy
}
 8005484:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8005486:	4b1c      	ldr	r3, [pc, #112]	; (80054f8 <main+0x10c>)
 8005488:	2200      	movs	r2, #0
 800548a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800548e:	f3bf 8f4f 	dsb	sy
}
 8005492:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005494:	f3bf 8f6f 	isb	sy
}
 8005498:	bf00      	nop
}
 800549a:	e02a      	b.n	80054f2 <main+0x106>
      }
      else
      {
        /* Swap to bank1 */
        /*Set OB SWAP_BANK_OPT to swap Bank1*/
        OBInit.OptionType = OPTIONBYTE_USER;
 800549c:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <main+0x108>)
 800549e:	2204      	movs	r2, #4
 80054a0:	601a      	str	r2, [r3, #0]
        OBInit.USERType = OB_USER_SWAP_BANK;
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <main+0x108>)
 80054a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054a8:	615a      	str	r2, [r3, #20]
        OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <main+0x108>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	619a      	str	r2, [r3, #24]
        HAL_FLASHEx_OBProgram(&OBInit);
 80054b0:	4810      	ldr	r0, [pc, #64]	; (80054f4 <main+0x108>)
 80054b2:	f7fd fa0d 	bl	80028d0 <HAL_FLASHEx_OBProgram>
        
        /* Launch Option bytes loading */
        HAL_FLASH_OB_Launch();
 80054b6:	f7fd f887 	bl	80025c8 <HAL_FLASH_OB_Launch>
        
        HAL_NVIC_SystemReset();
 80054ba:	f7fc ff68 	bl	800238e <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 80054be:	f3bf 8f4f 	dsb	sy
}
 80054c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054c4:	f3bf 8f6f 	isb	sy
}
 80054c8:	bf00      	nop
    SCB->ICIALLU = 0UL;
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <main+0x10c>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80054d2:	f3bf 8f4f 	dsb	sy
}
 80054d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054d8:	f3bf 8f6f 	isb	sy
}
 80054dc:	bf00      	nop
}
 80054de:	e008      	b.n	80054f2 <main+0x106>
    }
    else
    {
#ifdef FLASH_BANK1
      /* Toggle LED1 */
      BSP_LED_Toggle(LED1);
 80054e0:	2000      	movs	r0, #0
 80054e2:	f7fb fdaf 	bl	8001044 <BSP_LED_Toggle>
      /* Turn off LED2 */
      BSP_LED_Off(LED2);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f7fb fd7e 	bl	8000fe8 <BSP_LED_Off>
      /* Turn off LED1 */
      BSP_LED_Off(LED1);
#endif

      /* Insert 100 ms delay */
      HAL_Delay(100);
 80054ec:	2064      	movs	r0, #100	; 0x64
 80054ee:	f7fc fe05 	bl	80020fc <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_TAMPER) == RESET)
 80054f2:	e796      	b.n	8005422 <main+0x36>
 80054f4:	20000b60 	.word	0x20000b60
 80054f8:	e000ed00 	.word	0xe000ed00

080054fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b09e      	sub	sp, #120	; 0x78
 8005500:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005508:	2002      	movs	r0, #2
 800550a:	f7fe ff3b 	bl	8004384 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
   clocked below the maximum system frequency, to update the voltage scaling value
   regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	4b36      	ldr	r3, [pc, #216]	; (80055ec <SystemClock_Config+0xf0>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a35      	ldr	r2, [pc, #212]	; (80055ec <SystemClock_Config+0xf0>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800551e:	4b33      	ldr	r3, [pc, #204]	; (80055ec <SystemClock_Config+0xf0>)
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <SystemClock_Config+0xf4>)
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	4a30      	ldr	r2, [pc, #192]	; (80055f0 <SystemClock_Config+0xf4>)
 800552e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005532:	6193      	str	r3, [r2, #24]
 8005534:	4b2e      	ldr	r3, [pc, #184]	; (80055f0 <SystemClock_Config+0xf4>)
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	687b      	ldr	r3, [r7, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) {}
 8005540:	bf00      	nop
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <SystemClock_Config+0xf4>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554e:	d1f8      	bne.n	8005542 <SystemClock_Config+0x46>
 
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005550:	2301      	movs	r3, #1
 8005552:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005558:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005562:	2302      	movs	r3, #2
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005566:	2302      	movs	r3, #2
 8005568:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800556a:	2305      	movs	r3, #5
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800556e:	23a0      	movs	r3, #160	; 0xa0
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005576:	2302      	movs	r3, #2
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800557a:	2302      	movs	r3, #2
 800557c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800557e:	2304      	movs	r3, #4
 8005580:	643b      	str	r3, [r7, #64]	; 0x40
 
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005582:	2300      	movs	r3, #0
 8005584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005586:	2308      	movs	r3, #8
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe ff32 	bl	80043f8 <HAL_RCC_OscConfig>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800559a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d000      	beq.n	80055a4 <SystemClock_Config+0xa8>
  {
  while(1) { ; }
 80055a2:	e7fe      	b.n	80055a2 <SystemClock_Config+0xa6>
  }
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80055a4:	233f      	movs	r3, #63	; 0x3f
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54
                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055a8:	2303      	movs	r3, #3
 80055aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80055ac:	2300      	movs	r3, #0
 80055ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80055b0:	2308      	movs	r3, #8
 80055b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 80055bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 80055c2:	2340      	movs	r3, #64	; 0x40
 80055c4:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80055c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055ca:	2104      	movs	r1, #4
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fb6d 	bl	8004cac <HAL_RCC_ClockConfig>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80055d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d000      	beq.n	80055e2 <SystemClock_Config+0xe6>
  {
  while(1) { ; }
 80055e0:	e7fe      	b.n	80055e0 <SystemClock_Config+0xe4>
  }
}
 80055e2:	bf00      	nop
 80055e4:	3778      	adds	r7, #120	; 0x78
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	58000400 	.word	0x58000400
 80055f0:	58024800 	.word	0x58024800

080055f4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11b      	bne.n	800563e <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8005606:	f3bf 8f4f 	dsb	sy
}
 800560a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800560c:	f3bf 8f6f 	isb	sy
}
 8005610:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 8005614:	2200      	movs	r2, #0
 8005616:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800561a:	f3bf 8f4f 	dsb	sy
}
 800561e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005620:	f3bf 8f6f 	isb	sy
}
 8005624:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005626:	4b29      	ldr	r3, [pc, #164]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	4a28      	ldr	r2, [pc, #160]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 800562c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005630:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005632:	f3bf 8f4f 	dsb	sy
}
 8005636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005638:	f3bf 8f6f 	isb	sy
}
 800563c:	e000      	b.n	8005640 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800563e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005640:	4b22      	ldr	r3, [pc, #136]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d138      	bne.n	80056be <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800564c:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005654:	f3bf 8f4f 	dsb	sy
}
 8005658:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800565a:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 800565c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005660:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0b5b      	lsrs	r3, r3, #13
 8005666:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800566a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	08db      	lsrs	r3, r3, #3
 8005670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005674:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800567e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005684:	4911      	ldr	r1, [pc, #68]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1e5a      	subs	r2, r3, #1
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1ef      	bne.n	8005676 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	60ba      	str	r2, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e5      	bne.n	800566c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80056a0:	f3bf 8f4f 	dsb	sy
}
 80056a4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4a08      	ldr	r2, [pc, #32]	; (80056cc <CPU_CACHE_Enable+0xd8>)
 80056ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80056b2:	f3bf 8f4f 	dsb	sy
}
 80056b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056b8:	f3bf 8f6f 	isb	sy
}
 80056bc:	e000      	b.n	80056c0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80056be:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80056d6:	f7fc fe6b 	bl	80023b0 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80056da:	2301      	movs	r3, #1
 80056dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80056e2:	231f      	movs	r3, #31
 80056e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80056e6:	2300      	movs	r3, #0
 80056e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80056fe:	2387      	movs	r3, #135	; 0x87
 8005700:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005702:	2301      	movs	r3, #1
 8005704:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005706:	463b      	mov	r3, r7
 8005708:	4618      	mov	r0, r3
 800570a:	f7fc fe89 	bl	8002420 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800570e:	2004      	movs	r0, #4
 8005710:	f7fc fe66 	bl	80023e0 <HAL_MPU_Enable>
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
}
 8005720:	bf00      	nop
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800572a:	b480      	push	{r7}
 800572c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800572e:	e7fe      	b.n	800572e <HardFault_Handler+0x4>

08005730 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005734:	e7fe      	b.n	8005734 <MemManage_Handler+0x4>

08005736 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005736:	b480      	push	{r7}
 8005738:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800573a:	e7fe      	b.n	800573a <BusFault_Handler+0x4>

0800573c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005740:	e7fe      	b.n	8005740 <UsageFault_Handler+0x4>

08005742 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
}
 8005746:	bf00      	nop
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0
}
 8005762:	bf00      	nop
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8005770:	f7fc fca4 	bl	80020bc <HAL_IncTick>
}
 8005774:	bf00      	nop
 8005776:	bd80      	pop	{r7, pc}

08005778 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_TAMPER_PIN);
 800577c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005780:	f7fd ff6f 	bl	8003662 <HAL_GPIO_EXTI_IRQHandler>
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}

08005788 <__libc_init_array>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4d0d      	ldr	r5, [pc, #52]	; (80057c0 <__libc_init_array+0x38>)
 800578c:	4c0d      	ldr	r4, [pc, #52]	; (80057c4 <__libc_init_array+0x3c>)
 800578e:	1b64      	subs	r4, r4, r5
 8005790:	10a4      	asrs	r4, r4, #2
 8005792:	2600      	movs	r6, #0
 8005794:	42a6      	cmp	r6, r4
 8005796:	d109      	bne.n	80057ac <__libc_init_array+0x24>
 8005798:	4d0b      	ldr	r5, [pc, #44]	; (80057c8 <__libc_init_array+0x40>)
 800579a:	4c0c      	ldr	r4, [pc, #48]	; (80057cc <__libc_init_array+0x44>)
 800579c:	f000 f818 	bl	80057d0 <_init>
 80057a0:	1b64      	subs	r4, r4, r5
 80057a2:	10a4      	asrs	r4, r4, #2
 80057a4:	2600      	movs	r6, #0
 80057a6:	42a6      	cmp	r6, r4
 80057a8:	d105      	bne.n	80057b6 <__libc_init_array+0x2e>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b0:	4798      	blx	r3
 80057b2:	3601      	adds	r6, #1
 80057b4:	e7ee      	b.n	8005794 <__libc_init_array+0xc>
 80057b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ba:	4798      	blx	r3
 80057bc:	3601      	adds	r6, #1
 80057be:	e7f2      	b.n	80057a6 <__libc_init_array+0x1e>
 80057c0:	080058a8 	.word	0x080058a8
 80057c4:	080058a8 	.word	0x080058a8
 80057c8:	080058a8 	.word	0x080058a8
 80057cc:	080058ac 	.word	0x080058ac

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
