
fx_sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c3c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08014edc  08014edc  00024edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ff0  08014ff0  00024ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014ff8  08014ff8  00024ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014ffc  08014ffc  00024ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  08015000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003b94  24000080  08015070  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24003c14  08015070  00033c14  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003009e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004d12f  00000000  00000000  000300e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a8b1  00000000  00000000  0007d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c08  00000000  00000000  00087ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000138e  00000000  00000000  000896d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000422ae  00000000  00000000  0008aa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00040156  00000000  00000000  000ccd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016f9e0  00000000  00000000  0010ce62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005900  00000000  00000000  0027c844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000fc  00000000  00000000  00282144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ec4 	.word	0x08014ec4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08014ec4 	.word	0x08014ec4

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24003608 	.word	0x24003608
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	240036a4 	.word	0x240036a4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	2400360c 	.word	0x2400360c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24003610 	.word	0x24003610
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24003c10 	.word	0x24003c10

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f013 ff59 	bl	8014370 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f013 fe44 	bl	8014150 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	240036b0 	.word	0x240036b0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24003c10 	.word	0x24003c10
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	240036b4 	.word	0x240036b4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24003740 	.word	0x24003740
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24003744 	.word	0x24003744
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2400373c 	.word	0x2400373c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24003738 	.word	0x24003738
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	240036a4 	.word	0x240036a4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	2400360c 	.word	0x2400360c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24003610 	.word	0x24003610
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <__aeabi_uldivmod>:
 8000518:	b953      	cbnz	r3, 8000530 <__aeabi_uldivmod+0x18>
 800051a:	b94a      	cbnz	r2, 8000530 <__aeabi_uldivmod+0x18>
 800051c:	2900      	cmp	r1, #0
 800051e:	bf08      	it	eq
 8000520:	2800      	cmpeq	r0, #0
 8000522:	bf1c      	itt	ne
 8000524:	f04f 31ff 	movne.w	r1, #4294967295
 8000528:	f04f 30ff 	movne.w	r0, #4294967295
 800052c:	f000 b970 	b.w	8000810 <__aeabi_idiv0>
 8000530:	f1ad 0c08 	sub.w	ip, sp, #8
 8000534:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000538:	f000 f806 	bl	8000548 <__udivmoddi4>
 800053c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000544:	b004      	add	sp, #16
 8000546:	4770      	bx	lr

08000548 <__udivmoddi4>:
 8000548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800054c:	9e08      	ldr	r6, [sp, #32]
 800054e:	460d      	mov	r5, r1
 8000550:	4604      	mov	r4, r0
 8000552:	460f      	mov	r7, r1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d14a      	bne.n	80005ee <__udivmoddi4+0xa6>
 8000558:	428a      	cmp	r2, r1
 800055a:	4694      	mov	ip, r2
 800055c:	d965      	bls.n	800062a <__udivmoddi4+0xe2>
 800055e:	fab2 f382 	clz	r3, r2
 8000562:	b143      	cbz	r3, 8000576 <__udivmoddi4+0x2e>
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	f1c3 0220 	rsb	r2, r3, #32
 800056c:	409f      	lsls	r7, r3
 800056e:	fa20 f202 	lsr.w	r2, r0, r2
 8000572:	4317      	orrs	r7, r2
 8000574:	409c      	lsls	r4, r3
 8000576:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800057a:	fa1f f58c 	uxth.w	r5, ip
 800057e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000582:	0c22      	lsrs	r2, r4, #16
 8000584:	fb0e 7711 	mls	r7, lr, r1, r7
 8000588:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800058c:	fb01 f005 	mul.w	r0, r1, r5
 8000590:	4290      	cmp	r0, r2
 8000592:	d90a      	bls.n	80005aa <__udivmoddi4+0x62>
 8000594:	eb1c 0202 	adds.w	r2, ip, r2
 8000598:	f101 37ff 	add.w	r7, r1, #4294967295
 800059c:	f080 811c 	bcs.w	80007d8 <__udivmoddi4+0x290>
 80005a0:	4290      	cmp	r0, r2
 80005a2:	f240 8119 	bls.w	80007d8 <__udivmoddi4+0x290>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	1a12      	subs	r2, r2, r0
 80005ac:	b2a4      	uxth	r4, r4
 80005ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80005b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80005b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005ba:	fb00 f505 	mul.w	r5, r0, r5
 80005be:	42a5      	cmp	r5, r4
 80005c0:	d90a      	bls.n	80005d8 <__udivmoddi4+0x90>
 80005c2:	eb1c 0404 	adds.w	r4, ip, r4
 80005c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80005ca:	f080 8107 	bcs.w	80007dc <__udivmoddi4+0x294>
 80005ce:	42a5      	cmp	r5, r4
 80005d0:	f240 8104 	bls.w	80007dc <__udivmoddi4+0x294>
 80005d4:	4464      	add	r4, ip
 80005d6:	3802      	subs	r0, #2
 80005d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005dc:	1b64      	subs	r4, r4, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	b11e      	cbz	r6, 80005ea <__udivmoddi4+0xa2>
 80005e2:	40dc      	lsrs	r4, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	e9c6 4300 	strd	r4, r3, [r6]
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0xbc>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	f000 80ed 	beq.w	80007d2 <__udivmoddi4+0x28a>
 80005f8:	2100      	movs	r1, #0
 80005fa:	e9c6 0500 	strd	r0, r5, [r6]
 80005fe:	4608      	mov	r0, r1
 8000600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000604:	fab3 f183 	clz	r1, r3
 8000608:	2900      	cmp	r1, #0
 800060a:	d149      	bne.n	80006a0 <__udivmoddi4+0x158>
 800060c:	42ab      	cmp	r3, r5
 800060e:	d302      	bcc.n	8000616 <__udivmoddi4+0xce>
 8000610:	4282      	cmp	r2, r0
 8000612:	f200 80f8 	bhi.w	8000806 <__udivmoddi4+0x2be>
 8000616:	1a84      	subs	r4, r0, r2
 8000618:	eb65 0203 	sbc.w	r2, r5, r3
 800061c:	2001      	movs	r0, #1
 800061e:	4617      	mov	r7, r2
 8000620:	2e00      	cmp	r6, #0
 8000622:	d0e2      	beq.n	80005ea <__udivmoddi4+0xa2>
 8000624:	e9c6 4700 	strd	r4, r7, [r6]
 8000628:	e7df      	b.n	80005ea <__udivmoddi4+0xa2>
 800062a:	b902      	cbnz	r2, 800062e <__udivmoddi4+0xe6>
 800062c:	deff      	udf	#255	; 0xff
 800062e:	fab2 f382 	clz	r3, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8090 	bne.w	8000758 <__udivmoddi4+0x210>
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800063e:	fa1f fe8c 	uxth.w	lr, ip
 8000642:	2101      	movs	r1, #1
 8000644:	fbb2 f5f7 	udiv	r5, r2, r7
 8000648:	fb07 2015 	mls	r0, r7, r5, r2
 800064c:	0c22      	lsrs	r2, r4, #16
 800064e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000652:	fb0e f005 	mul.w	r0, lr, r5
 8000656:	4290      	cmp	r0, r2
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x124>
 800065a:	eb1c 0202 	adds.w	r2, ip, r2
 800065e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000662:	d202      	bcs.n	800066a <__udivmoddi4+0x122>
 8000664:	4290      	cmp	r0, r2
 8000666:	f200 80cb 	bhi.w	8000800 <__udivmoddi4+0x2b8>
 800066a:	4645      	mov	r5, r8
 800066c:	1a12      	subs	r2, r2, r0
 800066e:	b2a4      	uxth	r4, r4
 8000670:	fbb2 f0f7 	udiv	r0, r2, r7
 8000674:	fb07 2210 	mls	r2, r7, r0, r2
 8000678:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800067c:	fb0e fe00 	mul.w	lr, lr, r0
 8000680:	45a6      	cmp	lr, r4
 8000682:	d908      	bls.n	8000696 <__udivmoddi4+0x14e>
 8000684:	eb1c 0404 	adds.w	r4, ip, r4
 8000688:	f100 32ff 	add.w	r2, r0, #4294967295
 800068c:	d202      	bcs.n	8000694 <__udivmoddi4+0x14c>
 800068e:	45a6      	cmp	lr, r4
 8000690:	f200 80bb 	bhi.w	800080a <__udivmoddi4+0x2c2>
 8000694:	4610      	mov	r0, r2
 8000696:	eba4 040e 	sub.w	r4, r4, lr
 800069a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800069e:	e79f      	b.n	80005e0 <__udivmoddi4+0x98>
 80006a0:	f1c1 0720 	rsb	r7, r1, #32
 80006a4:	408b      	lsls	r3, r1
 80006a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ae:	fa05 f401 	lsl.w	r4, r5, r1
 80006b2:	fa20 f307 	lsr.w	r3, r0, r7
 80006b6:	40fd      	lsrs	r5, r7
 80006b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006bc:	4323      	orrs	r3, r4
 80006be:	fbb5 f8f9 	udiv	r8, r5, r9
 80006c2:	fa1f fe8c 	uxth.w	lr, ip
 80006c6:	fb09 5518 	mls	r5, r9, r8, r5
 80006ca:	0c1c      	lsrs	r4, r3, #16
 80006cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006d0:	fb08 f50e 	mul.w	r5, r8, lr
 80006d4:	42a5      	cmp	r5, r4
 80006d6:	fa02 f201 	lsl.w	r2, r2, r1
 80006da:	fa00 f001 	lsl.w	r0, r0, r1
 80006de:	d90b      	bls.n	80006f8 <__udivmoddi4+0x1b0>
 80006e0:	eb1c 0404 	adds.w	r4, ip, r4
 80006e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006e8:	f080 8088 	bcs.w	80007fc <__udivmoddi4+0x2b4>
 80006ec:	42a5      	cmp	r5, r4
 80006ee:	f240 8085 	bls.w	80007fc <__udivmoddi4+0x2b4>
 80006f2:	f1a8 0802 	sub.w	r8, r8, #2
 80006f6:	4464      	add	r4, ip
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	b29d      	uxth	r5, r3
 80006fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000700:	fb09 4413 	mls	r4, r9, r3, r4
 8000704:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000708:	fb03 fe0e 	mul.w	lr, r3, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x1da>
 8000710:	eb1c 0404 	adds.w	r4, ip, r4
 8000714:	f103 35ff 	add.w	r5, r3, #4294967295
 8000718:	d26c      	bcs.n	80007f4 <__udivmoddi4+0x2ac>
 800071a:	45a6      	cmp	lr, r4
 800071c:	d96a      	bls.n	80007f4 <__udivmoddi4+0x2ac>
 800071e:	3b02      	subs	r3, #2
 8000720:	4464      	add	r4, ip
 8000722:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000726:	fba3 9502 	umull	r9, r5, r3, r2
 800072a:	eba4 040e 	sub.w	r4, r4, lr
 800072e:	42ac      	cmp	r4, r5
 8000730:	46c8      	mov	r8, r9
 8000732:	46ae      	mov	lr, r5
 8000734:	d356      	bcc.n	80007e4 <__udivmoddi4+0x29c>
 8000736:	d053      	beq.n	80007e0 <__udivmoddi4+0x298>
 8000738:	b156      	cbz	r6, 8000750 <__udivmoddi4+0x208>
 800073a:	ebb0 0208 	subs.w	r2, r0, r8
 800073e:	eb64 040e 	sbc.w	r4, r4, lr
 8000742:	fa04 f707 	lsl.w	r7, r4, r7
 8000746:	40ca      	lsrs	r2, r1
 8000748:	40cc      	lsrs	r4, r1
 800074a:	4317      	orrs	r7, r2
 800074c:	e9c6 7400 	strd	r7, r4, [r6]
 8000750:	4618      	mov	r0, r3
 8000752:	2100      	movs	r1, #0
 8000754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000758:	f1c3 0120 	rsb	r1, r3, #32
 800075c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000760:	fa20 f201 	lsr.w	r2, r0, r1
 8000764:	fa25 f101 	lsr.w	r1, r5, r1
 8000768:	409d      	lsls	r5, r3
 800076a:	432a      	orrs	r2, r5
 800076c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000770:	fa1f fe8c 	uxth.w	lr, ip
 8000774:	fbb1 f0f7 	udiv	r0, r1, r7
 8000778:	fb07 1510 	mls	r5, r7, r0, r1
 800077c:	0c11      	lsrs	r1, r2, #16
 800077e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000782:	fb00 f50e 	mul.w	r5, r0, lr
 8000786:	428d      	cmp	r5, r1
 8000788:	fa04 f403 	lsl.w	r4, r4, r3
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x258>
 800078e:	eb1c 0101 	adds.w	r1, ip, r1
 8000792:	f100 38ff 	add.w	r8, r0, #4294967295
 8000796:	d22f      	bcs.n	80007f8 <__udivmoddi4+0x2b0>
 8000798:	428d      	cmp	r5, r1
 800079a:	d92d      	bls.n	80007f8 <__udivmoddi4+0x2b0>
 800079c:	3802      	subs	r0, #2
 800079e:	4461      	add	r1, ip
 80007a0:	1b49      	subs	r1, r1, r5
 80007a2:	b292      	uxth	r2, r2
 80007a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80007a8:	fb07 1115 	mls	r1, r7, r5, r1
 80007ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007b0:	fb05 f10e 	mul.w	r1, r5, lr
 80007b4:	4291      	cmp	r1, r2
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x282>
 80007b8:	eb1c 0202 	adds.w	r2, ip, r2
 80007bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c0:	d216      	bcs.n	80007f0 <__udivmoddi4+0x2a8>
 80007c2:	4291      	cmp	r1, r2
 80007c4:	d914      	bls.n	80007f0 <__udivmoddi4+0x2a8>
 80007c6:	3d02      	subs	r5, #2
 80007c8:	4462      	add	r2, ip
 80007ca:	1a52      	subs	r2, r2, r1
 80007cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007d0:	e738      	b.n	8000644 <__udivmoddi4+0xfc>
 80007d2:	4631      	mov	r1, r6
 80007d4:	4630      	mov	r0, r6
 80007d6:	e708      	b.n	80005ea <__udivmoddi4+0xa2>
 80007d8:	4639      	mov	r1, r7
 80007da:	e6e6      	b.n	80005aa <__udivmoddi4+0x62>
 80007dc:	4610      	mov	r0, r2
 80007de:	e6fb      	b.n	80005d8 <__udivmoddi4+0x90>
 80007e0:	4548      	cmp	r0, r9
 80007e2:	d2a9      	bcs.n	8000738 <__udivmoddi4+0x1f0>
 80007e4:	ebb9 0802 	subs.w	r8, r9, r2
 80007e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ec:	3b01      	subs	r3, #1
 80007ee:	e7a3      	b.n	8000738 <__udivmoddi4+0x1f0>
 80007f0:	4645      	mov	r5, r8
 80007f2:	e7ea      	b.n	80007ca <__udivmoddi4+0x282>
 80007f4:	462b      	mov	r3, r5
 80007f6:	e794      	b.n	8000722 <__udivmoddi4+0x1da>
 80007f8:	4640      	mov	r0, r8
 80007fa:	e7d1      	b.n	80007a0 <__udivmoddi4+0x258>
 80007fc:	46d0      	mov	r8, sl
 80007fe:	e77b      	b.n	80006f8 <__udivmoddi4+0x1b0>
 8000800:	3d02      	subs	r5, #2
 8000802:	4462      	add	r2, ip
 8000804:	e732      	b.n	800066c <__udivmoddi4+0x124>
 8000806:	4608      	mov	r0, r1
 8000808:	e70a      	b.n	8000620 <__udivmoddi4+0xd8>
 800080a:	4464      	add	r4, ip
 800080c:	3802      	subs	r0, #2
 800080e:	e742      	b.n	8000696 <__udivmoddi4+0x14e>

08000810 <__aeabi_idiv0>:
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000820:	2334      	movs	r3, #52	; 0x34
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <tx_application_define+0x6c>)
 800082a:	4916      	ldr	r1, [pc, #88]	; (8000884 <tx_application_define+0x70>)
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <tx_application_define+0x74>)
 800082e:	f014 f849 	bl	80148c4 <_txe_byte_pool_create>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d109      	bne.n	800084c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <tx_application_define+0x74>)
 800083a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f000 f82b 	bl	8000898 <App_ThreadX_Init>
 8000842:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d000      	beq.n	800084c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800084a:	e7fe      	b.n	800084a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <tx_application_define+0x78>)
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <tx_application_define+0x7c>)
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <tx_application_define+0x80>)
 800085a:	f014 f833 	bl	80148c4 <_txe_byte_pool_create>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <tx_application_define+0x80>)
 8000866:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000868:	68b8      	ldr	r0, [r7, #8]
 800086a:	f007 ff9f 	bl	80087ac <MX_FileX_Init>
 800086e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d000      	beq.n	8000878 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000876:	e7fe      	b.n	8000876 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400009c 	.word	0x2400009c
 8000884:	08014edc 	.word	0x08014edc
 8000888:	2400049c 	.word	0x2400049c
 800088c:	240004d0 	.word	0x240004d0
 8000890:	08014ef0 	.word	0x08014ef0
 8000894:	240008d0 	.word	0x240008d0

08000898 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b6:	f011 fe95 	bl	80125e4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <main+0xe8>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d11b      	bne.n	800090a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
}
 80008d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d8:	f3bf 8f6f 	isb	sy
}
 80008dc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <main+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e6:	f3bf 8f4f 	dsb	sy
}
 80008ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ec:	f3bf 8f6f 	isb	sy
}
 80008f0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <main+0xe8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <main+0xe8>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fe:	f3bf 8f4f 	dsb	sy
}
 8000902:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000904:	f3bf 8f6f 	isb	sy
}
 8000908:	e000      	b.n	800090c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800090a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <main+0xe8>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d138      	bne.n	800098a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <main+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000920:	f3bf 8f4f 	dsb	sy
}
 8000924:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <main+0xe8>)
 8000928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800092c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	0b5b      	lsrs	r3, r3, #13
 8000932:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000936:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000940:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	015a      	lsls	r2, r3, #5
 8000946:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800094a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000950:	4915      	ldr	r1, [pc, #84]	; (80009a8 <main+0xe8>)
 8000952:	4313      	orrs	r3, r2
 8000954:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ef      	bne.n	8000942 <main+0x82>
    } while(sets-- != 0U);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1e5      	bne.n	8000938 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800096c:	f3bf 8f4f 	dsb	sy
}
 8000970:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <main+0xe8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <main+0xe8>)
 8000978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800097e:	f3bf 8f4f 	dsb	sy
}
 8000982:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000984:	f3bf 8f6f 	isb	sy
}
 8000988:	e000      	b.n	800098c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800098a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 ff44 	bl	8001818 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000990:	f000 fc8c 	bl	80012ac <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f80a 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f93e 	bl	8000c18 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800099c:	f000 f91a 	bl	8000bd4 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009a0:	f7ff ff87 	bl	80008b2 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0xe4>
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ce      	sub	sp, #312	; 0x138
 80009b0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;
	  HAL_StatusTypeDef ret = HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  /*!< Supply configuration update enable */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f001 fc65 	bl	8002288 <HAL_PWREx_ConfigSupply>

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	4a7e      	ldr	r2, [pc, #504]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009d6:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	f003 0201 	and.w	r2, r3, #1
 80009de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <SystemClock_Config+0x220>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <SystemClock_Config+0x220>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b75      	ldr	r3, [pc, #468]	; (8000bcc <SystemClock_Config+0x220>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a0e:	681b      	ldr	r3, [r3, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <SystemClock_Config+0x220>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x66>

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a46:	2305      	movs	r3, #5
 8000a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a70:	2308      	movs	r3, #8
 8000a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fc3e 	bl	80022fc <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000a86:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xe6>
	  {
	    Error_Handler();
 8000a8e:	f000 fc4b 	bl	8001328 <Error_Handler>
	  }

	/* Select PLL as system clock source and configure  bus clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000a92:	233f      	movs	r3, #63	; 0x3f
 8000a94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	                                  RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000ac4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f870 	bl	8002bb0 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000ad6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x136>
	  {
	    Error_Handler();
 8000ade:	f000 fc23 	bl	8001328 <Error_Handler>
	  }

	  /* PLL2_VCO Input = HSE_VALUE/PLL2_M = 5 Mhz */
	  /* PLL2_VCO Output = PLL2_VCO Input * PLL_N = 700 Mhz */
	  /* SDMMC Kernel Clock = PLL2_VCO Output/PLL_R = 700/6 = 116 Mhz */
	  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ae2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ae6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8000aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	e9c1 2300 	strd	r2, r3, [r1]
	  RCC_PeriphCLKInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000afe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b02:	651a      	str	r2, [r3, #80]	; 0x50
	  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL1VCIRANGE_2;
 8000b04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	61da      	str	r2, [r3, #28]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 5;
 8000b10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b18:	2205      	movs	r2, #5
 8000b1a:	609a      	str	r2, [r3, #8]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 140;
 8000b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b24:	228c      	movs	r2, #140	; 0x8c
 8000b26:	60da      	str	r2, [r3, #12]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 8000b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 2;
 8000b34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 6;
 8000b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b48:	2206      	movs	r2, #6
 8000b4a:	619a      	str	r2, [r3, #24]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 4;
 8000b4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b54:	2204      	movs	r2, #4
 8000b56:	615a      	str	r2, [r3, #20]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
	  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fbd9 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000b74:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x1d4>
	  {
	    Error_Handler();
 8000b7c:	f000 fbd4 	bl	8001328 <Error_Handler>
	  }

	  /*activate CSI clock mondatory for I/O Compensation Cell*/
	  __HAL_RCC_CSI_ENABLE() ;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	6013      	str	r3, [r2, #0]

	  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
	  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba2:	f003 0202 	and.w	r2, r3, #2
 8000ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000baa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bb4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bb8:	681b      	ldr	r3, [r3, #0]

	  /* Enables the I/O Compensation Cell */
	  HAL_EnableCompensationCell();
 8000bba:	f000 fecf 	bl	800195c <HAL_EnableCompensationCell>

}
 8000bbe:	bf00      	nop
 8000bc0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58000400 	.word	0x58000400
 8000bcc:	58024800 	.word	0x58024800
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_SDMMC1_SD_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <MX_SDMMC1_SD_Init+0x40>)
 8000bdc:	601a      	str	r2, [r3, #0]

  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
 // hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bfe:	f005 f88d 	bl	8005d1c <HAL_SD_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000c08:	f000 fb8e 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000904 	.word	0x24000904
 8000c14:	52007000 	.word	0x52007000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c2e:	4bbd      	ldr	r3, [pc, #756]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4abb      	ldr	r2, [pc, #748]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4bb9      	ldr	r3, [pc, #740]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4bb5      	ldr	r3, [pc, #724]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4ab4      	ldr	r2, [pc, #720]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4bb1      	ldr	r3, [pc, #708]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6a:	4bae      	ldr	r3, [pc, #696]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4aac      	ldr	r2, [pc, #688]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4baa      	ldr	r3, [pc, #680]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4ba6      	ldr	r3, [pc, #664]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4aa5      	ldr	r2, [pc, #660]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4ba2      	ldr	r3, [pc, #648]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b9f      	ldr	r3, [pc, #636]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a9d      	ldr	r2, [pc, #628]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b9b      	ldr	r3, [pc, #620]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b97      	ldr	r3, [pc, #604]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a96      	ldr	r2, [pc, #600]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b90      	ldr	r3, [pc, #576]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a8e      	ldr	r2, [pc, #568]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d00:	4b88      	ldr	r3, [pc, #544]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a87      	ldr	r2, [pc, #540]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b84      	ldr	r3, [pc, #528]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d1e:	4b81      	ldr	r3, [pc, #516]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a7f      	ldr	r2, [pc, #508]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3c:	4b79      	ldr	r3, [pc, #484]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a78      	ldr	r2, [pc, #480]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5a:	4b72      	ldr	r3, [pc, #456]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a70      	ldr	r2, [pc, #448]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	486a      	ldr	r0, [pc, #424]	; (8000f28 <MX_GPIO_Init+0x310>)
 8000d7e:	f001 fa45 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	4869      	ldr	r0, [pc, #420]	; (8000f2c <MX_GPIO_Init+0x314>)
 8000d88:	f001 fa40 	bl	800220c <HAL_GPIO_WritePin>


  /*Configure GPIO pins : D28_Pin FMC_NBL3_Pin FMC_NBL2_Pin D25_Pin
                           D24_Pin D29_Pin D26_Pin D27__IS42S32800G_DQ27_Pin
                           D30_Pin D31_Pin */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin
 8000d8c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	4861      	ldr	r0, [pc, #388]	; (8000f30 <MX_GPIO_Init+0x318>)
 8000daa:	f000 ff75 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D3_Pin ULPI_D4_Pin ULPI_D2_Pin
                           ULPI_D5_Pin ULPI_D1_Pin ULPI_D6_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8000dae:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	485a      	ldr	r0, [pc, #360]	; (8000f34 <MX_GPIO_Init+0x31c>)
 8000dcc:	f000 ff64 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B5_Pin LCD_B7_Pin LCD_B4_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G5_Pin LCD_G6_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin
 8000dd0:	23ff      	movs	r3, #255	; 0xff
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000de0:	230e      	movs	r3, #14
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4853      	ldr	r0, [pc, #332]	; (8000f38 <MX_GPIO_Init+0x320>)
 8000dec:	f000 ff54 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NE3_Pin SDNCAS_Pin SDCLK_Pin PG5
                           PG4 A13_Pin A12_Pin A10_Pin
                           A11_Pin */
  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5
 8000df0:	f248 533f 	movw	r3, #34111	; 0x853f
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e02:	230c      	movs	r3, #12
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	484b      	ldr	r0, [pc, #300]	; (8000f3c <MX_GPIO_Init+0x324>)
 8000e0e:	f000 ff43 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK2_IO2_Pin QSPI_BK2_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8000e12:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e24:	2309      	movs	r3, #9
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4843      	ldr	r0, [pc, #268]	; (8000f3c <MX_GPIO_Init+0x324>)
 8000e30:	f000 ff32 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NWE_Pin FMC_NOE_Pin FMC_NWAIT_Pin FMC_NE1_Pin
                           D2_Pin D3_Pin D1_Pin D0_Pin
                           A16_Pin A17_Pin A18_Pin D15_Pin
                           D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin
 8000e34:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e46:	230c      	movs	r3, #12
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x310>)
 8000e52:	f000 ff21 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin D7_Pin D6_Pin
                           D8_Pin D9_Pin D12_Pin D5_Pin
                           D10_Pin D4_Pin D11_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 8000e56:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_GPIO_Init+0x328>)
 8000e74:	f000 ff10 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e78:	23c0      	movs	r3, #192	; 0xc0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_GPIO_Init+0x31c>)
 8000e94:	f000 ff00 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD1_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8000e98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4821      	ldr	r0, [pc, #132]	; (8000f3c <MX_GPIO_Init+0x324>)
 8000eb6:	f000 feef 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B0_Pin LCD_B1_Pin
                           LCD_G4_Pin LCd_G3_Pin LCD_G2_Pin LCD_R1_Pin
                           LCD_G1_Pin LCD_G0_Pin LCD_R7_Pin LCD_R2_Pin
                           LCD_R6_Pin LCD_R3_Pin LCD_R4_Pin LCD_R5_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481b      	ldr	r0, [pc, #108]	; (8000f44 <MX_GPIO_Init+0x32c>)
 8000ed8:	f000 fede 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 8000edc:	2308      	movs	r3, #8
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_GPIO_Init+0x310>)
 8000ef4:	f000 fed0 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D22_Pin D21_Pin SDNWE_Pin
                           D18_Pin D19_Pin D17_Pin D20_Pin
                           SDNE1_Pin D16_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 8000ef8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_GPIO_Init+0x330>)
 8000f16:	f000 febf 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
 8000f22:	e013      	b.n	8000f4c <MX_GPIO_Init+0x334>
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020c00 	.word	0x58020c00
 8000f2c:	58020000 	.word	0x58020000
 8000f30:	58022000 	.word	0x58022000
 8000f34:	58020400 	.word	0x58020400
 8000f38:	58022800 	.word	0x58022800
 8000f3c:	58021800 	.word	0x58021800
 8000f40:	58021000 	.word	0x58021000
 8000f44:	58022400 	.word	0x58022400
 8000f48:	58021c00 	.word	0x58021c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f54:	230a      	movs	r3, #10
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	48bb      	ldr	r0, [pc, #748]	; (800124c <MX_GPIO_Init+0x634>)
 8000f60:	f000 fe9a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCKA_Pin SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SDA_Pin;
 8000f64:	2378      	movs	r3, #120	; 0x78
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	48b3      	ldr	r0, [pc, #716]	; (800124c <MX_GPIO_Init+0x634>)
 8000f80:	f000 fe8a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_ID_Pin USB_FS1_DP_Pin USB_FS1_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8000f84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f96:	230a      	movs	r3, #10
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	48ab      	ldr	r0, [pc, #684]	; (8001250 <MX_GPIO_Init+0x638>)
 8000fa2:	f000 fe79 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	48a5      	ldr	r0, [pc, #660]	; (8001254 <MX_GPIO_Init+0x63c>)
 8000fbe:	f000 fe6b 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	489c      	ldr	r0, [pc, #624]	; (8001250 <MX_GPIO_Init+0x638>)
 8000fe0:	f000 fe5a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4894      	ldr	r0, [pc, #592]	; (8001254 <MX_GPIO_Init+0x63c>)
 8001002:	f000 fe49 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001016:	2306      	movs	r3, #6
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	488d      	ldr	r0, [pc, #564]	; (8001258 <MX_GPIO_Init+0x640>)
 8001022:	f000 fe39 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_Pin A1_Pin A0_Pin A3_Pin
                           A4_Pin A7_Pin A8_Pin A6_Pin
                           A9_Pin SNDRAS_Pin */
  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 8001026:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A7_Pin|A8_Pin|A6_Pin
                          |A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001038:	230c      	movs	r3, #12
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	4886      	ldr	r0, [pc, #536]	; (800125c <MX_GPIO_Init+0x644>)
 8001044:	f000 fe28 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001058:	230a      	movs	r3, #10
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	487d      	ldr	r0, [pc, #500]	; (8001258 <MX_GPIO_Init+0x640>)
 8001064:	f000 fe18 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 8001068:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107a:	230e      	movs	r3, #14
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	4873      	ldr	r0, [pc, #460]	; (8001254 <MX_GPIO_Init+0x63c>)
 8001086:	f000 fe07 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800108a:	2320      	movs	r3, #32
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109c:	4619      	mov	r1, r3
 800109e:	486f      	ldr	r0, [pc, #444]	; (800125c <MX_GPIO_Init+0x644>)
 80010a0:	f000 fdfa 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010b4:	2309      	movs	r3, #9
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4867      	ldr	r0, [pc, #412]	; (800125c <MX_GPIO_Init+0x644>)
 80010c0:	f000 fdea 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80010c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010d6:	230a      	movs	r3, #10
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	485e      	ldr	r0, [pc, #376]	; (800125c <MX_GPIO_Init+0x644>)
 80010e2:	f000 fdd9 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	4857      	ldr	r0, [pc, #348]	; (8001260 <MX_GPIO_Init+0x648>)
 8001102:	f000 fdc9 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	484f      	ldr	r0, [pc, #316]	; (800125c <MX_GPIO_Init+0x644>)
 8001120:	f000 fdba 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001124:	2332      	movs	r3, #50	; 0x32
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001134:	230b      	movs	r3, #11
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4848      	ldr	r0, [pc, #288]	; (8001260 <MX_GPIO_Init+0x648>)
 8001140:	f000 fdaa 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CLK_Pin */
  GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001144:	2304      	movs	r3, #4
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001154:	2306      	movs	r3, #6
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4840      	ldr	r0, [pc, #256]	; (8001260 <MX_GPIO_Init+0x648>)
 8001160:	f000 fd9a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSM_DAT1_Pin */
  GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001164:	2308      	movs	r3, #8
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001174:	2303      	movs	r3, #3
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4838      	ldr	r0, [pc, #224]	; (8001260 <MX_GPIO_Init+0x648>)
 8001180:	f000 fd8a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK2_IO0_Pin QSPI_BK2_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001184:	230c      	movs	r3, #12
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001194:	2309      	movs	r3, #9
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4831      	ldr	r0, [pc, #196]	; (8001264 <MX_GPIO_Init+0x64c>)
 80011a0:	f000 fd7a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_MDIO_Pin RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80011a4:	2386      	movs	r3, #134	; 0x86
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b4:	230b      	movs	r3, #11
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	4619      	mov	r1, r3
 80011be:	4824      	ldr	r0, [pc, #144]	; (8001250 <MX_GPIO_Init+0x638>)
 80011c0:	f000 fd6a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80011d4:	230a      	movs	r3, #10
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	4821      	ldr	r0, [pc, #132]	; (8001264 <MX_GPIO_Init+0x64c>)
 80011e0:	f000 fd5a 	bl	8001c98 <HAL_GPIO_Init>



  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80011e4:	2304      	movs	r3, #4
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f4:	2309      	movs	r3, #9
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	481a      	ldr	r0, [pc, #104]	; (8001268 <MX_GPIO_Init+0x650>)
 8001200:	f000 fd4a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001204:	2328      	movs	r3, #40	; 0x28
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2302      	movs	r3, #2
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001214:	230a      	movs	r3, #10
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_GPIO_Init+0x638>)
 8001220:	f000 fd3a 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_232RX_Pin RS232_TX_Pin */
  GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001224:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001236:	2304      	movs	r3, #4
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_GPIO_Init+0x650>)
 8001242:	f000 fd29 	bl	8001c98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001246:	2320      	movs	r3, #32
 8001248:	e010      	b.n	800126c <MX_GPIO_Init+0x654>
 800124a:	bf00      	nop
 800124c:	58021000 	.word	0x58021000
 8001250:	58020000 	.word	0x58020000
 8001254:	58022000 	.word	0x58022000
 8001258:	58021800 	.word	0x58021800
 800125c:	58021400 	.word	0x58021400
 8001260:	58020800 	.word	0x58020800
 8001264:	58021c00 	.word	0x58021c00
 8001268:	58020400 	.word	0x58020400
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800126e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127c:	4619      	mov	r1, r3
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <MX_GPIO_Init+0x690>)
 8001280:	f000 fd0a 	bl	8001c98 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001284:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001288:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800128c:	f000 fb50 	bl	8001930 <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2106      	movs	r1, #6
 8001294:	2017      	movs	r0, #23
 8001296:	f000 fc4d 	bl	8001b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800129a:	2017      	movs	r0, #23
 800129c:	f000 fc64 	bl	8001b68 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3740      	adds	r7, #64	; 0x40
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58021400 	.word	0x58021400

080012ac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012be:	f000 fc6f 	bl	8001ba0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012c2:	2301      	movs	r3, #1
 80012c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012ce:	231f      	movs	r3, #31
 80012d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012d2:	2387      	movs	r3, #135	; 0x87
 80012d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012da:	2300      	movs	r3, #0
 80012dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012de:	2301      	movs	r3, #1
 80012e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ee:	463b      	mov	r3, r7
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fc8d 	bl	8001c10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012f6:	2004      	movs	r0, #4
 80012f8:	f000 fc6a 	bl	8001bd0 <HAL_MPU_Enable>

}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001316:	f000 fabb 	bl	8001890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40001000 	.word	0x40001000

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_MspInit+0x30>)
 800133c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001340:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_MspInit+0x30>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_MspInit+0x30>)
 800134c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	58024400 	.word	0x58024400

08001368 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0bc      	sub	sp, #240	; 0xf0
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	22c0      	movs	r2, #192	; 0xc0
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f013 fd61 	bl	8014e50 <memset>
  if(hsd->Instance==SDMMC1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <HAL_SD_MspInit+0x194>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 80ac 	bne.w	80014f2 <HAL_SD_MspInit+0x18a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800139a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 ffb6 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80013ba:	f7ff ffb5 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013be:	4b50      	ldr	r3, [pc, #320]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013c4:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ca:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013ce:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	4a47      	ldr	r2, [pc, #284]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ec:	4b44      	ldr	r3, [pc, #272]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_SD_MspInit+0x198>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	4a3f      	ldr	r2, [pc, #252]	; (8001500 <HAL_SD_MspInit+0x198>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_SD_MspInit+0x198>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_SD_MspInit+0x198>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_SD_MspInit+0x198>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_SD_MspInit+0x198>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8001436:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800143a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001450:	230c      	movs	r3, #12
 8001452:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800145a:	4619      	mov	r1, r3
 800145c:	4829      	ldr	r0, [pc, #164]	; (8001504 <HAL_SD_MspInit+0x19c>)
 800145e:	f000 fc1b 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 800147c:	2307      	movs	r3, #7
 800147e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001486:	4619      	mov	r1, r3
 8001488:	481f      	ldr	r0, [pc, #124]	; (8001508 <HAL_SD_MspInit+0x1a0>)
 800148a:	f000 fc05 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800148e:	2304      	movs	r3, #4
 8001490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014a6:	230c      	movs	r3, #12
 80014a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b0:	4619      	mov	r1, r3
 80014b2:	4816      	ldr	r0, [pc, #88]	; (800150c <HAL_SD_MspInit+0x1a4>)
 80014b4:	f000 fbf0 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 80014b8:	23c0      	movs	r3, #192	; 0xc0
 80014ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 80014d0:	2308      	movs	r3, #8
 80014d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014da:	4619      	mov	r1, r3
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <HAL_SD_MspInit+0x19c>)
 80014de:	f000 fbdb 	bl	8001c98 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2107      	movs	r1, #7
 80014e6:	2031      	movs	r0, #49	; 0x31
 80014e8:	f000 fb24 	bl	8001b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80014ec:	2031      	movs	r0, #49	; 0x31
 80014ee:	f000 fb3b 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	37f0      	adds	r7, #240	; 0xf0
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	52007000 	.word	0x52007000
 8001500:	58024400 	.word	0x58024400
 8001504:	58020800 	.word	0x58020800
 8001508:	58020400 	.word	0x58020400
 800150c:	58020c00 	.word	0x58020c00

08001510 <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_SD_MspDeInit+0x4c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d118      	bne.n	8001554 <HAL_SD_MspDeInit+0x44>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_SD_MspDeInit+0x50>)
 8001524:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_SD_MspDeInit+0x50>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8001532:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <HAL_SD_MspDeInit+0x54>)
 8001538:	f000 fd5e 	bl	8001ff8 <HAL_GPIO_DeInit>
                          |SDIO1_D1_Pin|SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin);

    HAL_GPIO_DeInit(GPIOB, SDIO1_CDIR_Pin|SDIO1_CKIN_Pin);
 800153c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_SD_MspDeInit+0x58>)
 8001542:	f000 fd59 	bl	8001ff8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 8001546:	2104      	movs	r1, #4
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <HAL_SD_MspDeInit+0x5c>)
 800154a:	f000 fd55 	bl	8001ff8 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800154e:	2031      	movs	r0, #49	; 0x31
 8001550:	f000 fb18 	bl	8001b84 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	52007000 	.word	0x52007000
 8001560:	58024400 	.word	0x58024400
 8001564:	58020800 	.word	0x58020800
 8001568:	58020400 	.word	0x58020400
 800156c:	58020c00 	.word	0x58020c00

08001570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	; 0x40
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	d827      	bhi.n	80015ce <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800157e:	2200      	movs	r2, #0
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	2036      	movs	r0, #54	; 0x36
 8001584:	f000 fad6 	bl	8001b34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001588:	2036      	movs	r0, #54	; 0x36
 800158a:	f000 faed 	bl	8001b68 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <HAL_InitTick+0xc4>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_InitTick+0xc8>)
 8001596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_InitTick+0xc8>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_InitTick+0xc8>)
 80015a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b2:	f107 0210 	add.w	r2, r7, #16
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fe6d 	bl	800329c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <HAL_InitTick+0x6a>
 80015cc:	e001      	b.n	80015d2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e02b      	b.n	800162a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d2:	f001 fe4d 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80015d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015d8:	e004      	b.n	80015e4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015da:	f001 fe49 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80015de:	4603      	mov	r3, r0
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_InitTick+0xcc>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	3b01      	subs	r3, #1
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_InitTick+0xd0>)
 80015f4:	4a13      	ldr	r2, [pc, #76]	; (8001644 <HAL_InitTick+0xd4>)
 80015f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_InitTick+0xd0>)
 80015fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001600:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_InitTick+0xd0>)
 8001602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001604:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_InitTick+0xd0>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_InitTick+0xd0>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_InitTick+0xd0>)
 8001614:	f006 f816 	bl	8007644 <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d104      	bne.n	8001628 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <HAL_InitTick+0xd0>)
 8001620:	f006 f872 	bl	8007708 <HAL_TIM_Base_Start_IT>
 8001624:	4603      	mov	r3, r0
 8001626:	e000      	b.n	800162a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	3740      	adds	r7, #64	; 0x40
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	24000008 	.word	0x24000008
 8001638:	58024400 	.word	0x58024400
 800163c:	431bde83 	.word	0x431bde83
 8001640:	24000984 	.word	0x24000984
 8001644:	40001000 	.word	0x40001000

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001678:	2020      	movs	r0, #32
 800167a:	f000 fde0 	bl	800223e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQOUT_Pin);
 800167e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001682:	f000 fddc 	bl	800223e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <SDMMC1_IRQHandler+0x10>)
 8001692:	f004 fded 	bl	8006270 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24000904 	.word	0x24000904

080016a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM6_DAC_IRQHandler+0x10>)
 80016a6:	f006 f8a7 	bl	80077f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	24000984 	.word	0x24000984

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b8:	4b37      	ldr	r3, [pc, #220]	; (8001798 <SystemInit+0xe4>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a36      	ldr	r2, [pc, #216]	; (8001798 <SystemInit+0xe4>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <SystemInit+0xe8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d807      	bhi.n	80016e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <SystemInit+0xe8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 030f 	bic.w	r3, r3, #15
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <SystemInit+0xe8>)
 80016de:	f043 0307 	orr.w	r3, r3, #7
 80016e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <SystemInit+0xec>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2d      	ldr	r2, [pc, #180]	; (80017a0 <SystemInit+0xec>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <SystemInit+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <SystemInit+0xec>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4929      	ldr	r1, [pc, #164]	; (80017a0 <SystemInit+0xec>)
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <SystemInit+0xf0>)
 80016fe:	4013      	ands	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <SystemInit+0xe8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <SystemInit+0xe8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 030f 	bic.w	r3, r3, #15
 8001716:	4a21      	ldr	r2, [pc, #132]	; (800179c <SystemInit+0xe8>)
 8001718:	f043 0307 	orr.w	r3, r3, #7
 800171c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <SystemInit+0xec>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <SystemInit+0xec>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <SystemInit+0xec>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <SystemInit+0xec>)
 8001732:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <SystemInit+0xf4>)
 8001734:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <SystemInit+0xec>)
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <SystemInit+0xf8>)
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <SystemInit+0xec>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <SystemInit+0xfc>)
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <SystemInit+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <SystemInit+0xec>)
 800174a:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <SystemInit+0xfc>)
 800174c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <SystemInit+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <SystemInit+0xec>)
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <SystemInit+0xfc>)
 8001758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <SystemInit+0xec>)
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <SystemInit+0xec>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <SystemInit+0xec>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <SystemInit+0xec>)
 800176e:	2200      	movs	r2, #0
 8001770:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <SystemInit+0x100>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <SystemInit+0x104>)
 8001778:	4013      	ands	r3, r2
 800177a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800177e:	d202      	bcs.n	8001786 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <SystemInit+0x108>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <SystemInit+0x10c>)
 8001788:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800178c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	52002000 	.word	0x52002000
 80017a0:	58024400 	.word	0x58024400
 80017a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017a8:	02020200 	.word	0x02020200
 80017ac:	01ff0000 	.word	0x01ff0000
 80017b0:	01010280 	.word	0x01010280
 80017b4:	5c001000 	.word	0x5c001000
 80017b8:	ffff0000 	.word	0xffff0000
 80017bc:	51008108 	.word	0x51008108
 80017c0:	52004000 	.word	0x52004000

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c8:	f7ff ff74 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ce:	490d      	ldr	r1, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e4:	4c0a      	ldr	r4, [pc, #40]	; (8001810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f013 fb35 	bl	8014e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff f863 	bl	80008c0 <main>
  bx  lr
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001800:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001804:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001808:	08015000 	.word	0x08015000
  ldr r2, =_sbss
 800180c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001810:	24003c14 	.word	0x24003c14

08001814 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC3_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181e:	2003      	movs	r0, #3
 8001820:	f000 f97d 	bl	8001b1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001824:	f001 fb7a 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_Init+0x68>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	4913      	ldr	r1, [pc, #76]	; (8001884 <HAL_Init+0x6c>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_Init+0x68>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_Init+0x6c>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_Init+0x70>)
 800185a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_Init+0x74>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001862:	200f      	movs	r0, #15
 8001864:	f7ff fe84 	bl	8001570 <HAL_InitTick>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e002      	b.n	8001878 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff fd5f 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	58024400 	.word	0x58024400
 8001884:	08014fe0 	.word	0x08014fe0
 8001888:	24000004 	.word	0x24000004
 800188c:	24000000 	.word	0x24000000

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2400000c 	.word	0x2400000c
 80018b4:	240009d0 	.word	0x240009d0

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	240009d0 	.word	0x240009d0

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2400000c 	.word	0x2400000c

08001918 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetREVID+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1b      	lsrs	r3, r3, #16
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	5c001000 	.word	0x5c001000

08001930 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	4904      	ldr	r1, [pc, #16]	; (8001958 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	58000400 	.word	0x58000400

0800195c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_EnableCompensationCell+0x1c>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_EnableCompensationCell+0x1c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	58000400 	.word	0x58000400

0800197c <__NVIC_SetPriorityGrouping>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <__NVIC_SetPriorityGrouping+0x40>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x40>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00
 80019c0:	05fa0000 	.word	0x05fa0000

080019c4 <__NVIC_GetPriorityGrouping>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_DisableIRQ>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db12      	blt.n	8001a54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	490a      	ldr	r1, [pc, #40]	; (8001a60 <__NVIC_DisableIRQ+0x44>)
 8001a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	3320      	adds	r3, #32
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a48:	f3bf 8f4f 	dsb	sy
}
 8001a4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a4e:	f3bf 8f6f 	isb	sy
}
 8001a52:	bf00      	nop
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff28 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b42:	f7ff ff3f 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff ffb3 	bl	8001ab8 <NVIC_EncodePriority>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff82 	bl	8001a64 <__NVIC_SetPriority>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff32 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff42 	bl	8001a1c <__NVIC_DisableIRQ>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ba4:	f3bf 8f5f 	dmb	sy
}
 8001ba8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_MPU_Disable+0x28>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_MPU_Disable+0x28>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_MPU_Disable+0x2c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	e000ed90 	.word	0xe000ed90

08001bd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_MPU_Enable+0x38>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_MPU_Enable+0x3c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_MPU_Enable+0x3c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bee:	f3bf 8f4f 	dsb	sy
}
 8001bf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bf4:	f3bf 8f6f 	isb	sy
}
 8001bf8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed90 	.word	0xe000ed90
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	785a      	ldrb	r2, [r3, #1]
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c1e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d029      	beq.n	8001c7c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
 8001c34:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7adb      	ldrb	r3, [r3, #11]
 8001c3a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7a9b      	ldrb	r3, [r3, #10]
 8001c42:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7b5b      	ldrb	r3, [r3, #13]
 8001c4a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7b9b      	ldrb	r3, [r3, #14]
 8001c52:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7bdb      	ldrb	r3, [r3, #15]
 8001c5a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7a5b      	ldrb	r3, [r3, #9]
 8001c62:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c6c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c76:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c78:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c7a:	e005      	b.n	8001c88 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed90 	.word	0xe000ed90

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ca6:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <HAL_GPIO_Init+0x234>)
 8001ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001caa:	e194      	b.n	8001fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8186 	beq.w	8001fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d005      	beq.n	8001cdc <HAL_GPIO_Init+0x44>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0201 	and.w	r2, r3, #1
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d017      	beq.n	8001d7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d123      	bne.n	8001dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	69b9      	ldr	r1, [r7, #24]
 8001dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0203 	and.w	r2, r3, #3
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80e0 	beq.w	8001fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_GPIO_Init+0x238>)
 8001e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <HAL_GPIO_Init+0x238>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_GPIO_Init+0x238>)
 8001e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <HAL_GPIO_Init+0x23c>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a20      	ldr	r2, [pc, #128]	; (8001ed8 <HAL_GPIO_Init+0x240>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d052      	beq.n	8001f00 <HAL_GPIO_Init+0x268>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_GPIO_Init+0x244>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_GPIO_Init+0x248>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02b      	beq.n	8001ec2 <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_GPIO_Init+0x24c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_GPIO_Init+0x250>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_GPIO_Init+0x254>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1a      	ldr	r2, [pc, #104]	; (8001ef0 <HAL_GPIO_Init+0x258>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x21a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_GPIO_Init+0x25c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x216>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_GPIO_Init+0x260>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x212>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_GPIO_Init+0x264>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x20e>
 8001ea2:	2309      	movs	r3, #9
 8001ea4:	e02d      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	e02b      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001eaa:	2308      	movs	r3, #8
 8001eac:	e029      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001eae:	2307      	movs	r3, #7
 8001eb0:	e027      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e025      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	e023      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e021      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e01f      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e01d      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e01b      	b.n	8001f02 <HAL_GPIO_Init+0x26a>
 8001eca:	bf00      	nop
 8001ecc:	58000080 	.word	0x58000080
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58000400 	.word	0x58000400
 8001ed8:	58020000 	.word	0x58020000
 8001edc:	58020400 	.word	0x58020400
 8001ee0:	58020800 	.word	0x58020800
 8001ee4:	58020c00 	.word	0x58020c00
 8001ee8:	58021000 	.word	0x58021000
 8001eec:	58021400 	.word	0x58021400
 8001ef0:	58021800 	.word	0x58021800
 8001ef4:	58021c00 	.word	0x58021c00
 8001ef8:	58022000 	.word	0x58022000
 8001efc:	58022400 	.word	0x58022400
 8001f00:	2300      	movs	r3, #0
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f12:	4938      	ldr	r1, [pc, #224]	; (8001ff4 <HAL_GPIO_Init+0x35c>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f47f ae63 	bne.w	8001cac <HAL_GPIO_Init+0x14>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	3724      	adds	r7, #36	; 0x24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	58000400 	.word	0x58000400

08001ff8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002006:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_GPIO_DeInit+0x1e4>)
 8002008:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800200a:	e0d9      	b.n	80021c0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80cc 	beq.w	80021ba <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a6f      	ldr	r2, [pc, #444]	; (80021e0 <HAL_GPIO_DeInit+0x1e8>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a67      	ldr	r2, [pc, #412]	; (80021e4 <HAL_GPIO_DeInit+0x1ec>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d037      	beq.n	80020bc <HAL_GPIO_DeInit+0xc4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_GPIO_DeInit+0x1f0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d031      	beq.n	80020b8 <HAL_GPIO_DeInit+0xc0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a65      	ldr	r2, [pc, #404]	; (80021ec <HAL_GPIO_DeInit+0x1f4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d02b      	beq.n	80020b4 <HAL_GPIO_DeInit+0xbc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a64      	ldr	r2, [pc, #400]	; (80021f0 <HAL_GPIO_DeInit+0x1f8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d025      	beq.n	80020b0 <HAL_GPIO_DeInit+0xb8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a63      	ldr	r2, [pc, #396]	; (80021f4 <HAL_GPIO_DeInit+0x1fc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d01f      	beq.n	80020ac <HAL_GPIO_DeInit+0xb4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a62      	ldr	r2, [pc, #392]	; (80021f8 <HAL_GPIO_DeInit+0x200>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d019      	beq.n	80020a8 <HAL_GPIO_DeInit+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a61      	ldr	r2, [pc, #388]	; (80021fc <HAL_GPIO_DeInit+0x204>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_DeInit+0xac>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a60      	ldr	r2, [pc, #384]	; (8002200 <HAL_GPIO_DeInit+0x208>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_DeInit+0xa8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a5f      	ldr	r2, [pc, #380]	; (8002204 <HAL_GPIO_DeInit+0x20c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_DeInit+0xa4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a5e      	ldr	r2, [pc, #376]	; (8002208 <HAL_GPIO_DeInit+0x210>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_DeInit+0xa0>
 8002094:	2309      	movs	r3, #9
 8002096:	e012      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 8002098:	230a      	movs	r3, #10
 800209a:	e010      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 800209c:	2308      	movs	r3, #8
 800209e:	e00e      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020a0:	2307      	movs	r3, #7
 80020a2:	e00c      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e008      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_DeInit+0xc6>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d136      	bne.n	800213c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f8:	4013      	ands	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	43db      	mvns	r3, r3
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210a:	4013      	ands	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800211e:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <HAL_GPIO_DeInit+0x1e8>)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	43da      	mvns	r2, r3
 800212e:	482c      	ldr	r0, [pc, #176]	; (80021e0 <HAL_GPIO_DeInit+0x1e8>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	400a      	ands	r2, r1
 8002136:	3302      	adds	r3, #2
 8002138:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2103      	movs	r1, #3
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	08d2      	lsrs	r2, r2, #3
 8002170:	4019      	ands	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2103      	movs	r1, #3
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	2101      	movs	r1, #1
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2103      	movs	r1, #3
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f af1f 	bne.w	800200c <HAL_GPIO_DeInit+0x14>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	58000080 	.word	0x58000080
 80021e0:	58000400 	.word	0x58000400
 80021e4:	58020000 	.word	0x58020000
 80021e8:	58020400 	.word	0x58020400
 80021ec:	58020800 	.word	0x58020800
 80021f0:	58020c00 	.word	0x58020c00
 80021f4:	58021000 	.word	0x58021000
 80021f8:	58021400 	.word	0x58021400
 80021fc:	58021800 	.word	0x58021800
 8002200:	58021c00 	.word	0x58021c00
 8002204:	58022000 	.word	0x58022000
 8002208:	58022400 	.word	0x58022400

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f804 	bl	8002272 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00a      	beq.n	80022b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01f      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e01d      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	490f      	ldr	r1, [pc, #60]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022c2:	f7ff faf9 	bl	80018b8 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c8:	e009      	b.n	80022de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ca:	f7ff faf5 	bl	80018b8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d8:	d901      	bls.n	80022de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ea:	d1ee      	bne.n	80022ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	58024800 	.word	0x58024800

080022fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	f000 bc48 	b.w	8002ba0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8088 	beq.w	800242e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	4b99      	ldr	r3, [pc, #612]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002328:	4b96      	ldr	r3, [pc, #600]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2b10      	cmp	r3, #16
 8002332:	d007      	beq.n	8002344 <HAL_RCC_OscConfig+0x48>
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2b18      	cmp	r3, #24
 8002338:	d111      	bne.n	800235e <HAL_RCC_OscConfig+0x62>
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4b8f      	ldr	r3, [pc, #572]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d06d      	beq.n	800242c <HAL_RCC_OscConfig+0x130>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d169      	bne.n	800242c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f000 bc21 	b.w	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x7a>
 8002368:	4b86      	ldr	r3, [pc, #536]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a85      	ldr	r2, [pc, #532]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e02e      	b.n	80023d4 <HAL_RCC_OscConfig+0xd8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x9c>
 800237e:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b7e      	ldr	r3, [pc, #504]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xd8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023a2:	4b78      	ldr	r3, [pc, #480]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a77      	ldr	r2, [pc, #476]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b75      	ldr	r3, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xd8>
 80023bc:	4b71      	ldr	r3, [pc, #452]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a70      	ldr	r2, [pc, #448]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a6d      	ldr	r2, [pc, #436]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff fa6c 	bl	80018b8 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fa68 	bl	80018b8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e3d4      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7ff fa58 	bl	80018b8 <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fa54 	bl	80018b8 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e3c0      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x110>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80ca 	beq.w	80025d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243c:	4b51      	ldr	r3, [pc, #324]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002444:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002446:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <HAL_RCC_OscConfig+0x166>
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2b18      	cmp	r3, #24
 8002456:	d156      	bne.n	8002506 <HAL_RCC_OscConfig+0x20a>
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d151      	bne.n	8002506 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e392      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0219 	bic.w	r2, r3, #25
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	493f      	ldr	r1, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff fa14 	bl	80018b8 <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7ff fa10 	bl	80018b8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e37c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	f7ff fa31 	bl	8001918 <HAL_GetREVID>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80024bc:	4293      	cmp	r3, r2
 80024be:	d817      	bhi.n	80024f0 <HAL_RCC_OscConfig+0x1f4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d108      	bne.n	80024da <HAL_RCC_OscConfig+0x1de>
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80024d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d8:	e07a      	b.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	031b      	lsls	r3, r3, #12
 80024e8:	4926      	ldr	r1, [pc, #152]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ee:	e06f      	b.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	4921      	ldr	r1, [pc, #132]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002504:	e064      	b.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d047      	beq.n	800259e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0219 	bic.w	r2, r3, #25
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	491a      	ldr	r1, [pc, #104]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff f9ca 	bl	80018b8 <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002528:	f7ff f9c6 	bl	80018b8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e332      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	f7ff f9e7 	bl	8001918 <HAL_GetREVID>
 800254a:	4603      	mov	r3, r0
 800254c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002550:	4293      	cmp	r3, r2
 8002552:	d819      	bhi.n	8002588 <HAL_RCC_OscConfig+0x28c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d108      	bne.n	800256e <HAL_RCC_OscConfig+0x272>
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256a:	6053      	str	r3, [r2, #4]
 800256c:	e030      	b.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	031b      	lsls	r3, r3, #12
 800257c:	4901      	ldr	r1, [pc, #4]	; (8002584 <HAL_RCC_OscConfig+0x288>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
 8002582:	e025      	b.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
 8002584:	58024400 	.word	0x58024400
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	4997      	ldr	r1, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
 800259c:	e018      	b.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b95      	ldr	r3, [pc, #596]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a94      	ldr	r2, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff f985 	bl	80018b8 <HAL_GetTick>
 80025ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff f981 	bl	80018b8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e2ed      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025c4:	4b8b      	ldr	r3, [pc, #556]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a9 	beq.w	8002730 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e8:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d007      	beq.n	8002604 <HAL_RCC_OscConfig+0x308>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	d13a      	bne.n	8002670 <HAL_RCC_OscConfig+0x374>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d135      	bne.n	8002670 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002604:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x320>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b80      	cmp	r3, #128	; 0x80
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e2c1      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800261c:	f7ff f97c 	bl	8001918 <HAL_GetREVID>
 8002620:	4603      	mov	r3, r0
 8002622:	f241 0203 	movw	r2, #4099	; 0x1003
 8002626:	4293      	cmp	r3, r2
 8002628:	d817      	bhi.n	800265a <HAL_RCC_OscConfig+0x35e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	2b20      	cmp	r3, #32
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x348>
 8002632:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800263a:	4a6e      	ldr	r2, [pc, #440]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002640:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002642:	e075      	b.n	8002730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002644:	4b6b      	ldr	r3, [pc, #428]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	069b      	lsls	r3, r3, #26
 8002652:	4968      	ldr	r1, [pc, #416]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002658:	e06a      	b.n	8002730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800265a:	4b66      	ldr	r3, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	4962      	ldr	r1, [pc, #392]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800266e:	e05f      	b.n	8002730 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d042      	beq.n	80026fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002678:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5d      	ldr	r2, [pc, #372]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f918 	bl	80018b8 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800268c:	f7ff f914 	bl	80018b8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e280      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800269e:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026aa:	f7ff f935 	bl	8001918 <HAL_GetREVID>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d817      	bhi.n	80026e8 <HAL_RCC_OscConfig+0x3ec>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d108      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3d6>
 80026c0:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026c8:	4a4a      	ldr	r2, [pc, #296]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026ce:	6053      	str	r3, [r2, #4]
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0x434>
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	069b      	lsls	r3, r3, #26
 80026e0:	4944      	ldr	r1, [pc, #272]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
 80026e6:	e023      	b.n	8002730 <HAL_RCC_OscConfig+0x434>
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	493f      	ldr	r1, [pc, #252]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e018      	b.n	8002730 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f8d5 	bl	80018b8 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002712:	f7ff f8d1 	bl	80018b8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e23d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002724:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d036      	beq.n	80027aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d019      	beq.n	8002778 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff f8b2 	bl	80018b8 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002758:	f7ff f8ae 	bl	80018b8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e21a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x45c>
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff f898 	bl	80018b8 <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7ff f894 	bl	80018b8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e200      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d039      	beq.n	800282a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ca:	f7ff f875 	bl	80018b8 <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d2:	f7ff f871 	bl	80018b8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1dd      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
 80027f2:	bf00      	nop
 80027f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027f8:	4b9b      	ldr	r3, [pc, #620]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a9a      	ldr	r2, [pc, #616]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80027fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002802:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002804:	f7ff f858 	bl	80018b8 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280c:	f7ff f854 	bl	80018b8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1c0      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800281e:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8081 	beq.w	800293a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <HAL_RCC_OscConfig+0x770>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a8b      	ldr	r2, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x770>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002844:	f7ff f838 	bl	80018b8 <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7ff f834 	bl	80018b8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1a0      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285e:	4b83      	ldr	r3, [pc, #524]	; (8002a6c <HAL_RCC_OscConfig+0x770>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x584>
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
 800287e:	e02d      	b.n	80028dc <HAL_RCC_OscConfig+0x5e0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5a6>
 8002888:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a76      	ldr	r2, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
 8002894:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a73      	ldr	r2, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 800289a:	f023 0304 	bic.w	r3, r3, #4
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x5e0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c8>
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0x5e0>
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a64      	ldr	r2, [pc, #400]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	f023 0304 	bic.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe ffe8 	bl	80018b8 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe ffe4 	bl	80018b8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e14e      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002902:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ee      	beq.n	80028ec <HAL_RCC_OscConfig+0x5f0>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe ffd2 	bl	80018b8 <HAL_GetTick>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe ffce 	bl	80018b8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e138      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ee      	bne.n	8002918 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 812d 	beq.w	8002b9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800294c:	2b18      	cmp	r3, #24
 800294e:	f000 80bd 	beq.w	8002acc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b02      	cmp	r3, #2
 8002958:	f040 809e 	bne.w	8002a98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a41      	ldr	r2, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe ffa6 	bl	80018b8 <HAL_GetTick>
 800296c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe ffa2 	bl	80018b8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e10e      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002982:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_OscConfig+0x774>)
 8002994:	4013      	ands	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	430a      	orrs	r2, r1
 80029a2:	4931      	ldr	r1, [pc, #196]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	628b      	str	r3, [r1, #40]	; 0x28
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	3b01      	subs	r3, #1
 80029ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	3b01      	subs	r3, #1
 80029b8:	025b      	lsls	r3, r3, #9
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	3b01      	subs	r3, #1
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029d8:	4923      	ldr	r1, [pc, #140]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <HAL_RCC_OscConfig+0x778>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029f6:	00d2      	lsls	r2, r2, #3
 80029f8:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f023 020c 	bic.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4917      	ldr	r1, [pc, #92]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f023 0202 	bic.w	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	4912      	ldr	r1, [pc, #72]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff2b 	bl	80018b8 <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a64:	e011      	b.n	8002a8a <HAL_RCC_OscConfig+0x78e>
 8002a66:	bf00      	nop
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58024800 	.word	0x58024800
 8002a70:	fffffc0c 	.word	0xfffffc0c
 8002a74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe ff1e 	bl	80018b8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e08a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x77c>
 8002a96:	e082      	b.n	8002b9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff08 	bl	80018b8 <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe ff04 	bl	80018b8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e070      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x7b0>
 8002aca:	e068      	b.n	8002b9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002acc:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d031      	beq.n	8002b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0203 	and.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d12a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d122      	bne.n	8002b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d11a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d111      	bne.n	8002b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d108      	bne.n	8002b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0e1b      	lsrs	r3, r3, #24
 8002b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e02b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d01f      	beq.n	8002b9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b6a:	f7fe fea5 	bl	80018b8 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b70:	bf00      	nop
 8002b72:	f7fe fea1 	bl	80018b8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d0f9      	beq.n	8002b72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_OscConfig+0x8b0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b8a:	00d2      	lsls	r2, r2, #3
 8002b8c:	4906      	ldr	r1, [pc, #24]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <HAL_RCC_OscConfig+0x8ac>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3730      	adds	r7, #48	; 0x30
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	ffff0007 	.word	0xffff0007

08002bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e19c      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	4985      	ldr	r1, [pc, #532]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b83      	ldr	r3, [pc, #524]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e184      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d908      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c10:	4b78      	ldr	r3, [pc, #480]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4975      	ldr	r1, [pc, #468]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	496a      	ldr	r1, [pc, #424]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	4b64      	ldr	r3, [pc, #400]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d908      	bls.n	8002c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	495e      	ldr	r1, [pc, #376]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d908      	bls.n	8002cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c9a:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4953      	ldr	r1, [pc, #332]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d908      	bls.n	8002cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f023 020f 	bic.w	r2, r3, #15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4947      	ldr	r1, [pc, #284]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d055      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4940      	ldr	r1, [pc, #256]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d00:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0f6      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d115      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0ea      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0de      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0d6      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f023 0207 	bic.w	r2, r3, #7
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4925      	ldr	r1, [pc, #148]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d62:	f7fe fda9 	bl	80018b8 <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6a:	f7fe fda5 	bl	80018b8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0be      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d1eb      	bne.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d208      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	490e      	ldr	r1, [pc, #56]	; (8002df4 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d214      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 020f 	bic.w	r2, r3, #15
 8002dd6:	4906      	ldr	r1, [pc, #24]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_RCC_ClockConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e086      	b.n	8002efe <HAL_RCC_ClockConfig+0x34e>
 8002df0:	52002000 	.word	0x52002000
 8002df4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d208      	bcs.n	8002e26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e14:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	4939      	ldr	r1, [pc, #228]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d208      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	492e      	ldr	r1, [pc, #184]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d208      	bcs.n	8002e82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4922      	ldr	r1, [pc, #136]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d208      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4917      	ldr	r1, [pc, #92]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eb0:	f000 f834 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4912      	ldr	r1, [pc, #72]	; (8002f0c <HAL_RCC_ClockConfig+0x35c>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <HAL_RCC_ClockConfig+0x35c>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x360>)
 8002ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <HAL_RCC_ClockConfig+0x364>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x368>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fb3c 	bl	8001570 <HAL_InitTick>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	08014fe0 	.word	0x08014fe0
 8002f10:	24000004 	.word	0x24000004
 8002f14:	24000000 	.word	0x24000000
 8002f18:	24000008 	.word	0x24000008

08002f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f22:	4bb3      	ldr	r3, [pc, #716]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f2a:	2b18      	cmp	r3, #24
 8002f2c:	f200 8155 	bhi.w	80031da <HAL_RCC_GetSysClockFreq+0x2be>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	080031db 	.word	0x080031db
 8002f40:	080031db 	.word	0x080031db
 8002f44:	080031db 	.word	0x080031db
 8002f48:	080031db 	.word	0x080031db
 8002f4c:	080031db 	.word	0x080031db
 8002f50:	080031db 	.word	0x080031db
 8002f54:	080031db 	.word	0x080031db
 8002f58:	08002fc3 	.word	0x08002fc3
 8002f5c:	080031db 	.word	0x080031db
 8002f60:	080031db 	.word	0x080031db
 8002f64:	080031db 	.word	0x080031db
 8002f68:	080031db 	.word	0x080031db
 8002f6c:	080031db 	.word	0x080031db
 8002f70:	080031db 	.word	0x080031db
 8002f74:	080031db 	.word	0x080031db
 8002f78:	08002fc9 	.word	0x08002fc9
 8002f7c:	080031db 	.word	0x080031db
 8002f80:	080031db 	.word	0x080031db
 8002f84:	080031db 	.word	0x080031db
 8002f88:	080031db 	.word	0x080031db
 8002f8c:	080031db 	.word	0x080031db
 8002f90:	080031db 	.word	0x080031db
 8002f94:	080031db 	.word	0x080031db
 8002f98:	08002fcf 	.word	0x08002fcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f9c:	4b94      	ldr	r3, [pc, #592]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fa8:	4b91      	ldr	r3, [pc, #580]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	4a90      	ldr	r2, [pc, #576]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fba:	e111      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fbc:	4b8d      	ldr	r3, [pc, #564]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fbe:	61bb      	str	r3, [r7, #24]
      break;
 8002fc0:	e10e      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fc2:	4b8d      	ldr	r3, [pc, #564]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fc4:	61bb      	str	r3, [r7, #24]
      break;
 8002fc6:	e10b      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fc8:	4b8c      	ldr	r3, [pc, #560]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fca:	61bb      	str	r3, [r7, #24]
      break;
 8002fcc:	e108      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fd8:	4b85      	ldr	r3, [pc, #532]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fe4:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fee:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80e1 	beq.w	80031d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b02      	cmp	r3, #2
 8003016:	f000 8083 	beq.w	8003120 <HAL_RCC_GetSysClockFreq+0x204>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b02      	cmp	r3, #2
 800301e:	f200 80a1 	bhi.w	8003164 <HAL_RCC_GetSysClockFreq+0x248>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x114>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d056      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800302e:	e099      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003030:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02d      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800303c:	4b6c      	ldr	r3, [pc, #432]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	4a6b      	ldr	r2, [pc, #428]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b62      	ldr	r3, [pc, #392]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a02 	vldr	s12, [r7, #8]
 800307a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003096:	e087      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003204 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b51      	ldr	r3, [pc, #324]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80030be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003200 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030da:	e065      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ee:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003102:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003200 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800311e:	e043      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800320c <HAL_RCC_GetSysClockFreq+0x2f0>
 800312e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	ed97 6a02 	vldr	s12, [r7, #8]
 8003146:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800314a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003162:	e021      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003186:	ed97 6a02 	vldr	s12, [r7, #8]
 800318a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800318e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	0a5b      	lsrs	r3, r3, #9
 80031ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b2:	3301      	adds	r3, #1
 80031b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031cc:	ee17 3a90 	vmov	r3, s15
 80031d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031d2:	e005      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
      break;
 80031d8:	e002      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031dc:	61bb      	str	r3, [r7, #24]
      break;
 80031de:	bf00      	nop
  }

  return sysclockfreq;
 80031e0:	69bb      	ldr	r3, [r7, #24]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	58024400 	.word	0x58024400
 80031f4:	03d09000 	.word	0x03d09000
 80031f8:	003d0900 	.word	0x003d0900
 80031fc:	017d7840 	.word	0x017d7840
 8003200:	46000000 	.word	0x46000000
 8003204:	4c742400 	.word	0x4c742400
 8003208:	4a742400 	.word	0x4a742400
 800320c:	4bbebc20 	.word	0x4bbebc20

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003216:	f7ff fe81 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_RCC_GetHCLKFreq+0x50>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490f      	ldr	r1, [pc, #60]	; (8003264 <HAL_RCC_GetHCLKFreq+0x54>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_GetHCLKFreq+0x50>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_GetHCLKFreq+0x54>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_RCC_GetHCLKFreq+0x58>)
 800324c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_RCC_GetHCLKFreq+0x58>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	58024400 	.word	0x58024400
 8003264:	08014fe0 	.word	0x08014fe0
 8003268:	24000004 	.word	0x24000004
 800326c:	24000000 	.word	0x24000000

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003274:	f7ff ffcc 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	58024400 	.word	0x58024400
 8003298:	08014fe0 	.word	0x08014fe0

0800329c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	223f      	movs	r2, #63	; 0x3f
 80032aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0207 	and.w	r2, r3, #7
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_GetClockConfig+0x7c>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_GetClockConfig+0x80>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	58024400 	.word	0x58024400
 800331c:	52002000 	.word	0x52002000

08003320 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b0ca      	sub	sp, #296	; 0x128
 8003326:	af00      	add	r7, sp, #0
 8003328:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003332:	2300      	movs	r3, #0
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003344:	2500      	movs	r5, #0
 8003346:	ea54 0305 	orrs.w	r3, r4, r5
 800334a:	d049      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003356:	d02f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800335c:	d828      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800335e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003362:	d01a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d822      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800336e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003372:	d007      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003374:	e01c      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003376:	4bb8      	ldr	r3, [pc, #736]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	4ab7      	ldr	r2, [pc, #732]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003380:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003382:	e01a      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003388:	3308      	adds	r3, #8
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f002 fb61 	bl	8005a54 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003398:	e00f      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339e:	3328      	adds	r3, #40	; 0x28
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 fc08 	bl	8005bb8 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ae:	e004      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033c2:	4ba5      	ldr	r3, [pc, #660]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d0:	4aa1      	ldr	r2, [pc, #644]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d2:	430b      	orrs	r3, r1
 80033d4:	6513      	str	r3, [r2, #80]	; 0x50
 80033d6:	e003      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033ec:	f04f 0900 	mov.w	r9, #0
 80033f0:	ea58 0309 	orrs.w	r3, r8, r9
 80033f4:	d047      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d82a      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800341d 	.word	0x0800341d
 800340c:	0800342b 	.word	0x0800342b
 8003410:	08003441 	.word	0x08003441
 8003414:	0800345f 	.word	0x0800345f
 8003418:	0800345f 	.word	0x0800345f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4a8d      	ldr	r2, [pc, #564]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003428:	e01a      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342e:	3308      	adds	r3, #8
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fb0e 	bl	8005a54 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800343e:	e00f      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003444:	3328      	adds	r3, #40	; 0x28
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f002 fbb5 	bl	8005bb8 <RCCEx_PLL3_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003454:	e004      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800345c:	e000      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800345e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	f023 0107 	bic.w	r1, r3, #7
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a78      	ldr	r2, [pc, #480]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6513      	str	r3, [r2, #80]	; 0x50
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003492:	f04f 0b00 	mov.w	fp, #0
 8003496:	ea5a 030b 	orrs.w	r3, sl, fp
 800349a:	d04c      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d030      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ac:	d829      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034ae:	2bc0      	cmp	r3, #192	; 0xc0
 80034b0:	d02d      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034b2:	2bc0      	cmp	r3, #192	; 0xc0
 80034b4:	d825      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d018      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d821      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d007      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034c6:	e01c      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a62      	ldr	r2, [pc, #392]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034d4:	e01c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034da:	3308      	adds	r3, #8
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f002 fab8 	bl	8005a54 <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034ea:	e011      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f0:	3328      	adds	r3, #40	; 0x28
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 fb5f 	bl	8005bb8 <RCCEx_PLL3_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003518:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6513      	str	r3, [r2, #80]	; 0x50
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800354c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003550:	460b      	mov	r3, r1
 8003552:	4313      	orrs	r3, r2
 8003554:	d053      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800355e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003562:	d035      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003568:	d82e      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800356a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800356e:	d031      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003570:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003574:	d828      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800357a:	d01a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003580:	d822      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358a:	d007      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800358c:	e01c      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a31      	ldr	r2, [pc, #196]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800359a:	e01c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a0:	3308      	adds	r3, #8
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fa55 	bl	8005a54 <RCCEx_PLL2_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035b0:	e011      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b6:	3328      	adds	r3, #40	; 0x28
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f002 fafc 	bl	8005bb8 <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c6:	e006      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800360a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003614:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d056      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800362a:	d038      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800362c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003630:	d831      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003636:	d034      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800363c:	d82b      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800363e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003642:	d01d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003648:	d825      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d006      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800364e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003654:	e01f      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003656:	bf00      	nop
 8003658:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4ba2      	ldr	r3, [pc, #648]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4aa1      	ldr	r2, [pc, #644]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003668:	e01c      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366e:	3308      	adds	r3, #8
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f002 f9ee 	bl	8005a54 <RCCEx_PLL2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800367e:	e011      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003684:	3328      	adds	r3, #40	; 0x28
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f002 fa95 	bl	8005bb8 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003694:	e006      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036ac:	4b8e      	ldr	r3, [pc, #568]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036bc:	4a8a      	ldr	r2, [pc, #552]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	6593      	str	r3, [r2, #88]	; 0x58
 80036c2:	e003      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	d03a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	2b30      	cmp	r3, #48	; 0x30
 80036f4:	d01f      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036f6:	2b30      	cmp	r3, #48	; 0x30
 80036f8:	d819      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d00c      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d815      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d019      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003706:	2b10      	cmp	r3, #16
 8003708:	d111      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370a:	4b77      	ldr	r3, [pc, #476]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	4a76      	ldr	r2, [pc, #472]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371c:	3308      	adds	r3, #8
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f002 f997 	bl	8005a54 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003748:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003754:	430b      	orrs	r3, r1
 8003756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800376e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003778:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d051      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378c:	d035      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800378e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003792:	d82e      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003794:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003798:	d031      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800379a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800379e:	d828      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a4:	d01a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	d822      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d007      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037b6:	e01c      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c4:	e01c      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ca:	3308      	adds	r3, #8
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f002 f940 	bl	8005a54 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037da:	e011      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e0:	3328      	adds	r3, #40	; 0x28
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 f9e7 	bl	8005bb8 <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003808:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800380a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6513      	str	r3, [r2, #80]	; 0x50
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800383c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d056      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003850:	d033      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003856:	d82c      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800385c:	d02f      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800385e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003862:	d826      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003868:	d02b      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800386a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800386e:	d820      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003874:	d012      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800387a:	d81a      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d022      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d115      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388a:	3308      	adds	r3, #8
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f002 f8e0 	bl	8005a54 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800389a:	e015      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	3328      	adds	r3, #40	; 0x28
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 f987 	bl	8005bb8 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038de:	4a02      	ldr	r2, [pc, #8]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6513      	str	r3, [r2, #80]	; 0x50
 80038e4:	e006      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800390a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d055      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800391c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003920:	d033      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003926:	d82c      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d02f      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d826      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003934:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003938:	d02b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800393a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800393e:	d820      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003944:	d012      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800394a:	d81a      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d022      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003954:	d115      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395a:	3308      	adds	r3, #8
 800395c:	2101      	movs	r1, #1
 800395e:	4618      	mov	r0, r3
 8003960:	f002 f878 	bl	8005a54 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800396a:	e015      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003970:	3328      	adds	r3, #40	; 0x28
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f002 f91f 	bl	8005bb8 <RCCEx_PLL3_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003980:	e00a      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003988:	e006      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800398a:	bf00      	nop
 800398c:	e004      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039a0:	4ba3      	ldr	r3, [pc, #652]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039b0:	4a9f      	ldr	r2, [pc, #636]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	d037      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ea:	d00e      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f0:	d816      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fa:	d111      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fc:	4b8c      	ldr	r3, [pc, #560]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	4a8b      	ldr	r2, [pc, #556]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a08:	e00f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0e:	3308      	adds	r3, #8
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 f81e 	bl	8005a54 <RCCEx_PLL2_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a1e:	e004      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a26:	e000      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6513      	str	r3, [r2, #80]	; 0x50
 8003a46:	e003      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	d039      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d81c      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003abd 	.word	0x08003abd
 8003a84:	08003a91 	.word	0x08003a91
 8003a88:	08003a9f 	.word	0x08003a9f
 8003a8c:	08003abd 	.word	0x08003abd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a90:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	4a66      	ldr	r2, [pc, #408]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a9c:	e00f      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 ffd4 	bl	8005a54 <RCCEx_PLL2_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ab2:	e004      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aba:	e000      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ac6:	4b5a      	ldr	r3, [pc, #360]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	f023 0103 	bic.w	r1, r3, #3
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	4a56      	ldr	r2, [pc, #344]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ada:	e003      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003afa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003afe:	460b      	mov	r3, r1
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f000 809f 	beq.w	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b06:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b12:	f7fd fed1 	bl	80018b8 <HAL_GetTick>
 8003b16:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1c:	f7fd fecc 	bl	80018b8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	; 0x64
 8003b2a:	d903      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b32:	e005      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b34:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ed      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d179      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b54:	4053      	eors	r3, r2
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d015      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5e:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b6a:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b76:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4a2d      	ldr	r2, [pc, #180]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d118      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fe8e 	bl	80018b8 <HAL_GetTick>
 8003b9c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ba0:	e00d      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fe89 	bl	80018b8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d903      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003bbc:	e005      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0eb      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d129      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be2:	d10e      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bf4:	091a      	lsrs	r2, r3, #4
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6113      	str	r3, [r2, #16]
 8003c00:	e005      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c0c:	6113      	str	r3, [r2, #16]
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	e00e      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c2e:	e009      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c30:	58024400 	.word	0x58024400
 8003c34:	58024800 	.word	0x58024800
 8003c38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f002 0301 	and.w	r3, r2, #1
 8003c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f000 8089 	beq.w	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	2b28      	cmp	r3, #40	; 0x28
 8003c6e:	d86b      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003d51 	.word	0x08003d51
 8003c7c:	08003d49 	.word	0x08003d49
 8003c80:	08003d49 	.word	0x08003d49
 8003c84:	08003d49 	.word	0x08003d49
 8003c88:	08003d49 	.word	0x08003d49
 8003c8c:	08003d49 	.word	0x08003d49
 8003c90:	08003d49 	.word	0x08003d49
 8003c94:	08003d49 	.word	0x08003d49
 8003c98:	08003d1d 	.word	0x08003d1d
 8003c9c:	08003d49 	.word	0x08003d49
 8003ca0:	08003d49 	.word	0x08003d49
 8003ca4:	08003d49 	.word	0x08003d49
 8003ca8:	08003d49 	.word	0x08003d49
 8003cac:	08003d49 	.word	0x08003d49
 8003cb0:	08003d49 	.word	0x08003d49
 8003cb4:	08003d49 	.word	0x08003d49
 8003cb8:	08003d33 	.word	0x08003d33
 8003cbc:	08003d49 	.word	0x08003d49
 8003cc0:	08003d49 	.word	0x08003d49
 8003cc4:	08003d49 	.word	0x08003d49
 8003cc8:	08003d49 	.word	0x08003d49
 8003ccc:	08003d49 	.word	0x08003d49
 8003cd0:	08003d49 	.word	0x08003d49
 8003cd4:	08003d49 	.word	0x08003d49
 8003cd8:	08003d51 	.word	0x08003d51
 8003cdc:	08003d49 	.word	0x08003d49
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003d49 	.word	0x08003d49
 8003ce8:	08003d49 	.word	0x08003d49
 8003cec:	08003d49 	.word	0x08003d49
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d49 	.word	0x08003d49
 8003d00:	08003d49 	.word	0x08003d49
 8003d04:	08003d49 	.word	0x08003d49
 8003d08:	08003d49 	.word	0x08003d49
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d49 	.word	0x08003d49
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08003d51 	.word	0x08003d51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	3308      	adds	r3, #8
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fe95 	bl	8005a54 <RCCEx_PLL2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d30:	e00f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	3328      	adds	r3, #40	; 0x28
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 ff3c 	bl	8005bb8 <RCCEx_PLL3_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d46:	e004      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d5a:	4bbf      	ldr	r3, [pc, #764]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d68:	4abb      	ldr	r2, [pc, #748]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f002 0302 	and.w	r3, r2, #2
 8003d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d041      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d824      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003df5 	.word	0x08003df5
 8003dac:	08003dc1 	.word	0x08003dc1
 8003db0:	08003dd7 	.word	0x08003dd7
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003df5 	.word	0x08003df5
 8003dbc:	08003df5 	.word	0x08003df5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fe43 	bl	8005a54 <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dda:	3328      	adds	r3, #40	; 0x28
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 feea 	bl	8005bb8 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dfe:	4b96      	ldr	r3, [pc, #600]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f023 0107 	bic.w	r1, r3, #7
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0c:	4a92      	ldr	r2, [pc, #584]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6553      	str	r3, [r2, #84]	; 0x54
 8003e12:	e003      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f002 0304 	and.w	r3, r2, #4
 8003e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	d044      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d825      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e9d 	.word	0x08003e9d
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003e7f 	.word	0x08003e7f
 8003e5c:	08003e9d 	.word	0x08003e9d
 8003e60:	08003e9d 	.word	0x08003e9d
 8003e64:	08003e9d 	.word	0x08003e9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f001 fdef 	bl	8005a54 <RCCEx_PLL2_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e7c:	e00f      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e82:	3328      	adds	r3, #40	; 0x28
 8003e84:	2101      	movs	r1, #1
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fe96 	bl	8005bb8 <RCCEx_PLL3_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea6:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	f023 0107 	bic.w	r1, r3, #7
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb6:	4a68      	ldr	r2, [pc, #416]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebc:	e003      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f002 0320 	and.w	r3, r2, #32
 8003ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	d055      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef2:	d033      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef8:	d82c      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d02f      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d826      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f0a:	d02b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f10:	d820      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f16:	d012      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1c:	d81a      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d022      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f26:	d115      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fd8f 	bl	8005a54 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e015      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f42:	3328      	adds	r3, #40	; 0x28
 8003f44:	2102      	movs	r1, #2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fe36 	bl	8005bb8 <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f52:	e00a      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f5a:	e006      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f60:	bf00      	nop
 8003f62:	e002      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f64:	bf00      	nop
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	4a35      	ldr	r2, [pc, #212]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6553      	str	r3, [r2, #84]	; 0x54
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d058      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fbe:	d033      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003fc0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fc4:	d82c      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d02f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d826      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd6:	d02b      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fdc:	d820      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe2:	d012      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe8:	d81a      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d022      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d115      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fd29 	bl	8005a54 <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004008:	e015      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	3328      	adds	r3, #40	; 0x28
 8004010:	2102      	movs	r1, #2
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fdd0 	bl	8005bb8 <RCCEx_PLL3_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800401e:	e00a      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004026:	e006      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004028:	bf00      	nop
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800402c:	bf00      	nop
 800402e:	e002      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10e      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404e:	4a02      	ldr	r2, [pc, #8]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004050:	430b      	orrs	r3, r1
 8004052:	6593      	str	r3, [r2, #88]	; 0x58
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004056:	bf00      	nop
 8004058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800407a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800407e:	460b      	mov	r3, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	d055      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800408c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004090:	d033      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004092:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004096:	d82c      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409c:	d02f      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800409e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a2:	d826      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040a8:	d02b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80040aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ae:	d820      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b4:	d012      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80040b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ba:	d81a      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d022      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d115      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	3308      	adds	r3, #8
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 fcc0 	bl	8005a54 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040da:	e015      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e0:	3328      	adds	r3, #40	; 0x28
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fd67 	bl	8005bb8 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004110:	4ba1      	ldr	r3, [pc, #644]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004120:	4a9d      	ldr	r2, [pc, #628]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004122:	430b      	orrs	r3, r1
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
 8004126:	e003      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f002 0308 	and.w	r3, r2, #8
 800413c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004146:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d01e      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d10c      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004162:	3328      	adds	r3, #40	; 0x28
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fd26 	bl	8005bb8 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004178:	4b87      	ldr	r3, [pc, #540]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004188:	4a83      	ldr	r2, [pc, #524]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f002 0310 	and.w	r3, r2, #16
 800419a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80041a8:	460b      	mov	r3, r1
 80041aa:	4313      	orrs	r3, r2
 80041ac:	d01e      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	3328      	adds	r3, #40	; 0x28
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fcf7 	bl	8005bb8 <RCCEx_PLL3_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d6:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e6:	4a6c      	ldr	r2, [pc, #432]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004202:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d03e      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004218:	d022      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800421a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421e:	d81b      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d00b      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800422a:	e015      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004230:	3308      	adds	r3, #8
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fc0d 	bl	8005a54 <RCCEx_PLL2_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004240:	e00f      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004246:	3328      	adds	r3, #40	; 0x28
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fcb4 	bl	8005bb8 <RCCEx_PLL3_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004256:	e004      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800426a:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800427a:	4a47      	ldr	r2, [pc, #284]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427c:	430b      	orrs	r3, r1
 800427e:	6593      	str	r3, [r2, #88]	; 0x58
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004296:	67bb      	str	r3, [r7, #120]	; 0x78
 8004298:	2300      	movs	r3, #0
 800429a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800429c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042a0:	460b      	mov	r3, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d03b      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042b2:	d01f      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80042b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042b8:	d818      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042be:	d003      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80042c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c4:	d007      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80042c6:	e011      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a32      	ldr	r2, [pc, #200]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042da:	3328      	adds	r3, #40	; 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fc6a 	bl	8005bb8 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042fe:	4b26      	ldr	r3, [pc, #152]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	4a22      	ldr	r2, [pc, #136]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6553      	str	r3, [r2, #84]	; 0x54
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800431a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800432a:	673b      	str	r3, [r7, #112]	; 0x70
 800432c:	2300      	movs	r3, #0
 800432e:	677b      	str	r3, [r7, #116]	; 0x74
 8004330:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004334:	460b      	mov	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	d034      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d007      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800434a:	e011      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434c:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004358:	e00e      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	3308      	adds	r3, #8
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f001 fb76 	bl	8005a54 <RCCEx_PLL2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800436e:	e003      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438e:	4a02      	ldr	r2, [pc, #8]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004390:	430b      	orrs	r3, r1
 8004392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004394:	e006      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80043b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b2:	2300      	movs	r3, #0
 80043b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d00c      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c4:	3328      	adds	r3, #40	; 0x28
 80043c6:	2102      	movs	r1, #2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fbf5 	bl	8005bb8 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80043e6:	663b      	str	r3, [r7, #96]	; 0x60
 80043e8:	2300      	movs	r3, #0
 80043ea:	667b      	str	r3, [r7, #100]	; 0x64
 80043ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043f0:	460b      	mov	r3, r1
 80043f2:	4313      	orrs	r3, r2
 80043f4:	d038      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004402:	d018      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004408:	d811      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d014      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004414:	d80b      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d106      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4bc3      	ldr	r3, [pc, #780]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4ac2      	ldr	r2, [pc, #776]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004448:	4bb9      	ldr	r3, [pc, #740]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004458:	4ab5      	ldr	r2, [pc, #724]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6553      	str	r3, [r2, #84]	; 0x54
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004474:	65bb      	str	r3, [r7, #88]	; 0x58
 8004476:	2300      	movs	r3, #0
 8004478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800447a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800447e:	460b      	mov	r3, r1
 8004480:	4313      	orrs	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004484:	4baa      	ldr	r3, [pc, #680]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	4aa7      	ldr	r2, [pc, #668]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044a4:	653b      	str	r3, [r7, #80]	; 0x50
 80044a6:	2300      	movs	r3, #0
 80044a8:	657b      	str	r3, [r7, #84]	; 0x54
 80044aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80044ae:	460b      	mov	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044b4:	4b9e      	ldr	r3, [pc, #632]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044c4:	4a9a      	ldr	r2, [pc, #616]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d8:	2300      	movs	r3, #0
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044e0:	460b      	mov	r3, r1
 80044e2:	4313      	orrs	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e6:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f4:	4a8e      	ldr	r2, [pc, #568]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f6:	430b      	orrs	r3, r1
 80044f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
 8004508:	2300      	movs	r3, #0
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
 800450c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004510:	460b      	mov	r3, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004516:	4b86      	ldr	r3, [pc, #536]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4a85      	ldr	r2, [pc, #532]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004520:	6113      	str	r3, [r2, #16]
 8004522:	4b83      	ldr	r3, [pc, #524]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004524:	6919      	ldr	r1, [r3, #16]
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800452e:	4a80      	ldr	r2, [pc, #512]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
 8004542:	2300      	movs	r3, #0
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004546:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d009      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004550:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004554:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	4a74      	ldr	r2, [pc, #464]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004560:	430b      	orrs	r3, r1
 8004562:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	2300      	movs	r3, #0
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004580:	4b6b      	ldr	r3, [pc, #428]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004590:	4a67      	ldr	r2, [pc, #412]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004592:	430b      	orrs	r3, r1
 8004594:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	2100      	movs	r1, #0
 80045a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d011      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	3308      	adds	r3, #8
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 fa4a 	bl	8005a54 <RCCEx_PLL2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	2100      	movs	r1, #0
 80045e0:	6239      	str	r1, [r7, #32]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
 80045e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	3308      	adds	r3, #8
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fa2a 	bl	8005a54 <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	2100      	movs	r1, #0
 8004620:	61b9      	str	r1, [r7, #24]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	d011      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	3308      	adds	r3, #8
 8004638:	2102      	movs	r1, #2
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fa0a 	bl	8005a54 <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	2100      	movs	r1, #0
 8004660:	6139      	str	r1, [r7, #16]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800466c:	460b      	mov	r3, r1
 800466e:	4313      	orrs	r3, r2
 8004670:	d011      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	3328      	adds	r3, #40	; 0x28
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fa9c 	bl	8005bb8 <RCCEx_PLL3_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	2100      	movs	r1, #0
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d011      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	3328      	adds	r3, #40	; 0x28
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fa7c 	bl	8005bb8 <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	2100      	movs	r1, #0
 80046e0:	6039      	str	r1, [r7, #0]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046ec:	460b      	mov	r3, r1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	d011      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f6:	3328      	adds	r3, #40	; 0x28
 80046f8:	2102      	movs	r1, #2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 fa5c 	bl	8005bb8 <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004716:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
}
 8004724:	4618      	mov	r0, r3
 8004726:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800472a:	46bd      	mov	sp, r7
 800472c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004730:	58024400 	.word	0x58024400

08004734 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b090      	sub	sp, #64	; 0x40
 8004738:	af00      	add	r7, sp, #0
 800473a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800473e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004742:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004746:	430b      	orrs	r3, r1
 8004748:	f040 8094 	bne.w	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800474c:	4b9e      	ldr	r3, [pc, #632]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	2b04      	cmp	r3, #4
 800475a:	f200 8087 	bhi.w	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004779 	.word	0x08004779
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047c9 	.word	0x080047c9
 8004770:	08004865 	.word	0x08004865
 8004774:	080047f1 	.word	0x080047f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004778:	4b93      	ldr	r3, [pc, #588]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d108      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478a:	4618      	mov	r0, r3
 800478c:	f001 f810 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004794:	f000 bd45 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800479c:	f000 bd41 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047a0:	4b89      	ldr	r3, [pc, #548]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ac:	d108      	bne.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ae:	f107 0318 	add.w	r3, r7, #24
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fd54 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047bc:	f000 bd31 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047c4:	f000 bd2d 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047c8:	4b7f      	ldr	r3, [pc, #508]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d4:	d108      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fe94 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047e4:	f000 bd1d 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047ec:	f000 bd19 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047f0:	4b75      	ldr	r3, [pc, #468]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047fa:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b04      	cmp	r3, #4
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800480c:	4b6e      	ldr	r3, [pc, #440]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	08db      	lsrs	r3, r3, #3
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	4a6d      	ldr	r2, [pc, #436]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481e:	e01f      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004820:	4b69      	ldr	r3, [pc, #420]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482c:	d106      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004834:	d102      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004836:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483a:	e011      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800483c:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004848:	d106      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004850:	d102      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004852:	4b60      	ldr	r3, [pc, #384]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004856:	e003      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800485c:	f000 bce1 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004860:	f000 bcdf 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004864:	4b5c      	ldr	r3, [pc, #368]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004868:	f000 bcdb 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004870:	f000 bcd7 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004878:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800487c:	430b      	orrs	r3, r1
 800487e:	f040 80ad 	bne.w	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004882:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800488a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004892:	d056      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489a:	f200 8090 	bhi.w	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	2bc0      	cmp	r3, #192	; 0xc0
 80048a2:	f000 8088 	beq.w	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	2bc0      	cmp	r3, #192	; 0xc0
 80048aa:	f200 8088 	bhi.w	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d032      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	f200 8081 	bhi.w	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d014      	beq.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80048c8:	e079      	b.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048ca:	4b3f      	ldr	r3, [pc, #252]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048d6:	d108      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 ff67 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048e6:	f000 bc9c 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ee:	f000 bc98 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048f2:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fe:	d108      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004900:	f107 0318 	add.w	r3, r7, #24
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fcab 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800490e:	f000 bc88 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004916:	f000 bc84 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800491a:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004926:	d108      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fdeb 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004936:	f000 bc74 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800493e:	f000 bc70 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800494a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d10c      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800495e:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	08db      	lsrs	r3, r3, #3
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	4a18      	ldr	r2, [pc, #96]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800496a:	fa22 f303 	lsr.w	r3, r2, r3
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	e01f      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d106      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004986:	d102      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	e011      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800499a:	d106      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a2:	d102      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a8:	e003      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80049ae:	f000 bc38 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80049b2:	f000 bc36 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ba:	f000 bc32 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049c2:	f000 bc2e 	b.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80049c6:	bf00      	nop
 80049c8:	58024400 	.word	0x58024400
 80049cc:	03d09000 	.word	0x03d09000
 80049d0:	003d0900 	.word	0x003d0900
 80049d4:	017d7840 	.word	0x017d7840
 80049d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80049dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80049e4:	430b      	orrs	r3, r1
 80049e6:	f040 809c 	bne.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80049ea:	4b9e      	ldr	r3, [pc, #632]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049fa:	d054      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a02:	f200 808b 	bhi.w	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a0c:	f000 8083 	beq.w	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a16:	f200 8081 	bhi.w	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a20:	d02f      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d878      	bhi.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a36:	d012      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004a38:	e070      	b.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a3a:	4b8a      	ldr	r3, [pc, #552]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a46:	d107      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 feaf 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a56:	e3e4      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a5c:	e3e1      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a5e:	4b81      	ldr	r3, [pc, #516]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a6c:	f107 0318 	add.w	r3, r7, #24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fbf5 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a7a:	e3d2      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a80:	e3cf      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a82:	4b78      	ldr	r3, [pc, #480]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fd37 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a9e:	e3c0      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa4:	e3bd      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004aa6:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ab0:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ac2:	4b68      	ldr	r3, [pc, #416]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	08db      	lsrs	r3, r3, #3
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	4a66      	ldr	r2, [pc, #408]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad4:	e01e      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ad6:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aea:	d102      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004aec:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af0:	e010      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004af2:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004afe:	d106      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b06:	d102      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b08:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	e002      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004b12:	e386      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b14:	e385      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b16:	4b57      	ldr	r3, [pc, #348]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b1a:	e382      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b20:	e37f      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b26:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	f040 80a7 	bne.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004b30:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b40:	d055      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b48:	f200 8096 	bhi.w	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b52:	f000 8084 	beq.w	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b5c:	f200 808c 	bhi.w	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b66:	d030      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b6e:	f200 8083 	bhi.w	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b7e:	d012      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004b80:	e07a      	b.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b82:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe0b 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b9e:	e340      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ba4:	e33d      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb4:	f107 0318 	add.w	r3, r7, #24
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fb51 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bc2:	e32e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc8:	e32b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bd8:	f107 030c 	add.w	r3, r7, #12
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fc93 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004be6:	e31c      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bec:	e319      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004bee:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c0a:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c1c:	e01e      	b.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c32:	d102      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c38:	e010      	b.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c46:	d106      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c4e:	d102      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004c5a:	e2e2      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c5c:	e2e1      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c62:	e2de      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c64:	58024400 	.word	0x58024400
 8004c68:	03d09000 	.word	0x03d09000
 8004c6c:	003d0900 	.word	0x003d0900
 8004c70:	017d7840 	.word	0x017d7840
 8004c74:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c7c:	e2d1      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004c86:	430b      	orrs	r3, r1
 8004c88:	f040 809c 	bne.w	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004c8c:	4b93      	ldr	r3, [pc, #588]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004c94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c9c:	d054      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca4:	f200 808b 	bhi.w	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cae:	f000 8083 	beq.w	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb8:	f200 8081 	bhi.w	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc2:	d02f      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	d878      	bhi.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd8:	d012      	beq.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004cda:	e070      	b.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cdc:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fd5e 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cf8:	e293      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cfe:	e290      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d00:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d0e:	f107 0318 	add.w	r3, r7, #24
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 faa4 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d1c:	e281      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d22:	e27e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d24:	4b6d      	ldr	r3, [pc, #436]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d30:	d107      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fbe6 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d40:	e26f      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d46:	e26c      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d48:	4b64      	ldr	r3, [pc, #400]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d52:	4b62      	ldr	r3, [pc, #392]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d64:	4b5d      	ldr	r3, [pc, #372]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	4a5c      	ldr	r2, [pc, #368]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d76:	e01e      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d78:	4b58      	ldr	r3, [pc, #352]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d84:	d106      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8c:	d102      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d8e:	4b55      	ldr	r3, [pc, #340]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d92:	e010      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d94:	4b51      	ldr	r3, [pc, #324]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da0:	d106      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da8:	d102      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004daa:	4b4f      	ldr	r3, [pc, #316]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dae:	e002      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004db4:	e235      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004db6:	e234      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dbc:	e231      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc2:	e22e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	f040 808f 	bne.w	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004dd2:	4b42      	ldr	r3, [pc, #264]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004dda:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de2:	d06b      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dea:	d874      	bhi.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004df2:	d056      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dfa:	d86c      	bhi.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e02:	d03b      	beq.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e0a:	d864      	bhi.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e12:	d021      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e1a:	d85c      	bhi.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d004      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004e2a:	e054      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe fa20 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8004e30:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e32:	e1f6      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e34:	4b29      	ldr	r3, [pc, #164]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e40:	d107      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e42:	f107 0318 	add.w	r3, r7, #24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fa0a 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e50:	e1e7      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e56:	e1e4      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e58:	4b20      	ldr	r3, [pc, #128]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e64:	d107      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e66:	f107 030c 	add.w	r3, r7, #12
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fb4c 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e74:	e1d5      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e7a:	e1d2      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e7c:	4b17      	ldr	r3, [pc, #92]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e88:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	08db      	lsrs	r3, r3, #3
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e9a:	e1c2      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ea0:	e1bf      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eb4:	e1b5      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eba:	e1b2      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec8:	d102      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ece:	e1a8      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed4:	e1a5      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eda:	e1a2      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	03d09000 	.word	0x03d09000
 8004ee4:	003d0900 	.word	0x003d0900
 8004ee8:	017d7840 	.word	0x017d7840
 8004eec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	d173      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004efc:	4b9c      	ldr	r3, [pc, #624]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f0c:	d02f      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f14:	d863      	bhi.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f22:	d012      	beq.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004f24:	e05b      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f26:	4b92      	ldr	r3, [pc, #584]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d107      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f34:	f107 0318 	add.w	r3, r7, #24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f991 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f42:	e16e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f48:	e16b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f4a:	4b89      	ldr	r3, [pc, #548]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f56:	d107      	bne.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fad3 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f66:	e15c      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f6c:	e159      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f6e:	4b80      	ldr	r3, [pc, #512]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f78:	4b7d      	ldr	r3, [pc, #500]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f8a:	4b79      	ldr	r3, [pc, #484]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	08db      	lsrs	r3, r3, #3
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	4a77      	ldr	r2, [pc, #476]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9c:	e01e      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f9e:	4b74      	ldr	r3, [pc, #464]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb2:	d102      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004fb4:	4b70      	ldr	r3, [pc, #448]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb8:	e010      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fba:	4b6d      	ldr	r3, [pc, #436]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004fd0:	4b6a      	ldr	r3, [pc, #424]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004fda:	e122      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004fdc:	e121      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe2:	e11e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004fec:	430b      	orrs	r3, r1
 8004fee:	d133      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004ff0:	4b5f      	ldr	r3, [pc, #380]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d012      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005008:	e023      	b.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800500a:	4b59      	ldr	r3, [pc, #356]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005016:	d107      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fbc7 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005026:	e0fc      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800502c:	e0f9      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800502e:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d107      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800503c:	f107 0318 	add.w	r3, r7, #24
 8005040:	4618      	mov	r0, r3
 8005042:	f000 f90d 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504a:	e0ea      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005050:	e0e7      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005056:	e0e4      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005060:	430b      	orrs	r3, r1
 8005062:	f040 808d 	bne.w	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005066:	4b42      	ldr	r3, [pc, #264]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d06b      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507e:	d874      	bhi.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d056      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d86c      	bhi.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005096:	d03b      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800509e:	d864      	bhi.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a6:	d021      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ae:	d85c      	bhi.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050bc:	d004      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80050be:	e054      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80050c0:	f000 f8b8 	bl	8005234 <HAL_RCCEx_GetD3PCLK1Freq>
 80050c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050c6:	e0ac      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050c8:	4b29      	ldr	r3, [pc, #164]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d4:	d107      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050d6:	f107 0318 	add.w	r3, r7, #24
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f8c0 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050e4:	e09d      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ea:	e09a      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f8:	d107      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050fa:	f107 030c 	add.w	r3, r7, #12
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fa02 	bl	8005508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005108:	e08b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510e:	e088      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d109      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	08db      	lsrs	r3, r3, #3
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	4a13      	ldr	r2, [pc, #76]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800512e:	e078      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005134:	e075      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	d102      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005148:	e06b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800514e:	e068      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800515c:	d102      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005162:	e05e      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005168:	e05b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516e:	e058      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005170:	58024400 	.word	0x58024400
 8005174:	03d09000 	.word	0x03d09000
 8005178:	003d0900 	.word	0x003d0900
 800517c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005184:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005188:	430b      	orrs	r3, r1
 800518a:	d148      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800518c:	4b27      	ldr	r3, [pc, #156]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519c:	d02a      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a4:	d838      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b2:	d00d      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80051b4:	e030      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c2:	d102      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051c8:	e02b      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ce:	e028      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051d0:	4b16      	ldr	r3, [pc, #88]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051dc:	d107      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fae4 	bl	80057b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051ec:	e019      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051f2:	e016      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005200:	d107      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005202:	f107 0318 	add.w	r3, r7, #24
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f82a 	bl	8005260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005210:	e007      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005216:	e004      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800521c:	e001      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005224:	4618      	mov	r0, r3
 8005226:	3740      	adds	r7, #64	; 0x40
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	58024400 	.word	0x58024400
 8005230:	017d7840 	.word	0x017d7840

08005234 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005238:	f7fd ffea 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4904      	ldr	r1, [pc, #16]	; (800525c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	58024400 	.word	0x58024400
 800525c:	08014fe0 	.word	0x08014fe0

08005260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005268:	4ba1      	ldr	r3, [pc, #644]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005272:	4b9f      	ldr	r3, [pc, #636]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	0b1b      	lsrs	r3, r3, #12
 8005278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800527c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800527e:	4b9c      	ldr	r3, [pc, #624]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	091b      	lsrs	r3, r3, #4
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800528a:	4b99      	ldr	r3, [pc, #612]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	08db      	lsrs	r3, r3, #3
 8005290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8111 	beq.w	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	f000 8083 	beq.w	80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	f200 80a1 	bhi.w	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d056      	beq.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80052ca:	e099      	b.n	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052cc:	4b88      	ldr	r3, [pc, #544]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02d      	beq.n	8005334 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d8:	4b85      	ldr	r3, [pc, #532]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	08db      	lsrs	r3, r3, #3
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	4a84      	ldr	r2, [pc, #528]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
 80052e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005302:	4b7b      	ldr	r3, [pc, #492]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a03 	vldr	s12, [r7, #12]
 8005316:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005332:	e087      	b.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b6a      	ldr	r3, [pc, #424]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a03 	vldr	s12, [r7, #12]
 800535a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005376:	e065      	b.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539a:	ed97 6a03 	vldr	s12, [r7, #12]
 800539e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ba:	e043      	b.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b48      	ldr	r3, [pc, #288]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053fe:	e021      	b.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a03 	vldr	s12, [r7, #12]
 8005426:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005442:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005444:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	0a5b      	lsrs	r3, r3, #9
 800544a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800545a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800545e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546a:	ee17 2a90 	vmov	r2, s15
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005472:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	0c1b      	lsrs	r3, r3, #16
 8005478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800548c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005498:	ee17 2a90 	vmov	r2, s15
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	0e1b      	lsrs	r3, r3, #24
 80054a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80054be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c6:	ee17 2a90 	vmov	r2, s15
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80054ce:	e008      	b.n	80054e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
}
 80054e2:	bf00      	nop
 80054e4:	3724      	adds	r7, #36	; 0x24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
 80054f4:	03d09000 	.word	0x03d09000
 80054f8:	46000000 	.word	0x46000000
 80054fc:	4c742400 	.word	0x4c742400
 8005500:	4a742400 	.word	0x4a742400
 8005504:	4bbebc20 	.word	0x4bbebc20

08005508 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005508:	b480      	push	{r7}
 800550a:	b089      	sub	sp, #36	; 0x24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005510:	4ba1      	ldr	r3, [pc, #644]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800551a:	4b9f      	ldr	r3, [pc, #636]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	0d1b      	lsrs	r3, r3, #20
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005526:	4b9c      	ldr	r3, [pc, #624]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005532:	4b99      	ldr	r3, [pc, #612]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005536:	08db      	lsrs	r3, r3, #3
 8005538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8111 	beq.w	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b02      	cmp	r3, #2
 800555a:	f000 8083 	beq.w	8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b02      	cmp	r3, #2
 8005562:	f200 80a1 	bhi.w	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d056      	beq.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005572:	e099      	b.n	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005574:	4b88      	ldr	r3, [pc, #544]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02d      	beq.n	80055dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005580:	4b85      	ldr	r3, [pc, #532]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	4a84      	ldr	r2, [pc, #528]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
 8005590:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b7b      	ldr	r3, [pc, #492]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80055be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80055da:	e087      	b.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005602:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800561e:	e065      	b.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800562e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005632:	4b59      	ldr	r3, [pc, #356]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005642:	ed97 6a03 	vldr	s12, [r7, #12]
 8005646:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005662:	e043      	b.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b48      	ldr	r3, [pc, #288]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a03 	vldr	s12, [r7, #12]
 800568a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056a6:	e021      	b.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80056ec:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	0a5b      	lsrs	r3, r3, #9
 80056f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005706:	edd7 6a07 	vldr	s13, [r7, #28]
 800570a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800570e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005712:	ee17 2a90 	vmov	r2, s15
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005724:	ee07 3a90 	vmov	s15, r3
 8005728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005734:	edd7 6a07 	vldr	s13, [r7, #28]
 8005738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005740:	ee17 2a90 	vmov	r2, s15
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	0e1b      	lsrs	r3, r3, #24
 800574e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800575e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005762:	edd7 6a07 	vldr	s13, [r7, #28]
 8005766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576e:	ee17 2a90 	vmov	r2, s15
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005776:	e008      	b.n	800578a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	609a      	str	r2, [r3, #8]
}
 800578a:	bf00      	nop
 800578c:	3724      	adds	r7, #36	; 0x24
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400
 800579c:	03d09000 	.word	0x03d09000
 80057a0:	46000000 	.word	0x46000000
 80057a4:	4c742400 	.word	0x4c742400
 80057a8:	4a742400 	.word	0x4a742400
 80057ac:	4bbebc20 	.word	0x4bbebc20

080057b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057b8:	4ba0      	ldr	r3, [pc, #640]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80057c2:	4b9e      	ldr	r3, [pc, #632]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80057ce:	4b9b      	ldr	r3, [pc, #620]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057d8:	4b98      	ldr	r3, [pc, #608]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8111 	beq.w	8005a1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	f000 8083 	beq.w	800590a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b02      	cmp	r3, #2
 8005808:	f200 80a1 	bhi.w	800594e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d056      	beq.n	80058c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005818:	e099      	b.n	800594e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800581a:	4b88      	ldr	r3, [pc, #544]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02d      	beq.n	8005882 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005826:	4b85      	ldr	r3, [pc, #532]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	08db      	lsrs	r3, r3, #3
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	4a83      	ldr	r2, [pc, #524]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005850:	4b7a      	ldr	r3, [pc, #488]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005860:	ed97 6a03 	vldr	s12, [r7, #12]
 8005864:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005880:	e087      	b.n	8005992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005894:	4b69      	ldr	r3, [pc, #420]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058c4:	e065      	b.n	8005992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	ee07 3a90 	vmov	s15, r3
 80058cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005a4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80058d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d8:	4b58      	ldr	r3, [pc, #352]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005904:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005908:	e043      	b.n	8005992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005914:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591c:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005930:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005948:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800594c:	e021      	b.n	8005992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005958:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800595c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005960:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005970:	ed97 6a03 	vldr	s12, [r7, #12]
 8005974:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005990:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005992:	4b2a      	ldr	r3, [pc, #168]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	0a5b      	lsrs	r3, r3, #9
 8005998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80059b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b8:	ee17 2a90 	vmov	r2, s15
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80059c0:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059da:	edd7 6a07 	vldr	s13, [r7, #28]
 80059de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e6:	ee17 2a90 	vmov	r2, s15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	0e1b      	lsrs	r3, r3, #24
 80059f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a14:	ee17 2a90 	vmov	r2, s15
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a1c:	e008      	b.n	8005a30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	bf00      	nop
 8005a32:	3724      	adds	r7, #36	; 0x24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	03d09000 	.word	0x03d09000
 8005a44:	46000000 	.word	0x46000000
 8005a48:	4c742400 	.word	0x4c742400
 8005a4c:	4a742400 	.word	0x4a742400
 8005a50:	4bbebc20 	.word	0x4bbebc20

08005a54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a62:	4b53      	ldr	r3, [pc, #332]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d101      	bne.n	8005a72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e099      	b.n	8005ba6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a72:	4b4f      	ldr	r3, [pc, #316]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4e      	ldr	r2, [pc, #312]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7e:	f7fb ff1b 	bl	80018b8 <HAL_GetTick>
 8005a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a84:	e008      	b.n	8005a98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a86:	f7fb ff17 	bl	80018b8 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e086      	b.n	8005ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a98:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005aa4:	4b42      	ldr	r3, [pc, #264]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	031b      	lsls	r3, r3, #12
 8005ab2:	493f      	ldr	r1, [pc, #252]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	025b      	lsls	r3, r3, #9
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	061b      	lsls	r3, r3, #24
 8005ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ae8:	4931      	ldr	r1, [pc, #196]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	492d      	ldr	r1, [pc, #180]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b00:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f023 0220 	bic.w	r2, r3, #32
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	4928      	ldr	r1, [pc, #160]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b12:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	f023 0310 	bic.w	r3, r3, #16
 8005b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <RCCEx_PLL2_Config+0x160>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	69d2      	ldr	r2, [r2, #28]
 8005b2a:	00d2      	lsls	r2, r2, #3
 8005b2c:	4920      	ldr	r1, [pc, #128]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b32:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b38:	f043 0310 	orr.w	r3, r3, #16
 8005b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b50:	e00f      	b.n	8005b72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d106      	bne.n	8005b66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b64:	e005      	b.n	8005b72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b66:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fb fe9b 	bl	80018b8 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b84:	e008      	b.n	8005b98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b86:	f7fb fe97 	bl	80018b8 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <RCCEx_PLL2_Config+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	ffff0007 	.word	0xffff0007

08005bb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bc6:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d101      	bne.n	8005bd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e099      	b.n	8005d0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bd6:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a4e      	ldr	r2, [pc, #312]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be2:	f7fb fe69 	bl	80018b8 <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005be8:	e008      	b.n	8005bfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bea:	f7fb fe65 	bl	80018b8 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e086      	b.n	8005d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bfc:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f0      	bne.n	8005bea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	051b      	lsls	r3, r3, #20
 8005c16:	493f      	ldr	r1, [pc, #252]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	025b      	lsls	r3, r3, #9
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c4c:	4931      	ldr	r1, [pc, #196]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c52:	4b30      	ldr	r3, [pc, #192]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	492d      	ldr	r1, [pc, #180]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c64:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	4928      	ldr	r1, [pc, #160]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <RCCEx_PLL3_Config+0x160>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	69d2      	ldr	r2, [r2, #28]
 8005c8e:	00d2      	lsls	r2, r2, #3
 8005c90:	4920      	ldr	r1, [pc, #128]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c96:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb4:	e00f      	b.n	8005cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d106      	bne.n	8005cca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cc8:	e005      	b.n	8005cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce2:	f7fb fde9 	bl	80018b8 <HAL_GetTick>
 8005ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce8:	e008      	b.n	8005cfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005cea:	f7fb fde5 	bl	80018b8 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e006      	b.n	8005d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <RCCEx_PLL3_Config+0x15c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	58024400 	.word	0x58024400
 8005d18:	ffff0007 	.word	0xffff0007

08005d1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e07c      	b.n	8005e28 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb fb0a 	bl	8001368 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2204      	movs	r2, #4
 8005d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f867 	bl	8005e30 <HAL_SD_InitCard>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e05d      	b.n	8005e28 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005d6c:	f107 0308 	add.w	r3, r7, #8
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fdee 	bl	8006954 <HAL_SD_GetCardStatus>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e052      	b.n	8005e28 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005d82:	7e3b      	ldrb	r3, [r7, #24]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005d88:	7e7b      	ldrb	r3, [r7, #25]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d10a      	bne.n	8005dac <HAL_SD_Init+0x90>
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_SD_Init+0x86>
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005daa:	e00b      	b.n	8005dc4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d104      	bne.n	8005dbe <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dbc:	e002      	b.n	8005dc4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fe80 	bl	8006ad0 <HAL_SD_ConfigWideBusOperation>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e026      	b.n	8005e28 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005dda:	f7fb fd6d 	bl	80018b8 <HAL_GetTick>
 8005dde:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005de0:	e011      	b.n	8005e06 <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005de2:	f7fb fd69 	bl	80018b8 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d109      	bne.n	8005e06 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e010      	b.n	8005e28 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 ff78 	bl	8006cfc <HAL_SD_GetCardState>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d1e7      	bne.n	8005de2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3728      	adds	r7, #40	; 0x28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b08e      	sub	sp, #56	; 0x38
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005e48:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	f7fe fc70 	bl	8004734 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e54:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d109      	bne.n	8005e70 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e07f      	b.n	8005f70 <HAL_SD_InitCard+0x140>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	4a40      	ldr	r2, [pc, #256]	; (8005f78 <HAL_SD_InitCard+0x148>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d107      	bne.n	8005e9c <HAL_SD_InitCard+0x6c>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0210 	orr.w	r2, r2, #16
 8005e9a:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681d      	ldr	r5, [r3, #0]
 8005ea0:	466c      	mov	r4, sp
 8005ea2:	f107 0314 	add.w	r3, r7, #20
 8005ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f001 fe9f 	bl	8007bf8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 fee2 	bl	8007c88 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_SD_InitCard+0xa6>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <HAL_SD_InitCard+0xbc>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005edc:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <HAL_SD_InitCard+0x14c>)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fb fcf2 	bl	80018d0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fff3 	bl	8006ed8 <SD_PowerON>
 8005ef2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <HAL_SD_InitCard+0xe2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02e      	b.n	8005f70 <HAL_SD_InitCard+0x140>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 ff12 	bl	8006d3c <SD_InitCard>
 8005f18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_SD_InitCard+0x108>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01b      	b.n	8005f70 <HAL_SD_InitCard+0x140>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 ff47 	bl	8007dd4 <SDMMC_CmdBlockLength>
 8005f46:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <HAL_SD_InitCard+0x13e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a0b      	ldr	r2, [pc, #44]	; (8005f80 <HAL_SD_InitCard+0x150>)
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_SD_InitCard+0x140>
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	; 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bdb0      	pop	{r4, r5, r7, pc}
 8005f78:	014f8b59 	.word	0x014f8b59
 8005f7c:	00012110 	.word	0x00012110
 8005f80:	1fe00fff 	.word	0x1fe00fff

08005f84 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e018      	b.n	8005fc8 <HAL_SD_DeInit+0x44>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2203      	movs	r2, #3
 8005f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_SD_TRANSCEIVER != 0U)
  /* Deactivate the 1.8V Mode */
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d102      	bne.n	8005fac <HAL_SD_DeInit+0x28>
    {
      hsd->DriveTransceiver_1_8V_Callback = HAL_SD_DriveTransceiver_1_8V_Callback;
    }
    hsd->DriveTransceiver_1_8V_Callback(RESET);
#else
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f000 fb24 	bl	80065f4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 f825 	bl	8006ffc <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fb faac 	bl	8001510 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08c      	sub	sp, #48	; 0x30
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e08d      	b.n	8006114 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	f040 8086 	bne.w	8006112 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800600c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	429a      	cmp	r2, r3
 8006018:	d907      	bls.n	800602a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e074      	b.n	8006114 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2203      	movs	r2, #3
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	025a      	lsls	r2, r3, #9
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d002      	beq.n	8006056 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	025b      	lsls	r3, r3, #9
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006056:	f04f 33ff 	mov.w	r3, #4294967295
 800605a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	025b      	lsls	r3, r3, #9
 8006060:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006062:	2390      	movs	r3, #144	; 0x90
 8006064:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006066:	2302      	movs	r3, #2
 8006068:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800606a:	2300      	movs	r3, #0
 800606c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800606e:	2300      	movs	r3, #0
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f107 0210 	add.w	r2, r7, #16
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f001 fe7d 	bl	8007d7c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006090:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d90a      	bls.n	80060be <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2282      	movs	r2, #130	; 0x82
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fed3 	bl	8007e60 <SDMMC_CmdReadMultiBlock>
 80060ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80060bc:	e009      	b.n	80060d2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2281      	movs	r2, #129	; 0x81
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fea5 	bl	8007e1a <SDMMC_CmdReadSingleBlock>
 80060d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d012      	beq.n	80060fe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0f      	ldr	r2, [pc, #60]	; (800611c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e00a      	b.n	8006114 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800610c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e000      	b.n	8006114 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006112:	2302      	movs	r3, #2
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3730      	adds	r7, #48	; 0x30
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	1fe00fff 	.word	0x1fe00fff

08006120 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08c      	sub	sp, #48	; 0x30
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d107      	bne.n	8006148 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e08d      	b.n	8006264 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	f040 8086 	bne.w	8006262 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800615c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	429a      	cmp	r2, r3
 8006168:	d907      	bls.n	800617a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e074      	b.n	8006264 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2203      	movs	r2, #3
 800617e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	025a      	lsls	r2, r3, #9
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d002      	beq.n	80061a6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	025b      	lsls	r3, r3, #9
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	025b      	lsls	r3, r3, #9
 80061b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061b2:	2390      	movs	r3, #144	; 0x90
 80061b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f107 0210 	add.w	r2, r7, #16
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fdd5 	bl	8007d7c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d90a      	bls.n	800620e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	22a0      	movs	r2, #160	; 0xa0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fe71 	bl	8007eec <SDMMC_CmdWriteMultiBlock>
 800620a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800620c:	e009      	b.n	8006222 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2290      	movs	r2, #144	; 0x90
 8006212:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800621a:	4618      	mov	r0, r3
 800621c:	f001 fe43 	bl	8007ea6 <SDMMC_CmdWriteSingleBlock>
 8006220:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d012      	beq.n	800624e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a0f      	ldr	r2, [pc, #60]	; (800626c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	431a      	orrs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e00a      	b.n	8006264 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3730      	adds	r7, #48	; 0x30
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	1fe00fff 	.word	0x1fe00fff

08006270 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_SD_IRQHandler+0x2e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 f91c 	bl	80074d4 <SD_Read_IT>
 800629c:	e19a      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80ac 	beq.w	8006406 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b59      	ldr	r3, [pc, #356]	; (8006428 <HAL_SD_IRQHandler+0x1b8>)
 80062c4:	400b      	ands	r3, r1
 80062c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80062d6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d038      	beq.n	8006364 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <HAL_SD_IRQHandler+0x96>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d011      	beq.n	800632a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f001 fe12 	bl	8007f34 <SDMMC_CmdStopTransfer>
 8006310:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f95b 	bl	80065e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a3f      	ldr	r2, [pc, #252]	; (800642c <HAL_SD_IRQHandler+0x1bc>)
 8006330:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_SD_IRQHandler+0xe4>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f002 fbe5 	bl	8008b24 <HAL_SD_RxCpltCallback>
 800635a:	e13b      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f002 fbd3 	bl	8008b08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006362:	e137      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8132 	beq.w	80065d4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2200      	movs	r2, #0
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2200      	movs	r2, #0
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <HAL_SD_IRQHandler+0x12c>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d011      	beq.n	80063c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fdc7 	bl	8007f34 <SDMMC_CmdStopTransfer>
 80063a6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f910 	bl	80065e0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <HAL_SD_IRQHandler+0x172>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f002 fb90 	bl	8008b08 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d105      	bne.n	80063fe <HAL_SD_IRQHandler+0x18e>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80eb 	beq.w	80065d4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f002 fb90 	bl	8008b24 <HAL_SD_RxCpltCallback>
}
 8006404:	e0e6      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <HAL_SD_IRQHandler+0x1c0>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f89e 	bl	8007560 <SD_Write_IT>
 8006424:	e0d6      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
 8006426:	bf00      	nop
 8006428:	ffff3ec5 	.word	0xffff3ec5
 800642c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 809d 	beq.w	800657a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	f043 0202 	orr.w	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	f043 0208 	orr.w	r2, r3, #8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f043 0210 	orr.w	r2, r3, #16
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a4b      	ldr	r2, [pc, #300]	; (80065dc <HAL_SD_IRQHandler+0x36c>)
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80064be:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ce:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064de:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ee:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fd1d 	bl	8007f34 <SDMMC_CmdStopTransfer>
 80064fa:	4602      	mov	r2, r0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006514:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800651e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f851 	bl	80065e0 <HAL_SD_ErrorCallback>
}
 800653e:	e049      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b00      	cmp	r3, #0
 8006548:	d044      	beq.n	80065d4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	2b00      	cmp	r3, #0
 8006550:	d040      	beq.n	80065d4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006560:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f834 	bl	80065e0 <HAL_SD_ErrorCallback>
}
 8006578:	e02c      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d025      	beq.n	80065d4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10c      	bne.n	80065ba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 f840 	bl	8007630 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80065b0:	e010      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f828 	bl	8007608 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80065b8:	e00c      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f829 	bl	800761c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80065ca:	e003      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 f811 	bl	80075f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80065d2:	e7ff      	b.n	80065d4 <HAL_SD_IRQHandler+0x364>
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	18000f3a 	.word	0x18000f3a

080065e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661a:	0f9b      	lsrs	r3, r3, #30
 800661c:	b2da      	uxtb	r2, r3
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006626:	0e9b      	lsrs	r3, r3, #26
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	b2da      	uxtb	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0303 	and.w	r3, r3, #3
 8006640:	b2da      	uxtb	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	b2da      	uxtb	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b2da      	uxtb	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	b2da      	uxtb	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666c:	0d1b      	lsrs	r3, r3, #20
 800666e:	b29a      	uxth	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	b2da      	uxtb	r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668a:	0bdb      	lsrs	r3, r3, #15
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800669c:	0b9b      	lsrs	r3, r3, #14
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ae:	0b5b      	lsrs	r3, r3, #13
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c0:	0b1b      	lsrs	r3, r3, #12
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2200      	movs	r2, #0
 80066d2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d163      	bne.n	80067a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e0:	009a      	lsls	r2, r3, #2
 80066e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066e6:	4013      	ands	r3, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066ec:	0f92      	lsrs	r2, r2, #30
 80066ee:	431a      	orrs	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f8:	0edb      	lsrs	r3, r3, #27
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	b2da      	uxtb	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671c:	0d5b      	lsrs	r3, r3, #21
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	b2da      	uxtb	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800672e:	0c9b      	lsrs	r3, r3, #18
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006740:	0bdb      	lsrs	r3, r3, #15
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	b2da      	uxtb	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	7e1b      	ldrb	r3, [r3, #24]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	3302      	adds	r3, #2
 8006764:	2201      	movs	r2, #1
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800676e:	fb03 f202 	mul.w	r2, r3, r2
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	7a1b      	ldrb	r3, [r3, #8]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	2201      	movs	r2, #1
 8006782:	409a      	lsls	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006790:	0a52      	lsrs	r2, r2, #9
 8006792:	fb03 f202 	mul.w	r2, r3, r2
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a0:	659a      	str	r2, [r3, #88]	; 0x58
 80067a2:	e031      	b.n	8006808 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d11d      	bne.n	80067e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ba:	0c1b      	lsrs	r3, r3, #16
 80067bc:	431a      	orrs	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	3301      	adds	r3, #1
 80067c8:	029a      	lsls	r2, r3, #10
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	659a      	str	r2, [r3, #88]	; 0x58
 80067e6:	e00f      	b.n	8006808 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a58      	ldr	r2, [pc, #352]	; (8006950 <HAL_SD_GetCardCSD+0x344>)
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e09d      	b.n	8006944 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800680c:	0b9b      	lsrs	r3, r3, #14
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	b2da      	uxtb	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006826:	b2da      	uxtb	r2, r3
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006836:	b2da      	uxtb	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006840:	0fdb      	lsrs	r3, r3, #31
 8006842:	b2da      	uxtb	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	0f5b      	lsrs	r3, r3, #29
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	b2da      	uxtb	r2, r3
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685e:	0e9b      	lsrs	r3, r3, #26
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	b2da      	uxtb	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	0d9b      	lsrs	r3, r3, #22
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	b2da      	uxtb	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006882:	0d5b      	lsrs	r3, r3, #21
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b2:	0bdb      	lsrs	r3, r3, #15
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c6:	0b9b      	lsrs	r3, r3, #14
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	0b5b      	lsrs	r3, r3, #13
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ee:	0b1b      	lsrs	r3, r3, #12
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006902:	0a9b      	lsrs	r3, r3, #10
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	b2da      	uxtb	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006932:	b2da      	uxtb	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	1fe00fff 	.word	0x1fe00fff

08006954 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b094      	sub	sp, #80	; 0x50
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b03      	cmp	r3, #3
 800696e:	d101      	bne.n	8006974 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0a7      	b.n	8006ac4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006974:	f107 0308 	add.w	r3, r7, #8
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fb4c 	bl	8007018 <SD_SendSDStatus>
 8006980:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006984:	2b00      	cmp	r3, #0
 8006986:	d011      	beq.n	80069ac <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a4f      	ldr	r2, [pc, #316]	; (8006acc <HAL_SD_GetCardStatus+0x178>)
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80069aa:	e070      	b.n	8006a8e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	099b      	lsrs	r3, r3, #6
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	0e1b      	lsrs	r3, r3, #24
 80069dc:	b29b      	uxth	r3, r3
 80069de:	4313      	orrs	r3, r2
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	061a      	lsls	r2, r3, #24
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80069fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	0e1b      	lsrs	r3, r3, #24
 8006a02:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	0d1b      	lsrs	r3, r3, #20
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	0a9b      	lsrs	r3, r3, #10
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	091b      	lsrs	r3, r3, #4
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	0e1b      	lsrs	r3, r3, #24
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f99c 	bl	8007dd4 <SDMMC_CmdBlockLength>
 8006a9c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <HAL_SD_GetCardStatus+0x178>)
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006ac0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3750      	adds	r7, #80	; 0x50
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	1fe00fff 	.word	0x1fe00fff

08006ad0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ad0:	b5b0      	push	{r4, r5, r7, lr}
 8006ad2:	b090      	sub	sp, #64	; 0x40
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d02e      	beq.n	8006b4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af6:	d106      	bne.n	8006b06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
 8006b04:	e029      	b.n	8006b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b0c:	d10a      	bne.n	8006b24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fb7a 	bl	8007208 <SD_WideBus_Enable>
 8006b14:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
 8006b22:	e01a      	b.n	8006b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fbb7 	bl	800729e <SD_WideBus_Disable>
 8006b30:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b3e:	e00c      	b.n	8006b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b4c:	e005      	b.n	8006b5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a61      	ldr	r2, [pc, #388]	; (8006cec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b70:	e099      	b.n	8006ca6 <HAL_SD_ConfigWideBusOperation+0x1d6>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006b72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006b76:	f04f 0100 	mov.w	r1, #0
 8006b7a:	f7fd fddb 	bl	8004734 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8086 	beq.w	8006c94 <HAL_SD_ConfigWideBusOperation+0x1c4>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	4952      	ldr	r1, [pc, #328]	; (8006cf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006ba6:	fba1 1303 	umull	r1, r3, r1, r3
 8006baa:	0e1b      	lsrs	r3, r3, #24
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d303      	bcc.n	8006bb8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e05a      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc0:	d103      	bne.n	8006bca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e051      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd2:	d126      	bne.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10e      	bne.n	8006bfa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	4a45      	ldr	r2, [pc, #276]	; (8006cf4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d906      	bls.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	0e5b      	lsrs	r3, r3, #25
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e03d      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e039      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c06:	4a3b      	ldr	r2, [pc, #236]	; (8006cf4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d906      	bls.n	8006c1a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	0e5b      	lsrs	r3, r3, #25
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	e029      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e025      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10e      	bne.n	8006c48 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	4a32      	ldr	r2, [pc, #200]	; (8006cf8 <HAL_SD_ConfigWideBusOperation+0x228>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d906      	bls.n	8006c40 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	4a2e      	ldr	r2, [pc, #184]	; (8006cf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	0e1b      	lsrs	r3, r3, #24
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e016      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	e012      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c54:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <HAL_SD_ConfigWideBusOperation+0x228>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d906      	bls.n	8006c68 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	4a24      	ldr	r2, [pc, #144]	; (8006cf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0e1b      	lsrs	r3, r3, #24
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	e002      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681d      	ldr	r5, [r3, #0]
 8006c78:	466c      	mov	r4, sp
 8006c7a:	f107 0318 	add.w	r3, r7, #24
 8006c7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c86:	f107 030c 	add.w	r3, r7, #12
 8006c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 ffb3 	bl	8007bf8 <SDMMC_Init>
 8006c92:	e008      	b.n	8006ca6 <HAL_SD_ConfigWideBusOperation+0x1d6>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f890 	bl	8007dd4 <SDMMC_CmdBlockLength>
 8006cb4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <HAL_SD_ConfigWideBusOperation+0x206>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3730      	adds	r7, #48	; 0x30
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	1fe00fff 	.word	0x1fe00fff
 8006cf0:	55e63b89 	.word	0x55e63b89
 8006cf4:	02faf080 	.word	0x02faf080
 8006cf8:	017d7840 	.word	0x017d7840

08006cfc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d08:	f107 030c 	add.w	r3, r7, #12
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa52 	bl	80071b8 <SD_SendStatus>
 8006d14:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	0a5b      	lsrs	r3, r3, #9
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006d32:	693b      	ldr	r3, [r7, #16]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b090      	sub	sp, #64	; 0x40
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006d48:	f7fa fdb6 	bl	80018b8 <HAL_GetTick>
 8006d4c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 ffba 	bl	8007ccc <SDMMC_GetPowerState>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d62:	e0b5      	b.n	8006ed0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d02e      	beq.n	8006dca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fa04 	bl	800817e <SDMMC_CmdSendCID>
 8006d76:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <SD_InitCard+0x46>
    {
      return errorstate;
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	e0a6      	b.n	8006ed0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 ffe4 	bl	8007d56 <SDMMC_GetResponse>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2104      	movs	r1, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 ffdb 	bl	8007d56 <SDMMC_GetResponse>
 8006da0:	4602      	mov	r2, r0
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2108      	movs	r1, #8
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 ffd2 	bl	8007d56 <SDMMC_GetResponse>
 8006db2:	4602      	mov	r2, r0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	210c      	movs	r1, #12
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 ffc9 	bl	8007d56 <SDMMC_GetResponse>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d01d      	beq.n	8006e0e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006dd2:	e019      	b.n	8006e08 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f107 020a 	add.w	r2, r7, #10
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 fa0c 	bl	80081fc <SDMMC_CmdSetRelAdd>
 8006de4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	e06f      	b.n	8006ed0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006df0:	f7fa fd62 	bl	80018b8 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3287 	movw	r2, #4999	; 0x1387
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d902      	bls.n	8006e08 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006e02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e06:	e063      	b.n	8006ed0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006e08:	897b      	ldrh	r3, [r7, #10]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0e2      	beq.n	8006dd4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d036      	beq.n	8006e84 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006e16:	897b      	ldrh	r3, [r7, #10]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f001 f9c6 	bl	80081bc <SDMMC_CmdSendCSD>
 8006e30:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SD_InitCard+0x100>
    {
      return errorstate;
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	e049      	b.n	8006ed0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 ff87 	bl	8007d56 <SDMMC_GetResponse>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2104      	movs	r1, #4
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 ff7e 	bl	8007d56 <SDMMC_GetResponse>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2108      	movs	r1, #8
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 ff75 	bl	8007d56 <SDMMC_GetResponse>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	210c      	movs	r1, #12
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 ff6c 	bl	8007d56 <SDMMC_GetResponse>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2104      	movs	r1, #4
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 ff63 	bl	8007d56 <SDMMC_GetResponse>
 8006e90:	4603      	mov	r3, r0
 8006e92:	0d1a      	lsrs	r2, r3, #20
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff fbb4 	bl	800660c <HAL_SD_GetCardCSD>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006eae:	e00f      	b.n	8006ed0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb8:	041b      	lsls	r3, r3, #16
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f001 f875 	bl	8007fac <SDMMC_CmdSelDesel>
 8006ec2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <SD_InitCard+0x192>
  {
    return errorstate;
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	e000      	b.n	8006ed0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3740      	adds	r7, #64	; 0x40
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8006eec:	f7fa fce4 	bl	80018b8 <HAL_GetTick>
 8006ef0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 f87b 	bl	8007ff2 <SDMMC_CmdGoIdleState>
 8006efc:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <SD_PowerON+0x30>
  {
    return errorstate;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	e072      	b.n	8006fee <SD_PowerON+0x116>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 f88e 	bl	800802e <SDMMC_CmdOperCond>
 8006f12:	6138      	str	r0, [r7, #16]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	d10d      	bne.n	8006f38 <SD_PowerON+0x60>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f863 	bl	8007ff2 <SDMMC_CmdGoIdleState>
 8006f2c:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <SD_PowerON+0x66>
    {
      return errorstate;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	e05a      	b.n	8006fee <SD_PowerON+0x116>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d137      	bne.n	8006fb6 <SD_PowerON+0xde>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 f88e 	bl	800806e <SDMMC_CmdAppCommand>
 8006f52:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d02d      	beq.n	8006fb6 <SD_PowerON+0xde>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f5e:	e046      	b.n	8006fee <SD_PowerON+0x116>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 f881 	bl	800806e <SDMMC_CmdAppCommand>
 8006f6c:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <SD_PowerON+0xa0>
    {
      return errorstate;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	e03a      	b.n	8006fee <SD_PowerON+0x116>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	491e      	ldr	r1, [pc, #120]	; (8006ff8 <SD_PowerON+0x120>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f898 	bl	80080b4 <SDMMC_CmdAppOperCommand>
 8006f84:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SD_PowerON+0xba>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f90:	e02d      	b.n	8006fee <SD_PowerON+0x116>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fedc 	bl	8007d56 <SDMMC_GetResponse>
 8006f9e:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	0fdb      	lsrs	r3, r3, #31
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <SD_PowerON+0xd4>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <SD_PowerON+0xd6>
 8006fac:	2300      	movs	r3, #0
 8006fae:	61bb      	str	r3, [r7, #24]

    count++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d802      	bhi.n	8006fc6 <SD_PowerON+0xee>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0cc      	beq.n	8006f60 <SD_PowerON+0x88>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d902      	bls.n	8006fd6 <SD_PowerON+0xfe>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fd4:	e00b      	b.n	8006fee <SD_PowerON+0x116>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <SD_PowerON+0x114>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	c1100000 	.word	0xc1100000

08006ffc <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fe4e 	bl	8007caa <SDMMC_PowerState_OFF>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007022:	f7fa fc49 	bl	80018b8 <HAL_GetTick>
 8007026:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fe8f 	bl	8007d56 <SDMMC_GetResponse>
 8007038:	4603      	mov	r3, r0
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007042:	d102      	bne.n	800704a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007048:	e0b0      	b.n	80071ac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2140      	movs	r1, #64	; 0x40
 8007050:	4618      	mov	r0, r3
 8007052:	f000 febf 	bl	8007dd4 <SDMMC_CmdBlockLength>
 8007056:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	e0a0      	b.n	80071ac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f000 fff9 	bl	800806e <SDMMC_CmdAppCommand>
 800707c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	e08d      	b.n	80071ac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800709a:	2360      	movs	r3, #96	; 0x60
 800709c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800709e:	2302      	movs	r3, #2
 80070a0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f107 0208 	add.w	r2, r7, #8
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe61 	bl	8007d7c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 f8e1 	bl	8008286 <SDMMC_CmdStatusRegister>
 80070c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d02b      	beq.n	8007124 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	e069      	b.n	80071ac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d013      	beq.n	800710e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ea:	e00d      	b.n	8007108 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fdab 	bl	8007c4c <SDMMC_ReadFIFO>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	601a      	str	r2, [r3, #0]
        pData++;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	3304      	adds	r3, #4
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	3301      	adds	r3, #1
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2b07      	cmp	r3, #7
 800710c:	d9ee      	bls.n	80070ec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800710e:	f7fa fbd3 	bl	80018b8 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d102      	bne.n	8007124 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800711e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007122:	e043      	b.n	80071ac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0d2      	beq.n	80070d8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007140:	2308      	movs	r3, #8
 8007142:	e033      	b.n	80071ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007152:	2302      	movs	r3, #2
 8007154:	e02a      	b.n	80071ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007164:	2320      	movs	r3, #32
 8007166:	e021      	b.n	80071ac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fd6d 	bl	8007c4c <SDMMC_ReadFIFO>
 8007172:	4602      	mov	r2, r0
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	601a      	str	r2, [r3, #0]
    pData++;
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	3304      	adds	r3, #4
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800717e:	f7fa fb9b 	bl	80018b8 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d102      	bne.n	8007194 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800718e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007192:	e00b      	b.n	80071ac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e2      	bne.n	8007168 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a03      	ldr	r2, [pc, #12]	; (80071b4 <SD_SendSDStatus+0x19c>)
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3730      	adds	r7, #48	; 0x30
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	18000f3a 	.word	0x18000f3a

080071b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071cc:	e018      	b.n	8007200 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f001 f830 	bl	8008240 <SDMMC_CmdSendStatus>
 80071e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	e009      	b.n	8007200 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2100      	movs	r1, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fdaf 	bl	8007d56 <SDMMC_GetResponse>
 80071f8:	4602      	mov	r2, r0
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fd99 	bl	8007d56 <SDMMC_GetResponse>
 8007224:	4603      	mov	r3, r0
 8007226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800722e:	d102      	bne.n	8007236 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007234:	e02f      	b.n	8007296 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007236:	f107 030c 	add.w	r3, r7, #12
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f879 	bl	8007334 <SD_FindSCR>
 8007242:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	e023      	b.n	8007296 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01c      	beq.n	8007292 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f000 ff02 	bl	800806e <SDMMC_CmdAppCommand>
 800726a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	e00f      	b.n	8007296 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2102      	movs	r1, #2
 800727c:	4618      	mov	r0, r3
 800727e:	f000 ff39 	bl	80080f4 <SDMMC_CmdBusWidth>
 8007282:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	e003      	b.n	8007296 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800728e:	2300      	movs	r3, #0
 8007290:	e001      	b.n	8007296 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007292:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2100      	movs	r1, #0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fd4e 	bl	8007d56 <SDMMC_GetResponse>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072c4:	d102      	bne.n	80072cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072ca:	e02f      	b.n	800732c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072cc:	f107 030c 	add.w	r3, r7, #12
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f82e 	bl	8007334 <SD_FindSCR>
 80072d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	e023      	b.n	800732c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01c      	beq.n	8007328 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	4619      	mov	r1, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	f000 feb7 	bl	800806e <SDMMC_CmdAppCommand>
 8007300:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	e00f      	b.n	800732c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f000 feee 	bl	80080f4 <SDMMC_CmdBusWidth>
 8007318:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	e003      	b.n	800732c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007324:	2300      	movs	r3, #0
 8007326:	e001      	b.n	800732c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007328:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	; 0x38
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800733e:	f7fa fabb 	bl	80018b8 <HAL_GetTick>
 8007342:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2108      	movs	r1, #8
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fd3a 	bl	8007dd4 <SDMMC_CmdBlockLength>
 8007360:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	e0ad      	b.n	80074c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f000 fe78 	bl	800806e <SDMMC_CmdAppCommand>
 800737e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	e09e      	b.n	80074c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007390:	2308      	movs	r3, #8
 8007392:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007394:	2330      	movs	r3, #48	; 0x30
 8007396:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007398:	2302      	movs	r3, #2
 800739a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800739c:	2300      	movs	r3, #0
 800739e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f107 0210 	add.w	r2, r7, #16
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fce4 	bl	8007d7c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 febe 	bl	800813a <SDMMC_CmdSendSCR>
 80073be:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d027      	beq.n	8007416 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	e07e      	b.n	80074c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d113      	bne.n	8007400 <SD_FindSCR+0xcc>
 80073d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d110      	bne.n	8007400 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fc32 	bl	8007c4c <SDMMC_ReadFIFO>
 80073e8:	4603      	mov	r3, r0
 80073ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fc2b 	bl	8007c4c <SDMMC_ReadFIFO>
 80073f6:	4603      	mov	r3, r0
 80073f8:	60fb      	str	r3, [r7, #12]
      index++;
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	3301      	adds	r3, #1
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007400:	f7fa fa5a 	bl	80018b8 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d102      	bne.n	8007416 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007414:	e058      	b.n	80074c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800741c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0d1      	beq.n	80073ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2208      	movs	r2, #8
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800743c:	2308      	movs	r3, #8
 800743e:	e043      	b.n	80074c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2202      	movs	r2, #2
 8007454:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007456:	2302      	movs	r3, #2
 8007458:	e036      	b.n	80074c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2220      	movs	r2, #32
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007470:	2320      	movs	r3, #32
 8007472:	e029      	b.n	80074c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <SD_FindSCR+0x19c>)
 800747a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	061a      	lsls	r2, r3, #24
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007488:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	0a1b      	lsrs	r3, r3, #8
 800748e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007492:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	0e1b      	lsrs	r3, r3, #24
 8007498:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	601a      	str	r2, [r3, #0]
    scr++;
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	3304      	adds	r3, #4
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	061a      	lsls	r2, r3, #24
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80074ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	0e1b      	lsrs	r3, r3, #24
 80074c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3738      	adds	r7, #56	; 0x38
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	18000f3a 	.word	0x18000f3a

080074d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e6:	2b1f      	cmp	r3, #31
 80074e8:	d936      	bls.n	8007558 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e027      	b.n	8007540 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fba9 	bl	8007c4c <SDMMC_ReadFIFO>
 80074fa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3301      	adds	r3, #1
 8007508:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	0a1b      	lsrs	r3, r3, #8
 800750e:	b2da      	uxtb	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3301      	adds	r3, #1
 8007518:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	0c1b      	lsrs	r3, r3, #16
 800751e:	b2da      	uxtb	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	3301      	adds	r3, #1
 8007528:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	0e1b      	lsrs	r3, r3, #24
 800752e:	b2da      	uxtb	r2, r3
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3301      	adds	r3, #1
 8007538:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	3301      	adds	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b07      	cmp	r3, #7
 8007544:	d9d4      	bls.n	80074f0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	f1a3 0220 	sub.w	r2, r3, #32
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007558:	bf00      	nop
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2b1f      	cmp	r3, #31
 8007574:	d93a      	bls.n	80075ec <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	e02b      	b.n	80075d4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	021a      	lsls	r2, r3, #8
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3301      	adds	r3, #1
 8007598:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	041a      	lsls	r2, r3, #16
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	061a      	lsls	r2, r3, #24
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3301      	adds	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f107 020c 	add.w	r2, r7, #12
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fb4c 	bl	8007c66 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	3301      	adds	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b07      	cmp	r3, #7
 80075d8:	d9d0      	bls.n	800757c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	f1a3 0220 	sub.w	r2, r3, #32
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80075ec:	bf00      	nop
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e049      	b.n	80076ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f841 	bl	80076f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f000 fa00 	bl	8007a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d001      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e054      	b.n	80077ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a26      	ldr	r2, [pc, #152]	; (80077d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d01d      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <HAL_TIM_Base_Start_IT+0xe4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d115      	bne.n	80077b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <HAL_TIM_Base_Start_IT+0xec>)
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b06      	cmp	r3, #6
 8007798:	d015      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0xbe>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a0:	d011      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b2:	e008      	b.n	80077c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e000      	b.n	80077c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40001800 	.word	0x40001800
 80077f0:	40014000 	.word	0x40014000
 80077f4:	00010007 	.word	0x00010007

080077f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d122      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d11b      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0202 	mvn.w	r2, #2
 8007824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f905 	bl	8007a4a <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8f7 	bl	8007a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f908 	bl	8007a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b04      	cmp	r3, #4
 8007860:	d122      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d11b      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0204 	mvn.w	r2, #4
 8007878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8db 	bl	8007a4a <HAL_TIM_IC_CaptureCallback>
 8007894:	e005      	b.n	80078a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f8cd 	bl	8007a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f8de 	bl	8007a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d122      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d11b      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0208 	mvn.w	r2, #8
 80078cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f8b1 	bl	8007a4a <HAL_TIM_IC_CaptureCallback>
 80078e8:	e005      	b.n	80078f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8a3 	bl	8007a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8b4 	bl	8007a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d122      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b10      	cmp	r3, #16
 8007916:	d11b      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0210 	mvn.w	r2, #16
 8007920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2208      	movs	r2, #8
 8007926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f887 	bl	8007a4a <HAL_TIM_IC_CaptureCallback>
 800793c:	e005      	b.n	800794a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f879 	bl	8007a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f88a 	bl	8007a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10e      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b01      	cmp	r3, #1
 800796a:	d107      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0201 	mvn.w	r2, #1
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7f9 fcc4 	bl	8001304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f914 	bl	8007bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b6:	d10e      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d107      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f907 	bl	8007be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d10e      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f838 	bl	8007a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d10e      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d107      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f06f 0220 	mvn.w	r2, #32
 8007a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8c7 	bl	8007bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a40      	ldr	r2, [pc, #256]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa6:	d00f      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a3d      	ldr	r2, [pc, #244]	; (8007ba0 <TIM_Base_SetConfig+0x118>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a3c      	ldr	r2, [pc, #240]	; (8007ba4 <TIM_Base_SetConfig+0x11c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3b      	ldr	r2, [pc, #236]	; (8007ba8 <TIM_Base_SetConfig+0x120>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a3a      	ldr	r2, [pc, #232]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d108      	bne.n	8007ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a2f      	ldr	r2, [pc, #188]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01f      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae8:	d01b      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2c      	ldr	r2, [pc, #176]	; (8007ba0 <TIM_Base_SetConfig+0x118>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d017      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a2b      	ldr	r2, [pc, #172]	; (8007ba4 <TIM_Base_SetConfig+0x11c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2a      	ldr	r2, [pc, #168]	; (8007ba8 <TIM_Base_SetConfig+0x120>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00f      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a29      	ldr	r2, [pc, #164]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a28      	ldr	r2, [pc, #160]	; (8007bb0 <TIM_Base_SetConfig+0x128>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a27      	ldr	r2, [pc, #156]	; (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0x9a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a26      	ldr	r2, [pc, #152]	; (8007bb8 <TIM_Base_SetConfig+0x130>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d108      	bne.n	8007b34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00f      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a12      	ldr	r2, [pc, #72]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <TIM_Base_SetConfig+0x128>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a0f      	ldr	r2, [pc, #60]	; (8007bb8 <TIM_Base_SetConfig+0x130>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d103      	bne.n	8007b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	615a      	str	r2, [r3, #20]
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40010400 	.word	0x40010400
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800

08007bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	f107 001c 	add.w	r0, r7, #28
 8007c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007c0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007c10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007c12:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007c16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007c1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007c1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <SDMMC_Init+0x50>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	b004      	add	sp, #16
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	ffc02c00 	.word	0xffc02c00

08007c4c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f043 0203 	orr.w	r2, r3, #3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f023 0203 	bic.w	r2, r3, #3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007d06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007d0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007d12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <SDMMC_SendCommand+0x50>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	fffee0c0 	.word	0xfffee0c0

08007d3c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	b2db      	uxtb	r3, r3
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3314      	adds	r3, #20
 8007d64:	461a      	mov	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	4413      	add	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007da2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007da8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007dae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0

}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007de2:	2310      	movs	r3, #16
 8007de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007df4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007df6:	f107 0308 	add.w	r3, r7, #8
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff ff73 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e06:	2110      	movs	r1, #16
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa5f 	bl	80082cc <SDMMC_GetCmdResp1>
 8007e0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e10:	69fb      	ldr	r3, [r7, #28]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b088      	sub	sp, #32
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007e28:	2311      	movs	r3, #17
 8007e2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e3c:	f107 0308 	add.w	r3, r7, #8
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff ff50 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4c:	2111      	movs	r1, #17
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa3c 	bl	80082cc <SDMMC_GetCmdResp1>
 8007e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e56:	69fb      	ldr	r3, [r7, #28]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007e6e:	2312      	movs	r3, #18
 8007e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e82:	f107 0308 	add.w	r3, r7, #8
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff2d 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e92:	2112      	movs	r1, #18
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa19 	bl	80082cc <SDMMC_GetCmdResp1>
 8007e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b088      	sub	sp, #32
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007eb4:	2318      	movs	r3, #24
 8007eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ec8:	f107 0308 	add.w	r3, r7, #8
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff ff0a 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed8:	2118      	movs	r1, #24
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9f6 	bl	80082cc <SDMMC_GetCmdResp1>
 8007ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007efa:	2319      	movs	r3, #25
 8007efc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff fee7 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1e:	2119      	movs	r1, #25
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f9d3 	bl	80082cc <SDMMC_GetCmdResp1>
 8007f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f28:	69fb      	ldr	r3, [r7, #28]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007f40:	230c      	movs	r3, #12
 8007f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f52:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f6c:	f107 0308 	add.w	r3, r7, #8
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff feb8 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007f78:	4a0b      	ldr	r2, [pc, #44]	; (8007fa8 <SDMMC_CmdStopTransfer+0x74>)
 8007f7a:	210c      	movs	r1, #12
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9a5 	bl	80082cc <SDMMC_GetCmdResp1>
 8007f82:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f96:	d101      	bne.n	8007f9c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	05f5e100 	.word	0x05f5e100

08007fac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007fba:	2307      	movs	r3, #7
 8007fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fce:	f107 0308 	add.w	r3, r7, #8
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff fe87 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fde:	2107      	movs	r1, #7
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f973 	bl	80082cc <SDMMC_GetCmdResp1>
 8007fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b088      	sub	sp, #32
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008002:	2300      	movs	r3, #0
 8008004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800800a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800800e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fe66 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fb97 	bl	8008750 <SDMMC_GetCmdError>
 8008022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008024:	69fb      	ldr	r3, [r7, #28]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b088      	sub	sp, #32
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008036:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800803a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800803c:	2308      	movs	r3, #8
 800803e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800804a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800804e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fe46 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb29 	bl	80086b4 <SDMMC_GetCmdResp7>
 8008062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008064:	69fb      	ldr	r3, [r7, #28]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800807c:	2337      	movs	r3, #55	; 0x37
 800807e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800808a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800808e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008090:	f107 0308 	add.w	r3, r7, #8
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fe26 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800809c:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a0:	2137      	movs	r1, #55	; 0x37
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f912 	bl	80082cc <SDMMC_GetCmdResp1>
 80080a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080aa:	69fb      	ldr	r3, [r7, #28]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80080c2:	2329      	movs	r3, #41	; 0x29
 80080c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080d6:	f107 0308 	add.w	r3, r7, #8
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fe03 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa2e 	bl	8008544 <SDMMC_GetCmdResp3>
 80080e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ea:	69fb      	ldr	r3, [r7, #28]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3720      	adds	r7, #32
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008102:	2306      	movs	r3, #6
 8008104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800810a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008114:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fde3 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008122:	f241 3288 	movw	r2, #5000	; 0x1388
 8008126:	2106      	movs	r1, #6
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f8cf 	bl	80082cc <SDMMC_GetCmdResp1>
 800812e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008130:	69fb      	ldr	r3, [r7, #28]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b088      	sub	sp, #32
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008146:	2333      	movs	r3, #51	; 0x33
 8008148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800814a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800814e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800815a:	f107 0308 	add.w	r3, r7, #8
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fdc1 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008166:	f241 3288 	movw	r2, #5000	; 0x1388
 800816a:	2133      	movs	r1, #51	; 0x33
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f8ad 	bl	80082cc <SDMMC_GetCmdResp1>
 8008172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008174:	69fb      	ldr	r3, [r7, #28]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b088      	sub	sp, #32
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800818a:	2302      	movs	r3, #2
 800818c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800818e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800819c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fd9f 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f980 	bl	80084b0 <SDMMC_GetCmdResp2>
 80081b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081b2:	69fb      	ldr	r3, [r7, #28]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80081ca:	2309      	movs	r3, #9
 80081cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80081ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80081d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081de:	f107 0308 	add.w	r3, r7, #8
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fd7f 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f960 	bl	80084b0 <SDMMC_GetCmdResp2>
 80081f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081f2:	69fb      	ldr	r3, [r7, #28]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800820a:	2303      	movs	r3, #3
 800820c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800820e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800821c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800821e:	f107 0308 	add.w	r3, r7, #8
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff fd5f 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	2103      	movs	r1, #3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f9c8 	bl	80085c4 <SDMMC_GetCmdResp6>
 8008234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008236:	69fb      	ldr	r3, [r7, #28]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800824e:	230d      	movs	r3, #13
 8008250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800825c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff fd3d 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800826e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008272:	210d      	movs	r1, #13
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f829 	bl	80082cc <SDMMC_GetCmdResp1>
 800827a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800827c:	69fb      	ldr	r3, [r7, #28]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b088      	sub	sp, #32
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008292:	230d      	movs	r3, #13
 8008294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800829a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a6:	f107 0308 	add.w	r3, r7, #8
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff fd1b 	bl	8007ce8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	210d      	movs	r1, #13
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f807 	bl	80082cc <SDMMC_GetCmdResp1>
 80082be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082c0:	69fb      	ldr	r3, [r7, #28]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	460b      	mov	r3, r1
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80082da:	4b70      	ldr	r3, [pc, #448]	; (800849c <SDMMC_GetCmdResp1+0x1d0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a70      	ldr	r2, [pc, #448]	; (80084a0 <SDMMC_GetCmdResp1+0x1d4>)
 80082e0:	fba2 2303 	umull	r2, r3, r2, r3
 80082e4:	0a5a      	lsrs	r2, r3, #9
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	fb02 f303 	mul.w	r3, r2, r3
 80082ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	1e5a      	subs	r2, r3, #1
 80082f2:	61fa      	str	r2, [r7, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082fc:	e0c9      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008302:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4b67      	ldr	r3, [pc, #412]	; (80084a4 <SDMMC_GetCmdResp1+0x1d8>)
 8008308:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0ef      	beq.n	80082ee <SDMMC_GetCmdResp1+0x22>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ea      	bne.n	80082ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2204      	movs	r2, #4
 8008328:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800832a:	2304      	movs	r3, #4
 800832c:	e0b1      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008340:	2301      	movs	r3, #1
 8008342:	e0a6      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a58      	ldr	r2, [pc, #352]	; (80084a8 <SDMMC_GetCmdResp1+0x1dc>)
 8008348:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff fcf6 	bl	8007d3c <SDMMC_GetCommandResponse>
 8008350:	4603      	mov	r3, r0
 8008352:	461a      	mov	r2, r3
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	4293      	cmp	r3, r2
 8008358:	d001      	beq.n	800835e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800835a:	2301      	movs	r3, #1
 800835c:	e099      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff fcf8 	bl	8007d56 <SDMMC_GetResponse>
 8008366:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4b50      	ldr	r3, [pc, #320]	; (80084ac <SDMMC_GetCmdResp1+0x1e0>)
 800836c:	4013      	ands	r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008372:	2300      	movs	r3, #0
 8008374:	e08d      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da02      	bge.n	8008382 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800837c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008380:	e087      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800838c:	2340      	movs	r3, #64	; 0x40
 800838e:	e080      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800839a:	2380      	movs	r3, #128	; 0x80
 800839c:	e079      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80083a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ac:	e071      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80083b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083bc:	e069      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80083c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083cc:	e061      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80083d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083dc:	e059      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80083e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ec:	e051      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083fc:	e049      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800840c:	e041      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841c:	e039      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800842c:	e031      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008438:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800843c:	e029      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800844c:	e021      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008458:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800845c:	e019      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008468:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800846c:	e011      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008478:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800847c:	e009      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f003 0308 	and.w	r3, r3, #8
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008488:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800848c:	e001      	b.n	8008492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800848e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008492:	4618      	mov	r0, r3
 8008494:	3720      	adds	r7, #32
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	24000000 	.word	0x24000000
 80084a0:	10624dd3 	.word	0x10624dd3
 80084a4:	00200045 	.word	0x00200045
 80084a8:	002000c5 	.word	0x002000c5
 80084ac:	fdffe008 	.word	0xfdffe008

080084b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <SDMMC_GetCmdResp2+0x88>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <SDMMC_GetCmdResp2+0x8c>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	0a5b      	lsrs	r3, r3, #9
 80084c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1e5a      	subs	r2, r3, #1
 80084d2:	60fa      	str	r2, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084dc:	e026      	b.n	800852c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0ef      	beq.n	80084ce <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1ea      	bne.n	80084ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2204      	movs	r2, #4
 8008508:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800850a:	2304      	movs	r3, #4
 800850c:	e00e      	b.n	800852c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d004      	beq.n	8008524 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008520:	2301      	movs	r3, #1
 8008522:	e003      	b.n	800852c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a06      	ldr	r2, [pc, #24]	; (8008540 <SDMMC_GetCmdResp2+0x90>)
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	24000000 	.word	0x24000000
 800853c:	10624dd3 	.word	0x10624dd3
 8008540:	002000c5 	.word	0x002000c5

08008544 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800854c:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <SDMMC_GetCmdResp3+0x74>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1a      	ldr	r2, [pc, #104]	; (80085bc <SDMMC_GetCmdResp3+0x78>)
 8008552:	fba2 2303 	umull	r2, r3, r2, r3
 8008556:	0a5b      	lsrs	r3, r3, #9
 8008558:	f241 3288 	movw	r2, #5000	; 0x1388
 800855c:	fb02 f303 	mul.w	r3, r2, r3
 8008560:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	1e5a      	subs	r2, r3, #1
 8008566:	60fa      	str	r2, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800856c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008570:	e01b      	b.n	80085aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0ef      	beq.n	8008562 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ea      	bne.n	8008562 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2204      	movs	r2, #4
 800859c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800859e:	2304      	movs	r3, #4
 80085a0:	e003      	b.n	80085aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a06      	ldr	r2, [pc, #24]	; (80085c0 <SDMMC_GetCmdResp3+0x7c>)
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	24000000 	.word	0x24000000
 80085bc:	10624dd3 	.word	0x10624dd3
 80085c0:	002000c5 	.word	0x002000c5

080085c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	460b      	mov	r3, r1
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80085d2:	4b35      	ldr	r3, [pc, #212]	; (80086a8 <SDMMC_GetCmdResp6+0xe4>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a35      	ldr	r2, [pc, #212]	; (80086ac <SDMMC_GetCmdResp6+0xe8>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	0a5b      	lsrs	r3, r3, #9
 80085de:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	1e5a      	subs	r2, r3, #1
 80085ec:	61fa      	str	r2, [r7, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085f6:	e052      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0ef      	beq.n	80085e8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1ea      	bne.n	80085e8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2204      	movs	r2, #4
 8008622:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008624:	2304      	movs	r3, #4
 8008626:	e03a      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800863a:	2301      	movs	r3, #1
 800863c:	e02f      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fb7c 	bl	8007d3c <SDMMC_GetCommandResponse>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	4293      	cmp	r3, r2
 800864c:	d001      	beq.n	8008652 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800864e:	2301      	movs	r3, #1
 8008650:	e025      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4a16      	ldr	r2, [pc, #88]	; (80086b0 <SDMMC_GetCmdResp6+0xec>)
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fb7b 	bl	8007d56 <SDMMC_GetResponse>
 8008660:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008676:	2300      	movs	r3, #0
 8008678:	e011      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008688:	e009      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008698:	e001      	b.n	800869e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800869a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	24000000 	.word	0x24000000
 80086ac:	10624dd3 	.word	0x10624dd3
 80086b0:	002000c5 	.word	0x002000c5

080086b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80086bc:	4b22      	ldr	r3, [pc, #136]	; (8008748 <SDMMC_GetCmdResp7+0x94>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a22      	ldr	r2, [pc, #136]	; (800874c <SDMMC_GetCmdResp7+0x98>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	0a5b      	lsrs	r3, r3, #9
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	fb02 f303 	mul.w	r3, r2, r3
 80086d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	1e5a      	subs	r2, r3, #1
 80086d6:	60fa      	str	r2, [r7, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086e0:	e02c      	b.n	800873c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0ef      	beq.n	80086d2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1ea      	bne.n	80086d2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2204      	movs	r2, #4
 800870c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800870e:	2304      	movs	r3, #4
 8008710:	e014      	b.n	800873c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008724:	2301      	movs	r3, #1
 8008726:	e009      	b.n	800873c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2240      	movs	r2, #64	; 0x40
 8008738:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800873a:	2300      	movs	r3, #0

}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	24000000 	.word	0x24000000
 800874c:	10624dd3 	.word	0x10624dd3

08008750 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008758:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <SDMMC_GetCmdError+0x50>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <SDMMC_GetCmdError+0x54>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	0a5b      	lsrs	r3, r3, #9
 8008764:	f241 3288 	movw	r2, #5000	; 0x1388
 8008768:	fb02 f303 	mul.w	r3, r2, r3
 800876c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1e5a      	subs	r2, r3, #1
 8008772:	60fa      	str	r2, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800877c:	e009      	b.n	8008792 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f1      	beq.n	800876e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a06      	ldr	r2, [pc, #24]	; (80087a8 <SDMMC_GetCmdError+0x58>)
 800878e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	24000000 	.word	0x24000000
 80087a4:	10624dd3 	.word	0x10624dd3
 80087a8:	002000c5 	.word	0x002000c5

080087ac <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
*/
UINT MX_FileX_Init(VOID *memory_ptr)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08e      	sub	sp, #56	; 0x38
 80087b0:	af08      	add	r7, sp, #32
 80087b2:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 80087b4:	2300      	movs	r3, #0
 80087b6:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	613b      	str	r3, [r7, #16]
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 80087bc:	f107 010c 	add.w	r1, r7, #12
 80087c0:	2300      	movs	r3, #0
 80087c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c6:	6938      	ldr	r0, [r7, #16]
 80087c8:	f00c f808 	bl	80147dc <_txe_byte_allocate>
 80087cc:	6178      	str	r0, [r7, #20]

/* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 80087d4:	2302      	movs	r3, #2
 80087d6:	e01d      	b.n	8008814 <MX_FileX_Init+0x68>
  }

/* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	22b0      	movs	r2, #176	; 0xb0
 80087dc:	9206      	str	r2, [sp, #24]
 80087de:	2201      	movs	r2, #1
 80087e0:	9205      	str	r2, [sp, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	9204      	str	r2, [sp, #16]
 80087e6:	220a      	movs	r2, #10
 80087e8:	9203      	str	r2, [sp, #12]
 80087ea:	220a      	movs	r2, #10
 80087ec:	9202      	str	r2, [sp, #8]
 80087ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f2:	9201      	str	r2, [sp, #4]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	4a08      	ldr	r2, [pc, #32]	; (800881c <MX_FileX_Init+0x70>)
 80087fa:	4909      	ldr	r1, [pc, #36]	; (8008820 <MX_FileX_Init+0x74>)
 80087fc:	4809      	ldr	r0, [pc, #36]	; (8008824 <MX_FileX_Init+0x78>)
 80087fe:	f00c fa35 	bl	8014c6c <_txe_thread_create>
 8008802:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

/* Check main thread creation */
  if (ret != FX_SUCCESS)
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 800880a:	230e      	movs	r3, #14
 800880c:	e002      	b.n	8008814 <MX_FileX_Init+0x68>
/* USER CODE BEGIN MX_FileX_Init */

/* USER CODE END MX_FileX_Init */

/* Initialize FileX.  */
  fx_system_initialize();
 800880e:	f006 ff23 	bl	800f658 <_fx_system_initialize>

/* USER CODE BEGIN MX_FileX_Init 1*/

/* USER CODE END MX_FileX_Init 1*/

  return ret;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	08008829 	.word	0x08008829
 8008820:	08014f04 	.word	0x08014f04
 8008824:	240009d4 	.word	0x240009d4

08008828 <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
*/
 void fx_app_thread_entry(ULONG thread_input)
 {
 8008828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800882c:	b09c      	sub	sp, #112	; 0x70
 800882e:	af04      	add	r7, sp, #16
 8008830:	6078      	str	r0, [r7, #4]

  UINT sd_status = FX_SUCCESS;
 8008832:	2300      	movs	r3, #0
 8008834:	65fb      	str	r3, [r7, #92]	; 0x5c
/* USER CODE BEGIN fx_app_thread_entry 0*/
  ULONG bytes_read;
  ULONG offset=48;
 8008836:	2330      	movs	r3, #48	; 0x30
 8008838:	64fb      	str	r3, [r7, #76]	; 0x4c
  int k =0;
 800883a:	2300      	movs	r3, #0
 800883c:	65bb      	str	r3, [r7, #88]	; 0x58
  int j=0;
 800883e:	2300      	movs	r3, #0
 8008840:	657b      	str	r3, [r7, #84]	; 0x54
  CHAR read_buffer[offset];
 8008842:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008844:	460b      	mov	r3, r1
 8008846:	3b01      	subs	r3, #1
 8008848:	64bb      	str	r3, [r7, #72]	; 0x48
 800884a:	2300      	movs	r3, #0
 800884c:	4688      	mov	r8, r1
 800884e:	4699      	mov	r9, r3
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800885c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008864:	2300      	movs	r3, #0
 8008866:	460c      	mov	r4, r1
 8008868:	461d      	mov	r5, r3
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	00eb      	lsls	r3, r5, #3
 8008874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008878:	00e2      	lsls	r2, r4, #3
 800887a:	1dcb      	adds	r3, r1, #7
 800887c:	08db      	lsrs	r3, r3, #3
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	ebad 0d03 	sub.w	sp, sp, r3
 8008884:	ab04      	add	r3, sp, #16
 8008886:	3300      	adds	r3, #0
 8008888:	647b      	str	r3, [r7, #68]	; 0x44
  CHAR* place = SRAM2_ADDR;
 800888a:	4b5e      	ldr	r3, [pc, #376]	; (8008a04 <fx_app_thread_entry+0x1dc>)
 800888c:	643b      	str	r3, [r7, #64]	; 0x40
  CHAR data[] = "69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ";
 800888e:	4b5e      	ldr	r3, [pc, #376]	; (8008a08 <fx_app_thread_entry+0x1e0>)
 8008890:	f107 0408 	add.w	r4, r7, #8
 8008894:	461d      	mov	r5, r3
 8008896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800889a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800889c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800889e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088a2:	682b      	ldr	r3, [r5, #0]
 80088a4:	7023      	strb	r3, [r4, #0]


/* USER CODE END fx_app_thread_entry 0*/

/* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 80088a6:	f242 43b8 	movw	r3, #9400	; 0x24b8
 80088aa:	9302      	str	r3, [sp, #8]
 80088ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	4b56      	ldr	r3, [pc, #344]	; (8008a0c <fx_app_thread_entry+0x1e4>)
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	4a55      	ldr	r2, [pc, #340]	; (8008a10 <fx_app_thread_entry+0x1e8>)
 80088ba:	4956      	ldr	r1, [pc, #344]	; (8008a14 <fx_app_thread_entry+0x1ec>)
 80088bc:	4856      	ldr	r0, [pc, #344]	; (8008a18 <fx_app_thread_entry+0x1f0>)
 80088be:	f009 facb 	bl	8011e58 <_fxe_media_open>
 80088c2:	65f8      	str	r0, [r7, #92]	; 0x5c

/* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 80088c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d000      	beq.n	80088cc <fx_app_thread_entry+0xa4>
  {
     /* USER CODE BEGIN SD DRIVER get info error */
    while(1);
 80088ca:	e7fe      	b.n	80088ca <fx_app_thread_entry+0xa2>
  }

/* USER CODE BEGIN fx_app_thread_entry 1*/

  /* Create a file called STM32.TXT in the root directory.  */
 sd_status =  fx_file_create(&sdio_disk, "STM32_123.TXT");
 80088cc:	4953      	ldr	r1, [pc, #332]	; (8008a1c <fx_app_thread_entry+0x1f4>)
 80088ce:	4852      	ldr	r0, [pc, #328]	; (8008a18 <fx_app_thread_entry+0x1f0>)
 80088d0:	f009 f920 	bl	8011b14 <_fxe_file_create>
 80088d4:	65f8      	str	r0, [r7, #92]	; 0x5c

 if (sd_status != FX_SUCCESS)
 80088d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <fx_app_thread_entry+0xbe>
 {
    if (sd_status != FX_ALREADY_CREATED)
 80088dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088de:	2b0b      	cmp	r3, #11
 80088e0:	d001      	beq.n	80088e6 <fx_app_thread_entry+0xbe>
    {
      Error_Handler();
 80088e2:	f7f8 fd21 	bl	8001328 <Error_Handler>
  }



  /* Open the test file.  */
  sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32_123.TXT", FX_OPEN_FOR_WRITE);
 80088e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2301      	movs	r3, #1
 80088ee:	4a4b      	ldr	r2, [pc, #300]	; (8008a1c <fx_app_thread_entry+0x1f4>)
 80088f0:	494b      	ldr	r1, [pc, #300]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 80088f2:	4849      	ldr	r0, [pc, #292]	; (8008a18 <fx_app_thread_entry+0x1f0>)
 80088f4:	f009 f93c 	bl	8011b70 <_fxe_file_open>
 80088f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  if (sd_status != FX_SUCCESS)
 80088fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <fx_app_thread_entry+0xdc>
 {
    Error_Handler();
 8008900:	f7f8 fd12 	bl	8001328 <Error_Handler>
  }

  sd_status =  fx_file_seek(&fx_file,48*4);
 8008904:	21c0      	movs	r1, #192	; 0xc0
 8008906:	4846      	ldr	r0, [pc, #280]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 8008908:	f009 f9ec 	bl	8011ce4 <_fxe_file_seek>
 800890c:	65f8      	str	r0, [r7, #92]	; 0x5c

 if (sd_status != FX_SUCCESS)
 800890e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <fx_app_thread_entry+0xf0>
 {
    Error_Handler();
 8008914:	f7f8 fd08 	bl	8001328 <Error_Handler>
 }

  sd_status =  fx_file_write(&fx_file, data, sizeof(data));
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	2231      	movs	r2, #49	; 0x31
 800891e:	4619      	mov	r1, r3
 8008920:	483f      	ldr	r0, [pc, #252]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 8008922:	f009 fa0d 	bl	8011d40 <_fxe_file_write>
 8008926:	65f8      	str	r0, [r7, #92]	; 0x5c

  if (sd_status != FX_SUCCESS)
 8008928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <fx_app_thread_entry+0x10a>
  {
    Error_Handler();
 800892e:	f7f8 fcfb 	bl	8001328 <Error_Handler>
  }

  sd_status =  fx_file_close(&fx_file);
 8008932:	483b      	ldr	r0, [pc, #236]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 8008934:	f009 f8c2 	bl	8011abc <_fxe_file_close>
 8008938:	65f8      	str	r0, [r7, #92]	; 0x5c

  if (sd_status != FX_SUCCESS)
 800893a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <fx_app_thread_entry+0x11c>
  {
    Error_Handler();
 8008940:	f7f8 fcf2 	bl	8001328 <Error_Handler>
  }

  sd_status = fx_media_flush(&sdio_disk);
 8008944:	4834      	ldr	r0, [pc, #208]	; (8008a18 <fx_app_thread_entry+0x1f0>)
 8008946:	f009 fa5b 	bl	8011e00 <_fxe_media_flush>
 800894a:	65f8      	str	r0, [r7, #92]	; 0x5c

 if (sd_status != FX_SUCCESS)
 800894c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <fx_app_thread_entry+0x12e>
  {
   Error_Handler();
 8008952:	f7f8 fce9 	bl	8001328 <Error_Handler>
  }



  /* Open the test file.  */
  sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32_123.TXT", FX_OPEN_FOR_READ);
 8008956:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	2300      	movs	r3, #0
 800895e:	4a2f      	ldr	r2, [pc, #188]	; (8008a1c <fx_app_thread_entry+0x1f4>)
 8008960:	492f      	ldr	r1, [pc, #188]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 8008962:	482d      	ldr	r0, [pc, #180]	; (8008a18 <fx_app_thread_entry+0x1f0>)
 8008964:	f009 f904 	bl	8011b70 <_fxe_file_open>
 8008968:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check the file open sd_status.  */
  if (sd_status != FX_SUCCESS)
 800896a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d030      	beq.n	80089d2 <fx_app_thread_entry+0x1aa>
  {
    /* Error opening file, call error handler.  */
    Error_Handler();
 8008970:	f7f8 fcda 	bl	8001328 <Error_Handler>
  }

  /* Seek to the beginning of the test file.  */
  while(sd_status != FX_END_OF_FILE){
 8008974:	e02d      	b.n	80089d2 <fx_app_thread_entry+0x1aa>
  sd_status =  fx_file_seek(&fx_file,k*offset);
 8008976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	4619      	mov	r1, r3
 8008980:	4827      	ldr	r0, [pc, #156]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 8008982:	f009 f9af 	bl	8011ce4 <_fxe_file_seek>
 8008986:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check the file seek sd_status.  */
  if (sd_status != FX_SUCCESS)
 8008988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <fx_app_thread_entry+0x16a>
  {
    /* Error performing file seek, call error handler.  */
    Error_Handler();
 800898e:	f7f8 fccb 	bl	8001328 <Error_Handler>
  }

  /* Read the first 28 bytes of the test file.  */
  sd_status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 8008992:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008996:	2231      	movs	r2, #49	; 0x31
 8008998:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800899a:	4821      	ldr	r0, [pc, #132]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 800899c:	f009 f96a 	bl	8011c74 <_fxe_file_read>
 80089a0:	65f8      	str	r0, [r7, #92]	; 0x5c
  for(int i=0;i<offset;i++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	653b      	str	r3, [r7, #80]	; 0x50
 80089a6:	e00d      	b.n	80089c4 <fx_app_thread_entry+0x19c>
  {

  *(place+j)=read_buffer[i];
 80089a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ac:	4413      	add	r3, r2
 80089ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089b2:	440a      	add	r2, r1
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	701a      	strb	r2, [r3, #0]
  j++;
 80089b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ba:	3301      	adds	r3, #1
 80089bc:	657b      	str	r3, [r7, #84]	; 0x54
  for(int i=0;i<offset;i++)
 80089be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c0:	3301      	adds	r3, #1
 80089c2:	653b      	str	r3, [r7, #80]	; 0x50
 80089c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d8ed      	bhi.n	80089a8 <fx_app_thread_entry+0x180>
  }
  k++;
 80089cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089ce:	3301      	adds	r3, #1
 80089d0:	65bb      	str	r3, [r7, #88]	; 0x58
  while(sd_status != FX_END_OF_FILE){
 80089d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d1ce      	bne.n	8008976 <fx_app_thread_entry+0x14e>
    Error_Handler();
  }*/


  /* Close the test file.  */
  sd_status =  fx_file_close(&fx_file);
 80089d8:	4811      	ldr	r0, [pc, #68]	; (8008a20 <fx_app_thread_entry+0x1f8>)
 80089da:	f009 f86f 	bl	8011abc <_fxe_file_close>
 80089de:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check the file close sd_status.  */
  if (sd_status != FX_SUCCESS)
 80089e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <fx_app_thread_entry+0x1c2>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 80089e6:	f7f8 fc9f 	bl	8001328 <Error_Handler>
  }

  /* Close the media.  */
  sd_status =  fx_media_close(&sdio_disk);
 80089ea:	480b      	ldr	r0, [pc, #44]	; (8008a18 <fx_app_thread_entry+0x1f0>)
 80089ec:	f009 f9dc 	bl	8011da8 <_fxe_media_close>
 80089f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check the media close sd_status.  */
  if (sd_status != FX_SUCCESS)
 80089f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <fx_app_thread_entry+0x1d4>
  {
    /* Error closing the media, call error handler.  */
    Error_Handler();
 80089f8:	f7f8 fc96 	bl	8001328 <Error_Handler>
  }

  while(1)
  {
   // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    tx_thread_sleep(40);
 80089fc:	2028      	movs	r0, #40	; 0x28
 80089fe:	f00b f8d5 	bl	8013bac <_tx_thread_sleep>
 8008a02:	e7fb      	b.n	80089fc <fx_app_thread_entry+0x1d4>
 8008a04:	30020000 	.word	0x30020000
 8008a08:	08014f38 	.word	0x08014f38
 8008a0c:	24000aa0 	.word	0x24000aa0
 8008a10:	08008b7d 	.word	0x08008b7d
 8008a14:	08014f18 	.word	0x08014f18
 8008a18:	24000ca0 	.word	0x24000ca0
 8008a1c:	08014f28 	.word	0x08014f28
 8008a20:	24003158 	.word	0x24003158

08008a24 <fx_stm32_sd_init>:
* @brief Initializes the SD IP instance
* @param UINT instance SD instance to initialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_init(UINT instance)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN PRE_FX_SD_INIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_INIT */

#if (FX_STM32_SD_INIT == 1)
  MX_SDMMC1_SD_Init();
 8008a30:	f7f8 f8d0 	bl	8000bd4 <MX_SDMMC1_SD_Init>

  /* USER CODE BEGIN POST_FX_SD_INIT */

  /* USER CODE END POST_FX_SD_INIT */

  return ret;
 8008a34:	68fb      	ldr	r3, [r7, #12]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <fx_stm32_sd_deinit>:
* @brief Deinitializes the SD IP instance
* @param UINT instance SD instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_deinit(UINT instance)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_FX_SD_DEINIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_DEINIT */
#if (FX_STM32_SD_INIT == 1)
  if(HAL_SD_DeInit(&hsd1) != HAL_OK)
 8008a4c:	4806      	ldr	r0, [pc, #24]	; (8008a68 <fx_stm32_sd_deinit+0x28>)
 8008a4e:	f7fd fa99 	bl	8005f84 <HAL_SD_DeInit>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <fx_stm32_sd_deinit+0x1c>
  {
    ret = 1;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	60fb      	str	r3, [r7, #12]
#endif
  /* USER CODE BEGIN POST_FX_SD_DEINIT */

  /* USER CODE END POST_FX_SD_DEINIT */

  return ret;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	24000904 	.word	0x24000904

08008a6c <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8008a78:	4806      	ldr	r0, [pc, #24]	; (8008a94 <fx_stm32_sd_get_status+0x28>)
 8008a7a:	f7fe f93f 	bl	8006cfc <HAL_SD_GetCardState>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d001      	beq.n	8008a88 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8008a84:	2301      	movs	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8008a88:	68fb      	ldr	r3, [r7, #12]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	24000904 	.word	0x24000904

08008a98 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	68b9      	ldr	r1, [r7, #8]
 8008ab0:	4806      	ldr	r0, [pc, #24]	; (8008acc <fx_stm32_sd_read_blocks+0x34>)
 8008ab2:	f7fd fa8d 	bl	8005fd0 <HAL_SD_ReadBlocks_DMA>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 8008abc:	2301      	movs	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8008ac0:	697b      	ldr	r3, [r7, #20]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	24000904 	.word	0x24000904

08008ad0 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	4806      	ldr	r0, [pc, #24]	; (8008b04 <fx_stm32_sd_write_blocks+0x34>)
 8008aea:	f7fd fb19 	bl	8006120 <HAL_SD_WriteBlocks_DMA>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 8008af8:	697b      	ldr	r3, [r7, #20]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	24000904 	.word	0x24000904

08008b08 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 8008b10:	4803      	ldr	r0, [pc, #12]	; (8008b20 <HAL_SD_TxCpltCallback+0x18>)
 8008b12:	f00c f88d 	bl	8014c30 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	24003338 	.word	0x24003338

08008b24 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 8008b2c:	4803      	ldr	r0, [pc, #12]	; (8008b3c <HAL_SD_RxCpltCallback+0x18>)
 8008b2e:	f00c f87f 	bl	8014c30 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	24003354 	.word	0x24003354

08008b40 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 8008b48:	f00b fb90 	bl	801426c <_tx_time_get>
 8008b4c:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8008b4e:	e007      	b.n	8008b60 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ff8b 	bl	8008a6c <fx_stm32_sd_get_status>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <check_sd_status+0x20>
    {
      return 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e008      	b.n	8008b72 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8008b60:	f00b fb84 	bl	801426c <_tx_time_get>
 8008b64:	4602      	mov	r2, r0
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b6e:	d3ef      	bcc.n	8008b50 <check_sd_status+0x10>
    }
  }

  return 1;
 8008b70:	2301      	movs	r3, #1
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 8008b84:	4b8e      	ldr	r3, [pc, #568]	; (8008dc0 <fx_stm32_sd_driver+0x244>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d10a      	bne.n	8008ba2 <fx_stm32_sd_driver+0x26>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	f7ff ffd7 	bl	8008b40 <check_sd_status>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <fx_stm32_sd_driver+0x26>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2290      	movs	r2, #144	; 0x90
 8008b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008ba0:	e10a      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba8:	f003 0303 	and.w	r3, r3, #3
 8008bac:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	f200 80f5 	bhi.w	8008da4 <fx_stm32_sd_driver+0x228>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <fx_stm32_sd_driver+0x44>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008c7b 	.word	0x08008c7b
 8008bc4:	08008caf 	.word	0x08008caf
 8008bc8:	08008ce1 	.word	0x08008ce1
 8008bcc:	08008ceb 	.word	0x08008ceb
 8008bd0:	08008be5 	.word	0x08008be5
 8008bd4:	08008cf5 	.word	0x08008cf5
 8008bd8:	08008da5 	.word	0x08008da5
 8008bdc:	08008d89 	.word	0x08008d89
 8008be0:	08008c45 	.word	0x08008c45
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 8008bec:	231c      	movs	r3, #28
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4974      	ldr	r1, [pc, #464]	; (8008dc4 <fx_stm32_sd_driver+0x248>)
 8008bf2:	4875      	ldr	r0, [pc, #468]	; (8008dc8 <fx_stm32_sd_driver+0x24c>)
 8008bf4:	f00b ff06 	bl	8014a04 <_txe_semaphore_create>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d108      	bne.n	8008c10 <fx_stm32_sd_driver+0x94>
 8008bfe:	231c      	movs	r3, #28
 8008c00:	2200      	movs	r2, #0
 8008c02:	4972      	ldr	r1, [pc, #456]	; (8008dcc <fx_stm32_sd_driver+0x250>)
 8008c04:	4872      	ldr	r0, [pc, #456]	; (8008dd0 <fx_stm32_sd_driver+0x254>)
 8008c06:	f00b fefd 	bl	8014a04 <_txe_semaphore_create>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <fx_stm32_sd_driver+0x9c>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2290      	movs	r2, #144	; 0x90
 8008c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      /* Initialize the SD instance */
      if (is_initialized == 0)
 8008c18:	4b69      	ldr	r3, [pc, #420]	; (8008dc0 <fx_stm32_sd_driver+0x244>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f040 80c6 	bne.w	8008dae <fx_stm32_sd_driver+0x232>
      {
        status = fx_stm32_sd_init(FX_STM32_SD_INSTANCE);
 8008c22:	2000      	movs	r0, #0
 8008c24:	f7ff fefe 	bl	8008a24 <fx_stm32_sd_init>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	613b      	str	r3, [r7, #16]

        if (status == 0)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <fx_stm32_sd_driver+0xbe>
        {
          is_initialized = 1;
 8008c32:	4b63      	ldr	r3, [pc, #396]	; (8008dc0 <fx_stm32_sd_driver+0x244>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 8008c38:	e0b9      	b.n	8008dae <fx_stm32_sd_driver+0x232>
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2290      	movs	r2, #144	; 0x90
 8008c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8008c42:	e0b4      	b.n	8008dae <fx_stm32_sd_driver+0x232>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      status = fx_stm32_sd_deinit(FX_STM32_SD_INSTANCE);
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7ff fef7 	bl	8008a40 <fx_stm32_sd_deinit>
 8008c52:	4603      	mov	r3, r0
 8008c54:	613b      	str	r3, [r7, #16]

      if (status != 0)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <fx_stm32_sd_driver+0xea>
      {
        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2290      	movs	r2, #144	; 0x90
 8008c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008c64:	e002      	b.n	8008c6c <fx_stm32_sd_driver+0xf0>
      }
      else
      {
        is_initialized = 0;
 8008c66:	4b56      	ldr	r3, [pc, #344]	; (8008dc0 <fx_stm32_sd_driver+0x244>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 8008c6c:	4856      	ldr	r0, [pc, #344]	; (8008dc8 <fx_stm32_sd_driver+0x24c>)
 8008c6e:	f00b ff5f 	bl	8014b30 <_txe_semaphore_delete>
 8008c72:	4857      	ldr	r0, [pc, #348]	; (8008dd0 <fx_stm32_sd_driver+0x254>)
 8008c74:	f00b ff5c 	bl	8014b30 <_txe_semaphore_delete>

      break;
 8008c78:	e09e      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2290      	movs	r2, #144	; 0x90
 8008c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f89c 	bl	8008dd4 <sd_read_data>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f040 8087 	bne.w	8008db2 <fx_stm32_sd_driver+0x236>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8008cac:	e081      	b.n	8008db2 <fx_stm32_sd_driver+0x236>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2290      	movs	r2, #144	; 0x90
 8008cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f940 	bl	8008f50 <sd_write_data>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d16f      	bne.n	8008db6 <fx_stm32_sd_driver+0x23a>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8008cde:	e06a      	b.n	8008db6 <fx_stm32_sd_driver+0x23a>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8008ce8:	e066      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 8008cf2:	e061      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f868 	bl	8008dd4 <sd_read_data>
 8008d04:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <fx_stm32_sd_driver+0x19a>
      {
        media_ptr->fx_media_driver_status = status;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008d14:	e050      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8008d20:	f107 0308 	add.w	r3, r7, #8
 8008d24:	f107 020c 	add.w	r2, r7, #12
 8008d28:	2100      	movs	r1, #0
 8008d2a:	f006 fb43 	bl	800f3b4 <_fx_partition_offset_calculate>
 8008d2e:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <fx_stm32_sd_driver+0x1c4>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2290      	movs	r2, #144	; 0x90
 8008d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008d3e:	e03b      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d01b      	beq.n	8008d7e <fx_stm32_sd_driver+0x202>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8008d46:	2000      	movs	r0, #0
 8008d48:	f7ff fefa 	bl	8008b40 <check_sd_status>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <fx_stm32_sd_driver+0x1e0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2290      	movs	r2, #144	; 0x90
 8008d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8008d5a:	e02d      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8008d5c:	68f9      	ldr	r1, [r7, #12]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f834 	bl	8008dd4 <sd_read_data>
 8008d6c:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <fx_stm32_sd_driver+0x202>
        {
          media_ptr->fx_media_driver_status = status;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8008d7c:	e01c      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8008d86:	e017      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2100      	movs	r1, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f8dc 	bl	8008f50 <sd_write_data>
 8008d98:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 8008da2:	e009      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2290      	movs	r2, #144	; 0x90
 8008da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8008dac:	e004      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
      break;
 8008dae:	bf00      	nop
 8008db0:	e002      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
      break;
 8008db2:	bf00      	nop
 8008db4:	e000      	b.n	8008db8 <fx_stm32_sd_driver+0x23c>
      break;
 8008db6:	bf00      	nop
    }
  }
}
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	24003580 	.word	0x24003580
 8008dc4:	08014f6c 	.word	0x08014f6c
 8008dc8:	24003354 	.word	0x24003354
 8008dcc:	08014f88 	.word	0x08014f88
 8008dd0:	24003338 	.word	0x24003338

08008dd4 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b090      	sub	sp, #64	; 0x40
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d061      	beq.n	8008eb0 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8008df4:	2300      	movs	r3, #0
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008df8:	e04c      	b.n	8008e94 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	1c53      	adds	r3, r2, #1
 8008dfe:	60bb      	str	r3, [r7, #8]
 8008e00:	2301      	movs	r3, #1
 8008e02:	4950      	ldr	r1, [pc, #320]	; (8008f44 <sd_read_data+0x170>)
 8008e04:	2000      	movs	r0, #0
 8008e06:	f7ff fe47 	bl	8008a98 <fx_stm32_sd_read_blocks>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8008e14:	2390      	movs	r3, #144	; 0x90
 8008e16:	e090      	b.n	8008f3a <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8008e18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e1c:	484a      	ldr	r0, [pc, #296]	; (8008f48 <sd_read_data+0x174>)
 8008e1e:	f00b fec5 	bl	8014bac <_txe_semaphore_get>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <sd_read_data+0x58>
 8008e28:	2390      	movs	r3, #144	; 0x90
 8008e2a:	e086      	b.n	8008f3a <sd_read_data+0x166>
 8008e2c:	4b45      	ldr	r3, [pc, #276]	; (8008f44 <sd_read_data+0x170>)
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dd1d      	ble.n	8008e78 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	f003 021f 	and.w	r2, r3, #31
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	4413      	add	r3, r2
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008e4c:	f3bf 8f4f 	dsb	sy
}
 8008e50:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008e52:	4a3e      	ldr	r2, [pc, #248]	; (8008f4c <sd_read_data+0x178>)
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	3320      	adds	r3, #32
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	3b20      	subs	r3, #32
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dcf2      	bgt.n	8008e52 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008e6c:	f3bf 8f4f 	dsb	sy
}
 8008e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e72:	f3bf 8f6f 	isb	sy
}
 8008e76:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008e78:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8008e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e80:	4830      	ldr	r0, [pc, #192]	; (8008f44 <sd_read_data+0x170>)
 8008e82:	f008 fe0b 	bl	8011a9c <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008e8c:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e90:	3301      	adds	r3, #1
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d8ae      	bhi.n	8008dfa <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8008e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d102      	bne.n	8008eaa <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ea8:	e046      	b.n	8008f38 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8008eaa:	2321      	movs	r3, #33	; 0x21
 8008eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8008eae:	e043      	b.n	8008f38 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	2000      	movs	r0, #0
 8008ebc:	f7ff fdec 	bl	8008a98 <fx_stm32_sd_read_blocks>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8008eca:	2390      	movs	r3, #144	; 0x90
 8008ecc:	e035      	b.n	8008f3a <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8008ece:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ed2:	481d      	ldr	r0, [pc, #116]	; (8008f48 <sd_read_data+0x174>)
 8008ed4:	f00b fe6a 	bl	8014bac <_txe_semaphore_get>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <sd_read_data+0x10e>
 8008ede:	2390      	movs	r3, #144	; 0x90
 8008ee0:	e02b      	b.n	8008f3a <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	025b      	lsls	r3, r3, #9
 8008eec:	623a      	str	r2, [r7, #32]
 8008eee:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dd1d      	ble.n	8008f32 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	f003 021f 	and.w	r2, r3, #31
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	4413      	add	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f06:	f3bf 8f4f 	dsb	sy
}
 8008f0a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008f0c:	4a0f      	ldr	r2, [pc, #60]	; (8008f4c <sd_read_data+0x178>)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	3320      	adds	r3, #32
 8008f18:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	3b20      	subs	r3, #32
 8008f1e:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dcf2      	bgt.n	8008f0c <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 8008f26:	f3bf 8f4f 	dsb	sy
}
 8008f2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008f2c:	f3bf 8f6f 	isb	sy
}
 8008f30:	bf00      	nop
}
 8008f32:	bf00      	nop
#endif

    status = FX_SUCCESS;
 8008f34:	2300      	movs	r3, #0
 8008f36:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3740      	adds	r7, #64	; 0x40
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	24003380 	.word	0x24003380
 8008f48:	24003354 	.word	0x24003354
 8008f4c:	e000ed00 	.word	0xe000ed00

08008f50 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b090      	sub	sp, #64	; 0x40
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d061      	beq.n	800902c <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f74:	e04c      	b.n	8009010 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8008f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7a:	4951      	ldr	r1, [pc, #324]	; (80090c0 <sd_write_data+0x170>)
 8008f7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f7e:	f008 fd8d 	bl	8011a9c <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8008f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8a:	4b4d      	ldr	r3, [pc, #308]	; (80090c0 <sd_write_data+0x170>)
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd1d      	ble.n	8008fd6 <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	f003 021f 	and.w	r2, r3, #31
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	4413      	add	r3, r2
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008faa:	f3bf 8f4f 	dsb	sy
}
 8008fae:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008fb0:	4a44      	ldr	r2, [pc, #272]	; (80090c4 <sd_write_data+0x174>)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	3320      	adds	r3, #32
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	3b20      	subs	r3, #32
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	dcf2      	bgt.n	8008fb0 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8008fca:	f3bf 8f4f 	dsb	sy
}
 8008fce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008fd0:	f3bf 8f6f 	isb	sy
}
 8008fd4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008fd6:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	1c53      	adds	r3, r2, #1
 8008fdc:	60bb      	str	r3, [r7, #8]
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4937      	ldr	r1, [pc, #220]	; (80090c0 <sd_write_data+0x170>)
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f7ff fd74 	bl	8008ad0 <fx_stm32_sd_write_blocks>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8008ff2:	2390      	movs	r3, #144	; 0x90
 8008ff4:	e05f      	b.n	80090b6 <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8008ff6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ffa:	4833      	ldr	r0, [pc, #204]	; (80090c8 <sd_write_data+0x178>)
 8008ffc:	f00b fdd6 	bl	8014bac <_txe_semaphore_get>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <sd_write_data+0xba>
 8009006:	2390      	movs	r3, #144	; 0x90
 8009008:	e055      	b.n	80090b6 <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 800900a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900c:	3301      	adds	r3, #1
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d8ae      	bhi.n	8008f76 <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8009018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d102      	bne.n	8009026 <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8009020:	2300      	movs	r3, #0
 8009022:	63bb      	str	r3, [r7, #56]	; 0x38
 8009024:	e046      	b.n	80090b4 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8009026:	2321      	movs	r3, #33	; 0x21
 8009028:	63bb      	str	r3, [r7, #56]	; 0x38
 800902a:	e043      	b.n	80090b4 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	025b      	lsls	r3, r3, #9
 8009036:	623a      	str	r2, [r7, #32]
 8009038:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	2b00      	cmp	r3, #0
 800903e:	dd1d      	ble.n	800907c <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f003 021f 	and.w	r2, r3, #31
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009050:	f3bf 8f4f 	dsb	sy
}
 8009054:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009056:	4a1b      	ldr	r2, [pc, #108]	; (80090c4 <sd_write_data+0x174>)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	3320      	adds	r3, #32
 8009062:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	3b20      	subs	r3, #32
 8009068:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dcf2      	bgt.n	8009056 <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 8009070:	f3bf 8f4f 	dsb	sy
}
 8009074:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009076:	f3bf 8f6f 	isb	sy
}
 800907a:	bf00      	nop
}
 800907c:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	2000      	movs	r0, #0
 800908a:	f7ff fd21 	bl	8008ad0 <fx_stm32_sd_write_blocks>
 800908e:	4603      	mov	r3, r0
 8009090:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8009098:	2390      	movs	r3, #144	; 0x90
 800909a:	e00c      	b.n	80090b6 <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800909c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80090a0:	4809      	ldr	r0, [pc, #36]	; (80090c8 <sd_write_data+0x178>)
 80090a2:	f00b fd83 	bl	8014bac <_txe_semaphore_get>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <sd_write_data+0x160>
 80090ac:	2390      	movs	r3, #144	; 0x90
 80090ae:	e002      	b.n	80090b6 <sd_write_data+0x166>

    status = FX_SUCCESS;
 80090b0:	2300      	movs	r3, #0
 80090b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3740      	adds	r7, #64	; 0x40
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	24003380 	.word	0x24003380
 80090c4:	e000ed00 	.word	0xe000ed00
 80090c8:	24003338 	.word	0x24003338

080090cc <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 80090cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d0:	b09e      	sub	sp, #120	; 0x78
 80090d2:	af04      	add	r7, sp, #16
 80090d4:	61f8      	str	r0, [r7, #28]
 80090d6:	61b9      	str	r1, [r7, #24]
 80090d8:	617a      	str	r2, [r7, #20]
 80090da:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	015b      	lsls	r3, r3, #5
 80090f8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d104      	bne.n	800910a <_fx_directory_entry_read+0x3e>
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80a1 	beq.w	800924c <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009112:	fb02 f303 	mul.w	r3, r2, r3
 8009116:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800911e:	2302      	movs	r3, #2
 8009120:	e355      	b.n	80097ce <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8009122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800912c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009130:	fbb3 f2f2 	udiv	r2, r3, r2
 8009134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009136:	fb01 f202 	mul.w	r2, r1, r2
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009144:	fbb2 f3f3 	udiv	r3, r2, r3
 8009148:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d028      	beq.n	80091a2 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01e      	beq.n	8009196 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800915c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800915e:	429a      	cmp	r2, r3
 8009160:	d319      	bcc.n	8009196 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800916e:	4299      	cmp	r1, r3
 8009170:	bf08      	it	eq
 8009172:	4290      	cmpeq	r0, r2
 8009174:	d10f      	bne.n	8009196 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800917e:	429a      	cmp	r2, r3
 8009180:	d109      	bne.n	8009196 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009186:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918c:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2200      	movs	r2, #0
 8009192:	651a      	str	r2, [r3, #80]	; 0x50
 8009194:	e00a      	b.n	80091ac <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800919c:	2300      	movs	r3, #0
 800919e:	667b      	str	r3, [r7, #100]	; 0x64
 80091a0:	e024      	b.n	80091ec <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 80091ac:	e01e      	b.n	80091ec <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80091ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d907      	bls.n	80091c4 <_fx_directory_entry_read+0xf8>
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80091ba:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80091be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d301      	bcc.n	80091c8 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 80091c4:	2308      	movs	r3, #8
 80091c6:	e302      	b.n	80097ce <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80091c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091cc:	461a      	mov	r2, r3
 80091ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091d0:	69f8      	ldr	r0, [r7, #28]
 80091d2:	f006 fc59 	bl	800fa88 <_fx_utility_FAT_entry_read>
 80091d6:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	e2f5      	b.n	80097ce <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 80091e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091e8:	3301      	adds	r3, #1
 80091ea:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 80091ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d3dc      	bcc.n	80091ae <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80091f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091fa:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80091fc:	69f9      	ldr	r1, [r7, #28]
 80091fe:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009200:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009204:	4413      	add	r3, r2
 8009206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009208:	4413      	add	r3, r2
 800920a:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800920c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800920e:	2200      	movs	r2, #0
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009218:	2203      	movs	r2, #3
 800921a:	9202      	str	r2, [sp, #8]
 800921c:	2201      	movs	r2, #1
 800921e:	9201      	str	r2, [sp, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009226:	69f8      	ldr	r0, [r7, #28]
 8009228:	f008 f83c 	bl	80112a4 <_fx_utility_logical_sector_read>
 800922c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 8009234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009236:	e2ca      	b.n	80097ce <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800923c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009242:	fb01 f202 	mul.w	r2, r1, r2
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	647b      	str	r3, [r7, #68]	; 0x44
 800924a:	e02f      	b.n	80092ac <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009252:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800925a:	4413      	add	r3, r2
 800925c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800925e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009260:	2200      	movs	r2, #0
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800926a:	2203      	movs	r2, #3
 800926c:	9202      	str	r2, [sp, #8]
 800926e:	2201      	movs	r2, #1
 8009270:	9201      	str	r2, [sp, #4]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009278:	69f8      	ldr	r0, [r7, #28]
 800927a:	f008 f813 	bl	80112a4 <_fx_utility_logical_sector_read>
 800927e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	e2a1      	b.n	80097ce <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 800928a:	2300      	movs	r3, #0
 800928c:	657b      	str	r3, [r7, #84]	; 0x54
 800928e:	2300      	movs	r3, #0
 8009290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009294:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800929c:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80092a2:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 80092a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b2:	4413      	add	r3, r2
 80092b4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80092b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b8:	2200      	movs	r2, #0
 80092ba:	4698      	mov	r8, r3
 80092bc:	4691      	mov	r9, r2
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2200      	movs	r2, #0
 80092ce:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2200      	movs	r2, #0
 80092d4:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 80092dc:	2300      	movs	r3, #0
 80092de:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 80092e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e2:	330b      	adds	r3, #11
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	f040 8129 	bne.w	800953e <_fx_directory_entry_read+0x472>
 80092ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2be5      	cmp	r3, #229	; 0xe5
 80092f2:	f000 8124 	beq.w	800953e <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 80092f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 021f 	and.w	r2, r3, #31
 80092fe:	4613      	mov	r3, r2
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	3b0d      	subs	r3, #13
 800930a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800930c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8009316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009318:	2bfe      	cmp	r3, #254	; 0xfe
 800931a:	d908      	bls.n	800932e <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 800931c:	2301      	movs	r3, #1
 800931e:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f003 021f 	and.w	r2, r3, #31
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	619a      	str	r2, [r3, #24]
 800932c:	e015      	b.n	800935a <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	3304      	adds	r3, #4
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8009334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009336:	330e      	adds	r3, #14
 8009338:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009340:	4413      	add	r3, r2
 8009342:	2200      	movs	r2, #0
 8009344:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8009346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009348:	3301      	adds	r3, #1
 800934a:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800934c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800934e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009350:	429a      	cmp	r2, r3
 8009352:	d202      	bcs.n	800935a <_fx_directory_entry_read+0x28e>
 8009354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009356:	2bff      	cmp	r3, #255	; 0xff
 8009358:	d9ef      	bls.n	800933a <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800935a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	3b01      	subs	r3, #1
 8009364:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8009366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009368:	2b00      	cmp	r3, #0
 800936a:	d168      	bne.n	800943e <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800936c:	2301      	movs	r3, #1
 800936e:	667b      	str	r3, [r7, #100]	; 0x64
 8009370:	2300      	movs	r3, #0
 8009372:	663b      	str	r3, [r7, #96]	; 0x60
 8009374:	e060      	b.n	8009438 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 8009376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009378:	2b0b      	cmp	r3, #11
 800937a:	d057      	beq.n	800942c <_fx_directory_entry_read+0x360>
 800937c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800937e:	2b1a      	cmp	r3, #26
 8009380:	d054      	beq.n	800942c <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 8009382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009384:	2b0d      	cmp	r3, #13
 8009386:	d102      	bne.n	800938e <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 8009388:	230c      	movs	r3, #12
 800938a:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 800938c:	e051      	b.n	8009432 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 800938e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009390:	3301      	adds	r3, #1
 8009392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009394:	4413      	add	r3, r2
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d014      	beq.n	80093c6 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 800939c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800939e:	3301      	adds	r3, #1
 80093a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093a2:	4413      	add	r3, r2
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2bff      	cmp	r3, #255	; 0xff
 80093a8:	d105      	bne.n	80093b6 <_fx_directory_entry_read+0x2ea>
 80093aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ae:	4413      	add	r3, r2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2bff      	cmp	r3, #255	; 0xff
 80093b4:	d007      	beq.n	80093c6 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 80093b6:	2301      	movs	r3, #1
 80093b8:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093be:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 80093c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ca:	4413      	add	r3, r2
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02e      	beq.n	8009430 <_fx_directory_entry_read+0x364>
 80093d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093d6:	4413      	add	r3, r2
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2bff      	cmp	r3, #255	; 0xff
 80093dc:	d028      	beq.n	8009430 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 80093de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e0:	4613      	mov	r3, r2
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	441a      	add	r2, r3
 80093ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093ec:	4413      	add	r3, r2
 80093ee:	2bfe      	cmp	r3, #254	; 0xfe
 80093f0:	d908      	bls.n	8009404 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 80093f2:	2301      	movs	r3, #1
 80093f4:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 8009402:	e01c      	b.n	800943e <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 8009404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009408:	18d1      	adds	r1, r2, r3
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009410:	4613      	mov	r3, r2
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	441a      	add	r2, r3
 800941a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800941c:	4413      	add	r3, r2
 800941e:	4403      	add	r3, r0
 8009420:	780a      	ldrb	r2, [r1, #0]
 8009422:	701a      	strb	r2, [r3, #0]

                    j++;
 8009424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009426:	3301      	adds	r3, #1
 8009428:	663b      	str	r3, [r7, #96]	; 0x60
 800942a:	e002      	b.n	8009432 <_fx_directory_entry_read+0x366>
                        continue;
 800942c:	bf00      	nop
 800942e:	e000      	b.n	8009432 <_fx_directory_entry_read+0x366>
                        continue;
 8009430:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009434:	3302      	adds	r3, #2
 8009436:	667b      	str	r3, [r7, #100]	; 0x64
 8009438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800943a:	2b1f      	cmp	r3, #31
 800943c:	d99b      	bls.n	8009376 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800943e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009440:	f103 0220 	add.w	r2, r3, #32
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009448:	429a      	cmp	r2, r3
 800944a:	d365      	bcc.n	8009518 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d103      	bne.n	800945a <_fx_directory_entry_read+0x38e>
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009456:	2b00      	cmp	r3, #0
 8009458:	d038      	beq.n	80094cc <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945e:	3b01      	subs	r3, #1
 8009460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009462:	429a      	cmp	r2, r3
 8009464:	d206      	bcs.n	8009474 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8009466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009468:	3301      	adds	r3, #1
 800946a:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 800946c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800946e:	3301      	adds	r3, #1
 8009470:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009472:	e038      	b.n	80094e6 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009478:	461a      	mov	r2, r3
 800947a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800947c:	69f8      	ldr	r0, [r7, #28]
 800947e:	f006 fb03 	bl	800fa88 <_fx_utility_FAT_entry_read>
 8009482:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8009484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	e19f      	b.n	80097ce <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8009492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009494:	2b01      	cmp	r3, #1
 8009496:	d907      	bls.n	80094a8 <_fx_directory_entry_read+0x3dc>
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800949e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80094a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d301      	bcc.n	80094ac <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 80094a8:	2308      	movs	r3, #8
 80094aa:	e190      	b.n	80097ce <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 80094ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ae:	3301      	adds	r3, #1
 80094b0:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80094ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094bc:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80094be:	69f9      	ldr	r1, [r7, #28]
 80094c0:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80094c6:	4413      	add	r3, r2
 80094c8:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 80094ca:	e00c      	b.n	80094e6 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 80094cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ce:	3301      	adds	r3, #1
 80094d0:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094da:	4413      	add	r3, r2
 80094dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094de:	429a      	cmp	r2, r3
 80094e0:	d301      	bcc.n	80094e6 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 80094e2:	2308      	movs	r3, #8
 80094e4:	e173      	b.n	80097ce <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80094e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e8:	2200      	movs	r2, #0
 80094ea:	469a      	mov	sl, r3
 80094ec:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80094f2:	2203      	movs	r2, #3
 80094f4:	9202      	str	r2, [sp, #8]
 80094f6:	2201      	movs	r2, #1
 80094f8:	9201      	str	r2, [sp, #4]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4652      	mov	r2, sl
 80094fe:	465b      	mov	r3, fp
 8009500:	69f8      	ldr	r0, [r7, #28]
 8009502:	f007 fecf 	bl	80112a4 <_fx_utility_logical_sector_read>
 8009506:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8009508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009510:	e15d      	b.n	80097ce <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	647b      	str	r3, [r7, #68]	; 0x44
 8009516:	e002      	b.n	800951e <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8009518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800951a:	3320      	adds	r3, #32
 800951c:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009524:	4413      	add	r3, r2
 8009526:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	3301      	adds	r3, #1
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	2b00      	cmp	r3, #0
 8009532:	f47f af12 	bne.w	800935a <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2201      	movs	r2, #1
 800953a:	615a      	str	r2, [r3, #20]
 800953c:	e001      	b.n	8009542 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800953e:	2301      	movs	r3, #1
 8009540:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 8009542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009544:	2b01      	cmp	r3, #1
 8009546:	d102      	bne.n	800954e <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2200      	movs	r2, #0
 800954c:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800954e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009550:	2200      	movs	r2, #0
 8009552:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8009554:	2300      	movs	r3, #0
 8009556:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009558:	2300      	movs	r3, #0
 800955a:	667b      	str	r3, [r7, #100]	; 0x64
 800955c:	2300      	movs	r3, #0
 800955e:	663b      	str	r3, [r7, #96]	; 0x60
 8009560:	e03d      	b.n	80095de <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 8009562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009566:	4413      	add	r3, r2
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d03b      	beq.n	80095e6 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800956e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009572:	4413      	add	r3, r2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b2e      	cmp	r3, #46	; 0x2e
 8009578:	d101      	bne.n	800957e <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 800957a:	2302      	movs	r3, #2
 800957c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 800957e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009582:	4413      	add	r3, r2
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b20      	cmp	r3, #32
 8009588:	d105      	bne.n	8009596 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 800958a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d122      	bne.n	80095d6 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 8009590:	2301      	movs	r3, #1
 8009592:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 8009594:	e01f      	b.n	80095d6 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 8009596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009598:	2b08      	cmp	r3, #8
 800959a:	d104      	bne.n	80095a6 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 800959c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 80095a2:	2301      	movs	r3, #1
 80095a4:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 80095a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d108      	bne.n	80095be <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 80095ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	663a      	str	r2, [r7, #96]	; 0x60
 80095b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095b4:	4413      	add	r3, r2
 80095b6:	222e      	movs	r2, #46	; 0x2e
 80095b8:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 80095ba:	2302      	movs	r3, #2
 80095bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 80095be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095c2:	441a      	add	r2, r3
 80095c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095c8:	440b      	add	r3, r1
 80095ca:	7812      	ldrb	r2, [r2, #0]
 80095cc:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 80095ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095d0:	3301      	adds	r3, #1
 80095d2:	663b      	str	r3, [r7, #96]	; 0x60
 80095d4:	e000      	b.n	80095d8 <_fx_directory_entry_read+0x50c>
            continue;
 80095d6:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80095d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095da:	3301      	adds	r3, #1
 80095dc:	667b      	str	r3, [r7, #100]	; 0x64
 80095de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e0:	2b0a      	cmp	r3, #10
 80095e2:	d9be      	bls.n	8009562 <_fx_directory_entry_read+0x496>
 80095e4:	e000      	b.n	80095e8 <_fx_directory_entry_read+0x51c>
            break;
 80095e6:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00a      	beq.n	8009606 <_fx_directory_entry_read+0x53a>
 80095f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2be5      	cmp	r3, #229	; 0xe5
 80095f6:	d106      	bne.n	8009606 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	22e5      	movs	r2, #229	; 0xe5
 80095fe:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8009600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8009606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d114      	bne.n	8009638 <_fx_directory_entry_read+0x56c>
 800960e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b20      	cmp	r3, #32
 8009614:	d110      	bne.n	8009638 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009616:	2300      	movs	r3, #0
 8009618:	663b      	str	r3, [r7, #96]	; 0x60
 800961a:	e00a      	b.n	8009632 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 800961c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800961e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009620:	441a      	add	r2, r3
 8009622:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009626:	440b      	add	r3, r1
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800962c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800962e:	3301      	adds	r3, #1
 8009630:	663b      	str	r3, [r7, #96]	; 0x60
 8009632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009634:	2b0a      	cmp	r3, #10
 8009636:	d9f1      	bls.n	800961c <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8009638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800963a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800963c:	4413      	add	r3, r2
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8009642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009644:	330b      	adds	r3, #11
 8009646:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8009648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	643a      	str	r2, [r7, #64]	; 0x40
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8009654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	643a      	str	r2, [r7, #64]	; 0x40
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8009660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009662:	2b00      	cmp	r3, #0
 8009664:	d02a      	beq.n	80096bc <_fx_directory_entry_read+0x5f0>
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	7f5b      	ldrb	r3, [r3, #29]
 800966a:	f003 0308 	and.w	r3, r3, #8
 800966e:	2b00      	cmp	r3, #0
 8009670:	d024      	beq.n	80096bc <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009672:	2300      	movs	r3, #0
 8009674:	663b      	str	r3, [r7, #96]	; 0x60
 8009676:	e018      	b.n	80096aa <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8009678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800967a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800967c:	4413      	add	r3, r2
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b40      	cmp	r3, #64	; 0x40
 8009682:	d90f      	bls.n	80096a4 <_fx_directory_entry_read+0x5d8>
 8009684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009688:	4413      	add	r3, r2
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b5a      	cmp	r3, #90	; 0x5a
 800968e:	d809      	bhi.n	80096a4 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8009690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009694:	4413      	add	r3, r2
 8009696:	781a      	ldrb	r2, [r3, #0]
 8009698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800969a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800969c:	440b      	add	r3, r1
 800969e:	3220      	adds	r2, #32
 80096a0:	b2d2      	uxtb	r2, r2
 80096a2:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 80096a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a6:	3301      	adds	r3, #1
 80096a8:	663b      	str	r3, [r7, #96]	; 0x60
 80096aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096ac:	2b0b      	cmp	r3, #11
 80096ae:	d805      	bhi.n	80096bc <_fx_directory_entry_read+0x5f0>
 80096b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b4:	4413      	add	r3, r2
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1dd      	bne.n	8009678 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 80096bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	643a      	str	r2, [r7, #64]	; 0x40
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 80096c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80096ca:	f006 f977 	bl	800f9bc <_fx_utility_16_unsigned_read>
 80096ce:	4602      	mov	r2, r0
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 80096d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d6:	3302      	adds	r3, #2
 80096d8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 80096da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80096dc:	f006 f96e 	bl	800f9bc <_fx_utility_16_unsigned_read>
 80096e0:	4602      	mov	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 80096e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e8:	3302      	adds	r3, #2
 80096ea:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 80096ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80096ee:	f006 f965 	bl	800f9bc <_fx_utility_16_unsigned_read>
 80096f2:	4602      	mov	r2, r0
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 80096f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096fa:	3302      	adds	r3, #2
 80096fc:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8009706:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009708:	f006 f958 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800970c:	4602      	mov	r2, r0
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009716:	041a      	lsls	r2, r3, #16
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	635a      	str	r2, [r3, #52]	; 0x34
 800971c:	e002      	b.n	8009724 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2200      	movs	r2, #0
 8009722:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009726:	3302      	adds	r3, #2
 8009728:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 800972a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800972c:	f006 f946 	bl	800f9bc <_fx_utility_16_unsigned_read>
 8009730:	4602      	mov	r2, r0
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009738:	3302      	adds	r3, #2
 800973a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 800973c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800973e:	f006 f93d 	bl	800f9bc <_fx_utility_16_unsigned_read>
 8009742:	4602      	mov	r2, r0
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974a:	3302      	adds	r3, #2
 800974c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800974e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009750:	f006 f934 	bl	800f9bc <_fx_utility_16_unsigned_read>
 8009754:	4602      	mov	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	441a      	add	r2, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009762:	3302      	adds	r3, #2
 8009764:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8009766:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009768:	f006 f950 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800976c:	4603      	mov	r3, r0
 800976e:	2200      	movs	r2, #0
 8009770:	461c      	mov	r4, r3
 8009772:	4615      	mov	r5, r2
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2200      	movs	r2, #0
 800977e:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2200      	movs	r2, #0
 8009784:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8009786:	6939      	ldr	r1, [r7, #16]
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2200      	movs	r2, #0
 8009798:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800979e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a4:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00f      	beq.n	80097cc <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097b0:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80097be:	69b9      	ldr	r1, [r7, #24]
 80097c0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3768      	adds	r7, #104	; 0x68
 80097d2:	46bd      	mov	sp, r7
 80097d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080097d8 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 80097d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097dc:	b0a2      	sub	sp, #136	; 0x88
 80097de:	af04      	add	r7, sp, #16
 80097e0:	6178      	str	r0, [r7, #20]
 80097e2:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2be5      	cmp	r3, #229	; 0xe5
 80097fa:	d109      	bne.n	8009810 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009800:	2be5      	cmp	r3, #229	; 0xe5
 8009802:	d105      	bne.n	8009810 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2200      	movs	r2, #0
 800980c:	711a      	strb	r2, [r3, #4]
 800980e:	e001      	b.n	8009814 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8009810:	2300      	movs	r3, #0
 8009812:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009818:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009820:	4613      	mov	r3, r2
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800982a:	429a      	cmp	r2, r3
 800982c:	d316      	bcc.n	800985c <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009834:	1ad2      	subs	r2, r2, r3
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	fbb2 f3f3 	udiv	r3, r2, r3
 800983e:	3302      	adds	r3, #2
 8009840:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800984a:	6979      	ldr	r1, [r7, #20]
 800984c:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800984e:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009852:	4413      	add	r3, r2
 8009854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	63bb      	str	r3, [r7, #56]	; 0x38
 800985a:	e003      	b.n	8009864 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800985c:	2300      	movs	r3, #0
 800985e:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8009860:	2300      	movs	r3, #0
 8009862:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800986e:	2303      	movs	r3, #3
 8009870:	9302      	str	r3, [sp, #8]
 8009872:	2301      	movs	r3, #1
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	9200      	str	r2, [sp, #0]
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	6978      	ldr	r0, [r7, #20]
 800987e:	f007 fd11 	bl	80112a4 <_fx_utility_logical_sector_read>
 8009882:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	f000 bdda 	b.w	800a444 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800989a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800989c:	4413      	add	r3, r2
 800989e:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 83cc 	beq.w	800a042 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	653b      	str	r3, [r7, #80]	; 0x50
 80098ae:	2300      	movs	r3, #0
 80098b0:	667b      	str	r3, [r7, #100]	; 0x64
 80098b2:	2300      	movs	r3, #0
 80098b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098b6:	2300      	movs	r3, #0
 80098b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ba:	e02c      	b.n	8009916 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c2:	4413      	add	r3, r2
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b2e      	cmp	r3, #46	; 0x2e
 80098c8:	d108      	bne.n	80098dc <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 80098ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01e      	beq.n	800990e <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 80098d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 80098d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d6:	3301      	adds	r3, #1
 80098d8:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 80098da:	e019      	b.n	8009910 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098e2:	4413      	add	r3, r2
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d012      	beq.n	8009910 <_fx_directory_entry_write+0x138>
 80098ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ec:	2b07      	cmp	r3, #7
 80098ee:	d80f      	bhi.n	8009910 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f6:	4413      	add	r3, r2
 80098f8:	7819      	ldrb	r1, [r3, #0]
 80098fa:	f107 021c 	add.w	r2, r7, #28
 80098fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009900:	4413      	add	r3, r2
 8009902:	460a      	mov	r2, r1
 8009904:	701a      	strb	r2, [r3, #0]
                i++;
 8009906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009908:	3301      	adds	r3, #1
 800990a:	667b      	str	r3, [r7, #100]	; 0x64
 800990c:	e000      	b.n	8009910 <_fx_directory_entry_write+0x138>
                    continue;
 800990e:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8009910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009912:	3301      	adds	r3, #1
 8009914:	653b      	str	r3, [r7, #80]	; 0x50
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800991c:	4413      	add	r3, r2
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1cb      	bne.n	80098bc <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8009924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009926:	663b      	str	r3, [r7, #96]	; 0x60
 8009928:	e008      	b.n	800993c <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800992a:	f107 021c 	add.w	r2, r7, #28
 800992e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009930:	4413      	add	r3, r2
 8009932:	2220      	movs	r2, #32
 8009934:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8009936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009938:	3301      	adds	r3, #1
 800993a:	663b      	str	r3, [r7, #96]	; 0x60
 800993c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800993e:	2b0a      	cmp	r3, #10
 8009940:	d9f3      	bls.n	800992a <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 8009942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009944:	2b00      	cmp	r3, #0
 8009946:	d03e      	beq.n	80099c6 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994e:	4413      	add	r3, r2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995c:	1c59      	adds	r1, r3, #1
 800995e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009960:	4413      	add	r3, r2
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996e:	4413      	add	r3, r2
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800997c:	1c59      	adds	r1, r3, #1
 800997e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009980:	4413      	add	r3, r2
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998e:	4413      	add	r3, r2
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800999c:	1c59      	adds	r1, r3, #1
 800999e:	64b9      	str	r1, [r7, #72]	; 0x48
 80099a0:	4413      	add	r3, r2
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 80099a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099aa:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 80099ac:	e008      	b.n	80099c0 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 80099ae:	f107 021c 	add.w	r2, r7, #28
 80099b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b4:	4413      	add	r3, r2
 80099b6:	2220      	movs	r2, #32
 80099b8:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 80099ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099bc:	3301      	adds	r3, #1
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c2:	2b07      	cmp	r3, #7
 80099c4:	d9f3      	bls.n	80099ae <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 80099c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099c8:	4b8e      	ldr	r3, [pc, #568]	; (8009c04 <_fx_directory_entry_write+0x42c>)
 80099ca:	fba3 2301 	umull	r2, r3, r3, r1
 80099ce:	089a      	lsrs	r2, r3, #2
 80099d0:	4613      	mov	r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	1aca      	subs	r2, r1, r3
 80099dc:	2a00      	cmp	r2, #0
 80099de:	d106      	bne.n	80099ee <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 80099e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e2:	4a88      	ldr	r2, [pc, #544]	; (8009c04 <_fx_directory_entry_write+0x42c>)
 80099e4:	fba2 2303 	umull	r2, r3, r2, r3
 80099e8:	089b      	lsrs	r3, r3, #2
 80099ea:	657b      	str	r3, [r7, #84]	; 0x54
 80099ec:	e006      	b.n	80099fc <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 80099ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f0:	4a84      	ldr	r2, [pc, #528]	; (8009c04 <_fx_directory_entry_write+0x42c>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	089b      	lsrs	r3, r3, #2
 80099f8:	3301      	adds	r3, #1
 80099fa:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 80099fc:	2301      	movs	r3, #1
 80099fe:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8009a08:	e03f      	b.n	8009a8a <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 8009a0a:	f107 021c 	add.w	r2, r7, #28
 8009a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a10:	4413      	add	r3, r2
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b20      	cmp	r3, #32
 8009a16:	d116      	bne.n	8009a46 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a1e:	4413      	add	r3, r2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d035      	beq.n	8009a92 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a2c:	4413      	add	r3, r2
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b2e      	cmp	r3, #46	; 0x2e
 8009a32:	d002      	beq.n	8009a3a <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8009a38:	e02c      	b.n	8009a94 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 8009a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a40:	3301      	adds	r3, #1
 8009a42:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 8009a44:	e021      	b.n	8009a8a <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 8009a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d109      	bne.n	8009a60 <_fx_directory_entry_write+0x288>
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a52:	4413      	add	r3, r2
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b2e      	cmp	r3, #46	; 0x2e
 8009a58:	d102      	bne.n	8009a60 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 8009a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8009a60:	f107 021c 	add.w	r2, r7, #28
 8009a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a66:	4413      	add	r3, r2
 8009a68:	781a      	ldrb	r2, [r3, #0]
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6819      	ldr	r1, [r3, #0]
 8009a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a70:	440b      	add	r3, r1
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d002      	beq.n	8009a7e <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 8009a7c:	e00a      	b.n	8009a94 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 8009a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a80:	3301      	adds	r3, #1
 8009a82:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 8009a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a86:	3301      	adds	r3, #1
 8009a88:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 8009a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a8c:	2b0a      	cmp	r3, #10
 8009a8e:	d9bc      	bls.n	8009a0a <_fx_directory_entry_write+0x232>
 8009a90:	e000      	b.n	8009a94 <_fx_directory_entry_write+0x2bc>
                    break;
 8009a92:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 8009a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d005      	beq.n	8009aa6 <_fx_directory_entry_write+0x2ce>
 8009a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	d101      	bne.n	8009aa6 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aac:	4413      	add	r3, r2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 8009ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d15a      	bne.n	8009b74 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac2:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 8009aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d901      	bls.n	8009ad4 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 8009ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8009ada:	3368      	adds	r3, #104	; 0x68
 8009adc:	f107 0210 	add.w	r2, r7, #16
 8009ae0:	4413      	add	r3, r2
 8009ae2:	227e      	movs	r2, #126	; 0x7e
 8009ae4:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aec:	e03f      	b.n	8009b6e <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 8009aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	0b1b      	lsrs	r3, r3, #12
 8009af8:	f003 030f 	and.w	r3, r3, #15
 8009afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009afe:	e015      	b.n	8009b2c <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 8009b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d105      	bne.n	8009b12 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	0a1b      	lsrs	r3, r3, #8
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b10:	e00c      	b.n	8009b2c <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 8009b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d105      	bne.n	8009b24 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	091b      	lsrs	r3, r3, #4
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b22:	e003      	b.n	8009b2c <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	f003 030f 	and.w	r3, r3, #15
 8009b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 8009b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b2e:	2b09      	cmp	r3, #9
 8009b30:	d90d      	bls.n	8009b4e <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 8009b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b38:	1c59      	adds	r1, r3, #1
 8009b3a:	6679      	str	r1, [r7, #100]	; 0x64
 8009b3c:	3237      	adds	r2, #55	; 0x37
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	3368      	adds	r3, #104	; 0x68
 8009b42:	f107 0110 	add.w	r1, r7, #16
 8009b46:	440b      	add	r3, r1
 8009b48:	f803 2c5c 	strb.w	r2, [r3, #-92]
 8009b4c:	e00c      	b.n	8009b68 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 8009b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b54:	1c59      	adds	r1, r3, #1
 8009b56:	6679      	str	r1, [r7, #100]	; 0x64
 8009b58:	3230      	adds	r2, #48	; 0x30
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	3368      	adds	r3, #104	; 0x68
 8009b5e:	f107 0110 	add.w	r1, r7, #16
 8009b62:	440b      	add	r3, r1
 8009b64:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 8009b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d9bc      	bls.n	8009aee <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 8009b7a:	7f3b      	ldrb	r3, [r7, #28]
 8009b7c:	2be5      	cmp	r3, #229	; 0xe5
 8009b7e:	d104      	bne.n	8009b8a <_fx_directory_entry_write+0x3b2>
 8009b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 8009b86:	238f      	movs	r3, #143	; 0x8f
 8009b88:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b8e:	e01d      	b.n	8009bcc <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 8009b90:	f107 021c 	add.w	r2, r7, #28
 8009b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b96:	4413      	add	r3, r2
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 8009b9e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009ba2:	2b60      	cmp	r3, #96	; 0x60
 8009ba4:	d908      	bls.n	8009bb8 <_fx_directory_entry_write+0x3e0>
 8009ba6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009baa:	2b7a      	cmp	r3, #122	; 0x7a
 8009bac:	d804      	bhi.n	8009bb8 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8009bae:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009bb2:	3b20      	subs	r3, #32
 8009bb4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8009bb8:	f107 021c 	add.w	r2, r7, #28
 8009bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009bc4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bc8:	3301      	adds	r3, #1
 8009bca:	667b      	str	r3, [r7, #100]	; 0x64
 8009bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bce:	2b0a      	cmp	r3, #10
 8009bd0:	d9de      	bls.n	8009b90 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	791b      	ldrb	r3, [r3, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 8095 	beq.w	8009d06 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	667b      	str	r3, [r7, #100]	; 0x64
 8009be0:	e008      	b.n	8009bf4 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 8009be2:	f107 021c 	add.w	r2, r7, #28
 8009be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009be8:	4413      	add	r3, r2
 8009bea:	2220      	movs	r2, #32
 8009bec:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8009bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	667b      	str	r3, [r7, #100]	; 0x64
 8009bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf6:	2b0a      	cmp	r3, #10
 8009bf8:	d9f3      	bls.n	8009be2 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8009bfe:	2300      	movs	r3, #0
 8009c00:	663b      	str	r3, [r7, #96]	; 0x60
 8009c02:	e023      	b.n	8009c4c <_fx_directory_entry_write+0x474>
 8009c04:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3304      	adds	r3, #4
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d01e      	beq.n	8009c54 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d019      	beq.n	8009c58 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c28:	4413      	add	r3, r2
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8009c32:	f107 021c 	add.w	r2, r7, #28
 8009c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c38:	4413      	add	r3, r2
 8009c3a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009c3e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8009c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c42:	3301      	adds	r3, #1
 8009c44:	667b      	str	r3, [r7, #100]	; 0x64
 8009c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c48:	3301      	adds	r3, #1
 8009c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8009c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c4e:	2b07      	cmp	r3, #7
 8009c50:	d9da      	bls.n	8009c08 <_fx_directory_entry_write+0x430>
 8009c52:	e002      	b.n	8009c5a <_fx_directory_entry_write+0x482>
                    break;
 8009c54:	bf00      	nop
 8009c56:	e000      	b.n	8009c5a <_fx_directory_entry_write+0x482>
                    break;
 8009c58:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c5e:	4413      	add	r3, r2
 8009c60:	3304      	adds	r3, #4
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d025      	beq.n	8009cb4 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8009c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c6e:	2308      	movs	r3, #8
 8009c70:	663b      	str	r3, [r7, #96]	; 0x60
 8009c72:	e01a      	b.n	8009caa <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c78:	4413      	add	r3, r2
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d017      	beq.n	8009cb2 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c86:	4413      	add	r3, r2
 8009c88:	3304      	adds	r3, #4
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 8009c90:	f107 021c 	add.w	r2, r7, #28
 8009c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c96:	4413      	add	r3, r2
 8009c98:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009c9c:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8009c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8009ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8009caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cac:	2b0a      	cmp	r3, #10
 8009cae:	d9e1      	bls.n	8009c74 <_fx_directory_entry_write+0x49c>
 8009cb0:	e000      	b.n	8009cb4 <_fx_directory_entry_write+0x4dc>
                        break;
 8009cb2:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8009cb8:	e01d      	b.n	8009cf6 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 8009cba:	f107 021c 	add.w	r2, r7, #28
 8009cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8009cc8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009ccc:	2b60      	cmp	r3, #96	; 0x60
 8009cce:	d908      	bls.n	8009ce2 <_fx_directory_entry_write+0x50a>
 8009cd0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009cd4:	2b7a      	cmp	r3, #122	; 0x7a
 8009cd6:	d804      	bhi.n	8009ce2 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8009cd8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009cdc:	3b20      	subs	r3, #32
 8009cde:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8009ce2:	f107 021c 	add.w	r2, r7, #28
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ce8:	4413      	add	r3, r2
 8009cea:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009cee:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8009cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cf8:	2b0a      	cmp	r3, #10
 8009cfa:	d9de      	bls.n	8009cba <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 8009cfc:	7f3b      	ldrb	r3, [r7, #28]
 8009cfe:	2be5      	cmp	r3, #229	; 0xe5
 8009d00:	d101      	bne.n	8009d06 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 8009d02:	238f      	movs	r3, #143	; 0x8f
 8009d04:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8009d06:	2300      	movs	r3, #0
 8009d08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8009d10:	e016      	b.n	8009d40 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 8009d12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d16:	01db      	lsls	r3, r3, #7
 8009d18:	b25a      	sxtb	r2, r3
 8009d1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d1e:	085b      	lsrs	r3, r3, #1
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	b25b      	sxtb	r3, r3
 8009d24:	4313      	orrs	r3, r2
 8009d26:	b25b      	sxtb	r3, r3
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	f107 011c 	add.w	r1, r7, #28
 8009d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d30:	440b      	add	r3, r1
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	4413      	add	r3, r2
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8009d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8009d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d42:	2b0a      	cmp	r3, #10
 8009d44:	d9e5      	bls.n	8009d12 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 8009d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d52:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 8009d54:	e0f3      	b.n	8009f3e <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8009d5c:	7f3b      	ldrb	r3, [r7, #28]
 8009d5e:	2be5      	cmp	r3, #229	; 0xe5
 8009d60:	d102      	bne.n	8009d68 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8009d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d64:	22e5      	movs	r2, #229	; 0xe5
 8009d66:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 8009d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d6a:	330b      	adds	r3, #11
 8009d6c:	220f      	movs	r2, #15
 8009d6e:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 8009d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d72:	330c      	adds	r3, #12
 8009d74:	2200      	movs	r2, #0
 8009d76:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 8009d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d7a:	330d      	adds	r3, #13
 8009d7c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009d80:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 8009d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d84:	331a      	adds	r3, #26
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 8009d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d8c:	331b      	adds	r3, #27
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8009d92:	2301      	movs	r3, #1
 8009d94:	667b      	str	r3, [r7, #100]	; 0x64
 8009d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d98:	4613      	mov	r3, r2
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	3b0d      	subs	r3, #13
 8009da4:	663b      	str	r3, [r7, #96]	; 0x60
 8009da6:	e03e      	b.n	8009e26 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 8009da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009daa:	2b0b      	cmp	r3, #11
 8009dac:	d037      	beq.n	8009e1e <_fx_directory_entry_write+0x646>
 8009dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009db0:	2b1a      	cmp	r3, #26
 8009db2:	d034      	beq.n	8009e1e <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 8009db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009db6:	2b0d      	cmp	r3, #13
 8009db8:	d102      	bne.n	8009dc0 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 8009dba:	230c      	movs	r3, #12
 8009dbc:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 8009dbe:	e02f      	b.n	8009e20 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 8009dc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00d      	beq.n	8009de4 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 8009dc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dcc:	4413      	add	r3, r2
 8009dce:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8009dd2:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009dda:	4413      	add	r3, r2
 8009ddc:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e00e      	b.n	8009e02 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dea:	441a      	add	r2, r3
 8009dec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009df0:	440b      	add	r3, r1
 8009df2:	7812      	ldrb	r2, [r2, #0]
 8009df4:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 8009df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009df8:	3301      	adds	r3, #1
 8009dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009dfc:	4413      	add	r3, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e08:	4413      	add	r3, r2
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 8009e10:	23ff      	movs	r3, #255	; 0xff
 8009e12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 8009e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e18:	3301      	adds	r3, #1
 8009e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e1c:	e000      	b.n	8009e20 <_fx_directory_entry_write+0x648>
                    continue;
 8009e1e:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8009e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e22:	3302      	adds	r3, #2
 8009e24:	667b      	str	r3, [r7, #100]	; 0x64
 8009e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e28:	2b1f      	cmp	r3, #31
 8009e2a:	d9bd      	bls.n	8009da8 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 8009e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e2e:	3320      	adds	r3, #32
 8009e30:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 8009e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e34:	3320      	adds	r3, #32
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d376      	bcc.n	8009f30 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8009e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e44:	2200      	movs	r2, #0
 8009e46:	60bb      	str	r3, [r7, #8]
 8009e48:	60fa      	str	r2, [r7, #12]
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	2301      	movs	r3, #1
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e5a:	6978      	ldr	r0, [r7, #20]
 8009e5c:	f007 fcb6 	bl	80117cc <_fx_utility_logical_sector_write>
 8009e60:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	e2eb      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d335      	bcc.n	8009ee2 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d206      	bcs.n	8009e90 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8009e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e84:	3301      	adds	r3, #1
 8009e86:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e8e:	e032      	b.n	8009ef6 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009e90:	f107 0318 	add.w	r3, r7, #24
 8009e94:	461a      	mov	r2, r3
 8009e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e98:	6978      	ldr	r0, [r7, #20]
 8009e9a:	f005 fdf5 	bl	800fa88 <_fx_utility_FAT_entry_read>
 8009e9e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	e2cc      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d907      	bls.n	8009ec4 <_fx_directory_entry_write+0x6ec>
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009eba:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d301      	bcc.n	8009ec8 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	e2bd      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009ed4:	6979      	ldr	r1, [r7, #20]
 8009ed6:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009ed8:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009edc:	4413      	add	r3, r2
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee0:	e009      	b.n	8009ef6 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d301      	bcc.n	8009ef6 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8009ef2:	2308      	movs	r3, #8
 8009ef4:	e2a6      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef8:	2200      	movs	r2, #0
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009f02:	2203      	movs	r2, #3
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	2201      	movs	r2, #1
 8009f08:	9201      	str	r2, [sp, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f10:	6978      	ldr	r0, [r7, #20]
 8009f12:	f007 f9c7 	bl	80112a4 <_fx_utility_logical_sector_read>
 8009f16:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8009f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	e290      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 8009f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f2e:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 8009f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f32:	3b01      	subs	r3, #1
 8009f34:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 8009f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f3c:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 8009f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f47f af08 	bne.w	8009d56 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	791b      	ldrb	r3, [r3, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d116      	bne.n	8009f7c <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	667b      	str	r3, [r7, #100]	; 0x64
 8009f52:	e00f      	b.n	8009f74 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 8009f54:	f107 021c 	add.w	r2, r7, #28
 8009f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f5a:	4413      	add	r3, r2
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 8009f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	677a      	str	r2, [r7, #116]	; 0x74
 8009f68:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009f6c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f70:	3301      	adds	r3, #1
 8009f72:	667b      	str	r3, [r7, #100]	; 0x64
 8009f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f76:	2b0a      	cmp	r3, #10
 8009f78:	d9ec      	bls.n	8009f54 <_fx_directory_entry_write+0x77c>
 8009f7a:	e1a5      	b.n	800a2c8 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8009f80:	e007      	b.n	8009f92 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 8009f82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f86:	4413      	add	r3, r2
 8009f88:	2220      	movs	r2, #32
 8009f8a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 8009f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f8e:	3301      	adds	r3, #1
 8009f90:	667b      	str	r3, [r7, #100]	; 0x64
 8009f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f94:	2b0a      	cmp	r3, #10
 8009f96:	d9f4      	bls.n	8009f82 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	667b      	str	r3, [r7, #100]	; 0x64
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8009fa0:	e01c      	b.n	8009fdc <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3304      	adds	r3, #4
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b2e      	cmp	r3, #46	; 0x2e
 8009fae:	d019      	beq.n	8009fe4 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d014      	beq.n	8009fe8 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 8009fbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fc2:	4413      	add	r3, r2
 8009fc4:	6939      	ldr	r1, [r7, #16]
 8009fc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009fc8:	440a      	add	r2, r1
 8009fca:	3204      	adds	r2, #4
 8009fcc:	7812      	ldrb	r2, [r2, #0]
 8009fce:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8009fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8009fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fd8:	3301      	adds	r3, #1
 8009fda:	663b      	str	r3, [r7, #96]	; 0x60
 8009fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fde:	2b07      	cmp	r3, #7
 8009fe0:	d9df      	bls.n	8009fa2 <_fx_directory_entry_write+0x7ca>
 8009fe2:	e002      	b.n	8009fea <_fx_directory_entry_write+0x812>
                    break;
 8009fe4:	bf00      	nop
 8009fe6:	e000      	b.n	8009fea <_fx_directory_entry_write+0x812>
                    break;
 8009fe8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fee:	4413      	add	r3, r2
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d020      	beq.n	800a03a <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8009ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8009ffe:	2308      	movs	r3, #8
 800a000:	663b      	str	r3, [r7, #96]	; 0x60
 800a002:	e015      	b.n	800a030 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a008:	4413      	add	r3, r2
 800a00a:	3304      	adds	r3, #4
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d012      	beq.n	800a038 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a012:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a016:	4413      	add	r3, r2
 800a018:	6939      	ldr	r1, [r7, #16]
 800a01a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a01c:	440a      	add	r2, r1
 800a01e:	3204      	adds	r2, #4
 800a020:	7812      	ldrb	r2, [r2, #0]
 800a022:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a026:	3301      	adds	r3, #1
 800a028:	667b      	str	r3, [r7, #100]	; 0x64
 800a02a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a02c:	3301      	adds	r3, #1
 800a02e:	663b      	str	r3, [r7, #96]	; 0x60
 800a030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a032:	2b0a      	cmp	r3, #10
 800a034:	d9e6      	bls.n	800a004 <_fx_directory_entry_write+0x82c>
 800a036:	e000      	b.n	800a03a <_fx_directory_entry_write+0x862>
                        break;
 800a038:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a03a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a03c:	330b      	adds	r3, #11
 800a03e:	677b      	str	r3, [r7, #116]	; 0x74
 800a040:	e142      	b.n	800a2c8 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 80a1 	beq.w	800a18e <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a056:	b2da      	uxtb	r2, r3
 800a058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	f040 8096 	bne.w	800a18e <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a062:	2300      	movs	r3, #0
 800a064:	663b      	str	r3, [r7, #96]	; 0x60
 800a066:	e08c      	b.n	800a182 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2be5      	cmp	r3, #229	; 0xe5
 800a070:	d102      	bne.n	800a078 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a074:	22e5      	movs	r2, #229	; 0xe5
 800a076:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800a078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a07a:	3320      	adds	r3, #32
 800a07c:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800a07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a080:	3320      	adds	r3, #32
 800a082:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d376      	bcc.n	800a17c <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a090:	2200      	movs	r2, #0
 800a092:	4698      	mov	r8, r3
 800a094:	4691      	mov	r9, r2
 800a096:	2303      	movs	r3, #3
 800a098:	9302      	str	r3, [sp, #8]
 800a09a:	2301      	movs	r3, #1
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4642      	mov	r2, r8
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	6978      	ldr	r0, [r7, #20]
 800a0a8:	f007 fb90 	bl	80117cc <_fx_utility_logical_sector_write>
 800a0ac:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	e1c5      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d335      	bcc.n	800a12e <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d206      	bcs.n	800a0dc <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0da:	e032      	b.n	800a142 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a0dc:	f107 0318 	add.w	r3, r7, #24
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0e4:	6978      	ldr	r0, [r7, #20]
 800a0e6:	f005 fccf 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800a0ea:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	e1a6      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d907      	bls.n	800a110 <_fx_directory_entry_write+0x938>
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a106:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a10a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d301      	bcc.n	800a114 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800a110:	2308      	movs	r3, #8
 800a112:	e197      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800a114:	2300      	movs	r3, #0
 800a116:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a120:	6979      	ldr	r1, [r7, #20]
 800a122:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a124:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a128:	4413      	add	r3, r2
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a12c:	e009      	b.n	800a142 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800a12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a130:	3301      	adds	r3, #1
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d301      	bcc.n	800a142 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800a13e:	2308      	movs	r3, #8
 800a140:	e180      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	2200      	movs	r2, #0
 800a146:	469a      	mov	sl, r3
 800a148:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a14e:	2203      	movs	r2, #3
 800a150:	9202      	str	r2, [sp, #8]
 800a152:	2201      	movs	r2, #1
 800a154:	9201      	str	r2, [sp, #4]
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	4652      	mov	r2, sl
 800a15a:	465b      	mov	r3, fp
 800a15c:	6978      	ldr	r0, [r7, #20]
 800a15e:	f007 f8a1 	bl	80112a4 <_fx_utility_logical_sector_read>
 800a162:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	e16a      	b.n	800a444 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800a174:	2300      	movs	r3, #0
 800a176:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800a178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a17a:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a17c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a17e:	3301      	adds	r3, #1
 800a180:	663b      	str	r3, [r7, #96]	; 0x60
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a188:	429a      	cmp	r2, r3
 800a18a:	f4ff af6d 	bcc.w	800a068 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a18e:	2300      	movs	r3, #0
 800a190:	663b      	str	r3, [r7, #96]	; 0x60
 800a192:	e007      	b.n	800a1a4 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800a194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a198:	4413      	add	r3, r2
 800a19a:	2220      	movs	r2, #32
 800a19c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a19e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	663b      	str	r3, [r7, #96]	; 0x60
 800a1a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1a6:	2b0a      	cmp	r3, #10
 800a1a8:	d9f4      	bls.n	800a194 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	667b      	str	r3, [r7, #100]	; 0x64
 800a1ae:	e007      	b.n	800a1c0 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800a1b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a1b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1b4:	4413      	add	r3, r2
 800a1b6:	222e      	movs	r2, #46	; 0x2e
 800a1b8:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a1ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1bc:	3301      	adds	r3, #1
 800a1be:	667b      	str	r3, [r7, #100]	; 0x64
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1c6:	4413      	add	r3, r2
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a1cc:	d0f0      	beq.n	800a1b0 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d4:	4413      	add	r3, r2
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d039      	beq.n	800a250 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	667b      	str	r3, [r7, #100]	; 0x64
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	663b      	str	r3, [r7, #96]	; 0x60
 800a1e4:	e02d      	b.n	800a242 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1ec:	4413      	add	r3, r2
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f2:	d02a      	beq.n	800a24a <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1fa:	4413      	add	r3, r2
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d025      	beq.n	800a24e <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a208:	4413      	add	r3, r2
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a210:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a214:	2b60      	cmp	r3, #96	; 0x60
 800a216:	d908      	bls.n	800a22a <_fx_directory_entry_write+0xa52>
 800a218:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a21c:	2b7a      	cmp	r3, #122	; 0x7a
 800a21e:	d804      	bhi.n	800a22a <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a220:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a224:	3b20      	subs	r3, #32
 800a226:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a22a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a22c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a22e:	4413      	add	r3, r2
 800a230:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a234:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a238:	3301      	adds	r3, #1
 800a23a:	667b      	str	r3, [r7, #100]	; 0x64
 800a23c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a23e:	3301      	adds	r3, #1
 800a240:	663b      	str	r3, [r7, #96]	; 0x60
 800a242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a244:	2b07      	cmp	r3, #7
 800a246:	d9ce      	bls.n	800a1e6 <_fx_directory_entry_write+0xa0e>
 800a248:	e002      	b.n	800a250 <_fx_directory_entry_write+0xa78>
                    break;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <_fx_directory_entry_write+0xa78>
                    break;
 800a24e:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a256:	4413      	add	r3, r2
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d031      	beq.n	800a2c2 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a25e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a260:	3301      	adds	r3, #1
 800a262:	667b      	str	r3, [r7, #100]	; 0x64
 800a264:	2308      	movs	r3, #8
 800a266:	663b      	str	r3, [r7, #96]	; 0x60
 800a268:	e026      	b.n	800a2b8 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a270:	4413      	add	r3, r2
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d023      	beq.n	800a2c0 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a286:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a28a:	2b60      	cmp	r3, #96	; 0x60
 800a28c:	d908      	bls.n	800a2a0 <_fx_directory_entry_write+0xac8>
 800a28e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a292:	2b7a      	cmp	r3, #122	; 0x7a
 800a294:	d804      	bhi.n	800a2a0 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a296:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a29a:	3b20      	subs	r3, #32
 800a29c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a2a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a2aa:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	667b      	str	r3, [r7, #100]	; 0x64
 800a2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	663b      	str	r3, [r7, #96]	; 0x60
 800a2b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ba:	2b0a      	cmp	r3, #10
 800a2bc:	d9d5      	bls.n	800a26a <_fx_directory_entry_write+0xa92>
 800a2be:	e000      	b.n	800a2c2 <_fx_directory_entry_write+0xaea>
                    break;
 800a2c0:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a2c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2c4:	330b      	adds	r3, #11
 800a2c6:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800a2c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	677a      	str	r2, [r7, #116]	; 0x74
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	7f12      	ldrb	r2, [r2, #28]
 800a2d2:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800a2d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	677a      	str	r2, [r7, #116]	; 0x74
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	7f52      	ldrb	r2, [r2, #29]
 800a2de:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800a2e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	677a      	str	r2, [r7, #116]	; 0x74
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	7f92      	ldrb	r2, [r2, #30]
 800a2ea:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a2f4:	f005 fb75 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a2f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	4619      	mov	r1, r3
 800a304:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a306:	f005 fb6c 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a30a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a30c:	3302      	adds	r3, #2
 800a30e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a314:	4619      	mov	r1, r3
 800a316:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a318:	f005 fb63 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a31c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a31e:	3302      	adds	r3, #2
 800a320:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a326:	2b00      	cmp	r3, #0
 800a328:	d008      	beq.n	800a33c <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32e:	0c1b      	lsrs	r3, r3, #16
 800a330:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800a332:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a334:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a336:	f005 fb54 	bl	800f9e2 <_fx_utility_16_unsigned_write>
 800a33a:	e003      	b.n	800a344 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800a33c:	2100      	movs	r1, #0
 800a33e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a340:	f005 fb4f 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a346:	3302      	adds	r3, #2
 800a348:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	4619      	mov	r1, r3
 800a350:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a352:	f005 fb46 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a358:	3302      	adds	r3, #2
 800a35a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	4619      	mov	r1, r3
 800a362:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a364:	f005 fb3d 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a36a:	3302      	adds	r3, #2
 800a36c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a372:	4619      	mov	r1, r3
 800a374:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a376:	f005 fb34 	bl	800f9e2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800a37a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a37c:	3302      	adds	r3, #2
 800a37e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a386:	4613      	mov	r3, r2
 800a388:	4619      	mov	r1, r3
 800a38a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a38c:	f005 fb5b 	bl	800fa46 <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a392:	2200      	movs	r2, #0
 800a394:	461c      	mov	r4, r3
 800a396:	4615      	mov	r5, r2
 800a398:	2303      	movs	r3, #3
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	2301      	movs	r3, #1
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	6978      	ldr	r0, [r7, #20]
 800a3aa:	f007 fa0f 	bl	80117cc <_fx_utility_logical_sector_write>
 800a3ae:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	e044      	b.n	800a444 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d03e      	beq.n	800a442 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	bf08      	it	eq
 800a3d4:	4290      	cmpeq	r0, r2
 800a3d6:	d134      	bne.n	800a442 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d12d      	bne.n	800a442 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a3f6:	6979      	ldr	r1, [r7, #20]
 800a3f8:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	7f1a      	ldrb	r2, [r3, #28]
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	7f5a      	ldrb	r2, [r3, #29]
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	7f9a      	ldrb	r2, [r3, #30]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3778      	adds	r7, #120	; 0x78
 800a448:	46bd      	mov	sp, r7
 800a44a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a44e:	bf00      	nop

0800a450 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800a450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a454:	b0a8      	sub	sp, #160	; 0xa0
 800a456:	af04      	add	r7, sp, #16
 800a458:	6278      	str	r0, [r7, #36]	; 0x24
 800a45a:	6239      	str	r1, [r7, #32]
 800a45c:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a472:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	2200      	movs	r2, #0
 800a478:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b2e      	cmp	r3, #46	; 0x2e
 800a482:	d108      	bne.n	800a496 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b2e      	cmp	r3, #46	; 0x2e
 800a48e:	d102      	bne.n	800a496 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800a490:	230c      	movs	r3, #12
 800a492:	f000 bc17 	b.w	800acc4 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800a496:	2300      	movs	r3, #0
 800a498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a49c:	2300      	movs	r3, #0
 800a49e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4a2:	e13d      	b.n	800a720 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4ac:	4413      	add	r3, r2
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b40      	cmp	r3, #64	; 0x40
 800a4b2:	d908      	bls.n	800a4c6 <_fx_directory_free_search+0x76>
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4bc:	4413      	add	r3, r2
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2b5a      	cmp	r3, #90	; 0x5a
 800a4c2:	f240 8121 	bls.w	800a708 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4ce:	4413      	add	r3, r2
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b2f      	cmp	r3, #47	; 0x2f
 800a4d4:	d908      	bls.n	800a4e8 <_fx_directory_free_search+0x98>
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4de:	4413      	add	r3, r2
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b39      	cmp	r3, #57	; 0x39
 800a4e4:	f240 8112 	bls.w	800a70c <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4f0:	4413      	add	r3, r2
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b60      	cmp	r3, #96	; 0x60
 800a4f6:	d90b      	bls.n	800a510 <_fx_directory_free_search+0xc0>
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a500:	4413      	add	r3, r2
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b7a      	cmp	r3, #122	; 0x7a
 800a506:	d803      	bhi.n	800a510 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2201      	movs	r2, #1
 800a50c:	615a      	str	r2, [r3, #20]
 800a50e:	e102      	b.n	800a716 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a518:	4413      	add	r3, r2
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d103      	bne.n	800a528 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2201      	movs	r2, #1
 800a524:	615a      	str	r2, [r3, #20]
 800a526:	e0f6      	b.n	800a716 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a530:	4413      	add	r3, r2
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b2e      	cmp	r3, #46	; 0x2e
 800a536:	d114      	bne.n	800a562 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800a538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10c      	bne.n	800a55a <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800a540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800a548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 80e2 	bne.w	800a716 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2201      	movs	r2, #1
 800a556:	615a      	str	r2, [r3, #20]
 800a558:	e0dd      	b.n	800a716 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	2201      	movs	r2, #1
 800a55e:	615a      	str	r2, [r3, #20]
 800a560:	e0d9      	b.n	800a716 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a56a:	4413      	add	r3, r2
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2be5      	cmp	r3, #229	; 0xe5
 800a570:	d103      	bne.n	800a57a <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	2201      	movs	r2, #1
 800a576:	615a      	str	r2, [r3, #20]
 800a578:	e0cd      	b.n	800a716 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a582:	4413      	add	r3, r2
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	b25b      	sxtb	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f2c0 80c1 	blt.w	800a710 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a596:	4413      	add	r3, r2
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b7e      	cmp	r3, #126	; 0x7e
 800a59c:	f000 80ba 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800a5ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a5ae:	f000 80b1 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ba:	4413      	add	r3, r2
 800a5bc:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800a5be:	2b5f      	cmp	r3, #95	; 0x5f
 800a5c0:	f000 80a8 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5cc:	4413      	add	r3, r2
 800a5ce:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800a5d0:	2b7d      	cmp	r3, #125	; 0x7d
 800a5d2:	f000 809f 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5de:	4413      	add	r3, r2
 800a5e0:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800a5e2:	2b7b      	cmp	r3, #123	; 0x7b
 800a5e4:	f000 8096 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800a5f4:	2b28      	cmp	r3, #40	; 0x28
 800a5f6:	f000 808d 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a602:	4413      	add	r3, r2
 800a604:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800a606:	2b29      	cmp	r3, #41	; 0x29
 800a608:	f000 8084 	beq.w	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a614:	4413      	add	r3, r2
 800a616:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800a618:	2b60      	cmp	r3, #96	; 0x60
 800a61a:	d07b      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a624:	4413      	add	r3, r2
 800a626:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800a628:	2b27      	cmp	r3, #39	; 0x27
 800a62a:	d073      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a634:	4413      	add	r3, r2
 800a636:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800a638:	2b21      	cmp	r3, #33	; 0x21
 800a63a:	d06b      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a644:	4413      	add	r3, r2
 800a646:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800a648:	2b23      	cmp	r3, #35	; 0x23
 800a64a:	d063      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a654:	4413      	add	r3, r2
 800a656:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800a658:	2b24      	cmp	r3, #36	; 0x24
 800a65a:	d05b      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a664:	4413      	add	r3, r2
 800a666:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800a668:	2b26      	cmp	r3, #38	; 0x26
 800a66a:	d053      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a674:	4413      	add	r3, r2
 800a676:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800a678:	2b40      	cmp	r3, #64	; 0x40
 800a67a:	d04b      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a684:	4413      	add	r3, r2
 800a686:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800a688:	2b5e      	cmp	r3, #94	; 0x5e
 800a68a:	d043      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a694:	4413      	add	r3, r2
 800a696:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800a698:	2b25      	cmp	r3, #37	; 0x25
 800a69a:	d03b      	beq.n	800a714 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a4:	4413      	add	r3, r2
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b2b      	cmp	r3, #43	; 0x2b
 800a6aa:	d027      	beq.n	800a6fc <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6b4:	4413      	add	r3, r2
 800a6b6:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800a6b8:	2b2c      	cmp	r3, #44	; 0x2c
 800a6ba:	d01f      	beq.n	800a6fc <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6c4:	4413      	add	r3, r2
 800a6c6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800a6c8:	2b3b      	cmp	r3, #59	; 0x3b
 800a6ca:	d017      	beq.n	800a6fc <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6d4:	4413      	add	r3, r2
 800a6d6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800a6d8:	2b3d      	cmp	r3, #61	; 0x3d
 800a6da:	d00f      	beq.n	800a6fc <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6e4:	4413      	add	r3, r2
 800a6e6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800a6e8:	2b5b      	cmp	r3, #91	; 0x5b
 800a6ea:	d007      	beq.n	800a6fc <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6f4:	4413      	add	r3, r2
 800a6f6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800a6f8:	2b5d      	cmp	r3, #93	; 0x5d
 800a6fa:	d103      	bne.n	800a704 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	2201      	movs	r2, #1
 800a700:	615a      	str	r2, [r3, #20]
 800a702:	e008      	b.n	800a716 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800a704:	230c      	movs	r3, #12
 800a706:	e2dd      	b.n	800acc4 <_fx_directory_free_search+0x874>
            continue;
 800a708:	bf00      	nop
 800a70a:	e004      	b.n	800a716 <_fx_directory_free_search+0x2c6>
            continue;
 800a70c:	bf00      	nop
 800a70e:	e002      	b.n	800a716 <_fx_directory_free_search+0x2c6>
            continue;
 800a710:	bf00      	nop
 800a712:	e000      	b.n	800a716 <_fx_directory_free_search+0x2c6>
            continue;
 800a714:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800a716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a71a:	3301      	adds	r3, #1
 800a71c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a728:	4413      	add	r3, r2
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f47f aeb9 	bne.w	800a4a4 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800a732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800a73a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a73e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b04      	cmp	r3, #4
 800a746:	d902      	bls.n	800a74e <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	2201      	movs	r2, #1
 800a74c:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800a74e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a752:	2b0c      	cmp	r3, #12
 800a754:	d818      	bhi.n	800a788 <_fx_directory_free_search+0x338>
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d114      	bne.n	800a788 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800a75e:	2301      	movs	r3, #1
 800a760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800a764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d806      	bhi.n	800a77a <_fx_directory_free_search+0x32a>
 800a76c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b08      	cmp	r3, #8
 800a778:	d928      	bls.n	800a7cc <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	2201      	movs	r2, #1
 800a77e:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800a780:	2302      	movs	r3, #2
 800a782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800a786:	e021      	b.n	800a7cc <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800a788:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800a78c:	4b95      	ldr	r3, [pc, #596]	; (800a9e4 <_fx_directory_free_search+0x594>)
 800a78e:	fba3 2301 	umull	r2, r3, r3, r1
 800a792:	089a      	lsrs	r2, r3, #2
 800a794:	4613      	mov	r3, r2
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	1aca      	subs	r2, r1, r3
 800a7a0:	2a00      	cmp	r2, #0
 800a7a2:	d109      	bne.n	800a7b8 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800a7a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7a8:	4a8e      	ldr	r2, [pc, #568]	; (800a9e4 <_fx_directory_free_search+0x594>)
 800a7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ae:	089b      	lsrs	r3, r3, #2
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7b6:	e00a      	b.n	800a7ce <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800a7b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7bc:	4a89      	ldr	r2, [pc, #548]	; (800a9e4 <_fx_directory_free_search+0x594>)
 800a7be:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c2:	089b      	lsrs	r3, r3, #2
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7ca:	e000      	b.n	800a7ce <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800a7cc:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a7de:	4613      	mov	r3, r2
 800a7e0:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800a7e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f0:	e006      	b.n	800a800 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7f6:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800a800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a802:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800a804:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a80e:	f7fe fc5d 	bl	80090cc <_fx_directory_entry_read>
 800a812:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800a814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800a81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81c:	e252      	b.n	800acc4 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2be5      	cmp	r3, #229	; 0xe5
 800a826:	d103      	bne.n	800a830 <_fx_directory_free_search+0x3e0>
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	791b      	ldrb	r3, [r3, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800a836:	2b00      	cmp	r3, #0
 800a838:	d16b      	bne.n	800a912 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800a83a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d91a      	bls.n	800a878 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d115      	bne.n	800a878 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	2200      	movs	r2, #0
 800a850:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	23e5      	movs	r3, #229	; 0xe5
 800a858:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	2300      	movs	r3, #0
 800a862:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800a864:	69f9      	ldr	r1, [r7, #28]
 800a866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a868:	f7fe ffb6 	bl	80097d8 <_fx_directory_entry_write>
 800a86c:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800a86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800a874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a876:	e225      	b.n	800acc4 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800a878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a87a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d109      	bne.n	800a894 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a88a:	4613      	mov	r3, r2
 800a88c:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a892:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800a894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	3301      	adds	r3, #1
 800a89c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d838      	bhi.n	800a916 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800a8a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	4615      	mov	r5, r2
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8b6:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8c8:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8ce:	b672      	cpsid	i
#endif
    return(int_posture);
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800a8d2:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800a8d4:	4b44      	ldr	r3, [pc, #272]	; (800a9e8 <_fx_directory_free_search+0x598>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800a8dc:	4b43      	ldr	r3, [pc, #268]	; (800a9ec <_fx_directory_free_search+0x59c>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800a8e4:	4b41      	ldr	r3, [pc, #260]	; (800a9ec <_fx_directory_free_search+0x59c>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	629a      	str	r2, [r3, #40]	; 0x28
 800a8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f2:	f383 8810 	msr	PRIMASK, r3
}
 800a8f6:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800a8f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d103      	bne.n	800a908 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	2200      	movs	r2, #0
 800a904:	615a      	str	r2, [r3, #20]
 800a906:	e002      	b.n	800a90e <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	2201      	movs	r2, #1
 800a90c:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800a90e:	2300      	movs	r3, #0
 800a910:	e1d8      	b.n	800acc4 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800a912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a914:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a918:	3301      	adds	r3, #1
 800a91a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a920:	429a      	cmp	r2, r3
 800a922:	f200 81c9 	bhi.w	800acb8 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800a926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a930:	4413      	add	r3, r2
 800a932:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800a938:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93c:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a944:	4413      	add	r3, r2
 800a946:	1e5a      	subs	r2, r3, #1
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a950:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800a952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a954:	2b00      	cmp	r3, #0
 800a956:	d104      	bne.n	800a962 <_fx_directory_free_search+0x512>
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 81ab 	beq.w	800acb8 <_fx_directory_free_search+0x868>
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a968:	429a      	cmp	r2, r3
 800a96a:	f200 81a5 	bhi.w	800acb8 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800a96e:	2300      	movs	r3, #0
 800a970:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800a978:	2300      	movs	r3, #0
 800a97a:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a982:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800a984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a986:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800a988:	e10b      	b.n	800aba2 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800a98a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a98c:	3b01      	subs	r3, #1
 800a98e:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800a996:	230a      	movs	r3, #10
 800a998:	e194      	b.n	800acc4 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800a99a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a9a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9a4:	f005 f870 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800a9a8:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800a9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b2:	e187      	b.n	800acc4 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800a9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d117      	bne.n	800a9f0 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800a9c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d4:	3302      	adds	r3, #2
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d316      	bcc.n	800aa08 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	2202      	movs	r2, #2
 800a9de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800a9e2:	e011      	b.n	800aa08 <_fx_directory_free_search+0x5b8>
 800a9e4:	4ec4ec4f 	.word	0x4ec4ec4f
 800a9e8:	24003590 	.word	0x24003590
 800a9ec:	2400358c 	.word	0x2400358c
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800a9f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d3c6      	bcc.n	800a990 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800aa02:	2302      	movs	r3, #2
 800aa04:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800aa06:	e7c3      	b.n	800a990 <_fx_directory_free_search+0x540>
                            break;
 800aa08:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800aa0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa10:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800aa16:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800aa1a:	440b      	add	r3, r1
 800aa1c:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800aa24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa26:	2200      	movs	r2, #0
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800aa30:	2303      	movs	r3, #3
 800aa32:	9302      	str	r3, [sp, #8]
 800aa34:	2301      	movs	r3, #1
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	9200      	str	r2, [sp, #0]
 800aa3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa40:	f006 fc30 	bl	80112a4 <_fx_utility_logical_sector_read>
 800aa44:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800aa46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800aa4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4e:	e139      	b.n	800acc4 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800aa5e:	e00d      	b.n	800aa7c <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800aa60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800aa68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800aa72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa76:	3304      	adds	r3, #4
 800aa78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d3eb      	bcc.n	800aa60 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aa88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	60bb      	str	r3, [r7, #8]
 800aa8e:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aa94:	2303      	movs	r3, #3
 800aa96:	9302      	str	r3, [sp, #8]
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	9200      	str	r2, [sp, #0]
 800aa9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaa4:	f006 fe92 	bl	80117cc <_fx_utility_logical_sector_write>
 800aaa8:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800aaaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800aab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab2:	e107      	b.n	800acc4 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800aab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d95a      	bls.n	800ab70 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800aaba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aabc:	3301      	adds	r3, #1
 800aabe:	2200      	movs	r2, #0
 800aac0:	603b      	str	r3, [r7, #0]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac6:	3b01      	subs	r3, #1
 800aac8:	2200      	movs	r2, #0
 800aaca:	4698      	mov	r8, r3
 800aacc:	4691      	mov	r9, r2
 800aace:	2301      	movs	r3, #1
 800aad0:	9302      	str	r3, [sp, #8]
 800aad2:	e9cd 8900 	strd	r8, r9, [sp]
 800aad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aadc:	f006 f9cc 	bl	8010e78 <_fx_utility_logical_sector_flush>
 800aae0:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800aae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800aae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaea:	e0eb      	b.n	800acc4 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800aaec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800aaf2:	e03a      	b.n	800ab6a <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	2201      	movs	r2, #1
 800ab06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	2290      	movs	r2, #144	; 0x90
 800ab0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	689a      	ldr	r2, [r3, #8]
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800ab1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab20:	441a      	add	r2, r3
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	2203      	movs	r2, #3
 800ab34:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ab46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab48:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab62:	e0af      	b.n	800acc4 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800ab64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab66:	3b01      	subs	r3, #1
 800ab68:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800ab6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1c1      	bne.n	800aaf4 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800ab70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800ab76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab78:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800ab7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800ab80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ab82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ab84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab86:	f005 f9a8 	bl	800feda <_fx_utility_FAT_entry_write>
 800ab8a:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800ab8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800ab92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab94:	e096      	b.n	800acc4 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800ab96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab98:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aba0:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800aba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f47f aef0 	bne.w	800a98a <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800abb0:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800abb4:	461a      	mov	r2, r3
 800abb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800abb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abba:	f005 f98e 	bl	800feda <_fx_utility_FAT_entry_write>
 800abbe:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800abc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800abc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc8:	e07c      	b.n	800acc4 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800abca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800abd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd4:	673b      	str	r3, [r7, #112]	; 0x70
 800abd6:	e002      	b.n	800abde <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abdc:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800abde:	2300      	movs	r3, #0
 800abe0:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800abe8:	e024      	b.n	800ac34 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800abea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abee:	461a      	mov	r2, r3
 800abf0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800abf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abf4:	f004 ff48 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800abf8:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800abfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abfe:	3301      	adds	r3, #1
 800ac00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800ac04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800ac0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac0c:	e05a      	b.n	800acc4 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800ac0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d909      	bls.n	800ac28 <_fx_directory_free_search+0x7d8>
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d005      	beq.n	800ac28 <_fx_directory_free_search+0x7d8>
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac20:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d901      	bls.n	800ac2c <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e04b      	b.n	800acc4 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800ac2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac2e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ac3a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ac3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d3d2      	bcc.n	800abea <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ac48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac56:	fb03 f202 	mul.w	r2, r3, r2
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac66:	4413      	add	r3, r2
 800ac68:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2be5      	cmp	r3, #229	; 0xe5
 800ac72:	d103      	bne.n	800ac7c <_fx_directory_free_search+0x82c>
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	791b      	ldrb	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800ac7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac7e:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800ac80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac82:	2200      	movs	r2, #0
 800ac84:	469a      	mov	sl, r3
 800ac86:	4693      	mov	fp, r2
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d005      	beq.n	800aca2 <_fx_directory_free_search+0x852>
 800ac96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aca0:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800aca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aca4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aca8:	f005 f917 	bl	800feda <_fx_utility_FAT_entry_write>
 800acac:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800acae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800acb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb6:	e005      	b.n	800acc4 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acbc:	429a      	cmp	r2, r3
 800acbe:	f63f ada1 	bhi.w	800a804 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800acc2:	230a      	movs	r3, #10
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3790      	adds	r7, #144	; 0x90
 800acc8:	46bd      	mov	sp, r7
 800acca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acce:	bf00      	nop

0800acd0 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b5c      	cmp	r3, #92	; 0x5c
 800ace6:	d003      	beq.n	800acf0 <_fx_directory_name_extract+0x20>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b2f      	cmp	r3, #47	; 0x2f
 800acee:	d106      	bne.n	800acfe <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3301      	adds	r3, #1
 800acf4:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800acf6:	e002      	b.n	800acfe <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3301      	adds	r3, #1
 800acfc:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	d0f8      	beq.n	800acf8 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800ad0a:	e015      	b.n	800ad38 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b5c      	cmp	r3, #92	; 0x5c
 800ad12:	d017      	beq.n	800ad44 <_fx_directory_name_extract+0x74>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b2f      	cmp	r3, #47	; 0x2f
 800ad1a:	d013      	beq.n	800ad44 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2bff      	cmp	r3, #255	; 0xff
 800ad20:	d00f      	beq.n	800ad42 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3301      	adds	r3, #1
 800ad36:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e5      	bne.n	800ad0c <_fx_directory_name_extract+0x3c>
 800ad40:	e000      	b.n	800ad44 <_fx_directory_name_extract+0x74>
            break;
 800ad42:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4413      	add	r3, r2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00b      	beq.n	800ad6c <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800ad5a:	e007      	b.n	800ad6c <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	4413      	add	r3, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d0f1      	beq.n	800ad5c <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800ad84:	687b      	ldr	r3, [r7, #4]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
	...

0800ad94 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800ad94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad98:	b0c0      	sub	sp, #256	; 0x100
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad9e:	62b9      	str	r1, [r7, #40]	; 0x28
 800ada0:	627a      	str	r2, [r7, #36]	; 0x24
 800ada2:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800adbc:	1c5a      	adds	r2, r3, #1
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800adca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	2300      	movs	r3, #0
 800adda:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800addc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b5c      	cmp	r3, #92	; 0x5c
 800ade2:	d003      	beq.n	800adec <_fx_directory_search+0x58>
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b2f      	cmp	r3, #47	; 0x2f
 800adea:	d103      	bne.n	800adf4 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800adf2:	e044      	b.n	800ae7e <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800adf4:	4bab      	ldr	r3, [pc, #684]	; (800b0a4 <_fx_directory_search+0x310>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d022      	beq.n	800ae46 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800ae00:	4ba8      	ldr	r3, [pc, #672]	; (800b0a4 <_fx_directory_search+0x310>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d016      	beq.n	800ae3e <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800ae10:	4ba4      	ldr	r3, [pc, #656]	; (800b0a4 <_fx_directory_search+0x310>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae18:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	2370      	movs	r3, #112	; 0x70
 800ae20:	461a      	mov	r2, r3
 800ae22:	f00a f841 	bl	8014ea8 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800ae26:	4b9f      	ldr	r3, [pc, #636]	; (800b0a4 <_fx_directory_search+0x310>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2e:	3370      	adds	r3, #112	; 0x70
 800ae30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800ae34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae3c:	e01f      	b.n	800ae7e <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae44:	e01b      	b.n	800ae7e <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d012      	beq.n	800ae78 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ae58:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800ae5c:	2370      	movs	r3, #112	; 0x70
 800ae5e:	461a      	mov	r2, r3
 800ae60:	f00a f822 	bl	8014ea8 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800ae6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800ae6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae76:	e002      	b.n	800ae7e <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 81b9 	beq.w	800b1fc <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b5c      	cmp	r3, #92	; 0x5c
 800ae96:	d02d      	beq.n	800aef4 <_fx_directory_search+0x160>
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ae9e:	d14c      	bne.n	800af3a <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800aea0:	e028      	b.n	800aef4 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800aea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800aeb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800aec2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800aec6:	2b5c      	cmp	r3, #92	; 0x5c
 800aec8:	d102      	bne.n	800aed0 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800aeca:	232f      	movs	r3, #47	; 0x2f
 800aecc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800aed0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800aed4:	2b5c      	cmp	r3, #92	; 0x5c
 800aed6:	d102      	bne.n	800aede <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800aed8:	232f      	movs	r3, #47	; 0x2f
 800aeda:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800aede:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800aee2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d110      	bne.n	800af0c <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800aeea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeee:	3301      	adds	r3, #1
 800aef0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800aef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef8:	2bfe      	cmp	r3, #254	; 0xfe
 800aefa:	d808      	bhi.n	800af0e <_fx_directory_search+0x17a>
 800aefc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af02:	4413      	add	r3, r2
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1cb      	bne.n	800aea2 <_fx_directory_search+0x10e>
 800af0a:	e000      	b.n	800af0e <_fx_directory_search+0x17a>
                    break;
 800af0c:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800af0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af14:	4413      	add	r3, r2
 800af16:	7819      	ldrb	r1, [r3, #0]
 800af18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1e:	4413      	add	r3, r2
 800af20:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	4299      	cmp	r1, r3
 800af28:	d003      	beq.n	800af32 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800af30:	e0cf      	b.n	800b0d2 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800af32:	2301      	movs	r3, #1
 800af34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800af38:	e0cb      	b.n	800b0d2 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800af3a:	2301      	movs	r3, #1
 800af3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800af40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d043      	beq.n	800afd0 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800af48:	e029      	b.n	800af9e <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800af4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af50:	4413      	add	r3, r2
 800af52:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800af5c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800af60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af64:	4413      	add	r3, r2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800af6c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800af70:	2b5c      	cmp	r3, #92	; 0x5c
 800af72:	d102      	bne.n	800af7a <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800af74:	232f      	movs	r3, #47	; 0x2f
 800af76:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800af7a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800af7e:	2b5c      	cmp	r3, #92	; 0x5c
 800af80:	d102      	bne.n	800af88 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800af82:	232f      	movs	r3, #47	; 0x2f
 800af84:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800af88:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800af8c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800af90:	429a      	cmp	r2, r3
 800af92:	d111      	bne.n	800afb8 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800af94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af98:	3301      	adds	r3, #1
 800af9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800af9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa2:	2bfe      	cmp	r3, #254	; 0xfe
 800afa4:	d809      	bhi.n	800afba <_fx_directory_search+0x226>
 800afa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afae:	4413      	add	r3, r2
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1c9      	bne.n	800af4a <_fx_directory_search+0x1b6>
 800afb6:	e000      	b.n	800afba <_fx_directory_search+0x226>
                        break;
 800afb8:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800afba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc2:	4413      	add	r3, r2
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800afca:	2300      	movs	r3, #0
 800afcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800afd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d07c      	beq.n	800b0d2 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800afd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afde:	4413      	add	r3, r2
 800afe0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	2b5c      	cmp	r3, #92	; 0x5c
 800afe8:	d00c      	beq.n	800b004 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800afea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800aff6:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800aff8:	2b2f      	cmp	r3, #47	; 0x2f
 800affa:	d003      	beq.n	800b004 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800affc:	2300      	movs	r3, #0
 800affe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b002:	e004      	b.n	800b00e <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800b004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b008:	3301      	adds	r3, #1
 800b00a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800b00e:	2300      	movs	r3, #0
 800b010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b014:	e02d      	b.n	800b072 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800b016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b018:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b01c:	4413      	add	r3, r2
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800b024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b036:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b03a:	2b5c      	cmp	r3, #92	; 0x5c
 800b03c:	d102      	bne.n	800b044 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800b03e:	232f      	movs	r3, #47	; 0x2f
 800b040:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b044:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b048:	2b5c      	cmp	r3, #92	; 0x5c
 800b04a:	d102      	bne.n	800b052 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800b04c:	232f      	movs	r3, #47	; 0x2f
 800b04e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b052:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b056:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d119      	bne.n	800b092 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b062:	3301      	adds	r3, #1
 800b064:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800b068:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b06c:	3301      	adds	r3, #1
 800b06e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b076:	2bfe      	cmp	r3, #254	; 0xfe
 800b078:	d80c      	bhi.n	800b094 <_fx_directory_search+0x300>
 800b07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b07c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b080:	4413      	add	r3, r2
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d005      	beq.n	800b094 <_fx_directory_search+0x300>
 800b088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1c2      	bne.n	800b016 <_fx_directory_search+0x282>
 800b090:	e000      	b.n	800b094 <_fx_directory_search+0x300>
                        break;
 800b092:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b098:	2bff      	cmp	r3, #255	; 0xff
 800b09a:	d905      	bls.n	800b0a8 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800b09c:	2300      	movs	r3, #0
 800b09e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0a2:	e016      	b.n	800b0d2 <_fx_directory_search+0x33e>
 800b0a4:	2400360c 	.word	0x2400360c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800b0a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d010      	beq.n	800b0d2 <_fx_directory_search+0x33e>
 800b0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b0b6:	4413      	add	r3, r2
 800b0b8:	7819      	ldrb	r1, [r3, #0]
 800b0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800b0d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f000 8090 	beq.w	800b1fc <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800b0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800b0ee:	2270      	movs	r2, #112	; 0x70
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	f009 fed9 	bl	8014ea8 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0fc:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b0fe:	2300      	movs	r3, #0
 800b100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b104:	e01d      	b.n	800b142 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800b106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b10a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b10e:	4413      	add	r3, r2
 800b110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b112:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b116:	440a      	add	r2, r1
 800b118:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800b11c:	7812      	ldrb	r2, [r2, #0]
 800b11e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800b120:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b128:	4413      	add	r3, r2
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d103      	bne.n	800b138 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800b130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b134:	2bfe      	cmp	r3, #254	; 0xfe
 800b136:	d909      	bls.n	800b14c <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b13c:	3301      	adds	r3, #1
 800b13e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b146:	2bff      	cmp	r3, #255	; 0xff
 800b148:	d9dd      	bls.n	800b106 <_fx_directory_search+0x372>
 800b14a:	e000      	b.n	800b14e <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800b14c:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d041      	beq.n	800b1d8 <_fx_directory_search+0x444>
 800b154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b156:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d03c      	beq.n	800b1d8 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800b166:	6a3a      	ldr	r2, [r7, #32]
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	4610      	mov	r0, r2
 800b16c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b170:	2270      	movs	r2, #112	; 0x70
 800b172:	4619      	mov	r1, r3
 800b174:	f009 fe98 	bl	8014ea8 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b17e:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b18a:	2300      	movs	r3, #0
 800b18c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b190:	e01c      	b.n	800b1cc <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b192:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b19a:	441a      	add	r2, r3
 800b19c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b1a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1a4:	440b      	add	r3, r1
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800b1aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1b2:	4413      	add	r3, r2
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d103      	bne.n	800b1c2 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b1ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1be:	2bfe      	cmp	r3, #254	; 0xfe
 800b1c0:	d909      	bls.n	800b1d6 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1d0:	2bff      	cmp	r3, #255	; 0xff
 800b1d2:	d9de      	bls.n	800b192 <_fx_directory_search+0x3fe>
 800b1d4:	e000      	b.n	800b1d8 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800b1d6:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800b1d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d004      	beq.n	800b1ea <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800b1e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b1e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b1e8:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b1f0:	1c5a      	adds	r2, r3, #1
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e2ff      	b.n	800b7fc <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800b1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1fe:	2300      	movs	r3, #0
 800b200:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800b204:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800b20c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800b214:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b21a:	f7ff fd59 	bl	800acd0 <_fx_directory_name_extract>
 800b21e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800b220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80be 	beq.w	800b3a6 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b22a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b22e:	2300      	movs	r3, #0
 800b230:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800b232:	2300      	movs	r3, #0
 800b234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800b238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b242:	e02b      	b.n	800b29c <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800b244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b248:	3301      	adds	r3, #1
 800b24a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b24e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b252:	461a      	mov	r2, r3
 800b254:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b25a:	f004 fc15 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800b25e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800b262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800b26a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b26e:	e2c5      	b.n	800b7fc <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800b270:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b274:	2b01      	cmp	r3, #1
 800b276:	d90b      	bls.n	800b290 <_fx_directory_search+0x4fc>
 800b278:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b27c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b280:	4293      	cmp	r3, r2
 800b282:	d005      	beq.n	800b290 <_fx_directory_search+0x4fc>
 800b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d201      	bcs.n	800b294 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b290:	2303      	movs	r3, #3
 800b292:	e2b3      	b.n	800b7fc <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800b294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b298:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2a2:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800b2a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d3ca      	bcc.n	800b244 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	469a      	mov	sl, r3
 800b2b6:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2bc:	2200      	movs	r2, #0
 800b2be:	613b      	str	r3, [r7, #16]
 800b2c0:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b2c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	fb03 f20b 	mul.w	r2, r3, fp
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	fb0a f303 	mul.w	r3, sl, r3
 800b2d2:	4413      	add	r3, r2
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	fbaa 4502 	umull	r4, r5, sl, r2
 800b2da:	442b      	add	r3, r5
 800b2dc:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800b2de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	60bb      	str	r3, [r7, #8]
 800b2e6:	60fa      	str	r2, [r7, #12]
 800b2e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	fb03 f205 	mul.w	r2, r3, r5
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	fb04 f303 	mul.w	r3, r4, r3
 800b2f8:	4413      	add	r3, r2
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	fba4 8902 	umull	r8, r9, r4, r2
 800b300:	444b      	add	r3, r9
 800b302:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b304:	f04f 0200 	mov.w	r2, #0
 800b308:	f04f 0300 	mov.w	r3, #0
 800b30c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800b310:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800b314:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800b318:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800b31c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800b320:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b324:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d046      	beq.n	800b3bc <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800b336:	6a3a      	ldr	r2, [r7, #32]
 800b338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b33c:	4610      	mov	r0, r2
 800b33e:	4619      	mov	r1, r3
 800b340:	2370      	movs	r3, #112	; 0x70
 800b342:	461a      	mov	r2, r3
 800b344:	f009 fdb0 	bl	8014ea8 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b348:	6a3a      	ldr	r2, [r7, #32]
 800b34a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b34e:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800b350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b35a:	2300      	movs	r3, #0
 800b35c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b360:	e01c      	b.n	800b39c <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b362:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b36a:	18d1      	adds	r1, r2, r3
 800b36c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b374:	441a      	add	r2, r3
 800b376:	780b      	ldrb	r3, [r1, #0]
 800b378:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800b37a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b382:	4413      	add	r3, r2
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d103      	bne.n	800b392 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b38a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b38e:	2bfe      	cmp	r3, #254	; 0xfe
 800b390:	d913      	bls.n	800b3ba <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b396:	3301      	adds	r3, #1
 800b398:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a0:	2bff      	cmp	r3, #255	; 0xff
 800b3a2:	d9de      	bls.n	800b362 <_fx_directory_search+0x5ce>
 800b3a4:	e00a      	b.n	800b3bc <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	603b      	str	r3, [r7, #0]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3b4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800b3b8:	e000      	b.n	800b3bc <_fx_directory_search+0x628>
                            break;
 800b3ba:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800b3c8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800b3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3d4:	f7fd fe7a 	bl	80090cc <_fx_directory_entry_read>
 800b3d8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800b3dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800b3e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <_fx_directory_search+0x660>
            {
                return(status);
 800b3ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3f2:	e203      	b.n	800b7fc <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 80c6 	beq.w	800b58c <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	7f1b      	ldrb	r3, [r3, #28]
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f040 80a9 	bne.w	800b560 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	2be5      	cmp	r3, #229	; 0xe5
 800b416:	d104      	bne.n	800b422 <_fx_directory_search+0x68e>
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	791b      	ldrb	r3, [r3, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 80a1 	beq.w	800b564 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800b422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800b432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800b43c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b446:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b44a:	2b60      	cmp	r3, #96	; 0x60
 800b44c:	d908      	bls.n	800b460 <_fx_directory_search+0x6cc>
 800b44e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b452:	2b7a      	cmp	r3, #122	; 0x7a
 800b454:	d804      	bhi.n	800b460 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800b456:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b45a:	3b20      	subs	r3, #32
 800b45c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800b460:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b464:	2b60      	cmp	r3, #96	; 0x60
 800b466:	d908      	bls.n	800b47a <_fx_directory_search+0x6e6>
 800b468:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b46c:	2b7a      	cmp	r3, #122	; 0x7a
 800b46e:	d804      	bhi.n	800b47a <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800b470:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b474:	3b20      	subs	r3, #32
 800b476:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800b47a:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b47e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b482:	429a      	cmp	r2, r3
 800b484:	d10f      	bne.n	800b4a6 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800b486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b48a:	3301      	adds	r3, #1
 800b48c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800b490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b494:	3301      	adds	r3, #1
 800b496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800b49a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1c6      	bne.n	800b432 <_fx_directory_search+0x69e>
 800b4a4:	e000      	b.n	800b4a8 <_fx_directory_search+0x714>
                    break;
 800b4a6:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800b4a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10b      	bne.n	800b4ca <_fx_directory_search+0x736>
 800b4b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4b6:	781a      	ldrb	r2, [r3, #0]
 800b4b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d103      	bne.n	800b4ca <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b4c8:	e04d      	b.n	800b566 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	791b      	ldrb	r3, [r3, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d049      	beq.n	800b566 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800b4d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	3304      	adds	r3, #4
 800b4de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800b4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800b4ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800b4f6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b4fa:	2b60      	cmp	r3, #96	; 0x60
 800b4fc:	d908      	bls.n	800b510 <_fx_directory_search+0x77c>
 800b4fe:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b502:	2b7a      	cmp	r3, #122	; 0x7a
 800b504:	d804      	bhi.n	800b510 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800b506:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b50a:	3b20      	subs	r3, #32
 800b50c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800b510:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b514:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800b518:	429a      	cmp	r2, r3
 800b51a:	d10f      	bne.n	800b53c <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800b51c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b520:	3301      	adds	r3, #1
 800b522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800b526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b52a:	3301      	adds	r3, #1
 800b52c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800b530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1d3      	bne.n	800b4e2 <_fx_directory_search+0x74e>
 800b53a:	e000      	b.n	800b53e <_fx_directory_search+0x7aa>
                        break;
 800b53c:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800b53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10e      	bne.n	800b566 <_fx_directory_search+0x7d2>
 800b548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d106      	bne.n	800b566 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800b558:	2301      	movs	r3, #1
 800b55a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b55e:	e002      	b.n	800b566 <_fx_directory_search+0x7d2>
                continue;
 800b560:	bf00      	nop
 800b562:	e000      	b.n	800b566 <_fx_directory_search+0x7d2>
                continue;
 800b564:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800b566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b56a:	2200      	movs	r2, #0
 800b56c:	61bb      	str	r3, [r7, #24]
 800b56e:	61fa      	str	r2, [r7, #28]
 800b570:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b574:	69b9      	ldr	r1, [r7, #24]
 800b576:	4291      	cmp	r1, r2
 800b578:	69f9      	ldr	r1, [r7, #28]
 800b57a:	eb71 0303 	sbcs.w	r3, r1, r3
 800b57e:	d206      	bcs.n	800b58e <_fx_directory_search+0x7fa>
 800b580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b584:	2b00      	cmp	r3, #0
 800b586:	f43f af1f 	beq.w	800b3c8 <_fx_directory_search+0x634>
 800b58a:	e000      	b.n	800b58e <_fx_directory_search+0x7fa>
                break;
 800b58c:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800b58e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800b596:	2304      	movs	r3, #4
 800b598:	e130      	b.n	800b7fc <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	7f1b      	ldrb	r3, [r3, #28]
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d04f      	beq.n	800b646 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	2370      	movs	r3, #112	; 0x70
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	f009 fc79 	bl	8014ea8 <memcpy>
            search_dir_ptr =  &search_dir;
 800b5b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b5be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800b5c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d13f      	bne.n	800b650 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800b5d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d02e      	beq.n	800b63e <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800b5e8:	6a3a      	ldr	r2, [r7, #32]
 800b5ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ee:	4610      	mov	r0, r2
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	2370      	movs	r3, #112	; 0x70
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	f009 fc57 	bl	8014ea8 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b5fa:	6a3a      	ldr	r2, [r7, #32]
 800b5fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b600:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800b602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b60c:	2300      	movs	r3, #0
 800b60e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b612:	e010      	b.n	800b636 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800b614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b61c:	18d1      	adds	r1, r2, r3
 800b61e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b626:	441a      	add	r2, r3
 800b628:	780b      	ldrb	r3, [r1, #0]
 800b62a:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b62c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b630:	3301      	adds	r3, #1
 800b632:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b63a:	2bff      	cmp	r3, #255	; 0xff
 800b63c:	d9ea      	bls.n	800b614 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b644:	e004      	b.n	800b650 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800b64c:	2304      	movs	r3, #4
 800b64e:	e0d5      	b.n	800b7fc <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	2b00      	cmp	r3, #0
 800b654:	f47f add6 	bne.w	800b204 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800b658:	2300      	movs	r3, #0
 800b65a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800b65e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b5c      	cmp	r3, #92	; 0x5c
 800b666:	d028      	beq.n	800b6ba <_fx_directory_search+0x926>
 800b668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b2f      	cmp	r3, #47	; 0x2f
 800b670:	d023      	beq.n	800b6ba <_fx_directory_search+0x926>
 800b672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01f      	beq.n	800b6ba <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b67a:	e012      	b.n	800b6a2 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800b67c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b684:	4413      	add	r3, r2
 800b686:	7819      	ldrb	r1, [r3, #0]
 800b688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68e:	4413      	add	r3, r2
 800b690:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b694:	460a      	mov	r2, r1
 800b696:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800b698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69c:	3301      	adds	r3, #1
 800b69e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b6a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a6:	2bfe      	cmp	r3, #254	; 0xfe
 800b6a8:	d807      	bhi.n	800b6ba <_fx_directory_search+0x926>
 800b6aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b2:	4413      	add	r3, r2
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1e0      	bne.n	800b67c <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800b6ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6c2:	d012      	beq.n	800b6ea <_fx_directory_search+0x956>
 800b6c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b2f      	cmp	r3, #47	; 0x2f
 800b6cc:	d00d      	beq.n	800b6ea <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	2bfe      	cmp	r3, #254	; 0xfe
 800b6d4:	d809      	bhi.n	800b6ea <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800b6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800b6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e2:	4413      	add	r3, r2
 800b6e4:	222f      	movs	r2, #47	; 0x2f
 800b6e6:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800b6f0:	e017      	b.n	800b722 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800b6f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b6f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b6fa:	4413      	add	r3, r2
 800b6fc:	7819      	ldrb	r1, [r3, #0]
 800b6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b704:	4413      	add	r3, r2
 800b706:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b70a:	460a      	mov	r2, r1
 800b70c:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b712:	3301      	adds	r3, #1
 800b714:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800b718:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b71c:	3301      	adds	r3, #1
 800b71e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800b722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b726:	2bff      	cmp	r3, #255	; 0xff
 800b728:	d807      	bhi.n	800b73a <_fx_directory_search+0x9a6>
 800b72a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b72e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b732:	4413      	add	r3, r2
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1db      	bne.n	800b6f2 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800b73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b73e:	2bff      	cmp	r3, #255	; 0xff
 800b740:	d808      	bhi.n	800b754 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800b742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b748:	4413      	add	r3, r2
 800b74a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	e003      	b.n	800b75c <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	2200      	movs	r2, #0
 800b758:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800b75c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00e      	beq.n	800b782 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b76a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b76e:	4611      	mov	r1, r2
 800b770:	2270      	movs	r2, #112	; 0x70
 800b772:	4618      	mov	r0, r3
 800b774:	f009 fb98 	bl	8014ea8 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	2201      	movs	r2, #1
 800b77c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800b780:	e003      	b.n	800b78a <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	2200      	movs	r2, #0
 800b786:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800b792:	4611      	mov	r1, r2
 800b794:	2270      	movs	r2, #112	; 0x70
 800b796:	4618      	mov	r0, r3
 800b798:	f009 fb86 	bl	8014ea8 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7ae:	e01e      	b.n	800b7ee <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7b8:	4413      	add	r3, r2
 800b7ba:	7819      	ldrb	r1, [r3, #0]
 800b7bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7d4:	4413      	add	r3, r2
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d103      	bne.n	800b7e4 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800b7dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7e0:	2bfe      	cmp	r3, #254	; 0xfe
 800b7e2:	d909      	bls.n	800b7f8 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b7e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7f2:	2bff      	cmp	r3, #255	; 0xff
 800b7f4:	d9dc      	bls.n	800b7b0 <_fx_directory_search+0xa1c>
 800b7f6:	e000      	b.n	800b7fa <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800b7f8:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b802:	46bd      	mov	sp, r7
 800b804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b808 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a49      	ldr	r2, [pc, #292]	; (800b93c <_fx_file_close+0x134>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d001      	beq.n	800b81e <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800b81a:	2307      	movs	r3, #7
 800b81c:	e08a      	b.n	800b934 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b822:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a42      	ldr	r2, [pc, #264]	; (800b940 <_fx_file_close+0x138>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d001      	beq.n	800b840 <_fx_file_close+0x38>
 800b83c:	2311      	movs	r3, #17
 800b83e:	e079      	b.n	800b934 <_fx_file_close+0x12c>
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b846:	f04f 31ff 	mov.w	r1, #4294967295
 800b84a:	4618      	mov	r0, r3
 800b84c:	f007 f8b8 	bl	80129c0 <_tx_mutex_get>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <_fx_file_close+0x52>
 800b856:	2311      	movs	r3, #17
 800b858:	e06c      	b.n	800b934 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	429a      	cmp	r2, r3
 800b862:	d104      	bne.n	800b86e <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	2200      	movs	r2, #0
 800b868:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800b86c:	e014      	b.n	800b898 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800b876:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800b880:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d104      	bne.n	800b898 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b89e:	1e5a      	subs	r2, r3, #1
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a26      	ldr	r2, [pc, #152]	; (800b944 <_fx_file_close+0x13c>)
 800b8aa:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d138      	bne.n	800b926 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d034      	beq.n	800b926 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8c0:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b8c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8c6:	b672      	cpsid	i
    return(int_posture);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800b8ca:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800b8cc:	4b1e      	ldr	r3, [pc, #120]	; (800b948 <_fx_file_close+0x140>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800b8d6:	4b1d      	ldr	r3, [pc, #116]	; (800b94c <_fx_file_close+0x144>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800b8e0:	4b1a      	ldr	r3, [pc, #104]	; (800b94c <_fx_file_close+0x144>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f383 8810 	msr	PRIMASK, r3
}
 800b8f4:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3368      	adds	r3, #104	; 0x68
 800b906:	4619      	mov	r1, r3
 800b908:	69f8      	ldr	r0, [r7, #28]
 800b90a:	f7fd ff65 	bl	80097d8 <_fx_directory_entry_write>
 800b90e:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b91c:	4618      	mov	r0, r3
 800b91e:	f007 fac7 	bl	8012eb0 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	e006      	b.n	800b934 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b92c:	4618      	mov	r0, r3
 800b92e:	f007 fabf 	bl	8012eb0 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3720      	adds	r7, #32
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	46494c45 	.word	0x46494c45
 800b940:	4d454449 	.word	0x4d454449
 800b944:	46494c43 	.word	0x46494c43
 800b948:	24003590 	.word	0x24003590
 800b94c:	2400358c 	.word	0x2400358c

0800b950 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b0c5      	sub	sp, #276	; 0x114
 800b954:	af02      	add	r7, sp, #8
 800b956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b95e:	6018      	str	r0, [r3, #0]
 800b960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b968:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800b96a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b978:	1c5a      	adds	r2, r3, #1
 800b97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800b988:	2300      	movs	r3, #0
 800b98a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800b98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800b99c:	e020      	b.n	800b9e0 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800b99e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b5c      	cmp	r3, #92	; 0x5c
 800b9a6:	d004      	beq.n	800b9b2 <_fx_file_create+0x62>
 800b9a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b2f      	cmp	r3, #47	; 0x2f
 800b9b0:	d103      	bne.n	800b9ba <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b9b8:	e00d      	b.n	800b9d6 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800b9ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d103      	bne.n	800b9cc <_fx_file_create+0x7c>
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800b9d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800b9e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1d9      	bne.n	800b99e <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800b9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <_fx_file_create+0xaa>
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f6:	2bff      	cmp	r3, #255	; 0xff
 800b9f8:	d901      	bls.n	800b9fe <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	e10a      	b.n	800bc14 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800b9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800ba0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ba10:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800ba12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800ba20:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800ba24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ba2c:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800ba34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a74      	ldr	r2, [pc, #464]	; (800bc20 <_fx_file_create+0x2d0>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d001      	beq.n	800ba56 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800ba52:	2311      	movs	r3, #17
 800ba54:	e0de      	b.n	800bc14 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ba56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a6f      	ldr	r2, [pc, #444]	; (800bc20 <_fx_file_create+0x2d0>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d001      	beq.n	800ba6c <_fx_file_create+0x11c>
 800ba68:	2311      	movs	r3, #17
 800ba6a:	e0d3      	b.n	800bc14 <_fx_file_create+0x2c4>
 800ba6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ba7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f006 ff9e 	bl	80129c0 <_tx_mutex_get>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <_fx_file_create+0x13e>
 800ba8a:	2311      	movs	r3, #17
 800ba8c:	e0c2      	b.n	800bc14 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800ba8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800baa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800baae:	4618      	mov	r0, r3
 800bab0:	f007 f9fe 	bl	8012eb0 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800bab4:	2323      	movs	r3, #35	; 0x23
 800bab6:	e0ad      	b.n	800bc14 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800bab8:	f107 0408 	add.w	r4, r7, #8
 800babc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac4:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800bac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bacc:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800bad0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	4623      	mov	r3, r4
 800bad8:	6809      	ldr	r1, [r1, #0]
 800bada:	6800      	ldr	r0, [r0, #0]
 800badc:	f7ff f95a 	bl	800ad94 <_fx_directory_search>
 800bae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800bae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10b      	bne.n	800bb04 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800baec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bafa:	4618      	mov	r0, r3
 800bafc:	f007 f9d8 	bl	8012eb0 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800bb00:	230b      	movs	r3, #11
 800bb02:	e087      	b.n	800bc14 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800bb04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff f8df 	bl	800acd0 <_fx_directory_name_extract>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00b      	beq.n	800bb30 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bb26:	4618      	mov	r0, r3
 800bb28:	f007 f9c2 	bl	8012eb0 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800bb2c:	230d      	movs	r3, #13
 800bb2e:	e071      	b.n	800bc14 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800bb30:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bb34:	f107 0108 	add.w	r1, r7, #8
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f7fe fc85 	bl	800a450 <_fx_directory_free_search>
 800bb46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800bb4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00c      	beq.n	800bb6c <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800bb52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bb60:	4618      	mov	r0, r3
 800bb62:	f007 f9a5 	bl	8012eb0 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800bb66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb6a:	e053      	b.n	800bc14 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800bb6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb72:	4611      	mov	r1, r2
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff f8ab 	bl	800acd0 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb7a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800bb82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800bb86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb8a:	b672      	cpsid	i
    return(int_posture);
 800bb8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800bb90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800bb94:	4b23      	ldr	r3, [pc, #140]	; (800bc24 <_fx_file_create+0x2d4>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800bb9c:	4b22      	ldr	r3, [pc, #136]	; (800bc28 <_fx_file_create+0x2d8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bba4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb0:	f383 8810 	msr	PRIMASK, r3
}
 800bbb4:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800bbb6:	2320      	movs	r3, #32
 800bbb8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	f04f 0300 	mov.w	r3, #0
 800bbc4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800bbce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd4:	d106      	bne.n	800bbe4 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800bbd6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800bbda:	f043 0302 	orr.w	r3, r3, #2
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800bbe4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bbe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	f7fd fdf0 	bl	80097d8 <_fx_directory_entry_write>
 800bbf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800bbfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f007 f950 	bl	8012eb0 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800bc10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd90      	pop	{r4, r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	4d454449 	.word	0x4d454449
 800bc24:	24003590 	.word	0x24003590
 800bc28:	2400358c 	.word	0x2400358c

0800bc2c <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800bc2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc30:	b0c2      	sub	sp, #264	; 0x108
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bc38:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800bc42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	4bcf      	ldr	r3, [pc, #828]	; (800bf88 <_fx_file_extended_seek+0x35c>)
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d001      	beq.n	800bc52 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800bc4e:	2307      	movs	r3, #7
 800bc50:	e2b4      	b.n	800c1bc <_fx_file_extended_seek+0x590>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800bc52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800bc5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800bc6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800bc78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	4bc3      	ldr	r3, [pc, #780]	; (800bf8c <_fx_file_extended_seek+0x360>)
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d001      	beq.n	800bc88 <_fx_file_extended_seek+0x5c>
 800bc84:	2311      	movs	r3, #17
 800bc86:	e299      	b.n	800c1bc <_fx_file_extended_seek+0x590>
 800bc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc8c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bc90:	f04f 31ff 	mov.w	r1, #4294967295
 800bc94:	4618      	mov	r0, r3
 800bc96:	f006 fe93 	bl	80129c0 <_tx_mutex_get>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <_fx_file_extended_seek+0x78>
 800bca0:	2311      	movs	r3, #17
 800bca2:	e28b      	b.n	800c1bc <_fx_file_extended_seek+0x590>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800bca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800bcac:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	bf08      	it	eq
 800bcb4:	4282      	cmpeq	r2, r0
 800bcb6:	d108      	bne.n	800bcca <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcbc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f007 f8f5 	bl	8012eb0 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e278      	b.n	800c1bc <_fx_file_extended_seek+0x590>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800bcca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800bcd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800bcd6:	fb02 f303 	mul.w	r3, r2, r3
 800bcda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800bcde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d108      	bne.n	800bcf8 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800bce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f007 f8de 	bl	8012eb0 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e261      	b.n	800c1bc <_fx_file_extended_seek+0x590>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800bcf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcfc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800bd00:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800bd04:	4290      	cmp	r0, r2
 800bd06:	eb71 0303 	sbcs.w	r3, r1, r3
 800bd0a:	d205      	bcs.n	800bd18 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800bd0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd10:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800bd14:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800bd18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bd28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	469a      	mov	sl, r3
 800bd30:	4693      	mov	fp, r2
 800bd32:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800bd36:	460b      	mov	r3, r1
 800bd38:	fb0a f203 	mul.w	r2, sl, r3
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	fb03 f30b 	mul.w	r3, r3, fp
 800bd42:	4413      	add	r3, r2
 800bd44:	4602      	mov	r2, r0
 800bd46:	fba2 450a 	umull	r4, r5, r2, sl
 800bd4a:	442b      	add	r3, r5
 800bd4c:	461d      	mov	r5, r3
 800bd4e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800bd52:	42a2      	cmp	r2, r4
 800bd54:	41ab      	sbcs	r3, r5
 800bd56:	f0c0 8155 	bcc.w	800c004 <_fx_file_extended_seek+0x3d8>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800bd5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd60:	2200      	movs	r2, #0
 800bd62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd66:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd74:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800bd78:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800bd82:	4652      	mov	r2, sl
 800bd84:	fb02 f203 	mul.w	r2, r2, r3
 800bd88:	465b      	mov	r3, fp
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	fb01 f303 	mul.w	r3, r1, r3
 800bd90:	4413      	add	r3, r2
 800bd92:	4622      	mov	r2, r4
 800bd94:	4651      	mov	r1, sl
 800bd96:	fba2 8901 	umull	r8, r9, r2, r1
 800bd9a:	444b      	add	r3, r9
 800bd9c:	4699      	mov	r9, r3
 800bd9e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800bda2:	4590      	cmp	r8, r2
 800bda4:	eb79 0303 	sbcs.w	r3, r9, r3
 800bda8:	d225      	bcs.n	800bdf6 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800bdaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800bdb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bdbe:	fb02 f303 	mul.w	r3, r2, r3
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bdc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800bdcc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800bdd0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	1a51      	subs	r1, r2, r1
 800bdd8:	6139      	str	r1, [r7, #16]
 800bdda:	4629      	mov	r1, r5
 800bddc:	eb63 0301 	sbc.w	r3, r3, r1
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bde6:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800bdea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bdf4:	e0b7      	b.n	800bf66 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800bdf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdfa:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800bdfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be00:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800be02:	4413      	add	r3, r2
 800be04:	3b01      	subs	r3, #1
 800be06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800be0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	1e5a      	subs	r2, r3, #1
 800be12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be16:	fb02 f303 	mul.w	r3, r2, r3
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be20:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800be24:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800be28:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800be2c:	4621      	mov	r1, r4
 800be2e:	1a51      	subs	r1, r2, r1
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4629      	mov	r1, r5
 800be34:	eb63 0301 	sbc.w	r3, r3, r1
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800be3e:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800be42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	3b01      	subs	r3, #1
 800be4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800be4e:	e08a      	b.n	800bf66 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800be50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be54:	3301      	adds	r3, #1
 800be56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800be5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800be5e:	461a      	mov	r2, r3
 800be60:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800be64:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be68:	f003 fe0e 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800be6c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800be70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be74:	2b00      	cmp	r3, #0
 800be76:	d009      	beq.n	800be8c <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800be78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be7c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800be80:	4618      	mov	r0, r3
 800be82:	f007 f815 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800be86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be8a:	e197      	b.n	800c1bc <_fx_file_extended_seek+0x590>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800be8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800be94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800be9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bea0:	2200      	movs	r2, #0
 800bea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bea6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800beaa:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800beae:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800beb2:	4621      	mov	r1, r4
 800beb4:	4291      	cmp	r1, r2
 800beb6:	4629      	mov	r1, r5
 800beb8:	eb71 0303 	sbcs.w	r3, r1, r3
 800bebc:	d216      	bcs.n	800beec <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800bebe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bec8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800becc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800bed0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bed4:	4621      	mov	r1, r4
 800bed6:	1a51      	subs	r1, r2, r1
 800bed8:	6039      	str	r1, [r7, #0]
 800beda:	4629      	mov	r1, r5
 800bedc:	eb63 0301 	sbc.w	r3, r3, r1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bee6:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800beea:	e03c      	b.n	800bf66 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800beec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bef4:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800bef6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800befa:	1e5a      	subs	r2, r3, #1
 800befc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf00:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800bf02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf10:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800bf14:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800bf18:	4621      	mov	r1, r4
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	4283      	cmp	r3, r0
 800bf1e:	bf08      	it	eq
 800bf20:	428a      	cmpeq	r2, r1
 800bf22:	d135      	bne.n	800bf90 <_fx_file_extended_seek+0x364>
 800bf24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d931      	bls.n	800bf90 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800bf2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf34:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800bf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d227      	bcs.n	800bf90 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800bf40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf48:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800bf4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf56:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800bf58:	f04f 0200 	mov.w	r2, #0
 800bf5c:	f04f 0300 	mov.w	r3, #0
 800bf60:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800bf64:	e014      	b.n	800bf90 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800bf66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d911      	bls.n	800bf92 <_fx_file_extended_seek+0x366>
 800bf6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf76:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800bf7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	f4ff af66 	bcc.w	800be50 <_fx_file_extended_seek+0x224>
 800bf84:	e005      	b.n	800bf92 <_fx_file_extended_seek+0x366>
 800bf86:	bf00      	nop
 800bf88:	46494c45 	.word	0x46494c45
 800bf8c:	4d454449 	.word	0x4d454449
                    break;
 800bf90:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800bf92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800bfa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfa8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bfaa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800bfae:	462b      	mov	r3, r5
 800bfb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	fb02 f203 	mul.w	r2, r2, r3
 800bfba:	464b      	mov	r3, r9
 800bfbc:	4621      	mov	r1, r4
 800bfbe:	fb01 f303 	mul.w	r3, r1, r3
 800bfc2:	4413      	add	r3, r2
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4641      	mov	r1, r8
 800bfc8:	fba2 1201 	umull	r1, r2, r2, r1
 800bfcc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bfd0:	460a      	mov	r2, r1
 800bfd2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800bfd6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bfda:	4413      	add	r3, r2
 800bfdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bfe0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800bfe4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4291      	cmp	r1, r2
 800bfec:	4629      	mov	r1, r5
 800bfee:	4199      	sbcs	r1, r3
 800bff0:	d22f      	bcs.n	800c052 <_fx_file_extended_seek+0x426>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800bff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bff6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bffa:	4618      	mov	r0, r3
 800bffc:	f006 ff58 	bl	8012eb0 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800c000:	2308      	movs	r3, #8
 800c002:	e0db      	b.n	800c1bc <_fx_file_extended_seek+0x590>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800c004:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c008:	2200      	movs	r2, #0
 800c00a:	673b      	str	r3, [r7, #112]	; 0x70
 800c00c:	677a      	str	r2, [r7, #116]	; 0x74
 800c00e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c012:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c016:	f7f4 fa7f 	bl	8000518 <__aeabi_uldivmod>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c022:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800c024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c028:	695a      	ldr	r2, [r3, #20]
 800c02a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c030:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800c032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c036:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800c038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c03c:	2200      	movs	r2, #0
 800c03e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c040:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c042:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c046:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c04a:	f7f4 fa65 	bl	8000518 <__aeabi_uldivmod>
 800c04e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800c052:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c056:	2200      	movs	r2, #0
 800c058:	663b      	str	r3, [r7, #96]	; 0x60
 800c05a:	667a      	str	r2, [r7, #100]	; 0x64
 800c05c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c060:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c064:	4621      	mov	r1, r4
 800c066:	4628      	mov	r0, r5
 800c068:	4283      	cmp	r3, r0
 800c06a:	bf08      	it	eq
 800c06c:	428a      	cmpeq	r2, r1
 800c06e:	d151      	bne.n	800c114 <_fx_file_extended_seek+0x4e8>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c07a:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c07c:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c07e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c082:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c084:	fb01 f303 	mul.w	r3, r1, r3
 800c088:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c08a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c08e:	1e51      	subs	r1, r2, #1
 800c090:	65b9      	str	r1, [r7, #88]	; 0x58
 800c092:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c096:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	2200      	movs	r2, #0
 800c0a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c0a2:	657a      	str	r2, [r7, #84]	; 0x54
 800c0a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c0a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c0ac:	f7f4 fa34 	bl	8000518 <__aeabi_uldivmod>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	4423      	add	r3, r4
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c0c6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c0ca:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c0ce:	1e51      	subs	r1, r2, #1
 800c0d0:	6439      	str	r1, [r7, #64]	; 0x40
 800c0d2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c0d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0de:	2200      	movs	r2, #0
 800c0e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c0e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c0ec:	f7f4 fa14 	bl	8000518 <__aeabi_uldivmod>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0f8:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c0fa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c0fe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c102:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800c106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c10a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c10c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c110:	631a      	str	r2, [r3, #48]	; 0x30
 800c112:	e04b      	b.n	800c1ac <_fx_file_extended_seek+0x580>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c11e:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c120:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c122:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c126:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c128:	fb01 f303 	mul.w	r3, r1, r3
 800c12c:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c134:	2200      	movs	r2, #0
 800c136:	633b      	str	r3, [r7, #48]	; 0x30
 800c138:	637a      	str	r2, [r7, #52]	; 0x34
 800c13a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c13e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c142:	f7f4 f9e9 	bl	8000518 <__aeabi_uldivmod>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c14a:	4613      	mov	r3, r2
 800c14c:	4423      	add	r3, r4
 800c14e:	2200      	movs	r2, #0
 800c150:	62bb      	str	r3, [r7, #40]	; 0x28
 800c152:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c158:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c15c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c166:	2200      	movs	r2, #0
 800c168:	623b      	str	r3, [r7, #32]
 800c16a:	627a      	str	r2, [r7, #36]	; 0x24
 800c16c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c170:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c174:	f7f4 f9d0 	bl	8000518 <__aeabi_uldivmod>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c180:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c182:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c186:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c18a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c194:	2200      	movs	r2, #0
 800c196:	61bb      	str	r3, [r7, #24]
 800c198:	61fa      	str	r2, [r7, #28]
 800c19a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c19e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1a2:	f7f4 f9b9 	bl	8000518 <__aeabi_uldivmod>
 800c1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f006 fe7b 	bl	8012eb0 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c1c8 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800c1c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1cc:	b0e8      	sub	sp, #416	; 0x1a0
 800c1ce:	af02      	add	r7, sp, #8
 800c1d0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800c1d4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800c1d8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800c1dc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c1e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	4bd9      	ldr	r3, [pc, #868]	; (800c554 <_fx_file_open+0x38c>)
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d002      	beq.n	800c1f8 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c1f2:	2311      	movs	r3, #17
 800c1f4:	f000 bcc4 	b.w	800cb80 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800c1f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c1fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c200:	1c5a      	adds	r2, r3, #1
 800c202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c206:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800c20a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c20e:	2300      	movs	r3, #0
 800c210:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800c214:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d006      	beq.n	800c22c <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800c21e:	4bce      	ldr	r3, [pc, #824]	; (800c558 <_fx_file_open+0x390>)
 800c220:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c224:	2318      	movs	r3, #24
 800c226:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800c22a:	e006      	b.n	800c23a <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800c22c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800c230:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c234:	2318      	movs	r3, #24
 800c236:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800c23a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d106      	bne.n	800c250 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800c242:	2300      	movs	r3, #0
 800c244:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800c248:	2301      	movs	r3, #1
 800c24a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800c24e:	e002      	b.n	800c256 <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800c250:	2300      	movs	r3, #0
 800c252:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c256:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	4bbd      	ldr	r3, [pc, #756]	; (800c554 <_fx_file_open+0x38c>)
 800c25e:	429a      	cmp	r2, r3
 800c260:	d002      	beq.n	800c268 <_fx_file_open+0xa0>
 800c262:	2311      	movs	r3, #17
 800c264:	f000 bc8c 	b.w	800cb80 <_fx_file_open+0x9b8>
 800c268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c26c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c270:	f04f 31ff 	mov.w	r1, #4294967295
 800c274:	4618      	mov	r0, r3
 800c276:	f006 fba3 	bl	80129c0 <_tx_mutex_get>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <_fx_file_open+0xbe>
 800c280:	2311      	movs	r3, #17
 800c282:	f000 bc7d 	b.w	800cb80 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800c286:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c28a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800c28e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c292:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800c294:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c298:	2300      	movs	r3, #0
 800c29a:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800c29e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c2a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c2b0:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800c2b4:	f7fe fd6e 	bl	800ad94 <_fx_directory_search>
 800c2b8:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c2bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00a      	beq.n	800c2da <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c2c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2c8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f006 fdef 	bl	8012eb0 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c2d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c2d6:	f000 bc53 	b.w	800cb80 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800c2da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c2de:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800c2e2:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d009      	beq.n	800c302 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c2ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2f2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f006 fdda 	bl	8012eb0 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800c2fc:	2305      	movs	r3, #5
 800c2fe:	f000 bc3f 	b.w	800cb80 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800c302:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c306:	2b01      	cmp	r3, #1
 800c308:	d160      	bne.n	800c3cc <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800c30a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c30e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c316:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c31a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c31e:	4618      	mov	r0, r3
 800c320:	f006 fdc6 	bl	8012eb0 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800c324:	2323      	movs	r3, #35	; 0x23
 800c326:	f000 bc2b 	b.w	800cb80 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800c32a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c32e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c33a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c33e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c342:	4618      	mov	r0, r3
 800c344:	f006 fdb4 	bl	8012eb0 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800c348:	2306      	movs	r3, #6
 800c34a:	f000 bc19 	b.w	800cb80 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800c34e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c352:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c356:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800c35a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c35e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c362:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800c366:	e02d      	b.n	800c3c4 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800c368:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c36c:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800c370:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c374:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800c378:	4299      	cmp	r1, r3
 800c37a:	bf08      	it	eq
 800c37c:	4290      	cmpeq	r0, r2
 800c37e:	d117      	bne.n	800c3b0 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800c380:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c384:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800c388:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c38c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800c390:	429a      	cmp	r2, r3
 800c392:	d10d      	bne.n	800c3b0 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800c394:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c398:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d108      	bne.n	800c3b0 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800c39e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3a2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f006 fd82 	bl	8012eb0 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800c3ac:	2306      	movs	r3, #6
 800c3ae:	e3e7      	b.n	800cb80 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800c3b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800c3ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800c3c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1cd      	bne.n	800c368 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800c3cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800c3d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3dc:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800c3e0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c3e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800c3ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c3f0:	fb02 f303 	mul.w	r3, r2, r3
 800c3f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800c3f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800c400:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d108      	bne.n	800c41a <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c408:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c40c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c410:	4618      	mov	r0, r3
 800c412:	f006 fd4d 	bl	8012eb0 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800c416:	2302      	movs	r3, #2
 800c418:	e3b2      	b.n	800cb80 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800c420:	2300      	movs	r3, #0
 800c422:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800c426:	2301      	movs	r3, #1
 800c428:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800c42c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c430:	2301      	movs	r3, #1
 800c432:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800c434:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 8103 	beq.w	800c644 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800c43e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c442:	2200      	movs	r2, #0
 800c444:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c448:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800c44c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c450:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800c454:	4621      	mov	r1, r4
 800c456:	eb11 0a02 	adds.w	sl, r1, r2
 800c45a:	4629      	mov	r1, r5
 800c45c:	eb41 0b03 	adc.w	fp, r1, r3
 800c460:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800c464:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c468:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800c46c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c470:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c474:	2200      	movs	r2, #0
 800c476:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c47a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c47e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c482:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800c486:	f7f4 f847 	bl	8000518 <__aeabi_uldivmod>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4610      	mov	r0, r2
 800c490:	4619      	mov	r1, r3
 800c492:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c496:	2200      	movs	r2, #0
 800c498:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c49c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c4a0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800c4a4:	4623      	mov	r3, r4
 800c4a6:	fb03 f201 	mul.w	r2, r3, r1
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	fb00 f303 	mul.w	r3, r0, r3
 800c4b0:	4413      	add	r3, r2
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	fba0 8902 	umull	r8, r9, r0, r2
 800c4b8:	444b      	add	r3, r9
 800c4ba:	4699      	mov	r9, r3
 800c4bc:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800c4c0:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800c4c4:	e12f      	b.n	800c726 <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800c4c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800c4d0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800c4da:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800c4de:	f003 fad3 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800c4e2:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800c4e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d009      	beq.n	800c502 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c4ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c4f2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f006 fcda 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800c4fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c500:	e33e      	b.n	800cb80 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800c502:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800c506:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d006      	beq.n	800c51c <_fx_file_open+0x354>
 800c50e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c514:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c518:	4293      	cmp	r3, r2
 800c51a:	d908      	bls.n	800c52e <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c51c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c520:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c524:	4618      	mov	r0, r3
 800c526:	f006 fcc3 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800c52a:	2303      	movs	r3, #3
 800c52c:	e328      	b.n	800cb80 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800c52e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c532:	1c5a      	adds	r2, r3, #1
 800c534:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c538:	429a      	cmp	r2, r3
 800c53a:	d10f      	bne.n	800c55c <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800c53c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00e      	beq.n	800c562 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800c544:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c550:	619a      	str	r2, [r3, #24]
 800c552:	e006      	b.n	800c562 <_fx_file_open+0x39a>
 800c554:	4d454449 	.word	0x4d454449
 800c558:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800c562:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c566:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800c56a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c56e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800c572:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c576:	2200      	movs	r2, #0
 800c578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c57c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800c580:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c584:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800c588:	4641      	mov	r1, r8
 800c58a:	4291      	cmp	r1, r2
 800c58c:	4649      	mov	r1, r9
 800c58e:	eb71 0303 	sbcs.w	r3, r1, r3
 800c592:	d216      	bcs.n	800c5c2 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800c594:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c598:	2200      	movs	r2, #0
 800c59a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c59e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c5a2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c5a6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	1a51      	subs	r1, r2, r1
 800c5ae:	6039      	str	r1, [r7, #0]
 800c5b0:	4649      	mov	r1, r9
 800c5b2:	eb63 0301 	sbc.w	r3, r3, r1
 800c5b6:	607b      	str	r3, [r7, #4]
 800c5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5bc:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800c5c0:	e040      	b.n	800c644 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800c5c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c5c6:	6a1b      	ldr	r3, [r3, #32]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d13b      	bne.n	800c644 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800c5cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c5d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800c5d4:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800c5d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c5da:	1e5a      	subs	r2, r3, #1
 800c5dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c5e0:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800c5e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c5ec:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c5f0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c5f4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	4283      	cmp	r3, r0
 800c5fe:	bf08      	it	eq
 800c600:	428a      	cmpeq	r2, r1
 800c602:	d11f      	bne.n	800c644 <_fx_file_open+0x47c>
 800c604:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d91b      	bls.n	800c644 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c60c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c610:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c614:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c618:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d211      	bcs.n	800c644 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800c620:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c624:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c628:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800c62a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c636:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800c638:	f04f 0200 	mov.w	r2, #0
 800c63c:	f04f 0300 	mov.w	r3, #0
 800c640:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c644:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d90a      	bls.n	800c662 <_fx_file_open+0x49a>
 800c64c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c650:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c654:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c658:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c65c:	4293      	cmp	r3, r2
 800c65e:	f4ff af32 	bcc.w	800c4c6 <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800c662:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c668:	2200      	movs	r2, #0
 800c66a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c66e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800c672:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c678:	2200      	movs	r2, #0
 800c67a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c67e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800c682:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800c686:	464b      	mov	r3, r9
 800c688:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800c68c:	4652      	mov	r2, sl
 800c68e:	fb02 f203 	mul.w	r2, r2, r3
 800c692:	465b      	mov	r3, fp
 800c694:	4641      	mov	r1, r8
 800c696:	fb01 f303 	mul.w	r3, r1, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	4642      	mov	r2, r8
 800c69e:	4651      	mov	r1, sl
 800c6a0:	fba2 4501 	umull	r4, r5, r2, r1
 800c6a4:	442b      	add	r3, r5
 800c6a6:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800c6a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6b2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800c6b6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	fb03 f205 	mul.w	r2, r3, r5
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	fb04 f303 	mul.w	r3, r4, r3
 800c6c6:	4413      	add	r3, r2
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	fba4 1202 	umull	r1, r2, r4, r2
 800c6ce:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800c6d2:	460a      	mov	r2, r1
 800c6d4:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800c6d8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c6dc:	4413      	add	r3, r2
 800c6de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c6e2:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800c6e6:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800c6ea:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800c6ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c6f2:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800c6f6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800c6fa:	4282      	cmp	r2, r0
 800c6fc:	418b      	sbcs	r3, r1
 800c6fe:	d309      	bcc.n	800c714 <_fx_file_open+0x54c>
 800c700:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00e      	beq.n	800c726 <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800c708:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800c70c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800c710:	4293      	cmp	r3, r2
 800c712:	d908      	bls.n	800c726 <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800c714:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c718:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c71c:	4618      	mov	r0, r3
 800c71e:	f006 fbc7 	bl	8012eb0 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800c722:	2308      	movs	r3, #8
 800c724:	e22c      	b.n	800cb80 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800c726:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c72a:	4baa      	ldr	r3, [pc, #680]	; (800c9d4 <_fx_file_open+0x80c>)
 800c72c:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800c72e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c732:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800c736:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c73a:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800c73c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c744:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800c746:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c74a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c74e:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800c750:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c754:	2300      	movs	r3, #0
 800c756:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800c758:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c75c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c760:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800c762:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c766:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c76a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c76e:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800c770:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c774:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800c778:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800c77a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c77e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800c782:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c786:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800c78a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800c78e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800c792:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800c796:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c79a:	2300      	movs	r3, #0
 800c79c:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800c7a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d163      	bne.n	800c870 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800c7a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c7ac:	695a      	ldr	r2, [r3, #20]
 800c7ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c7b2:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800c7b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7c8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800c7cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	3b02      	subs	r3, #2
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7da:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800c7de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7ea:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800c7ee:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	fb02 f203 	mul.w	r2, r2, r3
 800c7fe:	464b      	mov	r3, r9
 800c800:	4621      	mov	r1, r4
 800c802:	fb01 f303 	mul.w	r3, r1, r3
 800c806:	4413      	add	r3, r2
 800c808:	4622      	mov	r2, r4
 800c80a:	4641      	mov	r1, r8
 800c80c:	fba2 1201 	umull	r1, r2, r2, r1
 800c810:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800c814:	460a      	mov	r2, r1
 800c816:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c81a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800c81e:	4413      	add	r3, r2
 800c820:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c824:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800c828:	4623      	mov	r3, r4
 800c82a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c82e:	4602      	mov	r2, r0
 800c830:	189b      	adds	r3, r3, r2
 800c832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c836:	460b      	mov	r3, r1
 800c838:	462a      	mov	r2, r5
 800c83a:	eb42 0303 	adc.w	r3, r2, r3
 800c83e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c842:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c846:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c84a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800c84e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c852:	2200      	movs	r2, #0
 800c854:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800c856:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c85a:	2200      	movs	r2, #0
 800c85c:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800c85e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800c862:	f04f 0200 	mov.w	r2, #0
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800c86e:	e140      	b.n	800caf2 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800c870:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800c874:	2200      	movs	r2, #0
 800c876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c87a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c87e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c882:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	4283      	cmp	r3, r0
 800c88c:	bf08      	it	eq
 800c88e:	428a      	cmpeq	r2, r1
 800c890:	f040 80a2 	bne.w	800c9d8 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c89a:	2200      	movs	r2, #0
 800c89c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c8a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c8b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	3b02      	subs	r3, #2
 800c8bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c8c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c8ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c8da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c8de:	462b      	mov	r3, r5
 800c8e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c8e4:	4642      	mov	r2, r8
 800c8e6:	fb02 f203 	mul.w	r2, r2, r3
 800c8ea:	464b      	mov	r3, r9
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	fb01 f303 	mul.w	r3, r1, r3
 800c8f2:	4413      	add	r3, r2
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	fba2 1201 	umull	r1, r2, r2, r1
 800c8fc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800c900:	460a      	mov	r2, r1
 800c902:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800c906:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800c90a:	4413      	add	r3, r2
 800c90c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c910:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c914:	4623      	mov	r3, r4
 800c916:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800c91a:	4602      	mov	r2, r0
 800c91c:	189b      	adds	r3, r3, r2
 800c91e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c922:	460b      	mov	r3, r1
 800c924:	462a      	mov	r2, r5
 800c926:	eb42 0303 	adc.w	r3, r2, r3
 800c92a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800c92e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c932:	1e51      	subs	r1, r2, #1
 800c934:	67b9      	str	r1, [r7, #120]	; 0x78
 800c936:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c93a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c93c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c942:	2200      	movs	r2, #0
 800c944:	673b      	str	r3, [r7, #112]	; 0x70
 800c946:	677a      	str	r2, [r7, #116]	; 0x74
 800c948:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c94c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800c950:	f7f3 fde2 	bl	8000518 <__aeabi_uldivmod>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	2300      	movs	r3, #0
 800c95a:	66ba      	str	r2, [r7, #104]	; 0x68
 800c95c:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c95e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c962:	4623      	mov	r3, r4
 800c964:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c968:	4602      	mov	r2, r0
 800c96a:	189b      	adds	r3, r3, r2
 800c96c:	663b      	str	r3, [r7, #96]	; 0x60
 800c96e:	460b      	mov	r3, r1
 800c970:	462a      	mov	r2, r5
 800c972:	eb42 0303 	adc.w	r3, r2, r3
 800c976:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c978:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c97c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c980:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c984:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c988:	1e51      	subs	r1, r2, #1
 800c98a:	65b9      	str	r1, [r7, #88]	; 0x58
 800c98c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c990:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c992:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c998:	2200      	movs	r2, #0
 800c99a:	653b      	str	r3, [r7, #80]	; 0x50
 800c99c:	657a      	str	r2, [r7, #84]	; 0x54
 800c99e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c9a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c9a6:	f7f3 fdb7 	bl	8000518 <__aeabi_uldivmod>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800c9b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9b8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c9bc:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800c9c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800c9c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c9d0:	e08f      	b.n	800caf2 <_fx_file_open+0x92a>
 800c9d2:	bf00      	nop
 800c9d4:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c9d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9de:	2200      	movs	r2, #0
 800c9e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9e2:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c9e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ee:	647a      	str	r2, [r7, #68]	; 0x44
 800c9f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	3b02      	subs	r3, #2
 800c9f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ca02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca08:	2200      	movs	r2, #0
 800ca0a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca0c:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ca0e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800ca12:	462b      	mov	r3, r5
 800ca14:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800ca18:	4642      	mov	r2, r8
 800ca1a:	fb02 f203 	mul.w	r2, r2, r3
 800ca1e:	464b      	mov	r3, r9
 800ca20:	4621      	mov	r1, r4
 800ca22:	fb01 f303 	mul.w	r3, r1, r3
 800ca26:	4413      	add	r3, r2
 800ca28:	4622      	mov	r2, r4
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	fba2 1201 	umull	r1, r2, r2, r1
 800ca30:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800ca34:	460a      	mov	r2, r1
 800ca36:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800ca3a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800ca3e:	4413      	add	r3, r2
 800ca40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ca44:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ca48:	4623      	mov	r3, r4
 800ca4a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ca4e:	4602      	mov	r2, r0
 800ca50:	189b      	adds	r3, r3, r2
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca54:	460b      	mov	r3, r1
 800ca56:	462a      	mov	r2, r5
 800ca58:	eb42 0303 	adc.w	r3, r2, r3
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800ca5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca64:	2200      	movs	r2, #0
 800ca66:	623b      	str	r3, [r7, #32]
 800ca68:	627a      	str	r2, [r7, #36]	; 0x24
 800ca6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca6e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800ca72:	f7f3 fd51 	bl	8000518 <__aeabi_uldivmod>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	61ba      	str	r2, [r7, #24]
 800ca7e:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800ca80:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ca84:	4623      	mov	r3, r4
 800ca86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	189b      	adds	r3, r3, r2
 800ca8e:	613b      	str	r3, [r7, #16]
 800ca90:	460b      	mov	r3, r1
 800ca92:	462a      	mov	r2, r5
 800ca94:	eb42 0303 	adc.w	r3, r2, r3
 800ca98:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ca9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800caa2:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800caa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caac:	2200      	movs	r2, #0
 800caae:	60bb      	str	r3, [r7, #8]
 800cab0:	60fa      	str	r2, [r7, #12]
 800cab2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cab6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800caba:	f7f3 fd2d 	bl	8000518 <__aeabi_uldivmod>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800cac8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cacc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cad0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cad4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800cad8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800cadc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cae0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cae2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae6:	fb01 f202 	mul.w	r2, r1, r2
 800caea:	1a9a      	subs	r2, r3, r2
 800caec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800caf0:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800caf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caf6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01f      	beq.n	800cb3e <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800cafe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cb06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800cb0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb10:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cb14:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb18:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800cb1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800cb1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb22:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800cb24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb28:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800cb2c:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800cb2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb32:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cb36:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb3a:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb3c:	e00f      	b.n	800cb5e <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800cb3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800cb4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb52:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800cb54:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb58:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb5c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800cb5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cb66:	1c5a      	adds	r2, r3, #1
 800cb68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb6c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800cb70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb74:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f006 f999 	bl	8012eb0 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800cb86:	46bd      	mov	sp, r7
 800cb88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb8c <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800cb8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb90:	b0aa      	sub	sp, #168	; 0xa8
 800cb92:	af04      	add	r7, sp, #16
 800cb94:	66f8      	str	r0, [r7, #108]	; 0x6c
 800cb96:	66b9      	str	r1, [r7, #104]	; 0x68
 800cb98:	667a      	str	r2, [r7, #100]	; 0x64
 800cb9a:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800cb9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	4b9d      	ldr	r3, [pc, #628]	; (800ce18 <_fx_file_read+0x28c>)
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d001      	beq.n	800cbaa <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800cba6:	2307      	movs	r3, #7
 800cba8:	e28d      	b.n	800d0c6 <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cbaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbae:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800cbb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbb2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cbbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbc2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800cbc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	4b94      	ldr	r3, [pc, #592]	; (800ce1c <_fx_file_read+0x290>)
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d001      	beq.n	800cbd2 <_fx_file_read+0x46>
 800cbce:	2311      	movs	r3, #17
 800cbd0:	e279      	b.n	800d0c6 <_fx_file_read+0x53a>
 800cbd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbd4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cbd8:	f04f 31ff 	mov.w	r1, #4294967295
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f005 feef 	bl	80129c0 <_tx_mutex_get>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <_fx_file_read+0x60>
 800cbe8:	2311      	movs	r3, #17
 800cbea:	e26c      	b.n	800d0c6 <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800cbec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800cbf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800cbf8:	4290      	cmp	r0, r2
 800cbfa:	eb71 0303 	sbcs.w	r3, r1, r3
 800cbfe:	d30a      	bcc.n	800cc16 <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cc00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc02:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc06:	4618      	mov	r0, r3
 800cc08:	f006 f952 	bl	8012eb0 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800cc0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800cc12:	2309      	movs	r3, #9
 800cc14:	e257      	b.n	800d0c6 <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800cc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800cc1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4698      	mov	r8, r3
 800cc22:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800cc24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc26:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800cc2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc2c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800cc30:	1a84      	subs	r4, r0, r2
 800cc32:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800cc36:	4544      	cmp	r4, r8
 800cc38:	eb75 0309 	sbcs.w	r3, r5, r9
 800cc3c:	d209      	bcs.n	800cc52 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800cc3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc40:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cc44:	4611      	mov	r1, r2
 800cc46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc48:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	1acb      	subs	r3, r1, r3
 800cc50:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800cc52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800cc58:	e20a      	b.n	800d070 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800cc5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d105      	bne.n	800cc6e <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800cc62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800cc66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d24d      	bcs.n	800cd0a <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800cc6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc70:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800cc74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc76:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800cc78:	2304      	movs	r3, #4
 800cc7a:	9302      	str	r3, [sp, #8]
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	9200      	str	r2, [sp, #0]
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cc88:	f004 fb0c 	bl	80112a4 <_fx_utility_logical_sector_read>
 800cc8c:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800cc8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d007      	beq.n	800cca4 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800cc94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc96:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f006 f908 	bl	8012eb0 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800cca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cca2:	e210      	b.n	800d0c6 <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800cca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800cca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800ccb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ccb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d903      	bls.n	800ccc6 <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800ccbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800ccc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ccc8:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800ccca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800ccce:	4413      	add	r3, r2
 800ccd0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ccd4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f004 fedf 	bl	8011a9c <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800ccde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cce6:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800cce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccea:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800ccec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ccf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800ccfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ccfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd02:	4413      	add	r3, r2
 800cd04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd08:	e108      	b.n	800cf1c <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800cd0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd12:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800cd1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd1c:	6a1b      	ldr	r3, [r3, #32]
 800cd1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd26:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800cd28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800cd2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd36:	e033      	b.n	800cda0 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800cd38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cd42:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cd44:	f002 fea0 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800cd48:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800cd4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10a      	bne.n	800cd66 <_fx_file_read+0x1da>
 800cd50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d907      	bls.n	800cd66 <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800cd56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd5c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cd60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d20c      	bcs.n	800cd80 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800cd66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd68:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f006 f89f 	bl	8012eb0 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800cd72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <_fx_file_read+0x1f0>
                        {
                            return(status);
 800cd78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd7a:	e1a4      	b.n	800d0c6 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	e1a2      	b.n	800d0c6 <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800cd80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d110      	bne.n	800cdae <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800cd8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800cd92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cda0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cda4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d3c5      	bcc.n	800cd38 <_fx_file_read+0x1ac>
 800cdac:	e000      	b.n	800cdb0 <_fx_file_read+0x224>
                        break;
 800cdae:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800cdb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cdb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d203      	bcs.n	800cdc4 <_fx_file_read+0x238>
            {
                sectors = i;
 800cdbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cdc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800cdc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d129      	bne.n	800ce20 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800cdcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800cdd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cdd4:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800cdd6:	2304      	movs	r3, #4
 800cdd8:	9302      	str	r3, [sp, #8]
 800cdda:	2301      	movs	r3, #1
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	9200      	str	r2, [sp, #0]
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cde6:	f004 fa5d 	bl	80112a4 <_fx_utility_logical_sector_read>
 800cdea:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800cdec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d007      	beq.n	800ce02 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cdf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cdf4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f006 f859 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800cdfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce00:	e161      	b.n	800d0c6 <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800ce02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce04:	6898      	ldr	r0, [r3, #8]
 800ce06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ce10:	f004 fe44 	bl	8011a9c <_fx_utility_memory_copy>
 800ce14:	e02f      	b.n	800ce76 <_fx_file_read+0x2ea>
 800ce16:	bf00      	nop
 800ce18:	46494c45 	.word	0x46494c45
 800ce1c:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800ce20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce22:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800ce26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ce2c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800ce30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce32:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800ce36:	2304      	movs	r3, #4
 800ce38:	9302      	str	r3, [sp, #8]
 800ce3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ce4c:	f004 fa2a 	bl	80112a4 <_fx_utility_logical_sector_read>
 800ce50:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800ce52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ce58:	461a      	mov	r2, r3
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800ce60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d007      	beq.n	800ce76 <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ce66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce68:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f006 f81f 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800ce72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce74:	e127      	b.n	800d0c6 <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800ce76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce78:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800ce7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce80:	3b01      	subs	r3, #1
 800ce82:	2200      	movs	r2, #0
 800ce84:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce86:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800ce88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	18c3      	adds	r3, r0, r3
 800ce90:	653b      	str	r3, [r7, #80]	; 0x50
 800ce92:	462b      	mov	r3, r5
 800ce94:	eb41 0303 	adc.w	r3, r1, r3
 800ce98:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800ce9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce9c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cea0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800cea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800cea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ceb0:	4413      	add	r3, r2
 800ceb2:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800ceb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ceb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800ceb8:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800cebc:	18ca      	adds	r2, r1, r3
 800cebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cec0:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800cec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ceca:	4413      	add	r3, r2
 800cecc:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800cece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ced0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ced2:	fbb1 f3f2 	udiv	r3, r1, r2
 800ced6:	fb02 f303 	mul.w	r3, r2, r3
 800ceda:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800cedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cede:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800cee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800cee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cee6:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800cee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ceea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ceee:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800cef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cef8:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800cefc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf00:	1a9b      	subs	r3, r3, r2
 800cf02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800cf06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf0e:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800cf12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf16:	4413      	add	r3, r2
 800cf18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800cf1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800cf20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800cf24:	429a      	cmp	r2, r3
 800cf26:	f0c0 80a3 	bcc.w	800d070 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800cf2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d11a      	bne.n	800cf68 <_fx_file_read+0x3dc>
 800cf32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf34:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800cf38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cf40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800cf44:	4621      	mov	r1, r4
 800cf46:	1851      	adds	r1, r2, r1
 800cf48:	6439      	str	r1, [r7, #64]	; 0x40
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	414b      	adcs	r3, r1
 800cf4e:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800cf50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf52:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800cf56:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	4291      	cmp	r1, r2
 800cf5e:	4629      	mov	r1, r5
 800cf60:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf64:	f080 808a 	bcs.w	800d07c <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800cf68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800cf72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800cf76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d368      	bcc.n	800d050 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800cf7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf80:	6a19      	ldr	r1, [r3, #32]
 800cf82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cf86:	461a      	mov	r2, r3
 800cf88:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cf8a:	f002 fd7d 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800cf8e:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800cf90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10a      	bne.n	800cfac <_fx_file_read+0x420>
 800cf96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d907      	bls.n	800cfac <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800cf9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cfa2:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cfa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d20c      	bcs.n	800cfc6 <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800cfac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfae:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f005 ff7c 	bl	8012eb0 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800cfb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <_fx_file_read+0x436>
                        {
                            return(status);
 800cfbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfc0:	e081      	b.n	800d0c6 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800cfc2:	2308      	movs	r3, #8
 800cfc4:	e07f      	b.n	800d0c6 <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800cfc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cfc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfca:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800cfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd0:	1c5a      	adds	r2, r3, #1
 800cfd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfd4:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfda:	2200      	movs	r2, #0
 800cfdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfde:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800cfe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfe6:	637a      	str	r2, [r7, #52]	; 0x34
 800cfe8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cfec:	460b      	mov	r3, r1
 800cfee:	3b02      	subs	r3, #2
 800cff0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cff2:	4613      	mov	r3, r2
 800cff4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cff8:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800cffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffe:	2200      	movs	r2, #0
 800d000:	623b      	str	r3, [r7, #32]
 800d002:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d004:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d008:	462b      	mov	r3, r5
 800d00a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d00e:	4642      	mov	r2, r8
 800d010:	fb02 f203 	mul.w	r2, r2, r3
 800d014:	464b      	mov	r3, r9
 800d016:	4621      	mov	r1, r4
 800d018:	fb01 f303 	mul.w	r3, r1, r3
 800d01c:	4413      	add	r3, r2
 800d01e:	4622      	mov	r2, r4
 800d020:	4641      	mov	r1, r8
 800d022:	fba2 ab01 	umull	sl, fp, r2, r1
 800d026:	445b      	add	r3, fp
 800d028:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d02a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d02e:	460b      	mov	r3, r1
 800d030:	eb13 030a 	adds.w	r3, r3, sl
 800d034:	61bb      	str	r3, [r7, #24]
 800d036:	4613      	mov	r3, r2
 800d038:	eb43 030b 	adc.w	r3, r3, fp
 800d03c:	61fb      	str	r3, [r7, #28]
 800d03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d040:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d044:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800d048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d04a:	2300      	movs	r3, #0
 800d04c:	6393      	str	r3, [r2, #56]	; 0x38
 800d04e:	e00c      	b.n	800d06a <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800d050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d052:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d056:	1c51      	adds	r1, r2, #1
 800d058:	6139      	str	r1, [r7, #16]
 800d05a:	f143 0300 	adc.w	r3, r3, #0
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d062:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d066:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800d06a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d06c:	2300      	movs	r3, #0
 800d06e:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800d070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d074:	2b00      	cmp	r3, #0
 800d076:	f47f adf0 	bne.w	800cc5a <_fx_file_read+0xce>
 800d07a:	e000      	b.n	800d07e <_fx_file_read+0x4f2>
                break;
 800d07c:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800d07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d080:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d084:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d086:	2000      	movs	r0, #0
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d090:	4621      	mov	r1, r4
 800d092:	1851      	adds	r1, r2, r1
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	4629      	mov	r1, r5
 800d098:	eb43 0101 	adc.w	r1, r3, r1
 800d09c:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800d09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d0a4:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800d0a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0ac:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800d0ae:	4b08      	ldr	r3, [pc, #32]	; (800d0d0 <_fx_file_read+0x544>)
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800d0b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0ba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f005 fef6 	bl	8012eb0 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3798      	adds	r7, #152	; 0x98
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0d0:	2400358c 	.word	0x2400358c

0800d0d4 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7fe fda0 	bl	800bc2c <_fx_file_extended_seek>
 800d0ec:	4603      	mov	r3, r0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800d0f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0fc:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800d100:	af04      	add	r7, sp, #16
 800d102:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800d106:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800d10a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d10e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	4bd9      	ldr	r3, [pc, #868]	; (800d47c <_fx_file_write+0x384>)
 800d116:	429a      	cmp	r2, r3
 800d118:	d002      	beq.n	800d120 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d11a:	2307      	movs	r3, #7
 800d11c:	f000 bf26 	b.w	800df6c <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d120:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d126:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 800d12a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d12e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d138:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 800d13c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d140:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d144:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800d148:	2000      	movs	r0, #0
 800d14a:	460c      	mov	r4, r1
 800d14c:	4605      	mov	r5, r0
 800d14e:	eb12 0804 	adds.w	r8, r2, r4
 800d152:	eb43 0905 	adc.w	r9, r3, r5
 800d156:	f1b9 0f01 	cmp.w	r9, #1
 800d15a:	d302      	bcc.n	800d162 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 800d15c:	230a      	movs	r3, #10
 800d15e:	f000 bf05 	b.w	800df6c <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d162:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	4bc5      	ldr	r3, [pc, #788]	; (800d480 <_fx_file_write+0x388>)
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d002      	beq.n	800d174 <_fx_file_write+0x7c>
 800d16e:	2311      	movs	r3, #17
 800d170:	f000 befc 	b.w	800df6c <_fx_file_write+0xe74>
 800d174:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d178:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d17c:	f04f 31ff 	mov.w	r1, #4294967295
 800d180:	4618      	mov	r0, r3
 800d182:	f005 fc1d 	bl	80129c0 <_tx_mutex_get>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <_fx_file_write+0x9a>
 800d18c:	2311      	movs	r3, #17
 800d18e:	f000 beed 	b.w	800df6c <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800d192:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d196:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d009      	beq.n	800d1b2 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d19e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d1a2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f005 fe82 	bl	8012eb0 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800d1ac:	2323      	movs	r3, #35	; 0x23
 800d1ae:	f000 bedd 	b.w	800df6c <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 800d1b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d009      	beq.n	800d1d0 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d1bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d1c0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f005 fe73 	bl	8012eb0 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 800d1ca:	2306      	movs	r3, #6
 800d1cc:	f000 bece 	b.w	800df6c <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d1d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d1d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d1d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d1dc:	fb02 f303 	mul.w	r3, r2, r3
 800d1e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d1e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d109      	bne.n	800d200 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800d1ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d1f0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f005 fe5b 	bl	8012eb0 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	f000 beb6 	b.w	800df6c <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 800d200:	2300      	movs	r3, #0
 800d202:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 800d206:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d20a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d20e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d212:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d216:	ebb0 0a02 	subs.w	sl, r0, r2
 800d21a:	eb61 0b03 	sbc.w	fp, r1, r3
 800d21e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d222:	2200      	movs	r2, #0
 800d224:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800d228:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800d22c:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800d230:	460b      	mov	r3, r1
 800d232:	459a      	cmp	sl, r3
 800d234:	4613      	mov	r3, r2
 800d236:	eb7b 0303 	sbcs.w	r3, fp, r3
 800d23a:	f080 82a9 	bcs.w	800d790 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d23e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d242:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d246:	4413      	add	r3, r2
 800d248:	3b01      	subs	r3, #1
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d250:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d254:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d258:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800d25c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d260:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d264:	1a84      	subs	r4, r0, r2
 800d266:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d26a:	eb61 0303 	sbc.w	r3, r1, r3
 800d26e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d272:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800d276:	4623      	mov	r3, r4
 800d278:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d27c:	4602      	mov	r2, r0
 800d27e:	189b      	adds	r3, r3, r2
 800d280:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800d284:	460b      	mov	r3, r1
 800d286:	462a      	mov	r2, r5
 800d288:	eb42 0303 	adc.w	r3, r2, r3
 800d28c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d290:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d294:	2200      	movs	r2, #0
 800d296:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800d29a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d29e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2a2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800d2a6:	f7f3 f937 	bl	8000518 <__aeabi_uldivmod>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 800d2b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d2b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d2ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d909      	bls.n	800d2d6 <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 800d2c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d2c6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f005 fdf0 	bl	8012eb0 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 800d2d0:	230a      	movs	r3, #10
 800d2d2:	f000 be4b 	b.w	800df6c <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800d2d6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d2da:	691a      	ldr	r2, [r3, #16]
 800d2dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d2e0:	441a      	add	r2, r3
 800d2e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d2e6:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800d2e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d2ec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d2f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800d2fa:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d2fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d302:	2200      	movs	r2, #0
 800d304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800d308:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d30c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800d310:	464b      	mov	r3, r9
 800d312:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 800d316:	4652      	mov	r2, sl
 800d318:	fb02 f203 	mul.w	r2, r2, r3
 800d31c:	465b      	mov	r3, fp
 800d31e:	4644      	mov	r4, r8
 800d320:	fb04 f303 	mul.w	r3, r4, r3
 800d324:	4413      	add	r3, r2
 800d326:	4642      	mov	r2, r8
 800d328:	4654      	mov	r4, sl
 800d32a:	fba2 4204 	umull	r4, r2, r2, r4
 800d32e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800d332:	4622      	mov	r2, r4
 800d334:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800d338:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800d33c:	4413      	add	r3, r2
 800d33e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800d342:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800d346:	4623      	mov	r3, r4
 800d348:	18c3      	adds	r3, r0, r3
 800d34a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d34e:	462b      	mov	r3, r5
 800d350:	eb41 0303 	adc.w	r3, r1, r3
 800d354:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d358:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d308      	bcc.n	800d372 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 800d360:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	f04f 0300 	mov.w	r3, #0
 800d36c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800d370:	e03d      	b.n	800d3ee <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 800d372:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d376:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d37a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d37e:	2200      	movs	r2, #0
 800d380:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d384:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d388:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d38c:	2200      	movs	r2, #0
 800d38e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d392:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800d396:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800d39a:	464b      	mov	r3, r9
 800d39c:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 800d3a0:	4652      	mov	r2, sl
 800d3a2:	fb02 f203 	mul.w	r2, r2, r3
 800d3a6:	465b      	mov	r3, fp
 800d3a8:	4644      	mov	r4, r8
 800d3aa:	fb04 f303 	mul.w	r3, r4, r3
 800d3ae:	4413      	add	r3, r2
 800d3b0:	4642      	mov	r2, r8
 800d3b2:	4654      	mov	r4, sl
 800d3b4:	fba2 4204 	umull	r4, r2, r2, r4
 800d3b8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800d3bc:	4622      	mov	r2, r4
 800d3be:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800d3c2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800d3cc:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800d3d0:	4623      	mov	r3, r4
 800d3d2:	18c3      	adds	r3, r0, r3
 800d3d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d3d8:	462b      	mov	r3, r5
 800d3da:	eb41 0303 	adc.w	r3, r1, r3
 800d3de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 800d3e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d3e6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800d3ea:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 800d3ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d3f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d3f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d3f8:	1ad2      	subs	r2, r2, r3
 800d3fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d3fe:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 800d400:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d406:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800d40a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d40e:	69db      	ldr	r3, [r3, #28]
 800d410:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800d414:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d41c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 800d420:	e16f      	b.n	800d702 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 800d422:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d426:	3b01      	subs	r3, #1
 800d428:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 800d42c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800d430:	2b00      	cmp	r3, #0
 800d432:	d109      	bne.n	800d448 <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d434:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d438:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d43c:	4618      	mov	r0, r3
 800d43e:	f005 fd37 	bl	8012eb0 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 800d442:	230a      	movs	r3, #10
 800d444:	f000 bd92 	b.w	800df6c <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800d448:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800d44c:	461a      	mov	r2, r3
 800d44e:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800d452:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d456:	f002 fb17 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800d45a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 800d45e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00e      	beq.n	800d484 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d466:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d46a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d46e:	4618      	mov	r0, r3
 800d470:	f005 fd1e 	bl	8012eb0 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 800d474:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d478:	f000 bd78 	b.w	800df6c <_fx_file_write+0xe74>
 800d47c:	46494c45 	.word	0x46494c45
 800d480:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 800d484:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800d488:	3b01      	subs	r3, #1
 800d48a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 800d48e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d116      	bne.n	800d4c4 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800d496:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d4a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800d4a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d4a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d4ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b2:	3302      	adds	r3, #2
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d316      	bcc.n	800d4e6 <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800d4b8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d4bc:	2302      	movs	r3, #2
 800d4be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 800d4c2:	e010      	b.n	800d4e6 <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 800d4c4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800d4ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d4:	1c9a      	adds	r2, r3, #2
 800d4d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d3a6      	bcc.n	800d42c <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 800d4de:	2302      	movs	r3, #2
 800d4e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 800d4e4:	e7a2      	b.n	800d42c <_fx_file_write+0x334>
                        break;
 800d4e6:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 800d4e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 800d4f0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d4f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 800d4f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 808f 	beq.w	800d620 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800d502:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d506:	69da      	ldr	r2, [r3, #28]
 800d508:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d009      	beq.n	800d524 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800d510:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800d514:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800d518:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d51c:	f002 fcdd 	bl	800feda <_fx_utility_FAT_entry_write>
 800d520:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800d524:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00a      	beq.n	800d542 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d52c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d530:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d534:	4618      	mov	r0, r3
 800d536:	f005 fcbb 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800d53a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d53e:	f000 bd15 	b.w	800df6c <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 800d542:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800d548:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54e:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 800d550:	429a      	cmp	r2, r3
 800d552:	f0c0 80cc 	bcc.w	800d6ee <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 800d556:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d55a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 800d55c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800d562:	429a      	cmp	r2, r3
 800d564:	f0c0 80c3 	bcc.w	800d6ee <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800d568:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d56c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d570:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 800d572:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d57e:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800d580:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d584:	2300      	movs	r3, #0
 800d586:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d588:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d58e:	2200      	movs	r2, #0
 800d590:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d594:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800d598:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d59c:	3b02      	subs	r3, #2
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d5a4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d5a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d5b4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800d5b8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800d5bc:	462b      	mov	r3, r5
 800d5be:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d5c2:	4642      	mov	r2, r8
 800d5c4:	fb02 f203 	mul.w	r2, r2, r3
 800d5c8:	464b      	mov	r3, r9
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	fb01 f303 	mul.w	r3, r1, r3
 800d5d0:	4413      	add	r3, r2
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	4641      	mov	r1, r8
 800d5d6:	fba2 1201 	umull	r1, r2, r2, r1
 800d5da:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800d5de:	460a      	mov	r2, r1
 800d5e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800d5e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d5ee:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800d5f2:	4623      	mov	r3, r4
 800d5f4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	189b      	adds	r3, r3, r2
 800d5fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d600:	462b      	mov	r3, r5
 800d602:	460a      	mov	r2, r1
 800d604:	4153      	adcs	r3, r2
 800d606:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d60a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d60e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d612:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 800d616:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d61a:	2300      	movs	r3, #0
 800d61c:	6313      	str	r3, [r2, #48]	; 0x30
 800d61e:	e066      	b.n	800d6ee <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 800d620:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d624:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d628:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800d62a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d62e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d632:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 800d634:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d638:	2300      	movs	r3, #0
 800d63a:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d63c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d642:	2200      	movs	r2, #0
 800d644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d648:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800d64c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d650:	3b02      	subs	r3, #2
 800d652:	2200      	movs	r2, #0
 800d654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d658:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d65c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d662:	2200      	movs	r2, #0
 800d664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800d66c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d670:	462b      	mov	r3, r5
 800d672:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d676:	4642      	mov	r2, r8
 800d678:	fb02 f203 	mul.w	r2, r2, r3
 800d67c:	464b      	mov	r3, r9
 800d67e:	4621      	mov	r1, r4
 800d680:	fb01 f303 	mul.w	r3, r1, r3
 800d684:	4413      	add	r3, r2
 800d686:	4622      	mov	r2, r4
 800d688:	4641      	mov	r1, r8
 800d68a:	fba2 1201 	umull	r1, r2, r2, r1
 800d68e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800d692:	460a      	mov	r2, r1
 800d694:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800d698:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800d69c:	4413      	add	r3, r2
 800d69e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d6a2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	189b      	adds	r3, r3, r2
 800d6b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	460a      	mov	r2, r1
 800d6b8:	4153      	adcs	r3, r2
 800d6ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d6be:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d6c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d6c6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 800d6ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 800d6d2:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800d6d6:	f04f 0200 	mov.w	r2, #0
 800d6da:	f04f 0300 	mov.w	r3, #0
 800d6de:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800d6e2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d6e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d6ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 800d6ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d6f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800d6f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 800d702:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d706:	2b00      	cmp	r3, #0
 800d708:	f47f ae8b 	bne.w	800d422 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800d70c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d710:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d714:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800d718:	461a      	mov	r2, r3
 800d71a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800d71e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d722:	f002 fbda 	bl	800feda <_fx_utility_FAT_entry_write>
 800d726:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 800d72a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00a      	beq.n	800d748 <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800d732:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d736:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d73a:	4618      	mov	r0, r3
 800d73c:	f005 fbb8 	bl	8012eb0 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 800d740:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d744:	f000 bc12 	b.w	800df6c <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 800d748:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d019      	beq.n	800d786 <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 800d752:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d756:	69db      	ldr	r3, [r3, #28]
 800d758:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800d75c:	4619      	mov	r1, r3
 800d75e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d762:	f002 fbba 	bl	800feda <_fx_utility_FAT_entry_write>
 800d766:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800d76a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d009      	beq.n	800d786 <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d772:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d776:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d77a:	4618      	mov	r0, r3
 800d77c:	f005 fb98 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800d780:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d784:	e3f2      	b.n	800df6c <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800d786:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d78a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d78e:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800d790:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800d796:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d31b      	bcc.n	800d7d8 <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800d7a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d7a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d7a8:	1c51      	adds	r1, r2, #1
 800d7aa:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d7ae:	f143 0300 	adc.w	r3, r3, #0
 800d7b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d7ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d7be:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800d7c2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d7ce:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800d7d0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800d7d8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d7dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800d7e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	613b      	str	r3, [r7, #16]
 800d7e8:	617a      	str	r2, [r7, #20]
 800d7ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d7ee:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800d7f2:	e290      	b.n	800dd16 <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d7f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d111      	bne.n	800d822 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800d7fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d804:	2200      	movs	r2, #0
 800d806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d80a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d80e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800d812:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d816:	4621      	mov	r1, r4
 800d818:	428a      	cmp	r2, r1
 800d81a:	4629      	mov	r1, r5
 800d81c:	418b      	sbcs	r3, r1
 800d81e:	f080 8096 	bcs.w	800d94e <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d822:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d826:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d82a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d82e:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d830:	2304      	movs	r3, #4
 800d832:	9302      	str	r3, [sp, #8]
 800d834:	2301      	movs	r3, #1
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	9200      	str	r2, [sp, #0]
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d842:	f003 fd2f 	bl	80112a4 <_fx_utility_logical_sector_read>
 800d846:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800d84a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d009      	beq.n	800d866 <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800d852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d856:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d85a:	4618      	mov	r0, r3
 800d85c:	f005 fb28 	bl	8012eb0 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800d860:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d864:	e382      	b.n	800df6c <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d866:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d86a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800d86c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800d878:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d87c:	2200      	movs	r2, #0
 800d87e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d882:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d886:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800d88a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d88e:	4621      	mov	r1, r4
 800d890:	428a      	cmp	r2, r1
 800d892:	4629      	mov	r1, r5
 800d894:	418b      	sbcs	r3, r1
 800d896:	d203      	bcs.n	800d8a0 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800d898:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d89c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800d8a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8a4:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800d8a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800d8ac:	4413      	add	r3, r2
 800d8ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800d8b8:	f004 f8f0 	bl	8011a9c <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800d8bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d8c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8c8:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800d8ca:	2304      	movs	r3, #4
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	9200      	str	r2, [sp, #0]
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d8dc:	f003 ff76 	bl	80117cc <_fx_utility_logical_sector_write>
 800d8e0:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800d8e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d009      	beq.n	800d900 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800d8ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8f0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f005 fadb 	bl	8012eb0 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800d8fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8fe:	e335      	b.n	800df6c <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800d900:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d906:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d90a:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800d90c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d910:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800d912:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d916:	2200      	movs	r2, #0
 800d918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d91c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d920:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800d924:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d928:	4621      	mov	r1, r4
 800d92a:	1a51      	subs	r1, r2, r1
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	4629      	mov	r1, r5
 800d930:	eb63 0301 	sbc.w	r3, r3, r1
 800d934:	60fb      	str	r3, [r7, #12]
 800d936:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d93a:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800d93e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800d942:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d946:	4413      	add	r3, r2
 800d948:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800d94c:	e10d      	b.n	800db6a <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800d94e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d954:	2200      	movs	r2, #0
 800d956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d95a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d95e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800d962:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800d966:	f7f2 fdd7 	bl	8000518 <__aeabi_uldivmod>
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	4613      	mov	r3, r2
 800d970:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800d974:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800d97e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d982:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d986:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d98a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d98c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d998:	e03f      	b.n	800da1a <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800d99a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800d99e:	461a      	mov	r2, r3
 800d9a0:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800d9a4:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800d9a8:	f002 f86e 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800d9ac:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d9b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10d      	bne.n	800d9d4 <_fx_file_write+0x8dc>
 800d9b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d909      	bls.n	800d9d4 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d9c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d9c8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d9cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d20f      	bcs.n	800d9f4 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d9d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f005 fa67 	bl	8012eb0 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d9e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d002      	beq.n	800d9f0 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800d9ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9ee:	e2bd      	b.n	800df6c <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d9f0:	2308      	movs	r3, #8
 800d9f2:	e2bb      	b.n	800df6c <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800d9f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d9f8:	1c5a      	adds	r2, r3, #1
 800d9fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d112      	bne.n	800da28 <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800da02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800da06:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800da0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da10:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800da14:	4413      	add	r3, r2
 800da16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800da1a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800da1e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800da22:	429a      	cmp	r2, r3
 800da24:	d3b9      	bcc.n	800d99a <_fx_file_write+0x8a2>
 800da26:	e000      	b.n	800da2a <_fx_file_write+0x932>
                        break;
 800da28:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800da2a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800da2e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800da32:	429a      	cmp	r2, r3
 800da34:	d203      	bcs.n	800da3e <_fx_file_write+0x946>
            {
                sectors = i;
 800da36:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800da3a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800da3e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da42:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800da46:	2304      	movs	r3, #4
 800da48:	9302      	str	r3, [sp, #8]
 800da4a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800da5e:	f003 feb5 	bl	80117cc <_fx_utility_logical_sector_write>
 800da62:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800da66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d009      	beq.n	800da82 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800da6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da72:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800da76:	4618      	mov	r0, r3
 800da78:	f005 fa1a 	bl	8012eb0 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800da7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800da80:	e274      	b.n	800df6c <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800da82:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800da8a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800da8e:	3b01      	subs	r3, #1
 800da90:	2200      	movs	r2, #0
 800da92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da96:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800da9a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800da9e:	4623      	mov	r3, r4
 800daa0:	18c3      	adds	r3, r0, r3
 800daa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800daa6:	462b      	mov	r3, r5
 800daa8:	eb41 0303 	adc.w	r3, r1, r3
 800daac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800dab0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dab4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800dab8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800dabc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800dac2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dac8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800dacc:	4413      	add	r3, r2
 800dace:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800dad0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800dad6:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800dada:	18ca      	adds	r2, r1, r3
 800dadc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dae0:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800dae2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dae8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800daec:	4413      	add	r3, r2
 800daee:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800daf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800daf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800daf6:	fbb1 f3f2 	udiv	r3, r1, r2
 800dafa:	fb02 f303 	mul.w	r3, r2, r3
 800dafe:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800db00:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800db06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800db0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db10:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800db12:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800db16:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800db1a:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800db1c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db22:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800db26:	fb02 f303 	mul.w	r3, r2, r3
 800db2a:	2200      	movs	r2, #0
 800db2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800db34:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800db38:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800db3c:	4621      	mov	r1, r4
 800db3e:	1a51      	subs	r1, r2, r1
 800db40:	6039      	str	r1, [r7, #0]
 800db42:	4629      	mov	r1, r5
 800db44:	eb63 0301 	sbc.w	r3, r3, r1
 800db48:	607b      	str	r3, [r7, #4]
 800db4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800db4e:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800db52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db58:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800db5c:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800db60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800db64:	4413      	add	r3, r2
 800db66:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800db6a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800db70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800db76:	429a      	cmp	r2, r3
 800db78:	f0c0 80cd 	bcc.w	800dd16 <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800db7c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800db80:	4313      	orrs	r3, r2
 800db82:	d11f      	bne.n	800dbc4 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800db84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db88:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800db8c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800db90:	2000      	movs	r0, #0
 800db92:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800db96:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800db9a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800db9e:	4621      	mov	r1, r4
 800dba0:	1851      	adds	r1, r2, r1
 800dba2:	67b9      	str	r1, [r7, #120]	; 0x78
 800dba4:	4629      	mov	r1, r5
 800dba6:	414b      	adcs	r3, r1
 800dba8:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800dbaa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800dbb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4291      	cmp	r1, r2
 800dbba:	4629      	mov	r1, r5
 800dbbc:	eb71 0303 	sbcs.w	r3, r1, r3
 800dbc0:	f080 80af 	bcs.w	800dd22 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800dbc4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800dbd2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800dbd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	f0c0 8086 	bcc.w	800dcf0 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800dbe4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbe8:	6a19      	ldr	r1, [r3, #32]
 800dbea:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dbf4:	f001 ff48 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800dbf8:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dbfc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10d      	bne.n	800dc20 <_fx_file_write+0xb28>
 800dc04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d909      	bls.n	800dc20 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800dc0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dc14:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800dc18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d20f      	bcs.n	800dc40 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800dc20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc24:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f005 f941 	bl	8012eb0 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800dc2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <_fx_file_write+0xb44>
                        {
                            return(status);
 800dc36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc3a:	e197      	b.n	800df6c <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800dc3c:	2308      	movs	r3, #8
 800dc3e:	e195      	b.n	800df6c <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800dc40:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800dc44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc48:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800dc4a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc56:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dc58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc5e:	2200      	movs	r2, #0
 800dc60:	673b      	str	r3, [r7, #112]	; 0x70
 800dc62:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800dc64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800dc68:	2200      	movs	r2, #0
 800dc6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800dc72:	460b      	mov	r3, r1
 800dc74:	3b02      	subs	r3, #2
 800dc76:	663b      	str	r3, [r7, #96]	; 0x60
 800dc78:	4613      	mov	r3, r2
 800dc7a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dc7e:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800dc80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc86:	2200      	movs	r2, #0
 800dc88:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc8a:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800dc8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800dc90:	462b      	mov	r3, r5
 800dc92:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800dc96:	4642      	mov	r2, r8
 800dc98:	fb02 f203 	mul.w	r2, r2, r3
 800dc9c:	464b      	mov	r3, r9
 800dc9e:	4621      	mov	r1, r4
 800dca0:	fb01 f303 	mul.w	r3, r1, r3
 800dca4:	4413      	add	r3, r2
 800dca6:	4622      	mov	r2, r4
 800dca8:	4641      	mov	r1, r8
 800dcaa:	fba2 1201 	umull	r1, r2, r2, r1
 800dcae:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800dcb2:	460a      	mov	r2, r1
 800dcb4:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800dcb8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dcc2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800dcc6:	4623      	mov	r3, r4
 800dcc8:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800dccc:	4602      	mov	r2, r0
 800dcce:	189b      	adds	r3, r3, r2
 800dcd0:	653b      	str	r3, [r7, #80]	; 0x50
 800dcd2:	462b      	mov	r3, r5
 800dcd4:	460a      	mov	r2, r1
 800dcd6:	4153      	adcs	r3, r2
 800dcd8:	657b      	str	r3, [r7, #84]	; 0x54
 800dcda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dce2:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800dce6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dcea:	2300      	movs	r3, #0
 800dcec:	6393      	str	r3, [r2, #56]	; 0x38
 800dcee:	e00e      	b.n	800dd0e <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800dcf0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcf4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800dcf8:	1c51      	adds	r1, r2, #1
 800dcfa:	64b9      	str	r1, [r7, #72]	; 0x48
 800dcfc:	f143 0300 	adc.w	r3, r3, #0
 800dd00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd02:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800dd0a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800dd0e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd12:	2300      	movs	r3, #0
 800dd14:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800dd16:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	f47f ad6a 	bne.w	800d7f4 <_fx_file_write+0x6fc>
 800dd20:	e000      	b.n	800dd24 <_fx_file_write+0xc2c>
                break;
 800dd22:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800dd24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dd2c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800dd30:	2000      	movs	r0, #0
 800dd32:	6439      	str	r1, [r7, #64]	; 0x40
 800dd34:	6478      	str	r0, [r7, #68]	; 0x44
 800dd36:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	1851      	adds	r1, r2, r1
 800dd3e:	63b9      	str	r1, [r7, #56]	; 0x38
 800dd40:	4629      	mov	r1, r5
 800dd42:	eb43 0101 	adc.w	r1, r3, r1
 800dd46:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800dd48:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dd50:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800dd54:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd58:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800dd5c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800dd60:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800dd64:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd68:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800dd6c:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800dd70:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800dd74:	4290      	cmp	r0, r2
 800dd76:	eb71 0303 	sbcs.w	r3, r1, r3
 800dd7a:	f080 80de 	bcs.w	800df3a <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800dd7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dd86:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800dd8a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800dd8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd96:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800dd9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dda2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800dda6:	e0c3      	b.n	800df30 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800dda8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800ddac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	f000 80b3 	beq.w	800df1c <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800ddb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ddba:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800ddbe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ddc2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800ddc6:	4299      	cmp	r1, r3
 800ddc8:	bf08      	it	eq
 800ddca:	4290      	cmpeq	r0, r2
 800ddcc:	f040 80a6 	bne.w	800df1c <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800ddd0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ddd4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800ddd8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800dde0:	429a      	cmp	r2, r3
 800dde2:	f040 809b 	bne.w	800df1c <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800dde6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ddea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ddee:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800ddf2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800ddf6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ddfa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ddfe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800de06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de0a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800de0e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800de12:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800de16:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de1a:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800de1e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800de22:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800de26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800de2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800de36:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de3a:	69da      	ldr	r2, [r3, #28]
 800de3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de40:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800de42:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de46:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800de4a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800de4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800de52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d15f      	bne.n	800df1c <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800de5c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de60:	691a      	ldr	r2, [r3, #16]
 800de62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de66:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800de68:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de6c:	695a      	ldr	r2, [r3, #20]
 800de6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de72:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800de74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800de78:	2200      	movs	r2, #0
 800de7a:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800de7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de82:	2200      	movs	r2, #0
 800de84:	633b      	str	r3, [r7, #48]	; 0x30
 800de86:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800de88:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de8c:	695b      	ldr	r3, [r3, #20]
 800de8e:	3b02      	subs	r3, #2
 800de90:	2200      	movs	r2, #0
 800de92:	62bb      	str	r3, [r7, #40]	; 0x28
 800de94:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800de96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de9c:	2200      	movs	r2, #0
 800de9e:	623b      	str	r3, [r7, #32]
 800dea0:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800dea2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800dea6:	462b      	mov	r3, r5
 800dea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800deac:	4642      	mov	r2, r8
 800deae:	fb02 f203 	mul.w	r2, r2, r3
 800deb2:	464b      	mov	r3, r9
 800deb4:	4621      	mov	r1, r4
 800deb6:	fb01 f303 	mul.w	r3, r1, r3
 800deba:	4413      	add	r3, r2
 800debc:	4622      	mov	r2, r4
 800debe:	4641      	mov	r1, r8
 800dec0:	fba2 1201 	umull	r1, r2, r2, r1
 800dec4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800dec8:	460a      	mov	r2, r1
 800deca:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800dece:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800ded2:	4413      	add	r3, r2
 800ded4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ded8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dedc:	4623      	mov	r3, r4
 800dede:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800dee2:	4602      	mov	r2, r0
 800dee4:	189b      	adds	r3, r3, r2
 800dee6:	61bb      	str	r3, [r7, #24]
 800dee8:	462b      	mov	r3, r5
 800deea:	460a      	mov	r2, r1
 800deec:	4153      	adcs	r3, r2
 800deee:	61fb      	str	r3, [r7, #28]
 800def0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800def4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800def8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 800defc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800df00:	2200      	movs	r2, #0
 800df02:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 800df04:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800df08:	2200      	movs	r2, #0
 800df0a:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 800df0c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800df10:	f04f 0200 	mov.w	r2, #0
 800df14:	f04f 0300 	mov.w	r3, #0
 800df18:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800df1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800df20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 800df26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800df2a:	3b01      	subs	r3, #1
 800df2c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 800df30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800df34:	2b00      	cmp	r3, #0
 800df36:	f47f af37 	bne.w	800dda8 <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 800df3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df3e:	2201      	movs	r2, #1
 800df40:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 800df42:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df46:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d006      	beq.n	800df5c <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 800df4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df52:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800df56:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800df5a:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800df5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df60:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800df64:	4618      	mov	r0, r3
 800df66:	f004 ffa3 	bl	8012eb0 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800df72:	46bd      	mov	sp, r7
 800df74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df78 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800df86:	1c5a      	adds	r2, r3, #1
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a3f      	ldr	r2, [pc, #252]	; (800e090 <_fx_media_abort+0x118>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d001      	beq.n	800df9c <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800df98:	2311      	movs	r3, #17
 800df9a:	e074      	b.n	800e086 <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a3b      	ldr	r2, [pc, #236]	; (800e090 <_fx_media_abort+0x118>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d001      	beq.n	800dfaa <_fx_media_abort+0x32>
 800dfa6:	2311      	movs	r3, #17
 800dfa8:	e06d      	b.n	800e086 <_fx_media_abort+0x10e>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dfb0:	f04f 31ff 	mov.w	r1, #4294967295
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f004 fd03 	bl	80129c0 <_tx_mutex_get>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <_fx_media_abort+0x4c>
 800dfc0:	2311      	movs	r3, #17
 800dfc2:	e060      	b.n	800e086 <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dfca:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dfd2:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800dfd4:	e008      	b.n	800dfe8 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	4a2e      	ldr	r2, [pc, #184]	; (800e094 <_fx_media_abort+0x11c>)
 800dfda:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfe0:	61bb      	str	r3, [r7, #24]
        open_count--;
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1f3      	bne.n	800dfd6 <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2203      	movs	r2, #3
 800dff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2290      	movs	r2, #144	; 0x90
 800dffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e008:	f3ef 8310 	mrs	r3, PRIMASK
 800e00c:	613b      	str	r3, [r7, #16]
    return(posture);
 800e00e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e010:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e012:	b672      	cpsid	i
    return(int_posture);
 800e014:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e016:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e018:	4b1f      	ldr	r3, [pc, #124]	; (800e098 <_fx_media_abort+0x120>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d103      	bne.n	800e028 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e020:	4b1e      	ldr	r3, [pc, #120]	; (800e09c <_fx_media_abort+0x124>)
 800e022:	2200      	movs	r2, #0
 800e024:	601a      	str	r2, [r3, #0]
 800e026:	e019      	b.n	800e05c <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e034:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e044:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e048:	4b14      	ldr	r3, [pc, #80]	; (800e09c <_fx_media_abort+0x124>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d104      	bne.n	800e05c <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e058:	4a10      	ldr	r2, [pc, #64]	; (800e09c <_fx_media_abort+0x124>)
 800e05a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e05c:	4b0e      	ldr	r3, [pc, #56]	; (800e098 <_fx_media_abort+0x120>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3b01      	subs	r3, #1
 800e062:	4a0d      	ldr	r2, [pc, #52]	; (800e098 <_fx_media_abort+0x120>)
 800e064:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a0d      	ldr	r2, [pc, #52]	; (800e0a0 <_fx_media_abort+0x128>)
 800e06a:	601a      	str	r2, [r3, #0]
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	f383 8810 	msr	PRIMASK, r3
}
 800e076:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e07e:	4618      	mov	r0, r3
 800e080:	f004 fbf4 	bl	801286c <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3720      	adds	r7, #32
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	4d454449 	.word	0x4d454449
 800e094:	46494c41 	.word	0x46494c41
 800e098:	24003588 	.word	0x24003588
 800e09c:	24003584 	.word	0x24003584
 800e0a0:	4d454441 	.word	0x4d454441

0800e0a4 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800e0a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e0a8:	b084      	sub	sp, #16
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0b4:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	330b      	adds	r3, #11
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f001 fc7e 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	e08c      	b.n	800e1ec <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3318      	adds	r3, #24
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f001 fc70 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	331a      	adds	r3, #26
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f001 fc68 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3313      	adds	r3, #19
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f001 fc60 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2200      	movs	r2, #0
 800e100:	4698      	mov	r8, r3
 800e102:	4691      	mov	r9, r2
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e110:	4313      	orrs	r3, r2
 800e112:	d10b      	bne.n	800e12c <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3320      	adds	r3, #32
 800e118:	4618      	mov	r0, r3
 800e11a:	f001 fc77 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e11e:	4603      	mov	r3, r0
 800e120:	2200      	movs	r2, #0
 800e122:	461c      	mov	r4, r3
 800e124:	4615      	mov	r5, r2
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e132:	4313      	orrs	r3, r2
 800e134:	d101      	bne.n	800e13a <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800e136:	2302      	movs	r3, #2
 800e138:	e058      	b.n	800e1ec <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	330e      	adds	r3, #14
 800e13e:	4618      	mov	r0, r3
 800e140:	f001 fc3c 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e144:	4602      	mov	r2, r0
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800e152:	2302      	movs	r3, #2
 800e154:	e04a      	b.n	800e1ec <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	330d      	adds	r3, #13
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	461a      	mov	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800e16a:	2302      	movs	r3, #2
 800e16c:	e03e      	b.n	800e1ec <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3316      	adds	r3, #22
 800e172:	4618      	mov	r0, r3
 800e174:	f001 fc22 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e178:	4602      	mov	r2, r0
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e182:	2b00      	cmp	r3, #0
 800e184:	d107      	bne.n	800e196 <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3324      	adds	r3, #36	; 0x24
 800e18a:	4618      	mov	r0, r3
 800e18c:	f001 fc3e 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e190:	4602      	mov	r2, r0
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800e19e:	2302      	movs	r3, #2
 800e1a0:	e024      	b.n	800e1ec <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3310      	adds	r3, #16
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d101      	bne.n	800e1ba <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e018      	b.n	800e1ec <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	331c      	adds	r3, #28
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f001 fc24 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3311      	adds	r3, #17
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f001 fbf4 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	332c      	adds	r3, #44	; 0x2c
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f001 fc14 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800e1f8 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b092      	sub	sp, #72	; 0x48
 800e1fc:	af04      	add	r7, sp, #16
 800e1fe:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4aa6      	ldr	r2, [pc, #664]	; (800e4a0 <_fx_media_close+0x2a8>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d001      	beq.n	800e20e <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e20a:	2311      	movs	r3, #17
 800e20c:	e1c2      	b.n	800e594 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4aa3      	ldr	r2, [pc, #652]	; (800e4a0 <_fx_media_close+0x2a8>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d001      	beq.n	800e21c <_fx_media_close+0x24>
 800e218:	2311      	movs	r3, #17
 800e21a:	e1bb      	b.n	800e594 <_fx_media_close+0x39c>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e222:	f04f 31ff 	mov.w	r1, #4294967295
 800e226:	4618      	mov	r0, r3
 800e228:	f004 fbca 	bl	80129c0 <_tx_mutex_get>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <_fx_media_close+0x3e>
 800e232:	2311      	movs	r3, #17
 800e234:	e1ae      	b.n	800e594 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e23c:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e244:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800e246:	e046      	b.n	800e2d6 <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d139      	bne.n	800e2c4 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e254:	2b00      	cmp	r3, #0
 800e256:	d035      	beq.n	800e2c4 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e258:	f3ef 8310 	mrs	r3, PRIMASK
 800e25c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e25e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e260:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e262:	b672      	cpsid	i
    return(int_posture);
 800e264:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800e266:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e268:	4b8e      	ldr	r3, [pc, #568]	; (800e4a4 <_fx_media_close+0x2ac>)
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e272:	4b8d      	ldr	r3, [pc, #564]	; (800e4a8 <_fx_media_close+0x2b0>)
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e27c:	6a3b      	ldr	r3, [r7, #32]
 800e27e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	f383 8810 	msr	PRIMASK, r3
}
 800e286:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e28e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e290:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e296:	3368      	adds	r3, #104	; 0x68
 800e298:	4619      	mov	r1, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7fb fa9c 	bl	80097d8 <_fx_directory_entry_write>
 800e2a0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00a      	beq.n	800e2be <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f004 fdfe 	bl	8012eb0 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7ff fe5f 	bl	800df78 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800e2ba:	2390      	movs	r3, #144	; 0x90
 800e2bc:	e16a      	b.n	800e594 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	4a79      	ldr	r2, [pc, #484]	; (800e4ac <_fx_media_close+0x2b4>)
 800e2c8:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ce:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800e2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800e2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1b5      	bne.n	800e248 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f001 fef0 	bl	80100c2 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f002 fa3e 	bl	8010764 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	9102      	str	r1, [sp, #8]
 800e2f2:	e9cd 2300 	strd	r2, r3, [sp]
 800e2f6:	f04f 0201 	mov.w	r2, #1
 800e2fa:	f04f 0300 	mov.w	r3, #0
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f002 fdba 	bl	8010e78 <_fx_utility_logical_sector_flush>
 800e304:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00a      	beq.n	800e322 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e312:	4618      	mov	r0, r3
 800e314:	f004 fdcc 	bl	8012eb0 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff fe2d 	bl	800df78 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800e31e:	2390      	movs	r3, #144	; 0x90
 800e320:	e138      	b.n	800e594 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 80ca 	beq.w	800e4c0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e334:	429a      	cmp	r2, r3
 800e336:	f000 80c3 	beq.w	800e4c0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800e340:	2b00      	cmp	r3, #0
 800e342:	f040 80bd 	bne.w	800e4c0 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	69db      	ldr	r3, [r3, #28]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	69d9      	ldr	r1, [r3, #28]
 800e352:	f04f 32ff 	mov.w	r2, #4294967295
 800e356:	f04f 33ff 	mov.w	r3, #4294967295
 800e35a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	2200      	movs	r2, #0
 800e364:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2290      	movs	r2, #144	; 0x90
 800e372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e37a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2203      	movs	r2, #3
 800e394:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f004 fd75 	bl	8012eb0 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff fdd6 	bl	800df78 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800e3cc:	2390      	movs	r3, #144	; 0x90
 800e3ce:	e0e1      	b.n	800e594 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800e3d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3da:	f001 fb17 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e3de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	4a33      	ldr	r2, [pc, #204]	; (800e4b0 <_fx_media_close+0x2b8>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d16b      	bne.n	800e4c0 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f001 fb0c 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e3f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	4a2e      	ldr	r2, [pc, #184]	; (800e4b4 <_fx_media_close+0x2bc>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d160      	bne.n	800e4c0 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e400:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e408:	4619      	mov	r1, r3
 800e40a:	4610      	mov	r0, r2
 800e40c:	f001 fb1b 	bl	800fa46 <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f001 fb11 	bl	800fa46 <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2201      	movs	r2, #1
 800e428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2290      	movs	r2, #144	; 0x90
 800e430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2201      	movs	r2, #1
 800e44a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2203      	movs	r2, #3
 800e452:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e464:	1c5a      	adds	r2, r3, #1
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e484:	2b00      	cmp	r3, #0
 800e486:	d017      	beq.n	800e4b8 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e48e:	4618      	mov	r0, r3
 800e490:	f004 fd0e 	bl	8012eb0 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7ff fd6f 	bl	800df78 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800e49a:	2390      	movs	r3, #144	; 0x90
 800e49c:	e07a      	b.n	800e594 <_fx_media_close+0x39c>
 800e49e:	bf00      	nop
 800e4a0:	4d454449 	.word	0x4d454449
 800e4a4:	24003590 	.word	0x24003590
 800e4a8:	2400358c 	.word	0x2400358c
 800e4ac:	46494c43 	.word	0x46494c43
 800e4b0:	41615252 	.word	0x41615252
 800e4b4:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e4c6:	1c5a      	adds	r2, r3, #1
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2202      	movs	r2, #2
 800e4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2290      	movs	r2, #144	; 0x90
 800e4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2208      	movs	r2, #8
 800e4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2290      	movs	r2, #144	; 0x90
 800e4f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e502:	f3ef 8310 	mrs	r3, PRIMASK
 800e506:	613b      	str	r3, [r7, #16]
    return(posture);
 800e508:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e50a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e50c:	b672      	cpsid	i
    return(int_posture);
 800e50e:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e510:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e512:	4b22      	ldr	r3, [pc, #136]	; (800e59c <_fx_media_close+0x3a4>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b01      	cmp	r3, #1
 800e518:	d103      	bne.n	800e522 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e51a:	4b21      	ldr	r3, [pc, #132]	; (800e5a0 <_fx_media_close+0x3a8>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	e019      	b.n	800e556 <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e52e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e53e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e542:	4b17      	ldr	r3, [pc, #92]	; (800e5a0 <_fx_media_close+0x3a8>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d104      	bne.n	800e556 <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e552:	4a13      	ldr	r2, [pc, #76]	; (800e5a0 <_fx_media_close+0x3a8>)
 800e554:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e556:	4b11      	ldr	r3, [pc, #68]	; (800e59c <_fx_media_close+0x3a4>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	4a0f      	ldr	r2, [pc, #60]	; (800e59c <_fx_media_close+0x3a4>)
 800e55e:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a10      	ldr	r2, [pc, #64]	; (800e5a4 <_fx_media_close+0x3ac>)
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	f383 8810 	msr	PRIMASK, r3
}
 800e570:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e578:	4618      	mov	r0, r3
 800e57a:	f004 f977 	bl	801286c <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3738      	adds	r7, #56	; 0x38
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	24003588 	.word	0x24003588
 800e5a0:	24003584 	.word	0x24003584
 800e5a4:	4d454443 	.word	0x4d454443

0800e5a8 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b090      	sub	sp, #64	; 0x40
 800e5ac:	af04      	add	r7, sp, #16
 800e5ae:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4aa2      	ldr	r2, [pc, #648]	; (800e84c <_fx_media_flush+0x2a4>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d001      	beq.n	800e5cc <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e5c8:	2311      	movs	r3, #17
 800e5ca:	e175      	b.n	800e8b8 <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a9e      	ldr	r2, [pc, #632]	; (800e84c <_fx_media_flush+0x2a4>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d001      	beq.n	800e5da <_fx_media_flush+0x32>
 800e5d6:	2311      	movs	r3, #17
 800e5d8:	e16e      	b.n	800e8b8 <_fx_media_flush+0x310>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e5e0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f004 f9eb 	bl	80129c0 <_tx_mutex_get>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d001      	beq.n	800e5f4 <_fx_media_flush+0x4c>
 800e5f0:	2311      	movs	r3, #17
 800e5f2:	e161      	b.n	800e8b8 <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d007      	beq.n	800e60e <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e604:	4618      	mov	r0, r3
 800e606:	f004 fc53 	bl	8012eb0 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800e60a:	2323      	movs	r3, #35	; 0x23
 800e60c:	e154      	b.n	800e8b8 <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e614:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e61c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800e61e:	e040      	b.n	800e6a2 <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d136      	bne.n	800e696 <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800e628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62a:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d032      	beq.n	800e696 <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e630:	f3ef 8310 	mrs	r3, PRIMASK
 800e634:	613b      	str	r3, [r7, #16]
    return(posture);
 800e636:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e638:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e63a:	b672      	cpsid	i
    return(int_posture);
 800e63c:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800e63e:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e640:	4b83      	ldr	r3, [pc, #524]	; (800e850 <_fx_media_flush+0x2a8>)
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e64a:	4b82      	ldr	r3, [pc, #520]	; (800e854 <_fx_media_flush+0x2ac>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f383 8810 	msr	PRIMASK, r3
}
 800e65e:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e668:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	3368      	adds	r3, #104	; 0x68
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7fb f8b0 	bl	80097d8 <_fx_directory_entry_write>
 800e678:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e686:	4618      	mov	r0, r3
 800e688:	f004 fc12 	bl	8012eb0 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	e113      	b.n	800e8b8 <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	2200      	movs	r2, #0
 800e694:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e69a:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1bb      	bne.n	800e620 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f001 fd0a 	bl	80100c2 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f002 f858 	bl	8010764 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	9102      	str	r1, [sp, #8]
 800e6be:	e9cd 2300 	strd	r2, r3, [sp]
 800e6c2:	f04f 0201 	mov.w	r2, #1
 800e6c6:	f04f 0300 	mov.w	r3, #0
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f002 fbd4 	bl	8010e78 <_fx_utility_logical_sector_flush>
 800e6d0:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f004 fbe6 	bl	8012eb0 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e6:	e0e7      	b.n	800e8b8 <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f000 80bb 	beq.w	800e868 <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	f000 80b4 	beq.w	800e868 <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	69db      	ldr	r3, [r3, #28]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	69d9      	ldr	r1, [r3, #28]
 800e70c:	f04f 32ff 	mov.w	r2, #4294967295
 800e710:	f04f 33ff 	mov.w	r3, #4294967295
 800e714:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	69db      	ldr	r3, [r3, #28]
 800e71c:	2200      	movs	r2, #0
 800e71e:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2290      	movs	r2, #144	; 0x90
 800e72c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6a3a      	ldr	r2, [r7, #32]
 800e734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2201      	movs	r2, #1
 800e746:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2203      	movs	r2, #3
 800e74e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e758:	1c5a      	adds	r2, r3, #1
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d007      	beq.n	800e784 <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e77a:	4618      	mov	r0, r3
 800e77c:	f004 fb98 	bl	8012eb0 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800e780:	2390      	movs	r3, #144	; 0x90
 800e782:	e099      	b.n	800e8b8 <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e78a:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800e78c:	6a38      	ldr	r0, [r7, #32]
 800e78e:	f001 f93d 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e792:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	4a30      	ldr	r2, [pc, #192]	; (800e858 <_fx_media_flush+0x2b0>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d165      	bne.n	800e868 <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f001 f932 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800e7a8:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	4a2b      	ldr	r2, [pc, #172]	; (800e85c <_fx_media_flush+0x2b4>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d15a      	bne.n	800e868 <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7bc:	4619      	mov	r1, r3
 800e7be:	4610      	mov	r0, r2
 800e7c0:	f001 f941 	bl	800fa46 <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4610      	mov	r0, r2
 800e7d4:	f001 f937 	bl	800fa46 <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2290      	movs	r2, #144	; 0x90
 800e7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a3a      	ldr	r2, [r7, #32]
 800e7ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2203      	movs	r2, #3
 800e806:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e818:	1c5a      	adds	r2, r3, #1
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d011      	beq.n	800e860 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e842:	4618      	mov	r0, r3
 800e844:	f004 fb34 	bl	8012eb0 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800e848:	2390      	movs	r3, #144	; 0x90
 800e84a:	e035      	b.n	800e8b8 <_fx_media_flush+0x310>
 800e84c:	4d454449 	.word	0x4d454449
 800e850:	24003590 	.word	0x24003590
 800e854:	2400358c 	.word	0x2400358c
 800e858:	41615252 	.word	0x41615252
 800e85c:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2202      	movs	r2, #2
 800e87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2290      	movs	r2, #144	; 0x90
 800e882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f004 fb05 	bl	8012eb0 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800e8a6:	2390      	movs	r3, #144	; 0x90
 800e8a8:	e006      	b.n	800e8b8 <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f004 fafd 	bl	8012eb0 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3730      	adds	r7, #48	; 0x30
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800e8c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8c4:	b09a      	sub	sp, #104	; 0x68
 800e8c6:	af04      	add	r7, sp, #16
 800e8c8:	60f8      	str	r0, [r7, #12]
 800e8ca:	60b9      	str	r1, [r7, #8]
 800e8cc:	607a      	str	r2, [r7, #4]
 800e8ce:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800e8d0:	4bba      	ldr	r3, [pc, #744]	; (800ebbc <_fx_media_open+0x2fc>)
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	4bba      	ldr	r3, [pc, #744]	; (800ebc0 <_fx_media_open+0x300>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	431a      	orrs	r2, r3
 800e8da:	4bba      	ldr	r3, [pc, #744]	; (800ebc4 <_fx_media_open+0x304>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d003      	beq.n	800e8ec <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800e8e4:	4bb8      	ldr	r3, [pc, #736]	; (800ebc8 <_fx_media_open+0x308>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d102      	bne.n	800e8f2 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800e8ec:	2322      	movs	r3, #34	; 0x22
 800e8ee:	f000 bd53 	b.w	800f398 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e904:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e90a:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e912:	461a      	mov	r2, r3
 800e914:	2300      	movs	r3, #0
 800e916:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e920:	2200      	movs	r2, #0
 800e922:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800e926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e928:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2200      	movs	r2, #0
 800e986:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2200      	movs	r2, #0
 800e996:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2200      	movs	r2, #0
 800eade:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2200      	movs	r2, #0
 800eafe:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2204      	movs	r2, #4
 800eb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2290      	movs	r2, #144	; 0x90
 800eb16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800eb4e:	2390      	movs	r3, #144	; 0x90
 800eb50:	f000 bc22 	b.w	800f398 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800eb5a:	1c5a      	adds	r2, r3, #1
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2205      	movs	r2, #5
 800eb66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2290      	movs	r2, #144	; 0x90
 800eb6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d016      	beq.n	800ebcc <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2208      	movs	r2, #8
 800eba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2290      	movs	r2, #144	; 0x90
 800ebaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e3ed      	b.n	800f398 <_fx_media_open+0xad8>
 800ebbc:	2400359c 	.word	0x2400359c
 800ebc0:	240035a0 	.word	0x240035a0
 800ebc4:	240035a4 	.word	0x240035a4
 800ebc8:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800ebcc:	68f8      	ldr	r0, [r7, #12]
 800ebce:	f7ff fa69 	bl	800e0a4 <_fx_media_boot_info_extract>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00e      	beq.n	800ebf6 <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2208      	movs	r2, #8
 800ebdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2290      	movs	r2, #144	; 0x90
 800ebe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800ebf2:	2302      	movs	r3, #2
 800ebf4:	e3d0      	b.n	800f398 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebfc:	3330      	adds	r3, #48	; 0x30
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 fedc 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800ec04:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d20e      	bcs.n	800ec2e <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2208      	movs	r2, #8
 800ec14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2290      	movs	r2, #144	; 0x90
 800ec1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800ec2a:	2321      	movs	r3, #33	; 0x21
 800ec2c:	e3b4      	b.n	800f398 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ec34:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	695b      	ldr	r3, [r3, #20]
 800ec40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec44:	d903      	bls.n	800ec4e <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec4c:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800ec5a:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800ec5c:	e01c      	b.n	800ec98 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800ec5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ec62:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800ec64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec66:	f04f 32ff 	mov.w	r2, #4294967295
 800ec6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800ec72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec74:	2200      	movs	r2, #0
 800ec76:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800ec78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800ec7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec80:	f103 0218 	add.w	r2, r3, #24
 800ec84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec86:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800ec88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec8a:	3318      	adds	r3, #24
 800ec8c:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ec94:	4413      	add	r3, r2
 800ec96:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800ec98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec9a:	1e5a      	subs	r2, r3, #1
 800ec9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1dd      	bne.n	800ec5e <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800eca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eca4:	3b18      	subs	r3, #24
 800eca6:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800eca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecaa:	2200      	movs	r2, #0
 800ecac:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800ecae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ecb0:	1e5a      	subs	r2, r3, #1
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	695b      	ldr	r3, [r3, #20]
 800ecd0:	2b0f      	cmp	r3, #15
 800ecd2:	d91a      	bls.n	800ed0a <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	695a      	ldr	r2, [r3, #20]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	695b      	ldr	r3, [r3, #20]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6959      	ldr	r1, [r3, #20]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d10c      	bne.n	800ed0a <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	089b      	lsrs	r3, r3, #2
 800ecfc:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800ed04:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800ed08:	e002      	b.n	800ed10 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800ed10:	2300      	movs	r3, #0
 800ed12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed14:	e023      	b.n	800ed5e <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800ed16:	68f9      	ldr	r1, [r7, #12]
 800ed18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4413      	add	r3, r2
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	440b      	add	r3, r1
 800ed24:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ed28:	2200      	movs	r2, #0
 800ed2a:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800ed2c:	68f9      	ldr	r1, [r7, #12]
 800ed2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed30:	4613      	mov	r3, r2
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	4413      	add	r3, r2
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	440b      	add	r3, r1
 800ed3a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ed3e:	2200      	movs	r2, #0
 800ed40:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800ed42:	68f9      	ldr	r1, [r7, #12]
 800ed44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed46:	4613      	mov	r3, r2
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	4413      	add	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	440b      	add	r3, r1
 800ed50:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ed54:	2200      	movs	r2, #0
 800ed56:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800ed58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed60:	2b0f      	cmp	r3, #15
 800ed62:	d9d8      	bls.n	800ed16 <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800ed64:	2300      	movs	r3, #0
 800ed66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed68:	e009      	b.n	800ed7e <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed6e:	4413      	add	r3, r2
 800ed70:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ed74:	2200      	movs	r2, #0
 800ed76:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800ed78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed80:	2b7f      	cmp	r3, #127	; 0x7f
 800ed82:	d9f2      	bls.n	800ed6a <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800ed8c:	68f9      	ldr	r1, [r7, #12]
 800ed8e:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800ed90:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800ed94:	441a      	add	r2, r3
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed9e:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800eda4:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800eda6:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800edac:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800edbc:	441a      	add	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800edc8:	68f9      	ldr	r1, [r7, #12]
 800edca:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800edcc:	2000      	movs	r0, #0
 800edce:	460c      	mov	r4, r1
 800edd0:	4605      	mov	r5, r0
 800edd2:	ebb2 0804 	subs.w	r8, r2, r4
 800edd6:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edde:	2200      	movs	r2, #0
 800ede0:	469a      	mov	sl, r3
 800ede2:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800ede4:	4652      	mov	r2, sl
 800ede6:	465b      	mov	r3, fp
 800ede8:	4640      	mov	r0, r8
 800edea:	4649      	mov	r1, r9
 800edec:	f7f1 fb94 	bl	8000518 <__aeabi_uldivmod>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edfc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d819      	bhi.n	800ee38 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2201      	movs	r2, #1
 800ee08:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800ee22:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee32:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800ee36:	e037      	b.n	800eea8 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee3c:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d819      	bhi.n	800ee78 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800ee62:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee72:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800ee76:	e017      	b.n	800eea8 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2201      	movs	r2, #1
 800ee82:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee88:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee90:	461a      	mov	r2, r3
 800ee92:	4b95      	ldr	r3, [pc, #596]	; (800f0e8 <_fx_media_open+0x828>)
 800ee94:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800eea4:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d15f      	bne.n	800ef70 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d801      	bhi.n	800eebc <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800eeb8:	2302      	movs	r3, #2
 800eeba:	e26d      	b.n	800f398 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec4:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800eec6:	68f9      	ldr	r1, [r7, #12]
 800eec8:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800eeca:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800eece:	441a      	add	r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eedc:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800eede:	f107 0310 	add.w	r3, r7, #16
 800eee2:	461a      	mov	r2, r3
 800eee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 fdce 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800eeec:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800eeee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef0:	3301      	adds	r3, #1
 800eef2:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00e      	beq.n	800ef18 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2208      	movs	r2, #8
 800eefe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2290      	movs	r2, #144	; 0x90
 800ef06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800ef14:	2303      	movs	r3, #3
 800ef16:	e23f      	b.n	800f398 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d004      	beq.n	800ef2a <_fx_media_open+0x66a>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d90e      	bls.n	800ef48 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2208      	movs	r2, #8
 800ef2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2290      	movs	r2, #144	; 0x90
 800ef36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800ef44:	2303      	movs	r3, #3
 800ef46:	e227      	b.n	800f398 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	4a68      	ldr	r2, [pc, #416]	; (800f0ec <_fx_media_open+0x82c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d802      	bhi.n	800ef56 <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800ef54:	e7c3      	b.n	800eede <_fx_media_open+0x61e>
                break;
 800ef56:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef5e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ef66:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ef6a:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2200      	movs	r2, #0
 800ef74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f000 808e 	beq.w	800f0a4 <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	69d9      	ldr	r1, [r3, #28]
 800ef94:	f04f 32ff 	mov.w	r2, #4294967295
 800ef98:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	69db      	ldr	r3, [r3, #28]
 800efa4:	2200      	movs	r2, #0
 800efa6:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2290      	movs	r2, #144	; 0x90
 800efb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2203      	movs	r2, #3
 800efd6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d150      	bne.n	800f09e <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f002:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800f004:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f006:	f000 fd01 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800f00a:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	4a38      	ldr	r2, [pc, #224]	; (800f0f0 <_fx_media_open+0x830>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d140      	bne.n	800f096 <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800f014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f016:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f01a:	4618      	mov	r0, r3
 800f01c:	f000 fcf6 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800f020:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	4a33      	ldr	r2, [pc, #204]	; (800f0f4 <_fx_media_open+0x834>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d131      	bne.n	800f08e <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800f02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fceb 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800f036:	4602      	mov	r2, r0
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800f044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f046:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 fcde 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800f050:	4602      	mov	r2, r0
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f060:	429a      	cmp	r2, r3
 800f062:	d80c      	bhi.n	800f07e <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06e:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f070:	429a      	cmp	r2, r3
 800f072:	d804      	bhi.n	800f07e <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d812      	bhi.n	800f0a4 <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800f08c:	e00a      	b.n	800f0a4 <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	669a      	str	r2, [r3, #104]	; 0x68
 800f094:	e006      	b.n	800f0a4 <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	669a      	str	r2, [r3, #104]	; 0x68
 800f09c:	e002      	b.n	800f0a4 <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d040      	beq.n	800f12e <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	657b      	str	r3, [r7, #84]	; 0x54
 800f0b0:	e036      	b.n	800f120 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f0b2:	f107 0310 	add.w	r3, r7, #16
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 fce4 	bl	800fa88 <_fx_utility_FAT_entry_read>
 800f0c0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d017      	beq.n	800f0f8 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2208      	movs	r2, #8
 800f0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2290      	movs	r2, #144	; 0x90
 800f0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f0e2:	2303      	movs	r3, #3
 800f0e4:	e158      	b.n	800f398 <_fx_media_open+0xad8>
 800f0e6:	bf00      	nop
 800f0e8:	0ffffff0 	.word	0x0ffffff0
 800f0ec:	0fffffef 	.word	0x0fffffef
 800f0f0:	41615252 	.word	0x41615252
 800f0f4:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10d      	bne.n	800f11a <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d103      	bne.n	800f11a <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800f11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11c:	3301      	adds	r3, #1
 800f11e:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f124:	3302      	adds	r3, #2
 800f126:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f128:	429a      	cmp	r2, r3
 800f12a:	d3c2      	bcc.n	800f0b2 <_fx_media_open+0x7f2>
 800f12c:	e0b4      	b.n	800f298 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f132:	2b00      	cmp	r3, #0
 800f134:	f040 80b0 	bne.w	800f298 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f13e:	2101      	movs	r1, #1
 800f140:	9102      	str	r1, [sp, #8]
 800f142:	e9cd 2300 	strd	r2, r3, [sp]
 800f146:	f04f 0201 	mov.w	r2, #1
 800f14a:	f04f 0300 	mov.w	r3, #0
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f001 fe92 	bl	8010e78 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f158:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f15e:	2300      	movs	r3, #0
 800f160:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f162:	e093      	b.n	800f28c <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f16a:	4413      	add	r3, r2
 800f16c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f17e:	429a      	cmp	r2, r3
 800f180:	d902      	bls.n	800f188 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	695b      	ldr	r3, [r3, #20]
 800f186:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2290      	movs	r2, #144	; 0x90
 800f194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	689a      	ldr	r2, [r3, #8]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2202      	movs	r2, #2
 800f1b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00e      	beq.n	800f1ec <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2208      	movs	r2, #8
 800f1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2290      	movs	r2, #144	; 0x90
 800f1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	e0d5      	b.n	800f398 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1f2:	fb02 f303 	mul.w	r3, r2, r3
 800f1f6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1fc:	e03d      	b.n	800f27a <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f202:	2b00      	cmp	r3, #0
 800f204:	d009      	beq.n	800f21a <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f20c:	4413      	add	r3, r2
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800f212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f214:	3304      	adds	r3, #4
 800f216:	64bb      	str	r3, [r7, #72]	; 0x48
 800f218:	e011      	b.n	800f23e <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	689a      	ldr	r2, [r3, #8]
 800f21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f220:	4413      	add	r3, r2
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	689a      	ldr	r2, [r3, #8]
 800f22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f22c:	3301      	adds	r3, #1
 800f22e:	4413      	add	r3, r2
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f234:	430b      	orrs	r3, r1
 800f236:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800f238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f23a:	3302      	adds	r3, #2
 800f23c:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10d      	bne.n	800f260 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f248:	1c5a      	adds	r2, r3, #1
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f254:	2b00      	cmp	r3, #0
 800f256:	d103      	bne.n	800f260 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800f260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f262:	3301      	adds	r3, #1
 800f264:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f26a:	3302      	adds	r3, #2
 800f26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f26e:	429a      	cmp	r2, r3
 800f270:	d303      	bcc.n	800f27a <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f276:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800f278:	e003      	b.n	800f282 <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800f27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	429a      	cmp	r2, r3
 800f280:	d3bd      	bcc.n	800f1fe <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	695b      	ldr	r3, [r3, #20]
 800f286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f288:	4413      	add	r3, r2
 800f28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f292:	429a      	cmp	r2, r3
 800f294:	f4ff af66 	bcc.w	800f164 <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d103      	bne.n	800f2aa <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f2fe:	2200      	movs	r2, #0
 800f300:	4928      	ldr	r1, [pc, #160]	; (800f3a4 <_fx_media_open+0xae4>)
 800f302:	4618      	mov	r0, r3
 800f304:	f003 fa58 	bl	80127b8 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f308:	f3ef 8310 	mrs	r3, PRIMASK
 800f30c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f30e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f310:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f312:	b672      	cpsid	i
    return(int_posture);
 800f314:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800f316:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4a23      	ldr	r2, [pc, #140]	; (800f3a8 <_fx_media_open+0xae8>)
 800f31c:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800f31e:	4b23      	ldr	r3, [pc, #140]	; (800f3ac <_fx_media_open+0xaec>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d017      	beq.n	800f356 <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800f326:	4b21      	ldr	r3, [pc, #132]	; (800f3ac <_fx_media_open+0xaec>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f32e:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800f330:	4b1e      	ldr	r3, [pc, #120]	; (800f3ac <_fx_media_open+0xaec>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	68fa      	ldr	r2, [r7, #12]
 800f33e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	6a3a      	ldr	r2, [r7, #32]
 800f346:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800f34a:	4b18      	ldr	r3, [pc, #96]	; (800f3ac <_fx_media_open+0xaec>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800f354:	e00a      	b.n	800f36c <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800f356:	4a15      	ldr	r2, [pc, #84]	; (800f3ac <_fx_media_open+0xaec>)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800f36c:	4b10      	ldr	r3, [pc, #64]	; (800f3b0 <_fx_media_open+0xaf0>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3301      	adds	r3, #1
 800f372:	4a0f      	ldr	r2, [pc, #60]	; (800f3b0 <_fx_media_open+0xaf0>)
 800f374:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d004      	beq.n	800f38a <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f386:	68f8      	ldr	r0, [r7, #12]
 800f388:	4798      	blx	r3
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	f383 8810 	msr	PRIMASK, r3
}
 800f394:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800f396:	2300      	movs	r3, #0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3758      	adds	r7, #88	; 0x58
 800f39c:	46bd      	mov	sp, r7
 800f39e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3a2:	bf00      	nop
 800f3a4:	08014fa4 	.word	0x08014fa4
 800f3a8:	4d454449 	.word	0x4d454449
 800f3ac:	24003584 	.word	0x24003584
 800f3b0:	24003588 	.word	0x24003588

0800f3b4 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800f3b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f3b8:	b090      	sub	sp, #64	; 0x40
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	60f8      	str	r0, [r7, #12]
 800f3be:	60b9      	str	r1, [r7, #8]
 800f3c0:	607a      	str	r2, [r7, #4]
 800f3c2:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800f3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2be9      	cmp	r3, #233	; 0xe9
 800f3d2:	d008      	beq.n	800f3e6 <_fx_partition_offset_calculate+0x32>
 800f3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	2beb      	cmp	r3, #235	; 0xeb
 800f3da:	d17d      	bne.n	800f4d8 <_fx_partition_offset_calculate+0x124>
 800f3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3de:	3302      	adds	r3, #2
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	2b90      	cmp	r3, #144	; 0x90
 800f3e4:	d178      	bne.n	800f4d8 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800f3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3e8:	3316      	adds	r3, #22
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d118      	bne.n	800f422 <_fx_partition_offset_calculate+0x6e>
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f2:	3317      	adds	r3, #23
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d113      	bne.n	800f422 <_fx_partition_offset_calculate+0x6e>
 800f3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fc:	3324      	adds	r3, #36	; 0x24
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10e      	bne.n	800f422 <_fx_partition_offset_calculate+0x6e>
 800f404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f406:	3325      	adds	r3, #37	; 0x25
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d109      	bne.n	800f422 <_fx_partition_offset_calculate+0x6e>
 800f40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f410:	3326      	adds	r3, #38	; 0x26
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d104      	bne.n	800f422 <_fx_partition_offset_calculate+0x6e>
 800f418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41a:	3327      	adds	r3, #39	; 0x27
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d05a      	beq.n	800f4d8 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	f04f 0300 	mov.w	r3, #0
 800f42a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800f42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f430:	3313      	adds	r3, #19
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d104      	bne.n	800f442 <_fx_partition_offset_calculate+0x8e>
 800f438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43a:	3314      	adds	r3, #20
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d00d      	beq.n	800f45e <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800f442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f444:	3314      	adds	r3, #20
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	021b      	lsls	r3, r3, #8
 800f44a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f44c:	3213      	adds	r2, #19
 800f44e:	7812      	ldrb	r2, [r2, #0]
 800f450:	4313      	orrs	r3, r2
 800f452:	2200      	movs	r2, #0
 800f454:	4698      	mov	r8, r3
 800f456:	4691      	mov	r9, r2
 800f458:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800f45c:	e02a      	b.n	800f4b4 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800f45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f460:	3320      	adds	r3, #32
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10e      	bne.n	800f486 <_fx_partition_offset_calculate+0xd2>
 800f468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46a:	3321      	adds	r3, #33	; 0x21
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d109      	bne.n	800f486 <_fx_partition_offset_calculate+0xd2>
 800f472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f474:	3322      	adds	r3, #34	; 0x22
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d104      	bne.n	800f486 <_fx_partition_offset_calculate+0xd2>
 800f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47e:	3323      	adds	r3, #35	; 0x23
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d016      	beq.n	800f4b4 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f488:	3323      	adds	r3, #35	; 0x23
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f490:	3322      	adds	r3, #34	; 0x22
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f496:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49a:	3321      	adds	r3, #33	; 0x21
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f4a0:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800f4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4a4:	3220      	adds	r2, #32
 800f4a6:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f4a8:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	461c      	mov	r4, r3
 800f4ae:	4615      	mov	r5, r2
 800f4b0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800f4b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	d00d      	beq.n	800f4d8 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d002      	beq.n	800f4c8 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d002      	beq.n	800f4d4 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800f4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	e032      	b.n	800f53e <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800f4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b55      	cmp	r3, #85	; 0x55
 800f4e2:	d105      	bne.n	800f4f0 <_fx_partition_offset_calculate+0x13c>
 800f4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2baa      	cmp	r3, #170	; 0xaa
 800f4ee:	d001      	beq.n	800f4f4 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800f4f0:	2304      	movs	r3, #4
 800f4f2:	e024      	b.n	800f53e <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800f4f4:	f107 0110 	add.w	r1, r7, #16
 800f4f8:	f107 0014 	add.w	r0, r7, #20
 800f4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fe:	2200      	movs	r2, #0
 800f500:	f000 f822 	bl	800f548 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d301      	bcc.n	800f510 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800f50c:	2304      	movs	r3, #4
 800f50e:	e016      	b.n	800f53e <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d007      	beq.n	800f526 <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	00db      	lsls	r3, r3, #3
 800f51a:	3340      	adds	r3, #64	; 0x40
 800f51c:	443b      	add	r3, r7
 800f51e:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d007      	beq.n	800f53c <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	00db      	lsls	r3, r3, #3
 800f530:	3340      	adds	r3, #64	; 0x40
 800f532:	443b      	add	r3, r7
 800f534:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3740      	adds	r7, #64	; 0x40
 800f542:	46bd      	mov	sp, r7
 800f544:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f548 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800f548:	b480      	push	{r7}
 800f54a:	b089      	sub	sp, #36	; 0x24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800f556:	2300      	movs	r3, #0
 800f558:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800f55a:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800f55e:	61fb      	str	r3, [r7, #28]
 800f560:	e06f      	b.n	800f642 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	3304      	adds	r3, #4
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	4413      	add	r3, r2
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d10e      	bne.n	800f58e <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	4413      	add	r3, r2
 800f57a:	2200      	movs	r2, #0
 800f57c:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4413      	add	r3, r2
 800f588:	2200      	movs	r2, #0
 800f58a:	605a      	str	r2, [r3, #4]
 800f58c:	e051      	b.n	800f632 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	3308      	adds	r3, #8
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	4413      	add	r3, r2
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	3309      	adds	r3, #9
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	021b      	lsls	r3, r3, #8
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	330a      	adds	r3, #10
 800f5b0:	683a      	ldr	r2, [r7, #0]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	041b      	lsls	r3, r3, #16
 800f5b8:	697a      	ldr	r2, [r7, #20]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	330b      	adds	r3, #11
 800f5c2:	683a      	ldr	r2, [r7, #0]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	061b      	lsls	r3, r3, #24
 800f5ca:	697a      	ldr	r2, [r7, #20]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	00db      	lsls	r3, r3, #3
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4413      	add	r3, r2
 800f5da:	6979      	ldr	r1, [r7, #20]
 800f5dc:	69ba      	ldr	r2, [r7, #24]
 800f5de:	440a      	add	r2, r1
 800f5e0:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	330c      	adds	r3, #12
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	330d      	adds	r3, #13
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	021b      	lsls	r3, r3, #8
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	330e      	adds	r3, #14
 800f604:	683a      	ldr	r2, [r7, #0]
 800f606:	4413      	add	r3, r2
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	041b      	lsls	r3, r3, #16
 800f60c:	697a      	ldr	r2, [r7, #20]
 800f60e:	4313      	orrs	r3, r2
 800f610:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	330f      	adds	r3, #15
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	061b      	lsls	r3, r3, #24
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	4313      	orrs	r3, r2
 800f622:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	4413      	add	r3, r2
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	1c5a      	adds	r2, r3, #1
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	3310      	adds	r3, #16
 800f640:	61fb      	str	r3, [r7, #28]
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800f648:	d98b      	bls.n	800f562 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3724      	adds	r7, #36	; 0x24
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800f65e:	4b27      	ldr	r3, [pc, #156]	; (800f6fc <_fx_system_initialize+0xa4>)
 800f660:	2200      	movs	r2, #0
 800f662:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800f664:	4b26      	ldr	r3, [pc, #152]	; (800f700 <_fx_system_initialize+0xa8>)
 800f666:	2200      	movs	r2, #0
 800f668:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800f66a:	4b26      	ldr	r3, [pc, #152]	; (800f704 <_fx_system_initialize+0xac>)
 800f66c:	f644 2221 	movw	r2, #18977	; 0x4a21
 800f670:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800f672:	4b25      	ldr	r3, [pc, #148]	; (800f708 <_fx_system_initialize+0xb0>)
 800f674:	2200      	movs	r2, #0
 800f676:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800f678:	4b24      	ldr	r3, [pc, #144]	; (800f70c <_fx_system_initialize+0xb4>)
 800f67a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f67e:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800f680:	4b23      	ldr	r3, [pc, #140]	; (800f710 <_fx_system_initialize+0xb8>)
 800f682:	2210      	movs	r2, #16
 800f684:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800f686:	2301      	movs	r3, #1
 800f688:	9302      	str	r3, [sp, #8]
 800f68a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f68e:	9301      	str	r3, [sp, #4]
 800f690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	4b1f      	ldr	r3, [pc, #124]	; (800f714 <_fx_system_initialize+0xbc>)
 800f698:	4a1f      	ldr	r2, [pc, #124]	; (800f718 <_fx_system_initialize+0xc0>)
 800f69a:	4920      	ldr	r1, [pc, #128]	; (800f71c <_fx_system_initialize+0xc4>)
 800f69c:	4820      	ldr	r0, [pc, #128]	; (800f720 <_fx_system_initialize+0xc8>)
 800f69e:	f004 fe03 	bl	80142a8 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800f6a2:	4b20      	ldr	r3, [pc, #128]	; (800f724 <_fx_system_initialize+0xcc>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6aa:	4a1e      	ldr	r2, [pc, #120]	; (800f724 <_fx_system_initialize+0xcc>)
 800f6ac:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800f6ae:	4b1d      	ldr	r3, [pc, #116]	; (800f724 <_fx_system_initialize+0xcc>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6b6:	4a1b      	ldr	r2, [pc, #108]	; (800f724 <_fx_system_initialize+0xcc>)
 800f6b8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800f6ba:	4b1b      	ldr	r3, [pc, #108]	; (800f728 <_fx_system_initialize+0xd0>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f6c2:	4a19      	ldr	r2, [pc, #100]	; (800f728 <_fx_system_initialize+0xd0>)
 800f6c4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800f6c6:	4b18      	ldr	r3, [pc, #96]	; (800f728 <_fx_system_initialize+0xd0>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6ce:	4a16      	ldr	r2, [pc, #88]	; (800f728 <_fx_system_initialize+0xd0>)
 800f6d0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800f6d2:	4b15      	ldr	r3, [pc, #84]	; (800f728 <_fx_system_initialize+0xd0>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f043 0310 	orr.w	r3, r3, #16
 800f6da:	4a13      	ldr	r2, [pc, #76]	; (800f728 <_fx_system_initialize+0xd0>)
 800f6dc:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800f6de:	4b13      	ldr	r3, [pc, #76]	; (800f72c <_fx_system_initialize+0xd4>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800f6e6:	4a11      	ldr	r2, [pc, #68]	; (800f72c <_fx_system_initialize+0xd4>)
 800f6e8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800f6ea:	4b10      	ldr	r3, [pc, #64]	; (800f72c <_fx_system_initialize+0xd4>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800f6f2:	4a0e      	ldr	r2, [pc, #56]	; (800f72c <_fx_system_initialize+0xd4>)
 800f6f4:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800f6f6:	bf00      	nop
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	24003584 	.word	0x24003584
 800f700:	24003588 	.word	0x24003588
 800f704:	2400358c 	.word	0x2400358c
 800f708:	24003590 	.word	0x24003590
 800f70c:	24003594 	.word	0x24003594
 800f710:	24003598 	.word	0x24003598
 800f714:	46585359 	.word	0x46585359
 800f718:	0800f731 	.word	0x0800f731
 800f71c:	08014fb8 	.word	0x08014fb8
 800f720:	240035a8 	.word	0x240035a8
 800f724:	2400359c 	.word	0x2400359c
 800f728:	240035a0 	.word	0x240035a0
 800f72c:	240035a4 	.word	0x240035a4

0800f730 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800f730:	b480      	push	{r7}
 800f732:	b089      	sub	sp, #36	; 0x24
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a9c      	ldr	r2, [pc, #624]	; (800f9ac <_fx_system_timer_entry+0x27c>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	f040 8130 	bne.w	800f9a2 <_fx_system_timer_entry+0x272>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800f742:	4b9b      	ldr	r3, [pc, #620]	; (800f9b0 <_fx_system_timer_entry+0x280>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f003 031f 	and.w	r3, r3, #31
 800f74a:	005b      	lsls	r3, r3, #1
 800f74c:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800f74e:	4b98      	ldr	r3, [pc, #608]	; (800f9b0 <_fx_system_timer_entry+0x280>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	095b      	lsrs	r3, r3, #5
 800f754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f758:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800f75a:	4b95      	ldr	r3, [pc, #596]	; (800f9b0 <_fx_system_timer_entry+0x280>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	0adb      	lsrs	r3, r3, #11
 800f760:	f003 031f 	and.w	r3, r3, #31
 800f764:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800f766:	4b93      	ldr	r3, [pc, #588]	; (800f9b4 <_fx_system_timer_entry+0x284>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 031f 	and.w	r3, r3, #31
 800f76e:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800f770:	4b90      	ldr	r3, [pc, #576]	; (800f9b4 <_fx_system_timer_entry+0x284>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	095b      	lsrs	r3, r3, #5
 800f776:	f003 030f 	and.w	r3, r3, #15
 800f77a:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800f77c:	4b8d      	ldr	r3, [pc, #564]	; (800f9b4 <_fx_system_timer_entry+0x284>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	0a5b      	lsrs	r3, r3, #9
 800f782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f786:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800f78a:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	330a      	adds	r3, #10
 800f790:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	2b3b      	cmp	r3, #59	; 0x3b
 800f796:	f240 80eb 	bls.w	800f970 <_fx_system_timer_entry+0x240>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	4a86      	ldr	r2, [pc, #536]	; (800f9b8 <_fx_system_timer_entry+0x288>)
 800f79e:	fba2 2303 	umull	r2, r3, r2, r3
 800f7a2:	095b      	lsrs	r3, r3, #5
 800f7a4:	69ba      	ldr	r2, [r7, #24]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800f7aa:	69fa      	ldr	r2, [r7, #28]
 800f7ac:	4b82      	ldr	r3, [pc, #520]	; (800f9b8 <_fx_system_timer_entry+0x288>)
 800f7ae:	fba3 1302 	umull	r1, r3, r3, r2
 800f7b2:	0959      	lsrs	r1, r3, #5
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	011b      	lsls	r3, r3, #4
 800f7b8:	1a5b      	subs	r3, r3, r1
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	2b3b      	cmp	r3, #59	; 0x3b
 800f7c4:	f240 80d4 	bls.w	800f970 <_fx_system_timer_entry+0x240>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	4a7b      	ldr	r2, [pc, #492]	; (800f9b8 <_fx_system_timer_entry+0x288>)
 800f7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d0:	095b      	lsrs	r3, r3, #5
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800f7d8:	69ba      	ldr	r2, [r7, #24]
 800f7da:	4b77      	ldr	r3, [pc, #476]	; (800f9b8 <_fx_system_timer_entry+0x288>)
 800f7dc:	fba3 1302 	umull	r1, r3, r3, r2
 800f7e0:	0959      	lsrs	r1, r3, #5
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	011b      	lsls	r3, r3, #4
 800f7e6:	1a5b      	subs	r3, r3, r1
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2b17      	cmp	r3, #23
 800f7f2:	f240 80bd 	bls.w	800f970 <_fx_system_timer_entry+0x240>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	617b      	str	r3, [r7, #20]
                    day++;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	3b01      	subs	r3, #1
 800f804:	2b0b      	cmp	r3, #11
 800f806:	f200 80c9 	bhi.w	800f99c <_fx_system_timer_entry+0x26c>
 800f80a:	a201      	add	r2, pc, #4	; (adr r2, 800f810 <_fx_system_timer_entry+0xe0>)
 800f80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f810:	0800f841 	.word	0x0800f841
 800f814:	0800f853 	.word	0x0800f853
 800f818:	0800f881 	.word	0x0800f881
 800f81c:	0800f893 	.word	0x0800f893
 800f820:	0800f8a5 	.word	0x0800f8a5
 800f824:	0800f8b7 	.word	0x0800f8b7
 800f828:	0800f8c9 	.word	0x0800f8c9
 800f82c:	0800f8db 	.word	0x0800f8db
 800f830:	0800f8ed 	.word	0x0800f8ed
 800f834:	0800f8ff 	.word	0x0800f8ff
 800f838:	0800f911 	.word	0x0800f911
 800f83c:	0800f923 	.word	0x0800f923

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	2b1f      	cmp	r3, #31
 800f844:	d97d      	bls.n	800f942 <_fx_system_timer_entry+0x212>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f846:	2301      	movs	r3, #1
 800f848:	613b      	str	r3, [r7, #16]
                            month++;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	3301      	adds	r3, #1
 800f84e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f850:	e077      	b.n	800f942 <_fx_system_timer_entry+0x212>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	f003 0303 	and.w	r3, r3, #3
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d108      	bne.n	800f86e <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	2b1d      	cmp	r3, #29
 800f860:	d971      	bls.n	800f946 <_fx_system_timer_entry+0x216>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800f862:	2301      	movs	r3, #1
 800f864:	613b      	str	r3, [r7, #16]
                                month++;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3301      	adds	r3, #1
 800f86a:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800f86c:	e06b      	b.n	800f946 <_fx_system_timer_entry+0x216>
                            if (day > 28)
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	2b1c      	cmp	r3, #28
 800f872:	d968      	bls.n	800f946 <_fx_system_timer_entry+0x216>
                                day = 1;
 800f874:	2301      	movs	r3, #1
 800f876:	613b      	str	r3, [r7, #16]
                                month++;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	3301      	adds	r3, #1
 800f87c:	60fb      	str	r3, [r7, #12]
                        break;
 800f87e:	e062      	b.n	800f946 <_fx_system_timer_entry+0x216>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	2b1f      	cmp	r3, #31
 800f884:	d961      	bls.n	800f94a <_fx_system_timer_entry+0x21a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f886:	2301      	movs	r3, #1
 800f888:	613b      	str	r3, [r7, #16]
                            month++;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	3301      	adds	r3, #1
 800f88e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f890:	e05b      	b.n	800f94a <_fx_system_timer_entry+0x21a>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	2b1e      	cmp	r3, #30
 800f896:	d95a      	bls.n	800f94e <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f898:	2301      	movs	r3, #1
 800f89a:	613b      	str	r3, [r7, #16]
                            month++;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f8a2:	e054      	b.n	800f94e <_fx_system_timer_entry+0x21e>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	2b1f      	cmp	r3, #31
 800f8a8:	d953      	bls.n	800f952 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	613b      	str	r3, [r7, #16]
                            month++;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f8b4:	e04d      	b.n	800f952 <_fx_system_timer_entry+0x222>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	2b1e      	cmp	r3, #30
 800f8ba:	d94c      	bls.n	800f956 <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	613b      	str	r3, [r7, #16]
                            month++;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f8c6:	e046      	b.n	800f956 <_fx_system_timer_entry+0x226>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	2b1f      	cmp	r3, #31
 800f8cc:	d945      	bls.n	800f95a <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	613b      	str	r3, [r7, #16]
                            month++;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f8d8:	e03f      	b.n	800f95a <_fx_system_timer_entry+0x22a>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	2b1f      	cmp	r3, #31
 800f8de:	d93e      	bls.n	800f95e <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	613b      	str	r3, [r7, #16]
                            month++;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f8ea:	e038      	b.n	800f95e <_fx_system_timer_entry+0x22e>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	2b1e      	cmp	r3, #30
 800f8f0:	d937      	bls.n	800f962 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	613b      	str	r3, [r7, #16]
                            month++;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f8fc:	e031      	b.n	800f962 <_fx_system_timer_entry+0x232>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2b1f      	cmp	r3, #31
 800f902:	d930      	bls.n	800f966 <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f904:	2301      	movs	r3, #1
 800f906:	613b      	str	r3, [r7, #16]
                            month++;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3301      	adds	r3, #1
 800f90c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f90e:	e02a      	b.n	800f966 <_fx_system_timer_entry+0x236>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	2b1e      	cmp	r3, #30
 800f914:	d929      	bls.n	800f96a <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f916:	2301      	movs	r3, #1
 800f918:	613b      	str	r3, [r7, #16]
                            month++;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	3301      	adds	r3, #1
 800f91e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f920:	e023      	b.n	800f96a <_fx_system_timer_entry+0x23a>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	2b1f      	cmp	r3, #31
 800f926:	d922      	bls.n	800f96e <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f928:	2301      	movs	r3, #1
 800f92a:	613b      	str	r3, [r7, #16]
                            month = 1;
 800f92c:	2301      	movs	r3, #1
 800f92e:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	3301      	adds	r3, #1
 800f934:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	f640 023b 	movw	r2, #2107	; 0x83b
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d82f      	bhi.n	800f9a0 <_fx_system_timer_entry+0x270>
                            {
                                return;
                            }
                        }
                        break;
 800f940:	e015      	b.n	800f96e <_fx_system_timer_entry+0x23e>
                        break;
 800f942:	bf00      	nop
 800f944:	e014      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f946:	bf00      	nop
 800f948:	e012      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f94a:	bf00      	nop
 800f94c:	e010      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f94e:	bf00      	nop
 800f950:	e00e      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f952:	bf00      	nop
 800f954:	e00c      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f956:	bf00      	nop
 800f958:	e00a      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f95a:	bf00      	nop
 800f95c:	e008      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f95e:	bf00      	nop
 800f960:	e006      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f962:	bf00      	nop
 800f964:	e004      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f966:	bf00      	nop
 800f968:	e002      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f96a:	bf00      	nop
 800f96c:	e000      	b.n	800f970 <_fx_system_timer_entry+0x240>
                        break;
 800f96e:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800f976:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f97c:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f982:	4a0c      	ldr	r2, [pc, #48]	; (800f9b4 <_fx_system_timer_entry+0x284>)
 800f984:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f98e:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	085b      	lsrs	r3, r3, #1
 800f994:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f996:	4a06      	ldr	r2, [pc, #24]	; (800f9b0 <_fx_system_timer_entry+0x280>)
 800f998:	6013      	str	r3, [r2, #0]
 800f99a:	e002      	b.n	800f9a2 <_fx_system_timer_entry+0x272>
                        return;             /* Skip updating date/time!  */
 800f99c:	bf00      	nop
 800f99e:	e000      	b.n	800f9a2 <_fx_system_timer_entry+0x272>
                                return;
 800f9a0:	bf00      	nop
    }
}
 800f9a2:	3724      	adds	r7, #36	; 0x24
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	46585359 	.word	0x46585359
 800f9b0:	24003590 	.word	0x24003590
 800f9b4:	2400358c 	.word	0x2400358c
 800f9b8:	88888889 	.word	0x88888889

0800f9bc <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b083      	sub	sp, #12
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	b2da      	uxtb	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	0a1a      	lsrs	r2, r3, #8
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	b2d2      	uxtb	r2, r2
 800f9fe:	701a      	strb	r2, [r3, #0]
}
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	3303      	adds	r3, #3
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	3302      	adds	r3, #2
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800fa24:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800fa2e:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800fa34:	4313      	orrs	r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800fa38:	68fb      	ldr	r3, [r7, #12]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800fa46:	b480      	push	{r7}
 800fa48:	b083      	sub	sp, #12
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	b2da      	uxtb	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	0a1a      	lsrs	r2, r3, #8
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	b2d2      	uxtb	r2, r2
 800fa62:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	0c1a      	lsrs	r2, r3, #16
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	3302      	adds	r3, #2
 800fa6c:	b2d2      	uxtb	r2, r2
 800fa6e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	0e1a      	lsrs	r2, r3, #24
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	3303      	adds	r3, #3
 800fa78:	b2d2      	uxtb	r2, r2
 800fa7a:	701a      	strb	r2, [r3, #0]
}
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800fa88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa8c:	b098      	sub	sp, #96	; 0x60
 800fa8e:	af04      	add	r7, sp, #16
 800fa90:	61f8      	str	r0, [r7, #28]
 800fa92:	61b9      	str	r1, [r7, #24]
 800fa94:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	f003 0303 	and.w	r3, r3, #3
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800fabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fabe:	4613      	mov	r3, r2
 800fac0:	005b      	lsls	r3, r3, #1
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800faca:	69fa      	ldr	r2, [r7, #28]
 800facc:	4413      	add	r3, r2
 800face:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800fad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	69ba      	ldr	r2, [r7, #24]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d105      	bne.n	800fae6 <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800fada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800fae2:	2300      	movs	r3, #0
 800fae4:	e1f4      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800fae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fae8:	330c      	adds	r3, #12
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	69ba      	ldr	r2, [r7, #24]
 800faee:	429a      	cmp	r2, r3
 800faf0:	d11d      	bne.n	800fb2e <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800faf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf4:	330c      	adds	r3, #12
 800faf6:	685a      	ldr	r2, [r3, #4]
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800fafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fafe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb02:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800fb08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb0c:	4614      	mov	r4, r2
 800fb0e:	330c      	adds	r3, #12
 800fb10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800fb18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb1a:	330c      	adds	r3, #12
 800fb1c:	461c      	mov	r4, r3
 800fb1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb26:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	e1d0      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800fb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb30:	3318      	adds	r3, #24
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	69ba      	ldr	r2, [r7, #24]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d127      	bne.n	800fb8a <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800fb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb3c:	3318      	adds	r3, #24
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800fb44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb4a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800fb50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb54:	4614      	mov	r4, r2
 800fb56:	3318      	adds	r3, #24
 800fb58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800fb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb62:	f103 0218 	add.w	r2, r3, #24
 800fb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb68:	4614      	mov	r4, r2
 800fb6a:	330c      	adds	r3, #12
 800fb6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800fb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb76:	330c      	adds	r3, #12
 800fb78:	461c      	mov	r4, r3
 800fb7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb82:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800fb86:	2300      	movs	r3, #0
 800fb88:	e1a2      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800fb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb8c:	3324      	adds	r3, #36	; 0x24
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	69ba      	ldr	r2, [r7, #24]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d131      	bne.n	800fbfa <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800fb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb98:	3324      	adds	r3, #36	; 0x24
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800fba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fba6:	ca07      	ldmia	r2, {r0, r1, r2}
 800fba8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800fbac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbb0:	4614      	mov	r4, r2
 800fbb2:	3324      	adds	r3, #36	; 0x24
 800fbb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800fbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbbe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbc4:	4614      	mov	r4, r2
 800fbc6:	3318      	adds	r3, #24
 800fbc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800fbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd2:	f103 0218 	add.w	r2, r3, #24
 800fbd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd8:	4614      	mov	r4, r2
 800fbda:	330c      	adds	r3, #12
 800fbdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800fbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe6:	330c      	adds	r3, #12
 800fbe8:	461c      	mov	r4, r3
 800fbea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e16a      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 800fbfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbfc:	1cda      	adds	r2, r3, #3
 800fbfe:	69f9      	ldr	r1, [r7, #28]
 800fc00:	4613      	mov	r3, r2
 800fc02:	005b      	lsls	r3, r3, #1
 800fc04:	4413      	add	r3, r2
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	440b      	add	r3, r1
 800fc0a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d008      	beq.n	800fc26 <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800fc14:	69f8      	ldr	r0, [r7, #28]
 800fc16:	f000 fa54 	bl	80100c2 <_fx_utility_FAT_flush>
 800fc1a:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 800fc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 800fc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc24:	e154      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800fc2c:	1e5a      	subs	r2, r3, #1
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800fc3a:	1c5a      	adds	r2, r3, #1
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f000 80a7 	beq.w	800fd9a <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	005a      	lsls	r2, r3, #1
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	4413      	add	r3, r2
 800fc54:	085b      	lsrs	r3, r3, #1
 800fc56:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc5e:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fc66:	4413      	add	r3, r2
 800fc68:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	60bb      	str	r3, [r7, #8]
 800fc70:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fc76:	2202      	movs	r2, #2
 800fc78:	9202      	str	r2, [sp, #8]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	9201      	str	r2, [sp, #4]
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fc84:	69f8      	ldr	r0, [r7, #28]
 800fc86:	f001 fb0d 	bl	80112a4 <_fx_utility_logical_sector_read>
 800fc8a:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800fc8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 800fc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc94:	e11c      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc9c:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800fc9e:	69fa      	ldr	r2, [r7, #28]
 800fca0:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fca2:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800fca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	689a      	ldr	r2, [r3, #8]
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	4413      	add	r3, r2
 800fcb4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	f003 0301 	and.w	r3, r3, #1
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d030      	beq.n	800fd22 <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 800fcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	091b      	lsrs	r3, r3, #4
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 800fcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fccc:	3301      	adds	r3, #1
 800fcce:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d11b      	bne.n	800fd14 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800fcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcde:	3301      	adds	r3, #1
 800fce0:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce4:	2200      	movs	r2, #0
 800fce6:	603b      	str	r3, [r7, #0]
 800fce8:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fcee:	2202      	movs	r2, #2
 800fcf0:	9202      	str	r2, [sp, #8]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	9201      	str	r2, [sp, #4]
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcfc:	69f8      	ldr	r0, [r7, #28]
 800fcfe:	f001 fad1 	bl	80112a4 <_fx_utility_logical_sector_read>
 800fd02:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 800fd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd0c:	e0e0      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800fd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	011b      	lsls	r3, r3, #4
 800fd1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd20:	e02f      	b.n	800fd82 <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 800fd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 800fd28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd32:	3b01      	subs	r3, #1
 800fd34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d11b      	bne.n	800fd72 <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd42:	2200      	movs	r2, #0
 800fd44:	469a      	mov	sl, r3
 800fd46:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fd4c:	2202      	movs	r2, #2
 800fd4e:	9202      	str	r2, [sp, #8]
 800fd50:	2201      	movs	r2, #1
 800fd52:	9201      	str	r2, [sp, #4]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	4652      	mov	r2, sl
 800fd58:	465b      	mov	r3, fp
 800fd5a:	69f8      	ldr	r0, [r7, #28]
 800fd5c:	f001 faa2 	bl	80112a4 <_fx_utility_logical_sector_read>
 800fd60:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 800fd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6a:	e0b1      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 800fd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	021b      	lsls	r3, r3, #8
 800fd78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fd7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 800fd82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd84:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800fd88:	d303      	bcc.n	800fd92 <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 800fd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800fd90:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	e078      	b.n	800fe8c <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d139      	bne.n	800fe16 <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	005b      	lsls	r3, r3, #1
 800fda6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdae:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fdb6:	4413      	add	r3, r2
 800fdb8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	4698      	mov	r8, r3
 800fdc0:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fdc6:	2202      	movs	r2, #2
 800fdc8:	9202      	str	r2, [sp, #8]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	9201      	str	r2, [sp, #4]
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	69f8      	ldr	r0, [r7, #28]
 800fdd6:	f001 fa65 	bl	80112a4 <_fx_utility_logical_sector_read>
 800fdda:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800fddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 800fde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde4:	e074      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdec:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800fdee:	69fa      	ldr	r2, [r7, #28]
 800fdf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fdf2:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800fdf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	689a      	ldr	r2, [r3, #8]
 800fe00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe02:	4413      	add	r3, r2
 800fe04:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 800fe06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe08:	f7ff fdd8 	bl	800f9bc <_fx_utility_16_unsigned_read>
 800fe0c:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	e03a      	b.n	800fe8c <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe22:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fe2a:	4413      	add	r3, r2
 800fe2c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe38:	fb01 f202 	mul.w	r2, r1, r2
 800fe3c:	1a9b      	subs	r3, r3, r2
 800fe3e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fe40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe42:	2200      	movs	r2, #0
 800fe44:	461c      	mov	r4, r3
 800fe46:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	9202      	str	r2, [sp, #8]
 800fe50:	2201      	movs	r2, #1
 800fe52:	9201      	str	r2, [sp, #4]
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	4622      	mov	r2, r4
 800fe58:	462b      	mov	r3, r5
 800fe5a:	69f8      	ldr	r0, [r7, #28]
 800fe5c:	f001 fa22 	bl	80112a4 <_fx_utility_logical_sector_read>
 800fe60:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800fe62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d001      	beq.n	800fe6c <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 800fe68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe6a:	e031      	b.n	800fed0 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	689a      	ldr	r2, [r3, #8]
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	4413      	add	r3, r2
 800fe74:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 800fe76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe78:	f7ff fdc8 	bl	800fa0c <_fx_utility_32_unsigned_read>
 800fe7c:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fe84:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe8a:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800fe8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe8e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fe92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe94:	4614      	mov	r4, r2
 800fe96:	3318      	adds	r3, #24
 800fe98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800fea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea2:	f103 0218 	add.w	r2, r3, #24
 800fea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea8:	4614      	mov	r4, r2
 800feaa:	330c      	adds	r3, #12
 800feac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800feb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800feb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feb6:	330c      	adds	r3, #12
 800feb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800feba:	ca07      	ldmia	r2, {r0, r1, r2}
 800febc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800fec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fec2:	69ba      	ldr	r2, [r7, #24]
 800fec4:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fecc:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3750      	adds	r7, #80	; 0x50
 800fed4:	46bd      	mov	sp, r7
 800fed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800feda <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 800feda:	b590      	push	{r4, r7, lr}
 800fedc:	b089      	sub	sp, #36	; 0x24
 800fede:	af00      	add	r7, sp, #0
 800fee0:	60f8      	str	r0, [r7, #12]
 800fee2:	60b9      	str	r1, [r7, #8]
 800fee4:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800feec:	1c5a      	adds	r2, r3, #1
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	f003 0303 	and.w	r3, r3, #3
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800ff0c:	69ba      	ldr	r2, [r7, #24]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	005b      	lsls	r3, r3, #1
 800ff12:	4413      	add	r3, r2
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800ff20:	2300      	movs	r3, #0
 800ff22:	61fb      	str	r3, [r7, #28]
 800ff24:	e051      	b.n	800ffca <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 800ff26:	69fa      	ldr	r2, [r7, #28]
 800ff28:	4613      	mov	r3, r2
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	4413      	add	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	461a      	mov	r2, r3
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	4413      	add	r3, r2
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	68ba      	ldr	r2, [r7, #8]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d142      	bne.n	800ffc4 <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 800ff3e:	69fa      	ldr	r2, [r7, #28]
 800ff40:	4613      	mov	r3, r2
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	4413      	add	r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	461a      	mov	r2, r3
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 800ff52:	69fa      	ldr	r2, [r7, #28]
 800ff54:	4613      	mov	r3, r2
 800ff56:	005b      	lsls	r3, r3, #1
 800ff58:	4413      	add	r3, r2
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	4413      	add	r3, r2
 800ff62:	2201      	movs	r2, #1
 800ff64:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d027      	beq.n	800ffc0 <_fx_utility_FAT_entry_write+0xe6>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d124      	bne.n	800ffc0 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800ff7c:	1c5a      	adds	r2, r3, #1
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2206      	movs	r2, #6
 800ff88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2290      	movs	r2, #144	; 0x90
 800ff90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	3b02      	subs	r3, #2
 800ff9c:	68f9      	ldr	r1, [r7, #12]
 800ff9e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800ffa0:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800ffa4:	441a      	add	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	e07a      	b.n	80100ba <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	61fb      	str	r3, [r7, #28]
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	2b03      	cmp	r3, #3
 800ffce:	d9aa      	bls.n	800ff26 <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800ffd6:	1e5a      	subs	r2, r3, #1
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800ffe4:	1c5a      	adds	r2, r3, #1
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	1cda      	adds	r2, r3, #3
 800fff0:	68f9      	ldr	r1, [r7, #12]
 800fff2:	4613      	mov	r3, r2
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	4413      	add	r3, r2
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	440b      	add	r3, r1
 800fffc:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b01      	cmp	r3, #1
 8010004:	d108      	bne.n	8010018 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 f85b 	bl	80100c2 <_fx_utility_FAT_flush>
 801000c:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	e050      	b.n	80100ba <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	4614      	mov	r4, r2
 8010022:	3318      	adds	r3, #24
 8010024:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	f103 0218 	add.w	r2, r3, #24
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	4614      	mov	r4, r2
 8010036:	330c      	adds	r3, #12
 8010038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801003c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	330c      	adds	r3, #12
 8010044:	697a      	ldr	r2, [r7, #20]
 8010046:	ca07      	ldmia	r2, {r0, r1, r2}
 8010048:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2201      	movs	r2, #1
 8010050:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010064:	2b00      	cmp	r3, #0
 8010066:	d027      	beq.n	80100b8 <_fx_utility_FAT_entry_write+0x1de>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d124      	bne.n	80100b8 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8010074:	1c5a      	adds	r2, r3, #1
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2206      	movs	r2, #6
 8010080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2290      	movs	r2, #144	; 0x90
 8010088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	3b02      	subs	r3, #2
 8010094:	68f9      	ldr	r1, [r7, #12]
 8010096:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010098:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 801009c:	441a      	add	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 80100b8:	2300      	movs	r3, #0
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3724      	adds	r7, #36	; 0x24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd90      	pop	{r4, r7, pc}

080100c2 <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 80100c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80100c6:	b09a      	sub	sp, #104	; 0x68
 80100c8:	af04      	add	r7, sp, #16
 80100ca:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80100d2:	1c5a      	adds	r2, r3, #1
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 80100da:	2300      	movs	r3, #0
 80100dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100de:	e337      	b.n	8010750 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 80100e0:	69f9      	ldr	r1, [r7, #28]
 80100e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80100e4:	4613      	mov	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	4413      	add	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	440b      	add	r3, r1
 80100ee:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f000 8325 	beq.w	8010744 <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 80100fa:	69f9      	ldr	r1, [r7, #28]
 80100fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80100fe:	4613      	mov	r3, r2
 8010100:	005b      	lsls	r3, r3, #1
 8010102:	4413      	add	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	440b      	add	r3, r1
 8010108:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010114:	2b00      	cmp	r3, #0
 8010116:	f000 816c 	beq.w	80103f2 <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 801011a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801011c:	005a      	lsls	r2, r3, #1
 801011e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010120:	4413      	add	r3, r2
 8010122:	085b      	lsrs	r3, r3, #1
 8010124:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801012c:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010134:	4413      	add	r3, r2
 8010136:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 8010138:	f04f 33ff 	mov.w	r3, #4294967295
 801013c:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801013e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010140:	2200      	movs	r2, #0
 8010142:	461c      	mov	r4, r3
 8010144:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801014a:	2302      	movs	r3, #2
 801014c:	9302      	str	r3, [sp, #8]
 801014e:	2301      	movs	r3, #1
 8010150:	9301      	str	r3, [sp, #4]
 8010152:	9200      	str	r2, [sp, #0]
 8010154:	4622      	mov	r2, r4
 8010156:	462b      	mov	r3, r5
 8010158:	69f8      	ldr	r0, [r7, #28]
 801015a:	f001 f8a3 	bl	80112a4 <_fx_utility_logical_sector_read>
 801015e:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	2b00      	cmp	r3, #0
 8010164:	d001      	beq.n	801016a <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 8010166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010168:	e2f7      	b.n	801075a <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 801016a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801016c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010170:	d037      	beq.n	80101e2 <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 8010178:	69f9      	ldr	r1, [r7, #28]
 801017a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801017c:	4613      	mov	r3, r2
 801017e:	005b      	lsls	r3, r3, #1
 8010180:	4413      	add	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	440b      	add	r3, r1
 8010186:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 801018e:	69f9      	ldr	r1, [r7, #28]
 8010190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010192:	4613      	mov	r3, r2
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	4413      	add	r3, r2
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	440b      	add	r3, r1
 801019c:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80101a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101a6:	f003 0301 	and.w	r3, r3, #1
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d005      	beq.n	80101ba <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80101ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b0:	091b      	lsrs	r3, r3, #4
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101b6:	7013      	strb	r3, [r2, #0]
 80101b8:	e010      	b.n	80101dc <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 80101ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101c2:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80101c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c6:	b2da      	uxtb	r2, r3
 80101c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ca:	0a1b      	lsrs	r3, r3, #8
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	f003 030f 	and.w	r3, r3, #15
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	4313      	orrs	r3, r2
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101da:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 80101dc:	f04f 33ff 	mov.w	r3, #4294967295
 80101e0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80101e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101e4:	653b      	str	r3, [r7, #80]	; 0x50
 80101e6:	e0a0      	b.n	801032a <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 80101e8:	69f9      	ldr	r1, [r7, #28]
 80101ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101ec:	4613      	mov	r3, r2
 80101ee:	005b      	lsls	r3, r3, #1
 80101f0:	4413      	add	r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	440b      	add	r3, r1
 80101f6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f000 808a 	beq.w	8010316 <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010202:	69f9      	ldr	r1, [r7, #28]
 8010204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010206:	4613      	mov	r3, r2
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	4413      	add	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	440b      	add	r3, r1
 8010210:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801021a:	005a      	lsls	r2, r3, #1
 801021c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801021e:	4413      	add	r3, r2
 8010220:	085b      	lsrs	r3, r3, #1
 8010222:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801022a:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010232:	4413      	add	r3, r2
 8010234:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 8010236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801023a:	429a      	cmp	r2, r3
 801023c:	d16d      	bne.n	801031a <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801023e:	69f9      	ldr	r1, [r7, #28]
 8010240:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010242:	4613      	mov	r3, r2
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	4413      	add	r3, r2
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	440b      	add	r3, r1
 801024c:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801025a:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010260:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 8010264:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801026e:	3b01      	subs	r3, #1
 8010270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010272:	429a      	cmp	r2, r3
 8010274:	d101      	bne.n	801027a <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 8010276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010278:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	689a      	ldr	r2, [r3, #8]
 801027e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010280:	4413      	add	r3, r2
 8010282:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010284:	69f9      	ldr	r1, [r7, #28]
 8010286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010288:	4613      	mov	r3, r2
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	4413      	add	r3, r2
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	440b      	add	r3, r1
 8010292:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010296:	2200      	movs	r2, #0
 8010298:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 801029a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801029c:	f003 0301 	and.w	r3, r3, #1
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d01b      	beq.n	80102dc <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 80102a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	f003 030f 	and.w	r3, r3, #15
 80102ac:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	011b      	lsls	r3, r3, #4
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	4313      	orrs	r3, r2
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102c0:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 80102c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d029      	beq.n	801031e <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 80102ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102cc:	3301      	adds	r3, #1
 80102ce:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80102d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d2:	091b      	lsrs	r3, r3, #4
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102d8:	7013      	strb	r3, [r2, #0]
 80102da:	e023      	b.n	8010324 <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 80102dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102e2:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 80102e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d01a      	beq.n	8010322 <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	3301      	adds	r3, #1
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 80102f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102fa:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80102fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fe:	b2da      	uxtb	r2, r3
 8010300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010302:	0a1b      	lsrs	r3, r3, #8
 8010304:	b2db      	uxtb	r3, r3
 8010306:	f003 030f 	and.w	r3, r3, #15
 801030a:	b2db      	uxtb	r3, r3
 801030c:	4313      	orrs	r3, r2
 801030e:	b2db      	uxtb	r3, r3
 8010310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010312:	7013      	strb	r3, [r2, #0]
 8010314:	e006      	b.n	8010324 <_fx_utility_FAT_flush+0x262>
                        continue;
 8010316:	bf00      	nop
 8010318:	e004      	b.n	8010324 <_fx_utility_FAT_flush+0x262>
                        continue;
 801031a:	bf00      	nop
 801031c:	e002      	b.n	8010324 <_fx_utility_FAT_flush+0x262>
                            continue;
 801031e:	bf00      	nop
 8010320:	e000      	b.n	8010324 <_fx_utility_FAT_flush+0x262>
                            continue;
 8010322:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010326:	3301      	adds	r3, #1
 8010328:	653b      	str	r3, [r7, #80]	; 0x50
 801032a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801032c:	2b0f      	cmp	r3, #15
 801032e:	f67f af5b 	bls.w	80101e8 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010334:	2200      	movs	r2, #0
 8010336:	4698      	mov	r8, r3
 8010338:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 801033e:	2302      	movs	r3, #2
 8010340:	9302      	str	r3, [sp, #8]
 8010342:	2301      	movs	r3, #1
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	9200      	str	r2, [sp, #0]
 8010348:	4642      	mov	r2, r8
 801034a:	464b      	mov	r3, r9
 801034c:	69f8      	ldr	r0, [r7, #28]
 801034e:	f001 fa3d 	bl	80117cc <_fx_utility_logical_sector_write>
 8010352:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 801035a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035c:	e1fd      	b.n	801075a <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010366:	2b00      	cmp	r3, #0
 8010368:	d105      	bne.n	8010376 <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801036e:	0a9b      	lsrs	r3, r3, #10
 8010370:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010374:	e006      	b.n	8010384 <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801037a:	0a9b      	lsrs	r3, r3, #10
 801037c:	b2db      	uxtb	r3, r3
 801037e:	3301      	adds	r3, #1
 8010380:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 8010384:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 801038c:	2302      	movs	r3, #2
 801038e:	e1e4      	b.n	801075a <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010396:	1ad2      	subs	r2, r2, r3
 8010398:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80103a0:	08db      	lsrs	r3, r3, #3
 80103a2:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80103a4:	69fa      	ldr	r2, [r7, #28]
 80103a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a8:	4413      	add	r3, r2
 80103aa:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b8:	1a9a      	subs	r2, r3, r2
 80103ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80103be:	fbb2 f3f3 	udiv	r3, r2, r3
 80103c2:	f003 0207 	and.w	r2, r3, #7
 80103c6:	2301      	movs	r3, #1
 80103c8:	4093      	lsls	r3, r2
 80103ca:	b25b      	sxtb	r3, r3
 80103cc:	430b      	orrs	r3, r1
 80103ce:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80103d0:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80103d2:	69fa      	ldr	r2, [r7, #28]
 80103d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d6:	4413      	add	r3, r2
 80103d8:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80103dc:	460b      	mov	r3, r1
 80103de:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 80103e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e6:	f000 81af 	beq.w	8010748 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 80103ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ec:	3301      	adds	r3, #1
 80103ee:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80103f0:	e6a5      	b.n	801013e <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f040 80d2 	bne.w	80105a0 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 80103fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103fe:	005b      	lsls	r3, r3, #1
 8010400:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010408:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010410:	4413      	add	r3, r2
 8010412:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010416:	2200      	movs	r2, #0
 8010418:	469a      	mov	sl, r3
 801041a:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010420:	2302      	movs	r3, #2
 8010422:	9302      	str	r3, [sp, #8]
 8010424:	2301      	movs	r3, #1
 8010426:	9301      	str	r3, [sp, #4]
 8010428:	9200      	str	r2, [sp, #0]
 801042a:	4652      	mov	r2, sl
 801042c:	465b      	mov	r3, fp
 801042e:	69f8      	ldr	r0, [r7, #28]
 8010430:	f000 ff38 	bl	80112a4 <_fx_utility_logical_sector_read>
 8010434:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	e18c      	b.n	801075a <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010442:	653b      	str	r3, [r7, #80]	; 0x50
 8010444:	e057      	b.n	80104f6 <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8010446:	69f9      	ldr	r1, [r7, #28]
 8010448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801044a:	4613      	mov	r3, r2
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4413      	add	r3, r2
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	440b      	add	r3, r1
 8010454:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d045      	beq.n	80104ea <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801045e:	69f9      	ldr	r1, [r7, #28]
 8010460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	440b      	add	r3, r1
 801046c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8010474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801047e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010480:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010488:	4413      	add	r3, r2
 801048a:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 801048c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801048e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010490:	429a      	cmp	r2, r3
 8010492:	d12c      	bne.n	80104ee <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801049a:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80104a0:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 80104a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	689a      	ldr	r2, [r3, #8]
 80104ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b0:	4413      	add	r3, r2
 80104b2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 80104b4:	69f9      	ldr	r1, [r7, #28]
 80104b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104b8:	4613      	mov	r3, r2
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	4413      	add	r3, r2
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	440b      	add	r3, r1
 80104c2:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 80104ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ce:	f7ff fa88 	bl	800f9e2 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80104d2:	69f9      	ldr	r1, [r7, #28]
 80104d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104d6:	4613      	mov	r3, r2
 80104d8:	005b      	lsls	r3, r3, #1
 80104da:	4413      	add	r3, r2
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	440b      	add	r3, r1
 80104e0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]
 80104e8:	e002      	b.n	80104f0 <_fx_utility_FAT_flush+0x42e>
                    continue;
 80104ea:	bf00      	nop
 80104ec:	e000      	b.n	80104f0 <_fx_utility_FAT_flush+0x42e>
                    continue;
 80104ee:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80104f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f2:	3301      	adds	r3, #1
 80104f4:	653b      	str	r3, [r7, #80]	; 0x50
 80104f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f8:	2b0f      	cmp	r3, #15
 80104fa:	d9a4      	bls.n	8010446 <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80104fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104fe:	2200      	movs	r2, #0
 8010500:	613b      	str	r3, [r7, #16]
 8010502:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010508:	2302      	movs	r3, #2
 801050a:	9302      	str	r3, [sp, #8]
 801050c:	2301      	movs	r3, #1
 801050e:	9301      	str	r3, [sp, #4]
 8010510:	9200      	str	r2, [sp, #0]
 8010512:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010516:	69f8      	ldr	r0, [r7, #28]
 8010518:	f001 f958 	bl	80117cc <_fx_utility_logical_sector_write>
 801051c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010520:	2b00      	cmp	r3, #0
 8010522:	d001      	beq.n	8010528 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 8010524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010526:	e118      	b.n	801075a <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801052c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010530:	2b00      	cmp	r3, #0
 8010532:	d105      	bne.n	8010540 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010538:	0a9b      	lsrs	r3, r3, #10
 801053a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801053e:	e006      	b.n	801054e <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010544:	0a9b      	lsrs	r3, r3, #10
 8010546:	b2db      	uxtb	r3, r3
 8010548:	3301      	adds	r3, #1
 801054a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010554:	1ad2      	subs	r2, r2, r3
 8010556:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801055a:	fbb2 f3f3 	udiv	r3, r2, r3
 801055e:	08db      	lsrs	r3, r3, #3
 8010560:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010562:	69fa      	ldr	r2, [r7, #28]
 8010564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010566:	4413      	add	r3, r2
 8010568:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010576:	1a9a      	subs	r2, r3, r2
 8010578:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010580:	f003 0207 	and.w	r2, r3, #7
 8010584:	2301      	movs	r3, #1
 8010586:	4093      	lsls	r3, r2
 8010588:	b25b      	sxtb	r3, r3
 801058a:	430b      	orrs	r3, r1
 801058c:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801058e:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010590:	69fa      	ldr	r2, [r7, #28]
 8010592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010594:	4413      	add	r3, r2
 8010596:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801059a:	460b      	mov	r3, r1
 801059c:	7013      	strb	r3, [r2, #0]
 801059e:	e0d4      	b.n	801074a <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 80105a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105ac:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80105b4:	4413      	add	r3, r2
 80105b6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80105b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ba:	2200      	movs	r2, #0
 80105bc:	60bb      	str	r3, [r7, #8]
 80105be:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80105c4:	2302      	movs	r3, #2
 80105c6:	9302      	str	r3, [sp, #8]
 80105c8:	2301      	movs	r3, #1
 80105ca:	9301      	str	r3, [sp, #4]
 80105cc:	9200      	str	r2, [sp, #0]
 80105ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80105d2:	69f8      	ldr	r0, [r7, #28]
 80105d4:	f000 fe66 	bl	80112a4 <_fx_utility_logical_sector_read>
 80105d8:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d001      	beq.n	80105e4 <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	e0ba      	b.n	801075a <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80105e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105e6:	653b      	str	r3, [r7, #80]	; 0x50
 80105e8:	e057      	b.n	801069a <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 80105ea:	69f9      	ldr	r1, [r7, #28]
 80105ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105ee:	4613      	mov	r3, r2
 80105f0:	005b      	lsls	r3, r3, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	440b      	add	r3, r1
 80105f8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d045      	beq.n	801068e <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010602:	69f9      	ldr	r1, [r7, #28]
 8010604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	440b      	add	r3, r1
 8010610:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 8010618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010624:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801062c:	4413      	add	r3, r2
 801062e:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010634:	429a      	cmp	r2, r3
 8010636:	d12c      	bne.n	8010692 <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801063c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801063e:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010644:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	689a      	ldr	r2, [r3, #8]
 8010652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010654:	4413      	add	r3, r2
 8010656:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010658:	69f9      	ldr	r1, [r7, #28]
 801065a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801065c:	4613      	mov	r3, r2
 801065e:	005b      	lsls	r3, r3, #1
 8010660:	4413      	add	r3, r2
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	440b      	add	r3, r1
 8010666:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 801066e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010672:	f7ff f9e8 	bl	800fa46 <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010676:	69f9      	ldr	r1, [r7, #28]
 8010678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801067a:	4613      	mov	r3, r2
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	4413      	add	r3, r2
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	440b      	add	r3, r1
 8010684:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010688:	2200      	movs	r2, #0
 801068a:	601a      	str	r2, [r3, #0]
 801068c:	e002      	b.n	8010694 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 801068e:	bf00      	nop
 8010690:	e000      	b.n	8010694 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010692:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010696:	3301      	adds	r3, #1
 8010698:	653b      	str	r3, [r7, #80]	; 0x50
 801069a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801069c:	2b0f      	cmp	r3, #15
 801069e:	d9a4      	bls.n	80105ea <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80106a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106a2:	2200      	movs	r2, #0
 80106a4:	603b      	str	r3, [r7, #0]
 80106a6:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80106ac:	2302      	movs	r3, #2
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	2301      	movs	r3, #1
 80106b2:	9301      	str	r3, [sp, #4]
 80106b4:	9200      	str	r2, [sp, #0]
 80106b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106ba:	69f8      	ldr	r0, [r7, #28]
 80106bc:	f001 f886 	bl	80117cc <_fx_utility_logical_sector_write>
 80106c0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	e046      	b.n	801075a <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d105      	bne.n	80106e4 <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106dc:	0a9b      	lsrs	r3, r3, #10
 80106de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80106e2:	e006      	b.n	80106f2 <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106e8:	0a9b      	lsrs	r3, r3, #10
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	3301      	adds	r3, #1
 80106ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106f8:	1ad2      	subs	r2, r2, r3
 80106fa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80106fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010702:	08db      	lsrs	r3, r3, #3
 8010704:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010706:	69fa      	ldr	r2, [r7, #28]
 8010708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070a:	4413      	add	r3, r2
 801070c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801071a:	1a9a      	subs	r2, r3, r2
 801071c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010720:	fbb2 f3f3 	udiv	r3, r2, r3
 8010724:	f003 0207 	and.w	r2, r3, #7
 8010728:	2301      	movs	r3, #1
 801072a:	4093      	lsls	r3, r2
 801072c:	b25b      	sxtb	r3, r3
 801072e:	430b      	orrs	r3, r1
 8010730:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010732:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010734:	69fa      	ldr	r2, [r7, #28]
 8010736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010738:	4413      	add	r3, r2
 801073a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 801073e:	460b      	mov	r3, r1
 8010740:	7013      	strb	r3, [r2, #0]
 8010742:	e002      	b.n	801074a <_fx_utility_FAT_flush+0x688>
            continue;
 8010744:	bf00      	nop
 8010746:	e000      	b.n	801074a <_fx_utility_FAT_flush+0x688>
                    break;
 8010748:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801074a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801074c:	3301      	adds	r3, #1
 801074e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010752:	2b0f      	cmp	r3, #15
 8010754:	f67f acc4 	bls.w	80100e0 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3758      	adds	r7, #88	; 0x58
 801075e:	46bd      	mov	sp, r7
 8010760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010764 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8010764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010768:	b092      	sub	sp, #72	; 0x48
 801076a:	af04      	add	r7, sp, #16
 801076c:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010776:	2b00      	cmp	r3, #0
 8010778:	d105      	bne.n	8010786 <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801077e:	0a9b      	lsrs	r3, r3, #10
 8010780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010784:	e006      	b.n	8010794 <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801078a:	0a9b      	lsrs	r3, r3, #10
 801078c:	b2db      	uxtb	r3, r3
 801078e:	3301      	adds	r3, #1
 8010790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010794:	2300      	movs	r3, #0
 8010796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010798:	e089      	b.n	80108ae <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	08db      	lsrs	r3, r3, #3
 801079e:	69fa      	ldr	r2, [r7, #28]
 80107a0:	4413      	add	r3, r2
 80107a2:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 80107a6:	461a      	mov	r2, r3
 80107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107aa:	f003 0307 	and.w	r3, r3, #7
 80107ae:	fa42 f303 	asr.w	r3, r2, r3
 80107b2:	f003 0301 	and.w	r3, r3, #1
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d075      	beq.n	80108a6 <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 80107ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c0:	fb03 f202 	mul.w	r2, r3, r2
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c8:	4413      	add	r3, r2
 80107ca:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 80107cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107d2:	4413      	add	r3, r2
 80107d4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107de:	4413      	add	r3, r2
 80107e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d95a      	bls.n	801089c <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107ee:	4413      	add	r3, r2
 80107f0:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 80107f2:	e053      	b.n	801089c <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80107f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f6:	2200      	movs	r2, #0
 80107f8:	613b      	str	r3, [r7, #16]
 80107fa:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010800:	2302      	movs	r3, #2
 8010802:	9302      	str	r3, [sp, #8]
 8010804:	2301      	movs	r3, #1
 8010806:	9301      	str	r3, [sp, #4]
 8010808:	9200      	str	r2, [sp, #0]
 801080a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801080e:	69f8      	ldr	r0, [r7, #28]
 8010810:	f000 fd48 	bl	80112a4 <_fx_utility_logical_sector_read>
 8010814:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d001      	beq.n	8010820 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	e05c      	b.n	80108da <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010824:	3b01      	subs	r3, #1
 8010826:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 8010828:	e032      	b.n	8010890 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 801082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082c:	2200      	movs	r2, #0
 801082e:	60bb      	str	r3, [r7, #8]
 8010830:	60fa      	str	r2, [r7, #12]
 8010832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010834:	2200      	movs	r2, #0
 8010836:	4698      	mov	r8, r3
 8010838:	4691      	mov	r9, r2
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801083e:	2200      	movs	r2, #0
 8010840:	469a      	mov	sl, r3
 8010842:	4693      	mov	fp, r2
 8010844:	fb0a f209 	mul.w	r2, sl, r9
 8010848:	fb08 f30b 	mul.w	r3, r8, fp
 801084c:	4413      	add	r3, r2
 801084e:	fba8 450a 	umull	r4, r5, r8, sl
 8010852:	442b      	add	r3, r5
 8010854:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010856:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801085a:	460b      	mov	r3, r1
 801085c:	191b      	adds	r3, r3, r4
 801085e:	603b      	str	r3, [r7, #0]
 8010860:	4613      	mov	r3, r2
 8010862:	416b      	adcs	r3, r5
 8010864:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 801086a:	2302      	movs	r3, #2
 801086c:	9302      	str	r3, [sp, #8]
 801086e:	2301      	movs	r3, #1
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	9200      	str	r2, [sp, #0]
 8010874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010878:	69f8      	ldr	r0, [r7, #28]
 801087a:	f000 ffa7 	bl	80117cc <_fx_utility_logical_sector_write>
 801087e:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010880:	6a3b      	ldr	r3, [r7, #32]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d001      	beq.n	801088a <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 8010886:	6a3b      	ldr	r3, [r7, #32]
 8010888:	e027      	b.n	80108da <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	3b01      	subs	r3, #1
 801088e:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8010890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1c9      	bne.n	801082a <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 8010896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010898:	3301      	adds	r3, #1
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
 801089c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d3a7      	bcc.n	80107f4 <_fx_utility_FAT_map_flush+0x90>
 80108a4:	e000      	b.n	80108a8 <_fx_utility_FAT_map_flush+0x144>
            continue;
 80108a6:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 80108a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108aa:	3301      	adds	r3, #1
 80108ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108b4:	f4ff af71 	bcc.w	801079a <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 80108b8:	2300      	movs	r3, #0
 80108ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108bc:	e009      	b.n	80108d2 <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 80108be:	69fa      	ldr	r2, [r7, #28]
 80108c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c2:	4413      	add	r3, r2
 80108c4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80108c8:	2200      	movs	r2, #0
 80108ca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 80108cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ce:	3301      	adds	r3, #1
 80108d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d4:	2b7f      	cmp	r3, #127	; 0x7f
 80108d6:	d9f2      	bls.n	80108be <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3738      	adds	r7, #56	; 0x38
 80108de:	46bd      	mov	sp, r7
 80108e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080108e4 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b08f      	sub	sp, #60	; 0x3c
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f000 8275 	beq.w	8010de4 <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80108fa:	683a      	ldr	r2, [r7, #0]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010902:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8010906:	4013      	ands	r3, r2
 8010908:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6a1a      	ldr	r2, [r3, #32]
 801090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010910:	f003 031f 	and.w	r3, r3, #31
 8010914:	2101      	movs	r1, #1
 8010916:	fa01 f303 	lsl.w	r3, r1, r3
 801091a:	431a      	orrs	r2, r3
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8010920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8010926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010928:	4613      	mov	r3, r2
 801092a:	005b      	lsls	r3, r3, #1
 801092c:	4413      	add	r3, r2
 801092e:	00db      	lsls	r3, r3, #3
 8010930:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8010934:	68fa      	ldr	r2, [r7, #12]
 8010936:	4413      	add	r3, r2
 8010938:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093c:	7c5b      	ldrb	r3, [r3, #17]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d015      	beq.n	801096e <_fx_utility_logical_sector_cache_entry_read+0x8a>
 8010942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010944:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010948:	e9d7 0100 	ldrd	r0, r1, [r7]
 801094c:	4299      	cmp	r1, r3
 801094e:	bf08      	it	eq
 8010950:	4290      	cmpeq	r0, r2
 8010952:	d10c      	bne.n	801096e <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010962:	1c5a      	adds	r2, r3, #1
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801096a:	2300      	movs	r3, #0
 801096c:	e27e      	b.n	8010e6c <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 801096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010970:	3318      	adds	r3, #24
 8010972:	7c5b      	ldrb	r3, [r3, #17]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d060      	beq.n	8010a3a <_fx_utility_logical_sector_cache_entry_read+0x156>
 8010978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097a:	3318      	adds	r3, #24
 801097c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010984:	4299      	cmp	r1, r3
 8010986:	bf08      	it	eq
 8010988:	4290      	cmpeq	r0, r2
 801098a:	d156      	bne.n	8010a3a <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801098e:	3318      	adds	r3, #24
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801099c:	1c5a      	adds	r2, r3, #1
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80109a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80109aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80109b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80109b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b6:	7c1b      	ldrb	r3, [r3, #16]
 80109b8:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80109bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109be:	7c5b      	ldrb	r3, [r3, #17]
 80109c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80109c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c6:	7c9b      	ldrb	r3, [r3, #18]
 80109c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80109cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ce:	3318      	adds	r3, #24
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d4:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 80109d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d8:	3318      	adds	r3, #24
 80109da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80109de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80109e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e6:	3318      	adds	r3, #24
 80109e8:	7c1a      	ldrb	r2, [r3, #16]
 80109ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ec:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 80109ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f0:	3318      	adds	r3, #24
 80109f2:	7c5a      	ldrb	r2, [r3, #17]
 80109f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f6:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 80109f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109fa:	3318      	adds	r3, #24
 80109fc:	7c9a      	ldrb	r2, [r3, #18]
 80109fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a00:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a04:	3318      	adds	r3, #24
 8010a06:	693a      	ldr	r2, [r7, #16]
 8010a08:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8010a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0c:	f103 0118 	add.w	r1, r3, #24
 8010a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a14:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a1a:	3318      	adds	r3, #24
 8010a1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010a20:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a24:	3318      	adds	r3, #24
 8010a26:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010a2a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a2e:	3318      	adds	r3, #24
 8010a30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010a34:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010a36:	2300      	movs	r3, #0
 8010a38:	e218      	b.n	8010e6c <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8010a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3c:	3330      	adds	r3, #48	; 0x30
 8010a3e:	7c5b      	ldrb	r3, [r3, #17]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 8086 	beq.w	8010b52 <_fx_utility_logical_sector_cache_entry_read+0x26e>
 8010a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a48:	3330      	adds	r3, #48	; 0x30
 8010a4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010a52:	4299      	cmp	r1, r3
 8010a54:	bf08      	it	eq
 8010a56:	4290      	cmpeq	r0, r2
 8010a58:	d17b      	bne.n	8010b52 <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a5c:	3330      	adds	r3, #48	; 0x30
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010a6a:	1c5a      	adds	r2, r3, #1
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010a7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a84:	7c1b      	ldrb	r3, [r3, #16]
 8010a86:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a8c:	7c5b      	ldrb	r3, [r3, #17]
 8010a8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a94:	7c9b      	ldrb	r3, [r3, #18]
 8010a96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9c:	3330      	adds	r3, #48	; 0x30
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa2:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8010aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa6:	3330      	adds	r3, #48	; 0x30
 8010aa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010aac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010aae:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8010ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab4:	3330      	adds	r3, #48	; 0x30
 8010ab6:	7c1a      	ldrb	r2, [r3, #16]
 8010ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aba:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8010abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010abe:	3330      	adds	r3, #48	; 0x30
 8010ac0:	7c5a      	ldrb	r2, [r3, #17]
 8010ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac4:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8010ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac8:	3330      	adds	r3, #48	; 0x30
 8010aca:	7c9a      	ldrb	r2, [r3, #18]
 8010acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ace:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad2:	f103 0218 	add.w	r2, r3, #24
 8010ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad8:	3330      	adds	r3, #48	; 0x30
 8010ada:	6812      	ldr	r2, [r2, #0]
 8010adc:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae0:	3318      	adds	r3, #24
 8010ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ae4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010ae8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010aec:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af2:	f103 0218 	add.w	r2, r3, #24
 8010af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af8:	3330      	adds	r3, #48	; 0x30
 8010afa:	7c12      	ldrb	r2, [r2, #16]
 8010afc:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b00:	f103 0218 	add.w	r2, r3, #24
 8010b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b06:	3330      	adds	r3, #48	; 0x30
 8010b08:	7c52      	ldrb	r2, [r2, #17]
 8010b0a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b0e:	f103 0218 	add.w	r2, r3, #24
 8010b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b14:	3330      	adds	r3, #48	; 0x30
 8010b16:	7c92      	ldrb	r2, [r2, #18]
 8010b18:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b1c:	3318      	adds	r3, #24
 8010b1e:	693a      	ldr	r2, [r7, #16]
 8010b20:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8010b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b24:	f103 0118 	add.w	r1, r3, #24
 8010b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010b2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b32:	3318      	adds	r3, #24
 8010b34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010b38:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b3c:	3318      	adds	r3, #24
 8010b3e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010b42:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b46:	3318      	adds	r3, #24
 8010b48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010b4c:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e18c      	b.n	8010e6c <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8010b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b54:	3348      	adds	r3, #72	; 0x48
 8010b56:	7c5b      	ldrb	r3, [r3, #17]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	f000 80ac 	beq.w	8010cb6 <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8010b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b60:	3348      	adds	r3, #72	; 0x48
 8010b62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b6a:	4299      	cmp	r1, r3
 8010b6c:	bf08      	it	eq
 8010b6e:	4290      	cmpeq	r0, r2
 8010b70:	f040 80a1 	bne.w	8010cb6 <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8010b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b76:	3348      	adds	r3, #72	; 0x48
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010b84:	1c5a      	adds	r2, r3, #1
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010b98:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b9e:	7c1b      	ldrb	r3, [r3, #16]
 8010ba0:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ba6:	7c5b      	ldrb	r3, [r3, #17]
 8010ba8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bae:	7c9b      	ldrb	r3, [r3, #18]
 8010bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8010bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb6:	3348      	adds	r3, #72	; 0x48
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bbc:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8010bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc0:	3348      	adds	r3, #72	; 0x48
 8010bc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010bc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8010bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bce:	3348      	adds	r3, #72	; 0x48
 8010bd0:	7c1a      	ldrb	r2, [r3, #16]
 8010bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd4:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8010bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd8:	3348      	adds	r3, #72	; 0x48
 8010bda:	7c5a      	ldrb	r2, [r3, #17]
 8010bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bde:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8010be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be2:	3348      	adds	r3, #72	; 0x48
 8010be4:	7c9a      	ldrb	r2, [r3, #18]
 8010be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be8:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf2:	3348      	adds	r3, #72	; 0x48
 8010bf4:	6812      	ldr	r2, [r2, #0]
 8010bf6:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8010bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bfa:	3330      	adds	r3, #48	; 0x30
 8010bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bfe:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8010c02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010c06:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8010c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c12:	3348      	adds	r3, #72	; 0x48
 8010c14:	7c12      	ldrb	r2, [r2, #16]
 8010c16:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8010c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c20:	3348      	adds	r3, #72	; 0x48
 8010c22:	7c52      	ldrb	r2, [r2, #17]
 8010c24:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8010c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2e:	3348      	adds	r3, #72	; 0x48
 8010c30:	7c92      	ldrb	r2, [r2, #18]
 8010c32:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c36:	f103 0218 	add.w	r2, r3, #24
 8010c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c3c:	3330      	adds	r3, #48	; 0x30
 8010c3e:	6812      	ldr	r2, [r2, #0]
 8010c40:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c44:	3318      	adds	r3, #24
 8010c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c48:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010c4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010c50:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c56:	f103 0218 	add.w	r2, r3, #24
 8010c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c5c:	3330      	adds	r3, #48	; 0x30
 8010c5e:	7c12      	ldrb	r2, [r2, #16]
 8010c60:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c64:	f103 0218 	add.w	r2, r3, #24
 8010c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c6a:	3330      	adds	r3, #48	; 0x30
 8010c6c:	7c52      	ldrb	r2, [r2, #17]
 8010c6e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c72:	f103 0218 	add.w	r2, r3, #24
 8010c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c78:	3330      	adds	r3, #48	; 0x30
 8010c7a:	7c92      	ldrb	r2, [r2, #18]
 8010c7c:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c80:	3318      	adds	r3, #24
 8010c82:	693a      	ldr	r2, [r7, #16]
 8010c84:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8010c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c88:	f103 0118 	add.w	r1, r3, #24
 8010c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010c90:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c96:	3318      	adds	r3, #24
 8010c98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010c9c:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca0:	3318      	adds	r3, #24
 8010ca2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010ca6:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010caa:	3318      	adds	r3, #24
 8010cac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010cb0:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	e0da      	b.n	8010e6c <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8010cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cb8:	3348      	adds	r3, #72	; 0x48
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 8010cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc0:	3348      	adds	r3, #72	; 0x48
 8010cc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010cc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8010cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ccc:	3348      	adds	r3, #72	; 0x48
 8010cce:	7c1b      	ldrb	r3, [r3, #16]
 8010cd0:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 8010cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd6:	3348      	adds	r3, #72	; 0x48
 8010cd8:	7c5b      	ldrb	r3, [r3, #17]
 8010cda:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8010cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ce0:	3348      	adds	r3, #72	; 0x48
 8010ce2:	7c9b      	ldrb	r3, [r3, #18]
 8010ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf0:	3348      	adds	r3, #72	; 0x48
 8010cf2:	6812      	ldr	r2, [r2, #0]
 8010cf4:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8010cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf8:	3330      	adds	r3, #48	; 0x30
 8010cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cfc:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8010d00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010d04:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8010d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d10:	3348      	adds	r3, #72	; 0x48
 8010d12:	7c12      	ldrb	r2, [r2, #16]
 8010d14:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8010d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d1e:	3348      	adds	r3, #72	; 0x48
 8010d20:	7c52      	ldrb	r2, [r2, #17]
 8010d22:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8010d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d2c:	3348      	adds	r3, #72	; 0x48
 8010d2e:	7c92      	ldrb	r2, [r2, #18]
 8010d30:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d34:	f103 0218 	add.w	r2, r3, #24
 8010d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d3a:	3330      	adds	r3, #48	; 0x30
 8010d3c:	6812      	ldr	r2, [r2, #0]
 8010d3e:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d42:	3318      	adds	r3, #24
 8010d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d46:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010d4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010d4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d54:	f103 0218 	add.w	r2, r3, #24
 8010d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d5a:	3330      	adds	r3, #48	; 0x30
 8010d5c:	7c12      	ldrb	r2, [r2, #16]
 8010d5e:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d62:	f103 0218 	add.w	r2, r3, #24
 8010d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d68:	3330      	adds	r3, #48	; 0x30
 8010d6a:	7c52      	ldrb	r2, [r2, #17]
 8010d6c:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d70:	f103 0218 	add.w	r2, r3, #24
 8010d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d76:	3330      	adds	r3, #48	; 0x30
 8010d78:	7c92      	ldrb	r2, [r2, #18]
 8010d7a:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8010d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7e:	3318      	adds	r3, #24
 8010d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d82:	6812      	ldr	r2, [r2, #0]
 8010d84:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8010d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d88:	f103 0118 	add.w	r1, r3, #24
 8010d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010d92:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d98:	3318      	adds	r3, #24
 8010d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d9c:	7c12      	ldrb	r2, [r2, #16]
 8010d9e:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8010da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da2:	3318      	adds	r3, #24
 8010da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010da6:	7c52      	ldrb	r2, [r2, #17]
 8010da8:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8010daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dac:	3318      	adds	r3, #24
 8010dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db0:	7c92      	ldrb	r2, [r2, #18]
 8010db2:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8010db4:	693a      	ldr	r2, [r7, #16]
 8010db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db8:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8010dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010dbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010dc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8010dc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dca:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8010dcc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd2:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8010dd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dda:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8010ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dde:	2200      	movs	r2, #0
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	e042      	b.n	8010e6a <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	695b      	ldr	r3, [r3, #20]
 8010de8:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	69db      	ldr	r3, [r3, #28]
 8010dee:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8010df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010df2:	2200      	movs	r2, #0
 8010df4:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 8010df6:	e033      	b.n	8010e60 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8010df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfa:	7c5b      	ldrb	r3, [r3, #17]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d025      	beq.n	8010e4c <_fx_utility_logical_sector_cache_entry_read+0x568>
 8010e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e0a:	4299      	cmp	r1, r3
 8010e0c:	bf08      	it	eq
 8010e0e:	4290      	cmpeq	r0, r2
 8010e10:	d11c      	bne.n	8010e4c <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8010e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00b      	beq.n	8010e3a <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8010e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e24:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 8010e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e28:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8010e2a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8010e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e32:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e38:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010e40:	1c5a      	adds	r2, r3, #1
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8010e48:	2300      	movs	r3, #0
 8010e4a:	e00f      	b.n	8010e6c <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8010e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e4e:	695b      	ldr	r3, [r3, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d005      	beq.n	8010e60 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8010e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e58:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8010e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	1e5a      	subs	r2, r3, #1
 8010e64:	633a      	str	r2, [r7, #48]	; 0x30
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1c6      	bne.n	8010df8 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 8010e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	373c      	adds	r7, #60	; 0x3c
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8010e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e7c:	b094      	sub	sp, #80	; 0x50
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	61f8      	str	r0, [r7, #28]
 8010e82:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 8010e86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010e8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010e8e:	1884      	adds	r4, r0, r2
 8010e90:	eb41 0503 	adc.w	r5, r1, r3
 8010e94:	1e63      	subs	r3, r4, #1
 8010e96:	60bb      	str	r3, [r7, #8]
 8010e98:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010e9c:	60fb      	str	r3, [r7, #12]
 8010e9e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010ea2:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eaa:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f040 80b4 	bne.w	801101e <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	695b      	ldr	r3, [r3, #20]
 8010eba:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	69db      	ldr	r3, [r3, #28]
 8010ec0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8010ec2:	e09f      	b.n	8011004 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8010ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d103      	bne.n	8010ed2 <_fx_utility_logical_sector_flush+0x5a>
 8010eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 81de 	beq.w	801128e <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8010ed2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	f000 81db 	beq.w	8011292 <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8010edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ede:	7c5b      	ldrb	r3, [r3, #17]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 808c 	beq.w	8010ffe <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ee8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8010eec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ef0:	4290      	cmp	r0, r2
 8010ef2:	eb71 0303 	sbcs.w	r3, r1, r3
 8010ef6:	f0c0 8082 	bcc.w	8010ffe <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8010efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010f00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010f04:	4290      	cmp	r0, r2
 8010f06:	eb71 0303 	sbcs.w	r3, r1, r3
 8010f0a:	d378      	bcc.n	8010ffe <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f0e:	7c1b      	ldrb	r3, [r3, #16]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d04d      	beq.n	8010fb0 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d148      	bne.n	8010fb0 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010f24:	1c5a      	adds	r2, r3, #1
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	2290      	movs	r2, #144	; 0x90
 8010f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	2201      	movs	r2, #1
 8010f56:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f5c:	7c9b      	ldrb	r3, [r3, #18]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f68:	7c9b      	ldrb	r3, [r3, #18]
 8010f6a:	2b04      	cmp	r3, #4
 8010f6c:	d003      	beq.n	8010f76 <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010f7c:	69f8      	ldr	r0, [r7, #28]
 8010f7e:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d003      	beq.n	8010f9a <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 8010f92:	69fb      	ldr	r3, [r7, #28]
 8010f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f98:	e17f      	b.n	801129a <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa4:	1e5a      	subs	r2, r3, #1
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	3b01      	subs	r3, #1
 8010fae:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 8010fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d018      	beq.n	8010fe8 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fb8:	2200      	movs	r2, #0
 8010fba:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010fbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc6:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fcc:	7c1b      	ldrb	r3, [r3, #16]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00a      	beq.n	8010fe8 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fdc:	1e5a      	subs	r2, r3, #1
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe4:	3b01      	subs	r3, #1
 8010fe6:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 8010fe8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010fec:	1e51      	subs	r1, r2, #1
 8010fee:	6039      	str	r1, [r7, #0]
 8010ff0:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010ff4:	607b      	str	r3, [r7, #4]
 8010ff6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010ffa:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8010ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011000:	695b      	ldr	r3, [r3, #20]
 8011002:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8011004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011006:	1e5a      	subs	r2, r3, #1
 8011008:	64ba      	str	r2, [r7, #72]	; 0x48
 801100a:	2b00      	cmp	r3, #0
 801100c:	f000 8144 	beq.w	8011298 <_fx_utility_logical_sector_flush+0x420>
 8011010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011012:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011016:	4313      	orrs	r3, r2
 8011018:	f47f af54 	bne.w	8010ec4 <_fx_utility_logical_sector_flush+0x4c>
 801101c:	e13c      	b.n	8011298 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	695b      	ldr	r3, [r3, #20]
 8011022:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 8011024:	2300      	movs	r3, #0
 8011026:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	6a1b      	ldr	r3, [r3, #32]
 801102c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 801102e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011032:	2a20      	cmp	r2, #32
 8011034:	f173 0300 	sbcs.w	r3, r3, #0
 8011038:	d202      	bcs.n	8011040 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 801103a:	2301      	movs	r3, #1
 801103c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801103e:	e121      	b.n	8011284 <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8011040:	2300      	movs	r3, #0
 8011042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8011044:	e11e      	b.n	8011284 <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8011046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011048:	2b00      	cmp	r3, #0
 801104a:	d103      	bne.n	8011054 <_fx_utility_logical_sector_flush+0x1dc>
 801104c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801104e:	2b00      	cmp	r3, #0
 8011050:	f000 8121 	beq.w	8011296 <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8011054:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011058:	4313      	orrs	r3, r2
 801105a:	f000 811d 	beq.w	8011298 <_fx_utility_logical_sector_flush+0x420>
 801105e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011062:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011066:	4290      	cmp	r0, r2
 8011068:	eb71 0303 	sbcs.w	r3, r1, r3
 801106c:	f0c0 8114 	bcc.w	8011298 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 8011070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011072:	2b00      	cmp	r3, #0
 8011074:	d015      	beq.n	80110a2 <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8011076:	693a      	ldr	r2, [r7, #16]
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801107e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011082:	4013      	ands	r3, r2
 8011084:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 8011086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011088:	f003 031f 	and.w	r3, r3, #31
 801108c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 801108e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	63bb      	str	r3, [r7, #56]	; 0x38
 8011094:	e00d      	b.n	80110b2 <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 8011096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011098:	085b      	lsrs	r3, r3, #1
 801109a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 801109c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801109e:	3301      	adds	r3, #1
 80110a0:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 80110a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a4:	f003 0301 	and.w	r3, r3, #1
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d0f4      	beq.n	8011096 <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80110ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 80110b2:	2300      	movs	r3, #0
 80110b4:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80110b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110b8:	4613      	mov	r3, r2
 80110ba:	005b      	lsls	r3, r3, #1
 80110bc:	4413      	add	r3, r2
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80110c4:	69fa      	ldr	r2, [r7, #28]
 80110c6:	4413      	add	r3, r2
 80110c8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 80110ca:	2300      	movs	r3, #0
 80110cc:	647b      	str	r3, [r7, #68]	; 0x44
 80110ce:	e0a7      	b.n	8011220 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80110d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d2:	7c5b      	ldrb	r3, [r3, #17]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	f000 8089 	beq.w	80111ec <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80110da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80110e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80110e4:	4290      	cmp	r0, r2
 80110e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80110ea:	d37f      	bcc.n	80111ec <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 80110ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80110f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80110f6:	4290      	cmp	r0, r2
 80110f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80110fc:	d376      	bcc.n	80111ec <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80110fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011100:	7c1b      	ldrb	r3, [r3, #16]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d04d      	beq.n	80111a2 <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801110c:	2b00      	cmp	r3, #0
 801110e:	d148      	bne.n	80111a2 <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	2201      	movs	r2, #1
 8011122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	2290      	movs	r2, #144	; 0x90
 801112a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801112e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801113a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	2201      	movs	r2, #1
 8011148:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801114c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801114e:	7c9b      	ldrb	r3, [r3, #18]
 8011150:	461a      	mov	r2, r3
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801115a:	7c9b      	ldrb	r3, [r3, #18]
 801115c:	2b04      	cmp	r3, #4
 801115e:	d003      	beq.n	8011168 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	2201      	movs	r2, #1
 8011164:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801116e:	69f8      	ldr	r0, [r7, #28]
 8011170:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	2200      	movs	r2, #0
 8011176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011180:	2b00      	cmp	r3, #0
 8011182:	d003      	beq.n	801118c <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801118a:	e086      	b.n	801129a <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801118c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801118e:	2200      	movs	r2, #0
 8011190:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011196:	1e5a      	subs	r2, r3, #1
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119e:	3b01      	subs	r3, #1
 80111a0:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 80111a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d018      	beq.n	80111da <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80111a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111aa:	2200      	movs	r2, #0
 80111ac:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80111ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80111b0:	f04f 32ff 	mov.w	r2, #4294967295
 80111b4:	f04f 33ff 	mov.w	r3, #4294967295
 80111b8:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80111bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111be:	7c1b      	ldrb	r3, [r3, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00a      	beq.n	80111da <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80111c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c6:	2200      	movs	r2, #0
 80111c8:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ce:	1e5a      	subs	r2, r3, #1
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 80111d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d6:	3b01      	subs	r3, #1
 80111d8:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 80111da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80111de:	f112 38ff 	adds.w	r8, r2, #4294967295
 80111e2:	f143 39ff 	adc.w	r9, r3, #4294967295
 80111e6:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 80111ea:	e006      	b.n	80111fa <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 80111ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111ee:	7c5b      	ldrb	r3, [r3, #17]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 80111f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f6:	3301      	adds	r3, #1
 80111f8:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80111fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d102      	bne.n	8011206 <_fx_utility_logical_sector_flush+0x38e>
 8011200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011202:	2b00      	cmp	r3, #0
 8011204:	d011      	beq.n	801122a <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8011206:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801120a:	4313      	orrs	r3, r2
 801120c:	d102      	bne.n	8011214 <_fx_utility_logical_sector_flush+0x39c>
 801120e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00c      	beq.n	801122e <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 8011214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011216:	3318      	adds	r3, #24
 8011218:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 801121a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801121c:	3301      	adds	r3, #1
 801121e:	647b      	str	r3, [r7, #68]	; 0x44
 8011220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011222:	2b03      	cmp	r3, #3
 8011224:	f67f af54 	bls.w	80110d0 <_fx_utility_logical_sector_flush+0x258>
 8011228:	e002      	b.n	8011230 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 801122a:	bf00      	nop
 801122c:	e000      	b.n	8011230 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 801122e:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8011230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011232:	3380      	adds	r3, #128	; 0x80
 8011234:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 8011236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801123a:	429a      	cmp	r2, r3
 801123c:	f4ff af3b 	bcc.w	80110b6 <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8011240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00c      	beq.n	8011260 <_fx_utility_logical_sector_flush+0x3e8>
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	2b00      	cmp	r3, #0
 801124a:	d109      	bne.n	8011260 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	6a1a      	ldr	r2, [r3, #32]
 8011250:	2101      	movs	r1, #1
 8011252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011254:	fa01 f303 	lsl.w	r3, r1, r3
 8011258:	43db      	mvns	r3, r3
 801125a:	401a      	ands	r2, r3
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8011260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011262:	2b00      	cmp	r3, #0
 8011264:	d008      	beq.n	8011278 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 8011266:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801126a:	f112 0a01 	adds.w	sl, r2, #1
 801126e:	f143 0b00 	adc.w	fp, r3, #0
 8011272:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8011276:	e005      	b.n	8011284 <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	085b      	lsrs	r3, r3, #1
 801127c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 801127e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011280:	3301      	adds	r3, #1
 8011282:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	2b00      	cmp	r3, #0
 8011288:	f47f aedd 	bne.w	8011046 <_fx_utility_logical_sector_flush+0x1ce>
 801128c:	e004      	b.n	8011298 <_fx_utility_logical_sector_flush+0x420>
                break;
 801128e:	bf00      	nop
 8011290:	e002      	b.n	8011298 <_fx_utility_logical_sector_flush+0x420>
                break;
 8011292:	bf00      	nop
 8011294:	e000      	b.n	8011298 <_fx_utility_logical_sector_flush+0x420>
                break;
 8011296:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8011298:	2300      	movs	r3, #0
}
 801129a:	4618      	mov	r0, r3
 801129c:	3750      	adds	r7, #80	; 0x50
 801129e:	46bd      	mov	sp, r7
 80112a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080112a4 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80112a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112a8:	b09c      	sub	sp, #112	; 0x70
 80112aa:	af04      	add	r7, sp, #16
 80112ac:	64f8      	str	r0, [r7, #76]	; 0x4c
 80112ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80112b2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d106      	bne.n	80112c8 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 80112ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112bc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80112c0:	1c5a      	adds	r2, r3, #1
 80112c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112c4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 80112c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ca:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80112ce:	1c5a      	adds	r2, r3, #1
 80112d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112d2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80112d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112d8:	689a      	ldr	r2, [r3, #8]
 80112da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112de:	4293      	cmp	r3, r2
 80112e0:	f0c0 80d9 	bcc.w	8011496 <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 80112e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112e6:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80112e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112ec:	4293      	cmp	r3, r2
 80112ee:	f200 80d2 	bhi.w	8011496 <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 80112f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80112fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80112fe:	f7ff faf1 	bl	80108e4 <_fx_utility_logical_sector_cache_entry_read>
 8011302:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8011304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011306:	2b00      	cmp	r3, #0
 8011308:	d101      	bne.n	801130e <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 801130a:	2300      	movs	r3, #0
 801130c:	e259      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 801130e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011310:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8011314:	1c5a      	adds	r2, r3, #1
 8011316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011318:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 801131c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801131e:	7c5b      	ldrb	r3, [r3, #17]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d049      	beq.n	80113b8 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8011324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011326:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8011328:	2b00      	cmp	r3, #0
 801132a:	d045      	beq.n	80113b8 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 801132c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801132e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011332:	1c5a      	adds	r2, r3, #1
 8011334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011336:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801133a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801133c:	2201      	movs	r2, #1
 801133e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011344:	2290      	movs	r2, #144	; 0x90
 8011346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801134a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011356:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801135a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801135c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8011360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011362:	2201      	movs	r2, #1
 8011364:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801136a:	7c9b      	ldrb	r3, [r3, #18]
 801136c:	461a      	mov	r2, r3
 801136e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011370:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011376:	7c9b      	ldrb	r3, [r3, #18]
 8011378:	2b04      	cmp	r3, #4
 801137a:	d003      	beq.n	8011384 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137e:	2201      	movs	r2, #1
 8011380:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011386:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801138a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801138c:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801138e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011390:	2200      	movs	r2, #0
 8011392:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 8011396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801139c:	2b00      	cmp	r3, #0
 801139e:	d003      	beq.n	80113a8 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 80113a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113a6:	e20c      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80113a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113aa:	2200      	movs	r2, #0
 80113ac:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 80113ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b2:	1e5a      	subs	r2, r3, #1
 80113b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b6:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 80113b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80113be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80113c2:	4290      	cmp	r0, r2
 80113c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80113c8:	d301      	bcc.n	80113ce <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 80113ca:	2389      	movs	r3, #137	; 0x89
 80113cc:	e1f9      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80113ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80113d4:	1c5a      	adds	r2, r3, #1
 80113d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80113dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113de:	2200      	movs	r2, #0
 80113e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80113e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113e6:	2290      	movs	r2, #144	; 0x90
 80113e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80113ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80113f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80113f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 80113fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011400:	2201      	movs	r2, #1
 8011402:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011406:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801140a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801140c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011410:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011414:	2b04      	cmp	r3, #4
 8011416:	d103      	bne.n	8011420 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801141a:	2201      	movs	r2, #1
 801141c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011426:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011428:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 801142a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801142c:	2200      	movs	r2, #0
 801142e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8011432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011438:	2b00      	cmp	r3, #0
 801143a:	d11a      	bne.n	8011472 <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 801143c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801143e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011442:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011448:	2201      	movs	r2, #1
 801144a:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 801144c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801144e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011452:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8011454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011456:	2b00      	cmp	r3, #0
 8011458:	d015      	beq.n	8011486 <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 801145a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 801145c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801145e:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8011460:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8011462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011464:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 8011466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011468:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801146a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801146c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801146e:	61da      	str	r2, [r3, #28]
 8011470:	e009      	b.n	8011486 <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8011472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011474:	2200      	movs	r2, #0
 8011476:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801147a:	f04f 32ff 	mov.w	r2, #4294967295
 801147e:	f04f 33ff 	mov.w	r3, #4294967295
 8011482:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8011486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801148c:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 801148e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011494:	e195      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8011496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801149a:	2200      	movs	r2, #0
 801149c:	469a      	mov	sl, r3
 801149e:	4693      	mov	fp, r2
 80114a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80114a4:	eb1a 0402 	adds.w	r4, sl, r2
 80114a8:	eb4b 0503 	adc.w	r5, fp, r3
 80114ac:	f114 38ff 	adds.w	r8, r4, #4294967295
 80114b0:	f145 39ff 	adc.w	r9, r5, #4294967295
 80114b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80114ba:	2300      	movs	r3, #0
 80114bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80114c4:	460b      	mov	r3, r1
 80114c6:	4543      	cmp	r3, r8
 80114c8:	4613      	mov	r3, r2
 80114ca:	eb73 0309 	sbcs.w	r3, r3, r9
 80114ce:	d22c      	bcs.n	801152a <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 80114d0:	2389      	movs	r3, #137	; 0x89
 80114d2:	e176      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 80114d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80114de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80114e0:	f7ff fa00 	bl	80108e4 <_fx_utility_logical_sector_cache_entry_read>
 80114e4:	4603      	mov	r3, r0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d124      	bne.n	8011534 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 80114ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ec:	6898      	ldr	r0, [r3, #8]
 80114ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f2:	461a      	mov	r2, r3
 80114f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80114f8:	f000 fad0 	bl	8011a9c <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80114fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011504:	4413      	add	r3, r2
 8011506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 801150a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801150e:	1c51      	adds	r1, r2, #1
 8011510:	61b9      	str	r1, [r7, #24]
 8011512:	f143 0300 	adc.w	r3, r3, #0
 8011516:	61fb      	str	r3, [r7, #28]
 8011518:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801151c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8011520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011524:	3b01      	subs	r3, #1
 8011526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 801152a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801152e:	2b00      	cmp	r3, #0
 8011530:	d1d0      	bne.n	80114d4 <_fx_utility_logical_sector_read+0x230>
 8011532:	e000      	b.n	8011536 <_fx_utility_logical_sector_read+0x292>
                break;
 8011534:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8011536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801153a:	2200      	movs	r2, #0
 801153c:	633b      	str	r3, [r7, #48]	; 0x30
 801153e:	637a      	str	r2, [r7, #52]	; 0x34
 8011540:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011544:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011548:	4621      	mov	r1, r4
 801154a:	1889      	adds	r1, r1, r2
 801154c:	62b9      	str	r1, [r7, #40]	; 0x28
 801154e:	4629      	mov	r1, r5
 8011550:	eb43 0101 	adc.w	r1, r3, r1
 8011554:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011556:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801155a:	460b      	mov	r3, r1
 801155c:	3b01      	subs	r3, #1
 801155e:	613b      	str	r3, [r7, #16]
 8011560:	4613      	mov	r3, r2
 8011562:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011566:	617b      	str	r3, [r7, #20]
 8011568:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801156c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8011570:	e02b      	b.n	80115ca <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8011572:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801157c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801157e:	f7ff f9b1 	bl	80108e4 <_fx_utility_logical_sector_cache_entry_read>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d125      	bne.n	80115d4 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158a:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 801158c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011590:	3b01      	subs	r3, #1
 8011592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011594:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8011596:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801159a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801159e:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 80115a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 80115a4:	461a      	mov	r2, r3
 80115a6:	f000 fa79 	bl	8011a9c <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 80115aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80115ae:	1e51      	subs	r1, r2, #1
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80115b6:	60fb      	str	r3, [r7, #12]
 80115b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80115bc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 80115c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115c4:	3b01      	subs	r3, #1
 80115c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 80115ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1cf      	bne.n	8011572 <_fx_utility_logical_sector_read+0x2ce>
 80115d2:	e000      	b.n	80115d6 <_fx_utility_logical_sector_read+0x332>
                break;
 80115d4:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 80115d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d101      	bne.n	80115e2 <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 80115de:	2300      	movs	r3, #0
 80115e0:	e0ef      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 80115e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115e6:	2200      	movs	r2, #0
 80115e8:	623b      	str	r3, [r7, #32]
 80115ea:	627a      	str	r2, [r7, #36]	; 0x24
 80115ec:	2301      	movs	r3, #1
 80115ee:	9302      	str	r3, [sp, #8]
 80115f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80115f4:	e9cd 3400 	strd	r3, r4, [sp]
 80115f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80115fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80115fe:	f7ff fc3b 	bl	8010e78 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011604:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801160c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011612:	2200      	movs	r2, #0
 8011614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801161a:	2290      	movs	r2, #144	; 0x90
 801161c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011622:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011626:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801162a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801162c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801162e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011634:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011638:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801163c:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011642:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011646:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801164a:	2b04      	cmp	r3, #4
 801164c:	d103      	bne.n	8011656 <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 801164e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011650:	2201      	movs	r2, #1
 8011652:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011658:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801165c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801165e:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011662:	2200      	movs	r2, #0
 8011664:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8011668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801166a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801166e:	2b00      	cmp	r3, #0
 8011670:	f040 80a4 	bne.w	80117bc <_fx_utility_logical_sector_read+0x518>
 8011674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011676:	695b      	ldr	r3, [r3, #20]
 8011678:	089b      	lsrs	r3, r3, #2
 801167a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801167e:	429a      	cmp	r2, r3
 8011680:	f080 809c 	bcs.w	80117bc <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8011684:	e095      	b.n	80117b2 <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011686:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801168a:	9300      	str	r3, [sp, #0]
 801168c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011690:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011692:	f7ff f927 	bl	80108e4 <_fx_utility_logical_sector_cache_entry_read>
 8011696:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8011698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801169a:	2b00      	cmp	r3, #0
 801169c:	d101      	bne.n	80116a2 <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 801169e:	2300      	movs	r3, #0
 80116a0:	e08f      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 80116a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116a4:	7c5b      	ldrb	r3, [r3, #17]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d049      	beq.n	801173e <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 80116aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ac:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d045      	beq.n	801173e <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 80116b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116b4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116bc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80116c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116c2:	2201      	movs	r2, #1
 80116c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80116c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ca:	2290      	movs	r2, #144	; 0x90
 80116cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80116d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80116da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80116e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 80116e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e8:	2201      	movs	r2, #1
 80116ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80116ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f0:	7c9b      	ldrb	r3, [r3, #18]
 80116f2:	461a      	mov	r2, r3
 80116f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80116fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116fc:	7c9b      	ldrb	r3, [r3, #18]
 80116fe:	2b04      	cmp	r3, #4
 8011700:	d003      	beq.n	801170a <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011704:	2201      	movs	r2, #1
 8011706:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 801170a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011710:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011712:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011716:	2200      	movs	r2, #0
 8011718:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 801171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801171e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011722:	2b00      	cmp	r3, #0
 8011724:	d003      	beq.n	801172e <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 8011726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801172c:	e049      	b.n	80117c2 <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011730:	2200      	movs	r2, #0
 8011732:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8011734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011738:	1e5a      	subs	r2, r3, #1
 801173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801173c:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 801173e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011744:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801174a:	2201      	movs	r2, #1
 801174c:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 801174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011750:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011754:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8011756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 801175c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 801175e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011760:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011762:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011766:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801176a:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801176c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801176e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011770:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011774:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 8011776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801177a:	461a      	mov	r2, r3
 801177c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011780:	f000 f98c 	bl	8011a9c <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011788:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801178c:	4413      	add	r3, r2
 801178e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8011792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011796:	1c51      	adds	r1, r2, #1
 8011798:	6039      	str	r1, [r7, #0]
 801179a:	f143 0300 	adc.w	r3, r3, #0
 801179e:	607b      	str	r3, [r7, #4]
 80117a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80117a4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 80117a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117ac:	3b01      	subs	r3, #1
 80117ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 80117b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f47f af65 	bne.w	8011686 <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80117bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3760      	adds	r7, #96	; 0x60
 80117c6:	46bd      	mov	sp, r7
 80117c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080117cc <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80117cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80117d0:	b096      	sub	sp, #88	; 0x58
 80117d2:	af04      	add	r7, sp, #16
 80117d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80117d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 80117da:	2300      	movs	r3, #0
 80117dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80117e0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d106      	bne.n	80117f6 <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 80117e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ea:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 80117f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011800:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011806:	689a      	ldr	r2, [r3, #8]
 8011808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801180a:	4293      	cmp	r3, r2
 801180c:	f0c0 80d8 	bcc.w	80119c0 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011816:	4293      	cmp	r3, r2
 8011818:	f200 80d2 	bhi.w	80119c0 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 801181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181e:	691b      	ldr	r3, [r3, #16]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d030      	beq.n	8011886 <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8011824:	6a3a      	ldr	r2, [r7, #32]
 8011826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011828:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801182c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011830:	4013      	ands	r3, r2
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8011836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011838:	4613      	mov	r3, r2
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	4413      	add	r3, r2
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8011844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011846:	4413      	add	r3, r2
 8011848:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801184a:	2300      	movs	r3, #0
 801184c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801184e:	e016      	b.n	801187e <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011852:	7c5b      	ldrb	r3, [r3, #17]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00c      	beq.n	8011872 <_fx_utility_logical_sector_write+0xa6>
 8011858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801185a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801185e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011862:	4299      	cmp	r1, r3
 8011864:	bf08      	it	eq
 8011866:	4290      	cmpeq	r0, r2
 8011868:	d103      	bne.n	8011872 <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 801186a:	2301      	movs	r3, #1
 801186c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011870:	e02d      	b.n	80118ce <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011874:	3301      	adds	r3, #1
 8011876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801187a:	3318      	adds	r3, #24
 801187c:	647b      	str	r3, [r7, #68]	; 0x44
 801187e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011880:	2b03      	cmp	r3, #3
 8011882:	d9e5      	bls.n	8011850 <_fx_utility_logical_sector_write+0x84>
 8011884:	e023      	b.n	80118ce <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 801188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188e:	69db      	ldr	r3, [r3, #28]
 8011890:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8011892:	e017      	b.n	80118c4 <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011896:	7c5b      	ldrb	r3, [r3, #17]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00c      	beq.n	80118b6 <_fx_utility_logical_sector_write+0xea>
 801189c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80118a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80118a6:	4299      	cmp	r1, r3
 80118a8:	bf08      	it	eq
 80118aa:	4290      	cmpeq	r0, r2
 80118ac:	d103      	bne.n	80118b6 <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 80118ae:	2301      	movs	r3, #1
 80118b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 80118b4:	e00b      	b.n	80118ce <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 80118b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118b8:	695b      	ldr	r3, [r3, #20]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d002      	beq.n	80118c4 <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80118be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c0:	695b      	ldr	r3, [r3, #20]
 80118c2:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 80118c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118c6:	1e5a      	subs	r2, r3, #1
 80118c8:	643a      	str	r2, [r7, #64]	; 0x40
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d1e2      	bne.n	8011894 <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 80118ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d00d      	beq.n	80118f2 <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 80118d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d8:	7c1b      	ldrb	r3, [r3, #16]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d107      	bne.n	80118ee <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 80118de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e2:	1c5a      	adds	r2, r3, #1
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 80118e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ea:	2201      	movs	r2, #1
 80118ec:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 80118ee:	2300      	movs	r3, #0
 80118f0:	e0cf      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80118f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80118f6:	4313      	orrs	r3, r2
 80118f8:	d004      	beq.n	8011904 <_fx_utility_logical_sector_write+0x138>
 80118fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80118fe:	1c51      	adds	r1, r2, #1
 8011900:	430b      	orrs	r3, r1
 8011902:	d101      	bne.n	8011908 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 8011904:	2389      	movs	r3, #137	; 0x89
 8011906:	e0c4      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8011908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801190a:	2200      	movs	r2, #0
 801190c:	61bb      	str	r3, [r7, #24]
 801190e:	61fa      	str	r2, [r7, #28]
 8011910:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011914:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011918:	4621      	mov	r1, r4
 801191a:	1889      	adds	r1, r1, r2
 801191c:	6139      	str	r1, [r7, #16]
 801191e:	4629      	mov	r1, r5
 8011920:	eb43 0101 	adc.w	r1, r3, r1
 8011924:	6179      	str	r1, [r7, #20]
 8011926:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801192a:	460b      	mov	r3, r1
 801192c:	f113 3aff 	adds.w	sl, r3, #4294967295
 8011930:	4613      	mov	r3, r2
 8011932:	f143 3bff 	adc.w	fp, r3, #4294967295
 8011936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011938:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801193c:	4592      	cmp	sl, r2
 801193e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8011942:	d301      	bcc.n	8011948 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 8011944:	2389      	movs	r3, #137	; 0x89
 8011946:	e0a4      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8011948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801194e:	1c5a      	adds	r2, r3, #1
 8011950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011952:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011958:	2201      	movs	r2, #1
 801195a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011960:	2290      	movs	r2, #144	; 0x90
 8011962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011968:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801196a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801196e:	6a3a      	ldr	r2, [r7, #32]
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801197a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801197e:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8011982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011984:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011988:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801198c:	2b04      	cmp	r3, #4
 801198e:	d003      	beq.n	8011998 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	2201      	movs	r2, #1
 8011994:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801199e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80119a0:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	2200      	movs	r2, #0
 80119a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d003      	beq.n	80119bc <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 80119b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119ba:	e06a      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 80119bc:	2300      	movs	r3, #0
 80119be:	e068      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80119c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80119c4:	4313      	orrs	r3, r2
 80119c6:	d004      	beq.n	80119d2 <_fx_utility_logical_sector_write+0x206>
 80119c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80119cc:	1c51      	adds	r1, r2, #1
 80119ce:	430b      	orrs	r3, r1
 80119d0:	d101      	bne.n	80119d6 <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 80119d2:	2389      	movs	r3, #137	; 0x89
 80119d4:	e05d      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 80119d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119d8:	2200      	movs	r2, #0
 80119da:	60bb      	str	r3, [r7, #8]
 80119dc:	60fa      	str	r2, [r7, #12]
 80119de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80119e2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80119e6:	4651      	mov	r1, sl
 80119e8:	eb11 0802 	adds.w	r8, r1, r2
 80119ec:	4659      	mov	r1, fp
 80119ee:	eb41 0903 	adc.w	r9, r1, r3
 80119f2:	f118 34ff 	adds.w	r4, r8, #4294967295
 80119f6:	f149 35ff 	adc.w	r5, r9, #4294967295
 80119fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011a00:	4294      	cmp	r4, r2
 8011a02:	eb75 0303 	sbcs.w	r3, r5, r3
 8011a06:	d301      	bcc.n	8011a0c <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8011a08:	2389      	movs	r3, #137	; 0x89
 8011a0a:	e042      	b.n	8011a92 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8011a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a0e:	2200      	movs	r2, #0
 8011a10:	603b      	str	r3, [r7, #0]
 8011a12:	607a      	str	r2, [r7, #4]
 8011a14:	2301      	movs	r3, #1
 8011a16:	9302      	str	r3, [sp, #8]
 8011a18:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011a1c:	e9cd 3400 	strd	r3, r4, [sp]
 8011a20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a26:	f7ff fa27 	bl	8010e78 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8011a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011a30:	1c5a      	adds	r2, r3, #1
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a42:	2290      	movs	r2, #144	; 0x90
 8011a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011a50:	6a3a      	ldr	r2, [r7, #32]
 8011a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011a5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011a60:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011a6a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011a6e:	2b04      	cmp	r3, #4
 8011a70:	d003      	beq.n	8011a7a <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	2201      	movs	r2, #1
 8011a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a82:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a86:	2200      	movs	r2, #0
 8011a88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3748      	adds	r7, #72	; 0x48
 8011a96:	46bd      	mov	sp, r7
 8011a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011a9c <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	68f9      	ldr	r1, [r7, #12]
 8011aac:	68b8      	ldr	r0, [r7, #8]
 8011aae:	f003 f9fb 	bl	8014ea8 <memcpy>
}
 8011ab2:	bf00      	nop
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
	...

08011abc <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d101      	bne.n	8011ace <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8011aca:	2318      	movs	r3, #24
 8011acc:	e018      	b.n	8011b00 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ace:	f3ef 8305 	mrs	r3, IPSR
 8011ad2:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011ad4:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011ad6:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <_fxe_file_close+0x4c>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4313      	orrs	r3, r2
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d108      	bne.n	8011af2 <_fxe_file_close+0x36>
 8011ae0:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <_fxe_file_close+0x50>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <_fxe_file_close+0x36>
 8011ae8:	4b08      	ldr	r3, [pc, #32]	; (8011b0c <_fxe_file_close+0x50>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4a08      	ldr	r2, [pc, #32]	; (8011b10 <_fxe_file_close+0x54>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d101      	bne.n	8011af6 <_fxe_file_close+0x3a>
 8011af2:	2320      	movs	r3, #32
 8011af4:	e004      	b.n	8011b00 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7f9 fe86 	bl	800b808 <_fx_file_close>
 8011afc:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8011afe:	68fb      	ldr	r3, [r7, #12]
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3710      	adds	r7, #16
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	2400006c 	.word	0x2400006c
 8011b0c:	2400360c 	.word	0x2400360c
 8011b10:	24003754 	.word	0x24003754

08011b14 <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d101      	bne.n	8011b28 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 8011b24:	2318      	movs	r3, #24
 8011b26:	e019      	b.n	8011b5c <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b28:	f3ef 8305 	mrs	r3, IPSR
 8011b2c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011b2e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011b30:	4b0c      	ldr	r3, [pc, #48]	; (8011b64 <_fxe_file_create+0x50>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4313      	orrs	r3, r2
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d108      	bne.n	8011b4c <_fxe_file_create+0x38>
 8011b3a:	4b0b      	ldr	r3, [pc, #44]	; (8011b68 <_fxe_file_create+0x54>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d004      	beq.n	8011b4c <_fxe_file_create+0x38>
 8011b42:	4b09      	ldr	r3, [pc, #36]	; (8011b68 <_fxe_file_create+0x54>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4a09      	ldr	r2, [pc, #36]	; (8011b6c <_fxe_file_create+0x58>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d101      	bne.n	8011b50 <_fxe_file_create+0x3c>
 8011b4c:	2320      	movs	r3, #32
 8011b4e:	e005      	b.n	8011b5c <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8011b50:	6839      	ldr	r1, [r7, #0]
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7f9 fefc 	bl	800b950 <_fx_file_create>
 8011b58:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3710      	adds	r7, #16
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	2400006c 	.word	0x2400006c
 8011b68:	2400360c 	.word	0x2400360c
 8011b6c:	24003754 	.word	0x24003754

08011b70 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
 8011b7c:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00b      	beq.n	8011b9c <_fxe_file_open+0x2c>
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a36      	ldr	r2, [pc, #216]	; (8011c64 <_fxe_file_open+0xf4>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d106      	bne.n	8011b9c <_fxe_file_open+0x2c>
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d003      	beq.n	8011b9c <_fxe_file_open+0x2c>
 8011b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b96:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8011b9a:	d001      	beq.n	8011ba0 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8011b9c:	2318      	movs	r3, #24
 8011b9e:	e05d      	b.n	8011c5c <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d007      	beq.n	8011bb6 <_fxe_file_open+0x46>
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d004      	beq.n	8011bb6 <_fxe_file_open+0x46>
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	2b01      	cmp	r3, #1
 8011bb0:	d001      	beq.n	8011bb6 <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 8011bb2:	2306      	movs	r3, #6
 8011bb4:	e052      	b.n	8011c5c <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011bb6:	f3ef 8305 	mrs	r3, IPSR
 8011bba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011bbc:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011bbe:	4b2a      	ldr	r3, [pc, #168]	; (8011c68 <_fxe_file_open+0xf8>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d108      	bne.n	8011bda <_fxe_file_open+0x6a>
 8011bc8:	4b28      	ldr	r3, [pc, #160]	; (8011c6c <_fxe_file_open+0xfc>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d004      	beq.n	8011bda <_fxe_file_open+0x6a>
 8011bd0:	4b26      	ldr	r3, [pc, #152]	; (8011c6c <_fxe_file_open+0xfc>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a26      	ldr	r2, [pc, #152]	; (8011c70 <_fxe_file_open+0x100>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d101      	bne.n	8011bde <_fxe_file_open+0x6e>
 8011bda:	2320      	movs	r3, #32
 8011bdc:	e03e      	b.n	8011c5c <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4a20      	ldr	r2, [pc, #128]	; (8011c64 <_fxe_file_open+0xf4>)
 8011be4:	4293      	cmp	r3, r2
 8011be6:	d001      	beq.n	8011bec <_fxe_file_open+0x7c>
 8011be8:	2311      	movs	r3, #17
 8011bea:	e037      	b.n	8011c5c <_fxe_file_open+0xec>
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f000 fee2 	bl	80129c0 <_tx_mutex_get>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d001      	beq.n	8011c06 <_fxe_file_open+0x96>
 8011c02:	2311      	movs	r3, #17
 8011c04:	e02a      	b.n	8011c5c <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011c0c:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011c14:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 8011c16:	e00e      	b.n	8011c36 <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 8011c18:	68ba      	ldr	r2, [r7, #8]
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d107      	bne.n	8011c30 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011c26:	4618      	mov	r0, r3
 8011c28:	f001 f942 	bl	8012eb0 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8011c2c:	2318      	movs	r3, #24
 8011c2e:	e015      	b.n	8011c5c <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c34:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	1e5a      	subs	r2, r3, #1
 8011c3a:	61ba      	str	r2, [r7, #24]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1eb      	bne.n	8011c18 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011c46:	4618      	mov	r0, r3
 8011c48:	f001 f932 	bl	8012eb0 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	68b9      	ldr	r1, [r7, #8]
 8011c52:	68f8      	ldr	r0, [r7, #12]
 8011c54:	f7fa fab8 	bl	800c1c8 <_fx_file_open>
 8011c58:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8011c5a:	697b      	ldr	r3, [r7, #20]
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3720      	adds	r7, #32
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	4d454449 	.word	0x4d454449
 8011c68:	2400006c 	.word	0x2400006c
 8011c6c:	2400360c 	.word	0x2400360c
 8011c70:	24003754 	.word	0x24003754

08011c74 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b086      	sub	sp, #24
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
 8011c80:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d005      	beq.n	8011c94 <_fxe_file_read+0x20>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d002      	beq.n	8011c94 <_fxe_file_read+0x20>
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d101      	bne.n	8011c98 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 8011c94:	2318      	movs	r3, #24
 8011c96:	e01b      	b.n	8011cd0 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c98:	f3ef 8305 	mrs	r3, IPSR
 8011c9c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011c9e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011ca0:	4b0d      	ldr	r3, [pc, #52]	; (8011cd8 <_fxe_file_read+0x64>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	4313      	orrs	r3, r2
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d108      	bne.n	8011cbc <_fxe_file_read+0x48>
 8011caa:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <_fxe_file_read+0x68>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d004      	beq.n	8011cbc <_fxe_file_read+0x48>
 8011cb2:	4b0a      	ldr	r3, [pc, #40]	; (8011cdc <_fxe_file_read+0x68>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a0a      	ldr	r2, [pc, #40]	; (8011ce0 <_fxe_file_read+0x6c>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d101      	bne.n	8011cc0 <_fxe_file_read+0x4c>
 8011cbc:	2320      	movs	r3, #32
 8011cbe:	e007      	b.n	8011cd0 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	68b9      	ldr	r1, [r7, #8]
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f7fa ff60 	bl	800cb8c <_fx_file_read>
 8011ccc:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8011cce:	697b      	ldr	r3, [r7, #20]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3718      	adds	r7, #24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	2400006c 	.word	0x2400006c
 8011cdc:	2400360c 	.word	0x2400360c
 8011ce0:	24003754 	.word	0x24003754

08011ce4 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d101      	bne.n	8011cf8 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 8011cf4:	2318      	movs	r3, #24
 8011cf6:	e019      	b.n	8011d2c <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011cf8:	f3ef 8305 	mrs	r3, IPSR
 8011cfc:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011cfe:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011d00:	4b0c      	ldr	r3, [pc, #48]	; (8011d34 <_fxe_file_seek+0x50>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4313      	orrs	r3, r2
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d108      	bne.n	8011d1c <_fxe_file_seek+0x38>
 8011d0a:	4b0b      	ldr	r3, [pc, #44]	; (8011d38 <_fxe_file_seek+0x54>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d004      	beq.n	8011d1c <_fxe_file_seek+0x38>
 8011d12:	4b09      	ldr	r3, [pc, #36]	; (8011d38 <_fxe_file_seek+0x54>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	4a09      	ldr	r2, [pc, #36]	; (8011d3c <_fxe_file_seek+0x58>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d101      	bne.n	8011d20 <_fxe_file_seek+0x3c>
 8011d1c:	2320      	movs	r3, #32
 8011d1e:	e005      	b.n	8011d2c <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8011d20:	6839      	ldr	r1, [r7, #0]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7fb f9d6 	bl	800d0d4 <_fx_file_seek>
 8011d28:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	2400006c 	.word	0x2400006c
 8011d38:	2400360c 	.word	0x2400360c
 8011d3c:	24003754 	.word	0x24003754

08011d40 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b086      	sub	sp, #24
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d002      	beq.n	8011d58 <_fxe_file_write+0x18>
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d101      	bne.n	8011d5c <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 8011d58:	2318      	movs	r3, #24
 8011d5a:	e01a      	b.n	8011d92 <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d5c:	f3ef 8305 	mrs	r3, IPSR
 8011d60:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011d62:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011d64:	4b0d      	ldr	r3, [pc, #52]	; (8011d9c <_fxe_file_write+0x5c>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d108      	bne.n	8011d80 <_fxe_file_write+0x40>
 8011d6e:	4b0c      	ldr	r3, [pc, #48]	; (8011da0 <_fxe_file_write+0x60>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d004      	beq.n	8011d80 <_fxe_file_write+0x40>
 8011d76:	4b0a      	ldr	r3, [pc, #40]	; (8011da0 <_fxe_file_write+0x60>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	4a0a      	ldr	r2, [pc, #40]	; (8011da4 <_fxe_file_write+0x64>)
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	d101      	bne.n	8011d84 <_fxe_file_write+0x44>
 8011d80:	2320      	movs	r3, #32
 8011d82:	e006      	b.n	8011d92 <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	68b9      	ldr	r1, [r7, #8]
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	f7fb f9b5 	bl	800d0f8 <_fx_file_write>
 8011d8e:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8011d90:	697b      	ldr	r3, [r7, #20]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3718      	adds	r7, #24
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	2400006c 	.word	0x2400006c
 8011da0:	2400360c 	.word	0x2400360c
 8011da4:	24003754 	.word	0x24003754

08011da8 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d101      	bne.n	8011dba <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 8011db6:	2318      	movs	r3, #24
 8011db8:	e018      	b.n	8011dec <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011dba:	f3ef 8305 	mrs	r3, IPSR
 8011dbe:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011dc0:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011dc2:	4b0c      	ldr	r3, [pc, #48]	; (8011df4 <_fxe_media_close+0x4c>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d108      	bne.n	8011dde <_fxe_media_close+0x36>
 8011dcc:	4b0a      	ldr	r3, [pc, #40]	; (8011df8 <_fxe_media_close+0x50>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d004      	beq.n	8011dde <_fxe_media_close+0x36>
 8011dd4:	4b08      	ldr	r3, [pc, #32]	; (8011df8 <_fxe_media_close+0x50>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	4a08      	ldr	r2, [pc, #32]	; (8011dfc <_fxe_media_close+0x54>)
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	d101      	bne.n	8011de2 <_fxe_media_close+0x3a>
 8011dde:	2320      	movs	r3, #32
 8011de0:	e004      	b.n	8011dec <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7fc fa08 	bl	800e1f8 <_fx_media_close>
 8011de8:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8011dea:	68fb      	ldr	r3, [r7, #12]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	2400006c 	.word	0x2400006c
 8011df8:	2400360c 	.word	0x2400360c
 8011dfc:	24003754 	.word	0x24003754

08011e00 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d101      	bne.n	8011e12 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 8011e0e:	2318      	movs	r3, #24
 8011e10:	e018      	b.n	8011e44 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e12:	f3ef 8305 	mrs	r3, IPSR
 8011e16:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011e18:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011e1a:	4b0c      	ldr	r3, [pc, #48]	; (8011e4c <_fxe_media_flush+0x4c>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d108      	bne.n	8011e36 <_fxe_media_flush+0x36>
 8011e24:	4b0a      	ldr	r3, [pc, #40]	; (8011e50 <_fxe_media_flush+0x50>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d004      	beq.n	8011e36 <_fxe_media_flush+0x36>
 8011e2c:	4b08      	ldr	r3, [pc, #32]	; (8011e50 <_fxe_media_flush+0x50>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4a08      	ldr	r2, [pc, #32]	; (8011e54 <_fxe_media_flush+0x54>)
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d101      	bne.n	8011e3a <_fxe_media_flush+0x3a>
 8011e36:	2320      	movs	r3, #32
 8011e38:	e004      	b.n	8011e44 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f7fc fbb4 	bl	800e5a8 <_fx_media_flush>
 8011e40:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8011e42:	68fb      	ldr	r3, [r7, #12]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	2400006c 	.word	0x2400006c
 8011e50:	2400360c 	.word	0x2400360c
 8011e54:	24003754 	.word	0x24003754

08011e58 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b08e      	sub	sp, #56	; 0x38
 8011e5c:	af02      	add	r7, sp, #8
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
 8011e64:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d00a      	beq.n	8011e82 <_fxe_media_open+0x2a>
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d007      	beq.n	8011e82 <_fxe_media_open+0x2a>
 8011e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d004      	beq.n	8011e82 <_fxe_media_open+0x2a>
 8011e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e7a:	f242 42b8 	movw	r2, #9400	; 0x24b8
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d001      	beq.n	8011e86 <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 8011e82:	2318      	movs	r3, #24
 8011e84:	e071      	b.n	8011f6a <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e86:	f3ef 8305 	mrs	r3, IPSR
 8011e8a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011e8c:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011e8e:	4b39      	ldr	r3, [pc, #228]	; (8011f74 <_fxe_media_open+0x11c>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4313      	orrs	r3, r2
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d108      	bne.n	8011eaa <_fxe_media_open+0x52>
 8011e98:	4b37      	ldr	r3, [pc, #220]	; (8011f78 <_fxe_media_open+0x120>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d004      	beq.n	8011eaa <_fxe_media_open+0x52>
 8011ea0:	4b35      	ldr	r3, [pc, #212]	; (8011f78 <_fxe_media_open+0x120>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	4a35      	ldr	r2, [pc, #212]	; (8011f7c <_fxe_media_open+0x124>)
 8011ea6:	4293      	cmp	r3, r2
 8011ea8:	d101      	bne.n	8011eae <_fxe_media_open+0x56>
 8011eaa:	2320      	movs	r3, #32
 8011eac:	e05d      	b.n	8011f6a <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8011eae:	4b34      	ldr	r3, [pc, #208]	; (8011f80 <_fxe_media_open+0x128>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	425b      	negs	r3, r3
 8011eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eba:	4013      	ands	r3, r2
 8011ebc:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d004      	beq.n	8011ece <_fxe_media_open+0x76>
 8011ec4:	4b2e      	ldr	r3, [pc, #184]	; (8011f80 <_fxe_media_open+0x128>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d001      	beq.n	8011ed2 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8011ece:	2302      	movs	r3, #2
 8011ed0:	e04b      	b.n	8011f6a <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8011ed2:	4b2c      	ldr	r3, [pc, #176]	; (8011f84 <_fxe_media_open+0x12c>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	425b      	negs	r3, r3
 8011edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ede:	4013      	ands	r3, r2
 8011ee0:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d004      	beq.n	8011ef2 <_fxe_media_open+0x9a>
 8011ee8:	4b26      	ldr	r3, [pc, #152]	; (8011f84 <_fxe_media_open+0x12c>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d001      	beq.n	8011ef6 <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8011ef2:	2302      	movs	r3, #2
 8011ef4:	e039      	b.n	8011f6a <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 8011ef6:	f001 fd3f 	bl	8013978 <_tx_thread_identify>
 8011efa:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8011efc:	f107 0314 	add.w	r3, r7, #20
 8011f00:	461a      	mov	r2, r3
 8011f02:	2100      	movs	r1, #0
 8011f04:	6a38      	ldr	r0, [r7, #32]
 8011f06:	f001 fd91 	bl	8013a2c <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8011f0a:	4b1f      	ldr	r3, [pc, #124]	; (8011f88 <_fxe_media_open+0x130>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8011f10:	4b1e      	ldr	r3, [pc, #120]	; (8011f8c <_fxe_media_open+0x134>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 8011f16:	e010      	b.n	8011f3a <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d108      	bne.n	8011f32 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	f107 0214 	add.w	r2, r7, #20
 8011f26:	4619      	mov	r1, r3
 8011f28:	6a38      	ldr	r0, [r7, #32]
 8011f2a:	f001 fd7f 	bl	8013a2c <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 8011f2e:	2318      	movs	r3, #24
 8011f30:	e01b      	b.n	8011f6a <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 8011f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f34:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8011f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 8011f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3c:	1e5a      	subs	r2, r3, #1
 8011f3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1e9      	bne.n	8011f18 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	f107 0214 	add.w	r2, r7, #20
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	6a38      	ldr	r0, [r7, #32]
 8011f4e:	f001 fd6d 	bl	8013a2c <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 8011f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f54:	9301      	str	r3, [sp, #4]
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	68b9      	ldr	r1, [r7, #8]
 8011f60:	68f8      	ldr	r0, [r7, #12]
 8011f62:	f7fc fcad 	bl	800e8c0 <_fx_media_open>
 8011f66:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 8011f68:	69fb      	ldr	r3, [r7, #28]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3730      	adds	r7, #48	; 0x30
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	2400006c 	.word	0x2400006c
 8011f78:	2400360c 	.word	0x2400360c
 8011f7c:	24003754 	.word	0x24003754
 8011f80:	24003594 	.word	0x24003594
 8011f84:	24003598 	.word	0x24003598
 8011f88:	24003584 	.word	0x24003584
 8011f8c:	24003588 	.word	0x24003588

08011f90 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b096      	sub	sp, #88	; 0x58
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	607a      	str	r2, [r7, #4]
 8011f9c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	3303      	adds	r3, #3
 8011fa2:	f023 0303 	bic.w	r3, r3, #3
 8011fa6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8011fac:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011fb0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011fb2:	b672      	cpsid	i
    return(int_posture);
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8011fb6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011fb8:	4b55      	ldr	r3, [pc, #340]	; (8012110 <_tx_byte_allocate+0x180>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fc6:	621a      	str	r2, [r3, #32]
 8011fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fce:	f383 8810 	msr	PRIMASK, r3
}
 8011fd2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8011fd4:	6879      	ldr	r1, [r7, #4]
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f000 f9b2 	bl	8012340 <_tx_byte_pool_search>
 8011fdc:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011fde:	f3ef 8310 	mrs	r3, PRIMASK
 8011fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011fe8:	b672      	cpsid	i
    return(int_posture);
 8011fea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011fec:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8011fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ff8:	e006      	b.n	8012008 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	6a1b      	ldr	r3, [r3, #32]
 8011ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012000:	429a      	cmp	r2, r3
 8012002:	d101      	bne.n	8012008 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012004:	2301      	movs	r3, #1
 8012006:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200a:	2b00      	cmp	r3, #0
 801200c:	d0d9      	beq.n	8011fc2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012012:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012016:	2b00      	cmp	r3, #0
 8012018:	d008      	beq.n	801202c <_tx_byte_allocate+0x9c>
 801201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801201c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801201e:	6a3b      	ldr	r3, [r7, #32]
 8012020:	f383 8810 	msr	PRIMASK, r3
}
 8012024:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8012026:	2300      	movs	r3, #0
 8012028:	653b      	str	r3, [r7, #80]	; 0x50
 801202a:	e06c      	b.n	8012106 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d061      	beq.n	80120f6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012032:	4b38      	ldr	r3, [pc, #224]	; (8012114 <_tx_byte_allocate+0x184>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d007      	beq.n	801204a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 801203a:	2310      	movs	r3, #16
 801203c:	653b      	str	r3, [r7, #80]	; 0x50
 801203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012040:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	f383 8810 	msr	PRIMASK, r3
}
 8012048:	e05d      	b.n	8012106 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 801204a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801204c:	4a32      	ldr	r2, [pc, #200]	; (8012118 <_tx_byte_allocate+0x188>)
 801204e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012052:	68fa      	ldr	r2, [r7, #12]
 8012054:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012058:	68ba      	ldr	r2, [r7, #8]
 801205a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 801205c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012064:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012068:	1c5a      	adds	r2, r3, #1
 801206a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801206c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012074:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012082:	2b00      	cmp	r3, #0
 8012084:	d109      	bne.n	801209a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801208a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801208e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012090:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012096:	675a      	str	r2, [r3, #116]	; 0x74
 8012098:	e011      	b.n	80120be <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801209e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80120a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120a4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80120a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120aa:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80120ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120b0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80120b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120b6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80120b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120bc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80120be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120c0:	2209      	movs	r2, #9
 80120c2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80120c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120c6:	2201      	movs	r2, #1
 80120c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80120ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120cc:	683a      	ldr	r2, [r7, #0]
 80120ce:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80120d0:	4b10      	ldr	r3, [pc, #64]	; (8012114 <_tx_byte_allocate+0x184>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	3301      	adds	r3, #1
 80120d6:	4a0f      	ldr	r2, [pc, #60]	; (8012114 <_tx_byte_allocate+0x184>)
 80120d8:	6013      	str	r3, [r2, #0]
 80120da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	f383 8810 	msr	PRIMASK, r3
}
 80120e4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80120e6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80120e8:	f001 ff1a 	bl	8013f20 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80120ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120f2:	653b      	str	r3, [r7, #80]	; 0x50
 80120f4:	e007      	b.n	8012106 <_tx_byte_allocate+0x176>
 80120f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	f383 8810 	msr	PRIMASK, r3
}
 8012100:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012102:	2310      	movs	r3, #16
 8012104:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012108:	4618      	mov	r0, r3
 801210a:	3758      	adds	r7, #88	; 0x58
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	2400360c 	.word	0x2400360c
 8012114:	240036a4 	.word	0x240036a4
 8012118:	0801211d 	.word	0x0801211d

0801211c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b08e      	sub	sp, #56	; 0x38
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012126:	f3ef 8310 	mrs	r3, PRIMASK
 801212a:	623b      	str	r3, [r7, #32]
    return(posture);
 801212c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801212e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012130:	b672      	cpsid	i
    return(int_posture);
 8012132:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012134:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801213a:	4a33      	ldr	r2, [pc, #204]	; (8012208 <_tx_byte_pool_cleanup+0xec>)
 801213c:	4293      	cmp	r3, r2
 801213e:	d158      	bne.n	80121f2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012146:	683a      	ldr	r2, [r7, #0]
 8012148:	429a      	cmp	r2, r3
 801214a:	d152      	bne.n	80121f2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012150:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	2b00      	cmp	r3, #0
 8012156:	d04c      	beq.n	80121f2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	4a2b      	ldr	r2, [pc, #172]	; (801220c <_tx_byte_pool_cleanup+0xf0>)
 801215e:	4293      	cmp	r3, r2
 8012160:	d147      	bne.n	80121f2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012166:	2b00      	cmp	r3, #0
 8012168:	d043      	beq.n	80121f2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2200      	movs	r2, #0
 801216e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012174:	1e5a      	subs	r2, r3, #1
 8012176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012178:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801217e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012182:	2b00      	cmp	r3, #0
 8012184:	d103      	bne.n	801218e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012188:	2200      	movs	r2, #0
 801218a:	625a      	str	r2, [r3, #36]	; 0x24
 801218c:	e013      	b.n	80121b6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012192:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012198:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801219e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80121a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121a4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80121a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d102      	bne.n	80121b6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80121b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121b4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ba:	2b09      	cmp	r3, #9
 80121bc:	d119      	bne.n	80121f2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2210      	movs	r2, #16
 80121c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80121c6:	4b12      	ldr	r3, [pc, #72]	; (8012210 <_tx_byte_pool_cleanup+0xf4>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	3301      	adds	r3, #1
 80121cc:	4a10      	ldr	r2, [pc, #64]	; (8012210 <_tx_byte_pool_cleanup+0xf4>)
 80121ce:	6013      	str	r3, [r2, #0]
 80121d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	f383 8810 	msr	PRIMASK, r3
}
 80121da:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f001 fd9f 	bl	8013d20 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121e2:	f3ef 8310 	mrs	r3, PRIMASK
 80121e6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80121e8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80121ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80121ec:	b672      	cpsid	i
    return(int_posture);
 80121ee:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80121f0:	637b      	str	r3, [r7, #52]	; 0x34
 80121f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	f383 8810 	msr	PRIMASK, r3
}
 80121fc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80121fe:	bf00      	nop
 8012200:	3738      	adds	r7, #56	; 0x38
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
 8012206:	bf00      	nop
 8012208:	0801211d 	.word	0x0801211d
 801220c:	42595445 	.word	0x42595445
 8012210:	240036a4 	.word	0x240036a4

08012214 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b08e      	sub	sp, #56	; 0x38
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	607a      	str	r2, [r7, #4]
 8012220:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8012222:	2234      	movs	r2, #52	; 0x34
 8012224:	2100      	movs	r1, #0
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f002 fe12 	bl	8014e50 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	f023 0303 	bic.w	r3, r3, #3
 8012232:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	68ba      	ldr	r2, [r7, #8]
 8012238:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	683a      	ldr	r2, [r7, #0]
 8012244:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	f1a3 0208 	sub.w	r2, r3, #8
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2202      	movs	r2, #2
 8012260:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8012266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	4413      	add	r3, r2
 801226c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012270:	3b04      	subs	r3, #4
 8012272:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012280:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8012282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012284:	3b04      	subs	r3, #4
 8012286:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8012296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012298:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801229e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80122a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a6:	3304      	adds	r3, #4
 80122a8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80122aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ac:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	4a1f      	ldr	r2, [pc, #124]	; (8012330 <_tx_byte_pool_create+0x11c>)
 80122b2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2200      	movs	r2, #0
 80122b8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122ba:	f3ef 8310 	mrs	r3, PRIMASK
 80122be:	61bb      	str	r3, [r7, #24]
    return(posture);
 80122c0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80122c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80122c4:	b672      	cpsid	i
    return(int_posture);
 80122c6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80122c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	4a19      	ldr	r2, [pc, #100]	; (8012334 <_tx_byte_pool_create+0x120>)
 80122ce:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80122d0:	4b19      	ldr	r3, [pc, #100]	; (8012338 <_tx_byte_pool_create+0x124>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d109      	bne.n	80122ec <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80122d8:	4a18      	ldr	r2, [pc, #96]	; (801233c <_tx_byte_pool_create+0x128>)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	68fa      	ldr	r2, [r7, #12]
 80122e2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	68fa      	ldr	r2, [r7, #12]
 80122e8:	631a      	str	r2, [r3, #48]	; 0x30
 80122ea:	e011      	b.n	8012310 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80122ec:	4b13      	ldr	r3, [pc, #76]	; (801233c <_tx_byte_pool_create+0x128>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80122f2:	6a3b      	ldr	r3, [r7, #32]
 80122f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122f6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80122f8:	6a3b      	ldr	r3, [r7, #32]
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	69fa      	ldr	r2, [r7, #28]
 8012308:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	6a3a      	ldr	r2, [r7, #32]
 801230e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8012310:	4b09      	ldr	r3, [pc, #36]	; (8012338 <_tx_byte_pool_create+0x124>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	4a08      	ldr	r2, [pc, #32]	; (8012338 <_tx_byte_pool_create+0x124>)
 8012318:	6013      	str	r3, [r2, #0]
 801231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	f383 8810 	msr	PRIMASK, r3
}
 8012324:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012326:	2300      	movs	r3, #0
}
 8012328:	4618      	mov	r0, r3
 801232a:	3738      	adds	r7, #56	; 0x38
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	ffffeeee 	.word	0xffffeeee
 8012334:	42595445 	.word	0x42595445
 8012338:	24003600 	.word	0x24003600
 801233c:	240035fc 	.word	0x240035fc

08012340 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8012340:	b480      	push	{r7}
 8012342:	b097      	sub	sp, #92	; 0x5c
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801234a:	2300      	movs	r3, #0
 801234c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801234e:	f3ef 8310 	mrs	r3, PRIMASK
 8012352:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012356:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012358:	b672      	cpsid	i
    return(int_posture);
 801235a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 801235c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	689a      	ldr	r2, [r3, #8]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	3b02      	subs	r3, #2
 8012368:	00db      	lsls	r3, r3, #3
 801236a:	4413      	add	r3, r2
 801236c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801236e:	683a      	ldr	r2, [r7, #0]
 8012370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012372:	429a      	cmp	r2, r3
 8012374:	d308      	bcc.n	8012388 <_tx_byte_pool_search+0x48>
 8012376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012378:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	f383 8810 	msr	PRIMASK, r3
}
 8012380:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8012382:	2300      	movs	r3, #0
 8012384:	653b      	str	r3, [r7, #80]	; 0x50
 8012386:	e0dd      	b.n	8012544 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012388:	4b72      	ldr	r3, [pc, #456]	; (8012554 <_tx_byte_pool_search+0x214>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012392:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	695b      	ldr	r3, [r3, #20]
 8012398:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	3301      	adds	r3, #1
 80123a0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80123a2:	2300      	movs	r3, #0
 80123a4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80123a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a8:	3304      	adds	r3, #4
 80123aa:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80123ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ae:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80123b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	4a68      	ldr	r2, [pc, #416]	; (8012558 <_tx_byte_pool_search+0x218>)
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d143      	bne.n	8012442 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80123ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d104      	bne.n	80123ca <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80123c4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80123c6:	2301      	movs	r3, #1
 80123c8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80123ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123cc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80123d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80123dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123de:	3b08      	subs	r3, #8
 80123e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80123e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d257      	bcs.n	801249a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80123ea:	2300      	movs	r3, #0
 80123ec:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80123ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f0:	3304      	adds	r3, #4
 80123f2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80123f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80123f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	4a56      	ldr	r2, [pc, #344]	; (8012558 <_tx_byte_pool_search+0x218>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d113      	bne.n	801242a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012404:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	1e5a      	subs	r2, r3, #1
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	695b      	ldr	r3, [r3, #20]
 801241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801241e:	429a      	cmp	r2, r3
 8012420:	d114      	bne.n	801244c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012426:	615a      	str	r2, [r3, #20]
 8012428:	e010      	b.n	801244c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8012434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012436:	2b00      	cmp	r3, #0
 8012438:	d008      	beq.n	801244c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801243a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801243c:	3b01      	subs	r3, #1
 801243e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012440:	e004      	b.n	801244c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012444:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 801244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801244e:	2b00      	cmp	r3, #0
 8012450:	d002      	beq.n	8012458 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8012452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012454:	3b01      	subs	r3, #1
 8012456:	64bb      	str	r3, [r7, #72]	; 0x48
 8012458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801245a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	f383 8810 	msr	PRIMASK, r3
}
 8012462:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012464:	f3ef 8310 	mrs	r3, PRIMASK
 8012468:	61bb      	str	r3, [r7, #24]
    return(posture);
 801246a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801246c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801246e:	b672      	cpsid	i
    return(int_posture);
 8012470:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8012472:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6a1b      	ldr	r3, [r3, #32]
 8012478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801247a:	429a      	cmp	r2, r3
 801247c:	d009      	beq.n	8012492 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	695b      	ldr	r3, [r3, #20]
 8012482:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	3301      	adds	r3, #1
 801248a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012490:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8012492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012494:	2b00      	cmp	r3, #0
 8012496:	d186      	bne.n	80123a6 <_tx_byte_pool_search+0x66>
 8012498:	e000      	b.n	801249c <_tx_byte_pool_search+0x15c>
                    break;
 801249a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d048      	beq.n	8012534 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80124a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	2b13      	cmp	r3, #19
 80124aa:	d91e      	bls.n	80124ea <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	3308      	adds	r3, #8
 80124b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80124b2:	4413      	add	r3, r2
 80124b4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80124b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80124ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124bc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80124be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	3304      	adds	r3, #4
 80124ca:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80124cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ce:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80124d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124d2:	4a21      	ldr	r2, [pc, #132]	; (8012558 <_tx_byte_pool_search+0x218>)
 80124d4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	1c5a      	adds	r2, r3, #1
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80124e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124e4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80124ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ec:	3304      	adds	r3, #4
 80124ee:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80124f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	689a      	ldr	r2, [r3, #8]
 80124fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	f1a3 0208 	sub.w	r2, r3, #8
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	695b      	ldr	r3, [r3, #20]
 801250e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012510:	429a      	cmp	r2, r3
 8012512:	d105      	bne.n	8012520 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012516:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8012518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	615a      	str	r2, [r3, #20]
 8012520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012522:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f383 8810 	msr	PRIMASK, r3
}
 801252a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801252c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801252e:	3308      	adds	r3, #8
 8012530:	653b      	str	r3, [r7, #80]	; 0x50
 8012532:	e007      	b.n	8012544 <_tx_byte_pool_search+0x204>
 8012534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012536:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	f383 8810 	msr	PRIMASK, r3
}
 801253e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8012540:	2300      	movs	r3, #0
 8012542:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8012544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012546:	4618      	mov	r0, r3
 8012548:	375c      	adds	r7, #92	; 0x5c
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	2400360c 	.word	0x2400360c
 8012558:	ffffeeee 	.word	0xffffeeee

0801255c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8012560:	f001 fa28 	bl	80139b4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8012564:	f001 ff26 	bl	80143b4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8012568:	4b12      	ldr	r3, [pc, #72]	; (80125b4 <_tx_initialize_high_level+0x58>)
 801256a:	2200      	movs	r2, #0
 801256c:	601a      	str	r2, [r3, #0]
 801256e:	4b12      	ldr	r3, [pc, #72]	; (80125b8 <_tx_initialize_high_level+0x5c>)
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8012574:	4b11      	ldr	r3, [pc, #68]	; (80125bc <_tx_initialize_high_level+0x60>)
 8012576:	2200      	movs	r2, #0
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	4b11      	ldr	r3, [pc, #68]	; (80125c0 <_tx_initialize_high_level+0x64>)
 801257c:	2200      	movs	r2, #0
 801257e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8012580:	4b10      	ldr	r3, [pc, #64]	; (80125c4 <_tx_initialize_high_level+0x68>)
 8012582:	2200      	movs	r2, #0
 8012584:	601a      	str	r2, [r3, #0]
 8012586:	4b10      	ldr	r3, [pc, #64]	; (80125c8 <_tx_initialize_high_level+0x6c>)
 8012588:	2200      	movs	r2, #0
 801258a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801258c:	4b0f      	ldr	r3, [pc, #60]	; (80125cc <_tx_initialize_high_level+0x70>)
 801258e:	2200      	movs	r2, #0
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	4b0f      	ldr	r3, [pc, #60]	; (80125d0 <_tx_initialize_high_level+0x74>)
 8012594:	2200      	movs	r2, #0
 8012596:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8012598:	4b0e      	ldr	r3, [pc, #56]	; (80125d4 <_tx_initialize_high_level+0x78>)
 801259a:	2200      	movs	r2, #0
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	4b0e      	ldr	r3, [pc, #56]	; (80125d8 <_tx_initialize_high_level+0x7c>)
 80125a0:	2200      	movs	r2, #0
 80125a2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80125a4:	4b0d      	ldr	r3, [pc, #52]	; (80125dc <_tx_initialize_high_level+0x80>)
 80125a6:	2200      	movs	r2, #0
 80125a8:	601a      	str	r2, [r3, #0]
 80125aa:	4b0d      	ldr	r3, [pc, #52]	; (80125e0 <_tx_initialize_high_level+0x84>)
 80125ac:	2200      	movs	r2, #0
 80125ae:	601a      	str	r2, [r3, #0]
#endif
}
 80125b0:	bf00      	nop
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	240035d4 	.word	0x240035d4
 80125b8:	240035d8 	.word	0x240035d8
 80125bc:	240035dc 	.word	0x240035dc
 80125c0:	240035e0 	.word	0x240035e0
 80125c4:	240035e4 	.word	0x240035e4
 80125c8:	240035e8 	.word	0x240035e8
 80125cc:	240035f4 	.word	0x240035f4
 80125d0:	240035f8 	.word	0x240035f8
 80125d4:	240035fc 	.word	0x240035fc
 80125d8:	24003600 	.word	0x24003600
 80125dc:	240035ec 	.word	0x240035ec
 80125e0:	240035f0 	.word	0x240035f0

080125e4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80125e8:	4b10      	ldr	r3, [pc, #64]	; (801262c <_tx_initialize_kernel_enter+0x48>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80125f0:	d00c      	beq.n	801260c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80125f2:	4b0e      	ldr	r3, [pc, #56]	; (801262c <_tx_initialize_kernel_enter+0x48>)
 80125f4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80125f8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80125fa:	f7ed fe71 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80125fe:	f7ff ffad 	bl	801255c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8012602:	4b0b      	ldr	r3, [pc, #44]	; (8012630 <_tx_initialize_kernel_enter+0x4c>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	3301      	adds	r3, #1
 8012608:	4a09      	ldr	r2, [pc, #36]	; (8012630 <_tx_initialize_kernel_enter+0x4c>)
 801260a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801260c:	4b07      	ldr	r3, [pc, #28]	; (801262c <_tx_initialize_kernel_enter+0x48>)
 801260e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8012612:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8012614:	4b07      	ldr	r3, [pc, #28]	; (8012634 <_tx_initialize_kernel_enter+0x50>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4618      	mov	r0, r3
 801261a:	f7ee f8fb 	bl	8000814 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801261e:	4b03      	ldr	r3, [pc, #12]	; (801262c <_tx_initialize_kernel_enter+0x48>)
 8012620:	2200      	movs	r2, #0
 8012622:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8012624:	f7ed fe9c 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8012628:	bf00      	nop
 801262a:	bd80      	pop	{r7, pc}
 801262c:	2400006c 	.word	0x2400006c
 8012630:	240036a4 	.word	0x240036a4
 8012634:	24003604 	.word	0x24003604

08012638 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b08e      	sub	sp, #56	; 0x38
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012642:	f3ef 8310 	mrs	r3, PRIMASK
 8012646:	623b      	str	r3, [r7, #32]
    return(posture);
 8012648:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801264a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801264c:	b672      	cpsid	i
    return(int_posture);
 801264e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8012650:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012656:	4a33      	ldr	r2, [pc, #204]	; (8012724 <_tx_mutex_cleanup+0xec>)
 8012658:	4293      	cmp	r3, r2
 801265a:	d158      	bne.n	801270e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012662:	683a      	ldr	r2, [r7, #0]
 8012664:	429a      	cmp	r2, r3
 8012666:	d152      	bne.n	801270e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801266c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 801266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012670:	2b00      	cmp	r3, #0
 8012672:	d04c      	beq.n	801270e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4a2b      	ldr	r2, [pc, #172]	; (8012728 <_tx_mutex_cleanup+0xf0>)
 801267a:	4293      	cmp	r3, r2
 801267c:	d147      	bne.n	801270e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012680:	69db      	ldr	r3, [r3, #28]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d043      	beq.n	801270e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2200      	movs	r2, #0
 801268a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268e:	69db      	ldr	r3, [r3, #28]
 8012690:	1e5a      	subs	r2, r3, #1
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012698:	69db      	ldr	r3, [r3, #28]
 801269a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d103      	bne.n	80126aa <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80126a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a4:	2200      	movs	r2, #0
 80126a6:	619a      	str	r2, [r3, #24]
 80126a8:	e013      	b.n	80126d2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ae:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126b4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80126b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ba:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80126bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126c0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	699b      	ldr	r3, [r3, #24]
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d102      	bne.n	80126d2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80126cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126d0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d6:	2b0d      	cmp	r3, #13
 80126d8:	d119      	bne.n	801270e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	221d      	movs	r2, #29
 80126de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80126e2:	4b12      	ldr	r3, [pc, #72]	; (801272c <_tx_mutex_cleanup+0xf4>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	3301      	adds	r3, #1
 80126e8:	4a10      	ldr	r2, [pc, #64]	; (801272c <_tx_mutex_cleanup+0xf4>)
 80126ea:	6013      	str	r3, [r2, #0]
 80126ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	f383 8810 	msr	PRIMASK, r3
}
 80126f6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f001 fb11 	bl	8013d20 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80126fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012702:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012704:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012706:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012708:	b672      	cpsid	i
    return(int_posture);
 801270a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801270c:	637b      	str	r3, [r7, #52]	; 0x34
 801270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012710:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f383 8810 	msr	PRIMASK, r3
}
 8012718:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801271a:	bf00      	nop
 801271c:	3738      	adds	r7, #56	; 0x38
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	08012639 	.word	0x08012639
 8012728:	4d555445 	.word	0x4d555445
 801272c:	240036a4 	.word	0x240036a4

08012730 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08a      	sub	sp, #40	; 0x28
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012738:	f3ef 8310 	mrs	r3, PRIMASK
 801273c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801273e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012740:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012742:	b672      	cpsid	i
    return(int_posture);
 8012744:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8012746:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012748:	4b1a      	ldr	r3, [pc, #104]	; (80127b4 <_tx_mutex_thread_release+0x84>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	3301      	adds	r3, #1
 801274e:	4a19      	ldr	r2, [pc, #100]	; (80127b4 <_tx_mutex_thread_release+0x84>)
 8012750:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012758:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801275a:	6a3b      	ldr	r3, [r7, #32]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d017      	beq.n	8012790 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8012760:	6a3b      	ldr	r3, [r7, #32]
 8012762:	2201      	movs	r2, #1
 8012764:	609a      	str	r2, [r3, #8]
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f383 8810 	msr	PRIMASK, r3
}
 8012770:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8012772:	6a38      	ldr	r0, [r7, #32]
 8012774:	f000 fb9c 	bl	8012eb0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012778:	f3ef 8310 	mrs	r3, PRIMASK
 801277c:	617b      	str	r3, [r7, #20]
    return(posture);
 801277e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012780:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012782:	b672      	cpsid	i
    return(int_posture);
 8012784:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8012786:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801278e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8012790:	6a3b      	ldr	r3, [r7, #32]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d1dd      	bne.n	8012752 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8012796:	4b07      	ldr	r3, [pc, #28]	; (80127b4 <_tx_mutex_thread_release+0x84>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	3b01      	subs	r3, #1
 801279c:	4a05      	ldr	r2, [pc, #20]	; (80127b4 <_tx_mutex_thread_release+0x84>)
 801279e:	6013      	str	r3, [r2, #0]
 80127a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	f383 8810 	msr	PRIMASK, r3
}
 80127aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80127ac:	bf00      	nop
 80127ae:	3728      	adds	r7, #40	; 0x28
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	240036a4 	.word	0x240036a4

080127b8 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b08a      	sub	sp, #40	; 0x28
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80127c4:	2234      	movs	r2, #52	; 0x34
 80127c6:	2100      	movs	r1, #0
 80127c8:	68f8      	ldr	r0, [r7, #12]
 80127ca:	f002 fb41 	bl	8014e50 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127da:	f3ef 8310 	mrs	r3, PRIMASK
 80127de:	61bb      	str	r3, [r7, #24]
    return(posture);
 80127e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80127e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127e4:	b672      	cpsid	i
    return(int_posture);
 80127e6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80127e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	4a1a      	ldr	r2, [pc, #104]	; (8012858 <_tx_mutex_create+0xa0>)
 80127ee:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80127f0:	4b1a      	ldr	r3, [pc, #104]	; (801285c <_tx_mutex_create+0xa4>)
 80127f2:	4a1b      	ldr	r2, [pc, #108]	; (8012860 <_tx_mutex_create+0xa8>)
 80127f4:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80127f6:	4b1b      	ldr	r3, [pc, #108]	; (8012864 <_tx_mutex_create+0xac>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d109      	bne.n	8012812 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80127fe:	4a1a      	ldr	r2, [pc, #104]	; (8012868 <_tx_mutex_create+0xb0>)
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	68fa      	ldr	r2, [r7, #12]
 8012808:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	625a      	str	r2, [r3, #36]	; 0x24
 8012810:	e011      	b.n	8012836 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8012812:	4b15      	ldr	r3, [pc, #84]	; (8012868 <_tx_mutex_create+0xb0>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8012818:	6a3b      	ldr	r3, [r7, #32]
 801281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801281e:	6a3b      	ldr	r3, [r7, #32]
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	69fa      	ldr	r2, [r7, #28]
 801282e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	6a3a      	ldr	r2, [r7, #32]
 8012834:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8012836:	4b0b      	ldr	r3, [pc, #44]	; (8012864 <_tx_mutex_create+0xac>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	3301      	adds	r3, #1
 801283c:	4a09      	ldr	r2, [pc, #36]	; (8012864 <_tx_mutex_create+0xac>)
 801283e:	6013      	str	r3, [r2, #0]
 8012840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012842:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	f383 8810 	msr	PRIMASK, r3
}
 801284a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801284c:	2300      	movs	r3, #0
}
 801284e:	4618      	mov	r0, r3
 8012850:	3728      	adds	r7, #40	; 0x28
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	4d555445 	.word	0x4d555445
 801285c:	240036a8 	.word	0x240036a8
 8012860:	08012731 	.word	0x08012731
 8012864:	240035f0 	.word	0x240035f0
 8012868:	240035ec 	.word	0x240035ec

0801286c <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b096      	sub	sp, #88	; 0x58
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012874:	f3ef 8310 	mrs	r3, PRIMASK
 8012878:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801287c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801287e:	b672      	cpsid	i
    return(int_posture);
 8012880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8012882:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 801288a:	4b4a      	ldr	r3, [pc, #296]	; (80129b4 <_tx_mutex_delete+0x148>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	3b01      	subs	r3, #1
 8012890:	4a48      	ldr	r2, [pc, #288]	; (80129b4 <_tx_mutex_delete+0x148>)
 8012892:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8012894:	4b47      	ldr	r3, [pc, #284]	; (80129b4 <_tx_mutex_delete+0x148>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d103      	bne.n	80128a4 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 801289c:	4b46      	ldr	r3, [pc, #280]	; (80129b8 <_tx_mutex_delete+0x14c>)
 801289e:	2200      	movs	r2, #0
 80128a0:	601a      	str	r2, [r3, #0]
 80128a2:	e013      	b.n	80128cc <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6a1b      	ldr	r3, [r3, #32]
 80128a8:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ae:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 80128b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128b4:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80128b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80128ba:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 80128bc:	4b3e      	ldr	r3, [pc, #248]	; (80129b8 <_tx_mutex_delete+0x14c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d102      	bne.n	80128cc <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 80128c6:	4a3c      	ldr	r2, [pc, #240]	; (80129b8 <_tx_mutex_delete+0x14c>)
 80128c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128ca:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80128cc:	4b3b      	ldr	r3, [pc, #236]	; (80129bc <_tx_mutex_delete+0x150>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	3301      	adds	r3, #1
 80128d2:	4a3a      	ldr	r2, [pc, #232]	; (80129bc <_tx_mutex_delete+0x150>)
 80128d4:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	699b      	ldr	r3, [r3, #24]
 80128da:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2200      	movs	r2, #0
 80128e0:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	69db      	ldr	r3, [r3, #28]
 80128e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80128f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d013      	beq.n	8012922 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2201      	movs	r2, #1
 80128fe:	609a      	str	r2, [r3, #8]
 8012900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012902:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012906:	f383 8810 	msr	PRIMASK, r3
}
 801290a:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 facf 	bl	8012eb0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012912:	f3ef 8310 	mrs	r3, PRIMASK
 8012916:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8012918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 801291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 801291c:	b672      	cpsid	i
    return(int_posture);
 801291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8012920:	657b      	str	r3, [r7, #84]	; 0x54
 8012922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012924:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012928:	f383 8810 	msr	PRIMASK, r3
}
 801292c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 801292e:	e024      	b.n	801297a <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8012930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012932:	3b01      	subs	r3, #1
 8012934:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012936:	f3ef 8310 	mrs	r3, PRIMASK
 801293a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801293c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801293e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012940:	b672      	cpsid	i
    return(int_posture);
 8012942:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8012944:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012948:	2200      	movs	r2, #0
 801294a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801294c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801294e:	2201      	movs	r2, #1
 8012950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8012954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012958:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801295a:	4b18      	ldr	r3, [pc, #96]	; (80129bc <_tx_mutex_delete+0x150>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	3301      	adds	r3, #1
 8012960:	4a16      	ldr	r2, [pc, #88]	; (80129bc <_tx_mutex_delete+0x150>)
 8012962:	6013      	str	r3, [r2, #0]
 8012964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012966:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012968:	6a3b      	ldr	r3, [r7, #32]
 801296a:	f383 8810 	msr	PRIMASK, r3
}
 801296e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012970:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012972:	f001 f9d5 	bl	8013d20 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8012976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012978:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 801297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801297c:	2b00      	cmp	r3, #0
 801297e:	d1d7      	bne.n	8012930 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012980:	f3ef 8310 	mrs	r3, PRIMASK
 8012984:	613b      	str	r3, [r7, #16]
    return(posture);
 8012986:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8012988:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801298a:	b672      	cpsid	i
    return(int_posture);
 801298c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801298e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8012990:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <_tx_mutex_delete+0x150>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	3b01      	subs	r3, #1
 8012996:	4a09      	ldr	r2, [pc, #36]	; (80129bc <_tx_mutex_delete+0x150>)
 8012998:	6013      	str	r3, [r2, #0]
 801299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801299c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	f383 8810 	msr	PRIMASK, r3
}
 80129a4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80129a6:	f001 f981 	bl	8013cac <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80129aa:	2300      	movs	r3, #0
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3758      	adds	r7, #88	; 0x58
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	240035f0 	.word	0x240035f0
 80129b8:	240035ec 	.word	0x240035ec
 80129bc:	240036a4 	.word	0x240036a4

080129c0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b092      	sub	sp, #72	; 0x48
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80129ca:	f3ef 8310 	mrs	r3, PRIMASK
 80129ce:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80129d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80129d4:	b672      	cpsid	i
    return(int_posture);
 80129d6:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80129d8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80129da:	4b7a      	ldr	r3, [pc, #488]	; (8012bc4 <_tx_mutex_get+0x204>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d144      	bne.n	8012a72 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2201      	movs	r2, #1
 80129ec:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129f2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80129f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d032      	beq.n	8012a60 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d106      	bne.n	8012a10 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8012a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2220      	movs	r2, #32
 8012a0e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012a16:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00f      	beq.n	8012a3e <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8012a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a22:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8012a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a26:	687a      	ldr	r2, [r7, #4]
 8012a28:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a34:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8012a3c:	e009      	b.n	8012a52 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8012a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012a58:	1c5a      	adds	r2, r3, #1
 8012a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8012a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	f383 8810 	msr	PRIMASK, r3
}
 8012a6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8012a70:	e0a2      	b.n	8012bb8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d10d      	bne.n	8012a98 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	1c5a      	adds	r2, r3, #1
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	609a      	str	r2, [r3, #8]
 8012a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a88:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	f383 8810 	msr	PRIMASK, r3
}
 8012a90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8012a92:	2300      	movs	r3, #0
 8012a94:	647b      	str	r3, [r7, #68]	; 0x44
 8012a96:	e08f      	b.n	8012bb8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f000 8084 	beq.w	8012ba8 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012aa0:	4b49      	ldr	r3, [pc, #292]	; (8012bc8 <_tx_mutex_get+0x208>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d008      	beq.n	8012aba <_tx_mutex_get+0xfa>
 8012aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aaa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	f383 8810 	msr	PRIMASK, r3
}
 8012ab2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8012ab4:	231d      	movs	r3, #29
 8012ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8012ab8:	e07e      	b.n	8012bb8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	68db      	ldr	r3, [r3, #12]
 8012abe:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8012ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ac2:	4a42      	ldr	r2, [pc, #264]	; (8012bcc <_tx_mutex_get+0x20c>)
 8012ac4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8012ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ad2:	1c5a      	adds	r2, r3, #1
 8012ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	69db      	ldr	r3, [r3, #28]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d109      	bne.n	8012af6 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ae6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aec:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012af2:	675a      	str	r2, [r3, #116]	; 0x74
 8012af4:	e011      	b.n	8012b1a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	699b      	ldr	r3, [r3, #24]
 8012afa:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b00:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b06:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b0c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b12:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b18:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	69db      	ldr	r3, [r3, #28]
 8012b1e:	1c5a      	adds	r2, r3, #1
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8012b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b26:	220d      	movs	r2, #13
 8012b28:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b32:	683a      	ldr	r2, [r7, #0]
 8012b34:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012b36:	4b24      	ldr	r3, [pc, #144]	; (8012bc8 <_tx_mutex_get+0x208>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	4a22      	ldr	r2, [pc, #136]	; (8012bc8 <_tx_mutex_get+0x208>)
 8012b3e:	6013      	str	r3, [r2, #0]
 8012b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b42:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	f383 8810 	msr	PRIMASK, r3
}
 8012b4a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d121      	bne.n	8012b98 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d903      	bls.n	8012b68 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8012b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8012b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d204      	bcs.n	8012b80 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8012b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8012b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d905      	bls.n	8012b98 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8012b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b90:	4619      	mov	r1, r3
 8012b92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b94:	f000 f8ce 	bl	8012d34 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012b98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b9a:	f001 f9c1 	bl	8013f20 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8012ba6:	e007      	b.n	8012bb8 <_tx_mutex_get+0x1f8>
 8012ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012baa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f383 8810 	msr	PRIMASK, r3
}
 8012bb2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8012bb4:	231d      	movs	r3, #29
 8012bb6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8012bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3748      	adds	r7, #72	; 0x48
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	2400360c 	.word	0x2400360c
 8012bc8:	240036a4 	.word	0x240036a4
 8012bcc:	08012639 	.word	0x08012639

08012bd0 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b092      	sub	sp, #72	; 0x48
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8012bdc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012be0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012be2:	b672      	cpsid	i
    return(int_posture);
 8012be4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8012be6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	69db      	ldr	r3, [r3, #28]
 8012bec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8012bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d805      	bhi.n	8012c00 <_tx_mutex_prioritize+0x30>
 8012bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	f383 8810 	msr	PRIMASK, r3
}
 8012bfe:	e092      	b.n	8012d26 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8012c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c02:	2b02      	cmp	r3, #2
 8012c04:	d114      	bne.n	8012c30 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	699b      	ldr	r3, [r3, #24]
 8012c0a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c10:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8012c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d202      	bcs.n	8012c24 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c22:	619a      	str	r2, [r3, #24]
 8012c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	f383 8810 	msr	PRIMASK, r3
}
 8012c2e:	e07a      	b.n	8012d26 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	699b      	ldr	r3, [r3, #24]
 8012c34:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8012c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c38:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8012c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c3e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8012c40:	4b3b      	ldr	r3, [pc, #236]	; (8012d30 <_tx_mutex_prioritize+0x160>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	3301      	adds	r3, #1
 8012c46:	4a3a      	ldr	r2, [pc, #232]	; (8012d30 <_tx_mutex_prioritize+0x160>)
 8012c48:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8012c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d201      	bcs.n	8012c5e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8012c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c60:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f383 8810 	msr	PRIMASK, r3
}
 8012c68:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8012c6e:	617b      	str	r3, [r7, #20]
    return(posture);
 8012c70:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012c72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c74:	b672      	cpsid	i
    return(int_posture);
 8012c76:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012c78:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	699b      	ldr	r3, [r3, #24]
 8012c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d002      	beq.n	8012c8a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8012c84:	2301      	movs	r3, #1
 8012c86:	633b      	str	r3, [r7, #48]	; 0x30
 8012c88:	e006      	b.n	8012c98 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	69db      	ldr	r3, [r3, #28]
 8012c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d001      	beq.n	8012c98 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8012c94:	2301      	movs	r3, #1
 8012c96:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8012c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d103      	bne.n	8012ca6 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8012ca4:	e00c      	b.n	8012cc0 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	699b      	ldr	r3, [r3, #24]
 8012caa:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	69db      	ldr	r3, [r3, #28]
 8012cb0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8012cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8012cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cba:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8012cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d1c2      	bne.n	8012c4e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8012cc8:	4b19      	ldr	r3, [pc, #100]	; (8012d30 <_tx_mutex_prioritize+0x160>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	3b01      	subs	r3, #1
 8012cce:	4a18      	ldr	r2, [pc, #96]	; (8012d30 <_tx_mutex_prioritize+0x160>)
 8012cd0:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8012cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d01d      	beq.n	8012d16 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8012cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cde:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8012ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ce4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cea:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8012cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cf0:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8012cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cf6:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8012cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cfc:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8012cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d02:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8012d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d08:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d0e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d14:	619a      	str	r2, [r3, #24]
 8012d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d18:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	f383 8810 	msr	PRIMASK, r3
}
 8012d20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012d22:	f000 ffc3 	bl	8013cac <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8012d26:	2300      	movs	r3, #0
#endif
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3748      	adds	r7, #72	; 0x48
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	240036a4 	.word	0x240036a4

08012d34 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b090      	sub	sp, #64	; 0x40
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8012d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012d46:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d48:	b672      	cpsid	i
    return(int_posture);
 8012d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d017      	beq.n	8012d86 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012d62:	683a      	ldr	r2, [r7, #0]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d905      	bls.n	8012d74 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	63da      	str	r2, [r3, #60]	; 0x3c
 8012d72:	e002      	b.n	8012d7a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	63da      	str	r2, [r3, #60]	; 0x3c
 8012d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d7c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d80:	f383 8810 	msr	PRIMASK, r3
}
 8012d84:	e089      	b.n	8012e9a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8012d86:	4b47      	ldr	r3, [pc, #284]	; (8012ea4 <_tx_mutex_priority_change+0x170>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d90:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8012d92:	4b45      	ldr	r3, [pc, #276]	; (8012ea8 <_tx_mutex_priority_change+0x174>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	3302      	adds	r3, #2
 8012d98:	4a43      	ldr	r2, [pc, #268]	; (8012ea8 <_tx_mutex_priority_change+0x174>)
 8012d9a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	220e      	movs	r2, #14
 8012da0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2201      	movs	r2, #1
 8012da6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	64da      	str	r2, [r3, #76]	; 0x4c
 8012dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012db0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	f383 8810 	msr	PRIMASK, r3
}
 8012db8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f001 f8b0 	bl	8013f20 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8012dc4:	623b      	str	r3, [r7, #32]
    return(posture);
 8012dc6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012dc8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012dca:	b672      	cpsid	i
    return(int_posture);
 8012dcc:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8012dce:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	683a      	ldr	r2, [r7, #0]
 8012dd4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d905      	bls.n	8012dee <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	63da      	str	r2, [r3, #60]	; 0x3c
 8012dec:	e002      	b.n	8012df4 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	683a      	ldr	r2, [r7, #0]
 8012df2:	63da      	str	r2, [r3, #60]	; 0x3c
 8012df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f383 8810 	msr	PRIMASK, r3
}
 8012dfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 ff8d 	bl	8013d20 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e06:	f3ef 8310 	mrs	r3, PRIMASK
 8012e0a:	617b      	str	r3, [r7, #20]
    return(posture);
 8012e0c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012e0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e10:	b672      	cpsid	i
    return(int_posture);
 8012e12:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8012e14:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8012e16:	4b23      	ldr	r3, [pc, #140]	; (8012ea4 <_tx_mutex_priority_change+0x170>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d034      	beq.n	8012e8e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d130      	bne.n	8012e8e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d811      	bhi.n	8012e5c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d126      	bne.n	8012e8e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8012e40:	4a18      	ldr	r2, [pc, #96]	; (8012ea4 <_tx_mutex_priority_change+0x170>)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8012e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d21f      	bcs.n	8012e8e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e52:	4916      	ldr	r1, [pc, #88]	; (8012eac <_tx_mutex_priority_change+0x178>)
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012e5a:	e018      	b.n	8012e8e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d212      	bcs.n	8012e8e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d80c      	bhi.n	8012e8e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012e74:	4a0b      	ldr	r2, [pc, #44]	; (8012ea4 <_tx_mutex_priority_change+0x170>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8012e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d205      	bcs.n	8012e8e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e86:	4909      	ldr	r1, [pc, #36]	; (8012eac <_tx_mutex_priority_change+0x178>)
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	f383 8810 	msr	PRIMASK, r3
}
 8012e98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012e9a:	bf00      	nop
 8012e9c:	3740      	adds	r7, #64	; 0x40
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	24003610 	.word	0x24003610
 8012ea8:	240036a4 	.word	0x240036a4
 8012eac:	24003624 	.word	0x24003624

08012eb0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b0a6      	sub	sp, #152	; 0x98
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8012eb8:	2320      	movs	r3, #32
 8012eba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8012ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8012ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8012ec6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ec8:	b672      	cpsid	i
    return(int_posture);
 8012eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8012ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	689b      	ldr	r3, [r3, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	f000 81ff 	beq.w	80132d8 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012ee0:	4ba3      	ldr	r3, [pc, #652]	; (8013170 <_tx_mutex_put+0x2c0>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d00d      	beq.n	8012f0c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8012ef0:	4ba0      	ldr	r3, [pc, #640]	; (8013174 <_tx_mutex_put+0x2c4>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d109      	bne.n	8012f0c <_tx_mutex_put+0x5c>
 8012ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012efc:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f00:	f383 8810 	msr	PRIMASK, r3
}
 8012f04:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8012f06:	231e      	movs	r3, #30
 8012f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8012f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012f10:	2b20      	cmp	r3, #32
 8012f12:	f040 81eb 	bne.w	80132ec <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	1e5a      	subs	r2, r3, #1
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00a      	beq.n	8012f3e <_tx_mutex_put+0x8e>
 8012f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f2c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f30:	f383 8810 	msr	PRIMASK, r3
}
 8012f34:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8012f36:	2300      	movs	r3, #0
 8012f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012f3c:	e1d6      	b.n	80132ec <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8012f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d10a      	bne.n	8012f5a <_tx_mutex_put+0xaa>
 8012f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f48:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f4c:	f383 8810 	msr	PRIMASK, r3
}
 8012f50:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8012f52:	2300      	movs	r3, #0
 8012f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012f58:	e1c8      	b.n	80132ec <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8012f5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012f60:	1e5a      	subs	r2, r3, #1
 8012f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8012f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d104      	bne.n	8012f7c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8012f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f74:	2200      	movs	r2, #0
 8012f76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8012f7a:	e019      	b.n	8012fb0 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f88:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8012f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012f8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012f90:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8012f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012f98:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8012f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d104      	bne.n	8012fb0 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8012fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012fac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	699b      	ldr	r3, [r3, #24]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d110      	bne.n	8012fda <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	691b      	ldr	r3, [r3, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10c      	bne.n	8012fda <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	60da      	str	r2, [r3, #12]
 8012fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fca:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fce:	f383 8810 	msr	PRIMASK, r3
}
 8012fd2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8012fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fde:	2b20      	cmp	r3, #32
 8012fe0:	f040 8184 	bne.w	80132ec <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8012fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d155      	bne.n	80130a8 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012ffc:	4b5d      	ldr	r3, [pc, #372]	; (8013174 <_tx_mutex_put+0x2c4>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	3301      	adds	r3, #1
 8013002:	4a5c      	ldr	r2, [pc, #368]	; (8013174 <_tx_mutex_put+0x2c4>)
 8013004:	6013      	str	r3, [r2, #0]
 8013006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801300a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801300e:	f383 8810 	msr	PRIMASK, r3
}
 8013012:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013014:	2320      	movs	r3, #32
 8013016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801301a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801301c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8013024:	e01f      	b.n	8013066 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8013026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	2b01      	cmp	r3, #1
 801302e:	d10b      	bne.n	8013048 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8013030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013036:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801303a:	429a      	cmp	r2, r3
 801303c:	d904      	bls.n	8013048 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 801303e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8013048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801304e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8013052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013058:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801305c:	429a      	cmp	r2, r3
 801305e:	d102      	bne.n	8013066 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8013060:	2300      	movs	r3, #0
 8013062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8013066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801306a:	2b00      	cmp	r3, #0
 801306c:	d1db      	bne.n	8013026 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801306e:	f3ef 8310 	mrs	r3, PRIMASK
 8013072:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8013074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8013076:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013078:	b672      	cpsid	i
    return(int_posture);
 801307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 801307c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013080:	4b3c      	ldr	r3, [pc, #240]	; (8013174 <_tx_mutex_put+0x2c4>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	3b01      	subs	r3, #1
 8013086:	4a3b      	ldr	r2, [pc, #236]	; (8013174 <_tx_mutex_put+0x2c4>)
 8013088:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801308a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801308c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8013094:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801309c:	429a      	cmp	r2, r3
 801309e:	d203      	bcs.n	80130a8 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 80130a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80130a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	69db      	ldr	r3, [r3, #28]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d920      	bls.n	80130f2 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	691b      	ldr	r3, [r3, #16]
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d11c      	bne.n	80130f2 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80130b8:	4b2e      	ldr	r3, [pc, #184]	; (8013174 <_tx_mutex_put+0x2c4>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	3301      	adds	r3, #1
 80130be:	4a2d      	ldr	r2, [pc, #180]	; (8013174 <_tx_mutex_put+0x2c4>)
 80130c0:	6013      	str	r3, [r2, #0]
 80130c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80130c6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80130c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ca:	f383 8810 	msr	PRIMASK, r3
}
 80130ce:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7ff fd7d 	bl	8012bd0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130d6:	f3ef 8310 	mrs	r3, PRIMASK
 80130da:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80130de:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80130e0:	b672      	cpsid	i
    return(int_posture);
 80130e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80130e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80130e8:	4b22      	ldr	r3, [pc, #136]	; (8013174 <_tx_mutex_put+0x2c4>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	3b01      	subs	r3, #1
 80130ee:	4a21      	ldr	r2, [pc, #132]	; (8013174 <_tx_mutex_put+0x2c4>)
 80130f0:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	699b      	ldr	r3, [r3, #24]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d13e      	bne.n	8013178 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80130fa:	4b1e      	ldr	r3, [pc, #120]	; (8013174 <_tx_mutex_put+0x2c4>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	3301      	adds	r3, #1
 8013100:	4a1c      	ldr	r2, [pc, #112]	; (8013174 <_tx_mutex_put+0x2c4>)
 8013102:	6013      	str	r3, [r2, #0]
 8013104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013108:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310c:	f383 8810 	msr	PRIMASK, r3
}
 8013110:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2220      	movs	r2, #32
 8013116:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013122:	429a      	cmp	r2, r3
 8013124:	d006      	beq.n	8013134 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801312e:	4618      	mov	r0, r3
 8013130:	f7ff fe00 	bl	8012d34 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013134:	f3ef 8310 	mrs	r3, PRIMASK
 8013138:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801313c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801313e:	b672      	cpsid	i
    return(int_posture);
 8013140:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8013142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013146:	4b0b      	ldr	r3, [pc, #44]	; (8013174 <_tx_mutex_put+0x2c4>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	3b01      	subs	r3, #1
 801314c:	4a09      	ldr	r2, [pc, #36]	; (8013174 <_tx_mutex_put+0x2c4>)
 801314e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	60da      	str	r2, [r3, #12]
 8013156:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801315a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315e:	f383 8810 	msr	PRIMASK, r3
}
 8013162:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8013164:	f000 fda2 	bl	8013cac <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8013168:	2300      	movs	r3, #0
 801316a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801316e:	e0bd      	b.n	80132ec <_tx_mutex_put+0x43c>
 8013170:	2400360c 	.word	0x2400360c
 8013174:	240036a4 	.word	0x240036a4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	691b      	ldr	r3, [r3, #16]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d10a      	bne.n	801319c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801318e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2220      	movs	r2, #32
 801319a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 801319c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801319e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80131a2:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 80131a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d10a      	bne.n	80131c0 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80131aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	631a      	str	r2, [r3, #48]	; 0x30
 80131be:	e016      	b.n	80131ee <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80131c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80131c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80131c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80131ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80131ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d0:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80131d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80131d6:	687a      	ldr	r2, [r7, #4]
 80131d8:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80131da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131dc:	687a      	ldr	r2, [r7, #4]
 80131de:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80131e4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80131ec:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80131ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80131f0:	1c5a      	adds	r2, r3, #1
 80131f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80131f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013202:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	69db      	ldr	r3, [r3, #28]
 8013208:	1e5a      	subs	r2, r3, #1
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	69db      	ldr	r3, [r3, #28]
 8013212:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8013214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d103      	bne.n	8013222 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	619a      	str	r2, [r3, #24]
 8013220:	e00e      	b.n	8013240 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8013222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013226:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801322c:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801322e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013232:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013236:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013238:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801323a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801323c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801323e:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013242:	2200      	movs	r2, #0
 8013244:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013248:	2200      	movs	r2, #0
 801324a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801324e:	4b2a      	ldr	r3, [pc, #168]	; (80132f8 <_tx_mutex_put+0x448>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	3301      	adds	r3, #1
 8013254:	4a28      	ldr	r2, [pc, #160]	; (80132f8 <_tx_mutex_put+0x448>)
 8013256:	6013      	str	r3, [r2, #0]
 8013258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801325c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	f383 8810 	msr	PRIMASK, r3
}
 8013264:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	2b01      	cmp	r3, #1
 801326c:	d12d      	bne.n	80132ca <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	69db      	ldr	r3, [r3, #28]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d01c      	beq.n	80132b0 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f7ff fcaa 	bl	8012bd0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801327c:	f3ef 8310 	mrs	r3, PRIMASK
 8013280:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013282:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013284:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013286:	b672      	cpsid	i
    return(int_posture);
 8013288:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801328a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	699b      	ldr	r3, [r3, #24]
 8013292:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8013294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013296:	2b00      	cmp	r3, #0
 8013298:	d003      	beq.n	80132a2 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801329a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	629a      	str	r2, [r3, #40]	; 0x28
 80132a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80132a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	f383 8810 	msr	PRIMASK, r3
}
 80132ae:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80132b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d005      	beq.n	80132ca <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80132be:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80132c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80132c6:	f7ff fd35 	bl	8012d34 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80132ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80132cc:	f000 fd28 	bl	8013d20 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80132d0:	2300      	movs	r3, #0
 80132d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80132d6:	e009      	b.n	80132ec <_tx_mutex_put+0x43c>
 80132d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80132dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f383 8810 	msr	PRIMASK, r3
}
 80132e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80132e6:	231e      	movs	r3, #30
 80132e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 80132ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3798      	adds	r7, #152	; 0x98
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	240036a4 	.word	0x240036a4

080132fc <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b08e      	sub	sp, #56	; 0x38
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
 8013304:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013306:	f3ef 8310 	mrs	r3, PRIMASK
 801330a:	623b      	str	r3, [r7, #32]
    return(posture);
 801330c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801330e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013310:	b672      	cpsid	i
    return(int_posture);
 8013312:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8013314:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801331a:	4a33      	ldr	r2, [pc, #204]	; (80133e8 <_tx_semaphore_cleanup+0xec>)
 801331c:	4293      	cmp	r3, r2
 801331e:	d158      	bne.n	80133d2 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013326:	683a      	ldr	r2, [r7, #0]
 8013328:	429a      	cmp	r2, r3
 801332a:	d152      	bne.n	80133d2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013330:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	2b00      	cmp	r3, #0
 8013336:	d04c      	beq.n	80133d2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8013338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	4a2b      	ldr	r2, [pc, #172]	; (80133ec <_tx_semaphore_cleanup+0xf0>)
 801333e:	4293      	cmp	r3, r2
 8013340:	d147      	bne.n	80133d2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	691b      	ldr	r3, [r3, #16]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d043      	beq.n	80133d2 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2200      	movs	r2, #0
 801334e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	1e5a      	subs	r2, r3, #1
 8013356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013358:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335c:	691b      	ldr	r3, [r3, #16]
 801335e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	2b00      	cmp	r3, #0
 8013364:	d103      	bne.n	801336e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013368:	2200      	movs	r2, #0
 801336a:	60da      	str	r2, [r3, #12]
 801336c:	e013      	b.n	8013396 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013372:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013378:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801337e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013384:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8013386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	687a      	ldr	r2, [r7, #4]
 801338c:	429a      	cmp	r2, r3
 801338e:	d102      	bne.n	8013396 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013394:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801339a:	2b06      	cmp	r3, #6
 801339c:	d119      	bne.n	80133d2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	220d      	movs	r2, #13
 80133a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80133a6:	4b12      	ldr	r3, [pc, #72]	; (80133f0 <_tx_semaphore_cleanup+0xf4>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	3301      	adds	r3, #1
 80133ac:	4a10      	ldr	r2, [pc, #64]	; (80133f0 <_tx_semaphore_cleanup+0xf4>)
 80133ae:	6013      	str	r3, [r2, #0]
 80133b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	f383 8810 	msr	PRIMASK, r3
}
 80133ba:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f000 fcaf 	bl	8013d20 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133c2:	f3ef 8310 	mrs	r3, PRIMASK
 80133c6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80133c8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80133ca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133cc:	b672      	cpsid	i
    return(int_posture);
 80133ce:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80133d0:	637b      	str	r3, [r7, #52]	; 0x34
 80133d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f383 8810 	msr	PRIMASK, r3
}
 80133dc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80133de:	bf00      	nop
 80133e0:	3738      	adds	r7, #56	; 0x38
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	080132fd 	.word	0x080132fd
 80133ec:	53454d41 	.word	0x53454d41
 80133f0:	240036a4 	.word	0x240036a4

080133f4 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b08a      	sub	sp, #40	; 0x28
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	60f8      	str	r0, [r7, #12]
 80133fc:	60b9      	str	r1, [r7, #8]
 80133fe:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8013400:	221c      	movs	r2, #28
 8013402:	2100      	movs	r1, #0
 8013404:	68f8      	ldr	r0, [r7, #12]
 8013406:	f001 fd23 	bl	8014e50 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	68ba      	ldr	r2, [r7, #8]
 801340e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	687a      	ldr	r2, [r7, #4]
 8013414:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013416:	f3ef 8310 	mrs	r3, PRIMASK
 801341a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801341c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801341e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013420:	b672      	cpsid	i
    return(int_posture);
 8013422:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8013424:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	4a18      	ldr	r2, [pc, #96]	; (801348c <_tx_semaphore_create+0x98>)
 801342a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801342c:	4b18      	ldr	r3, [pc, #96]	; (8013490 <_tx_semaphore_create+0x9c>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d109      	bne.n	8013448 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8013434:	4a17      	ldr	r2, [pc, #92]	; (8013494 <_tx_semaphore_create+0xa0>)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	619a      	str	r2, [r3, #24]
 8013446:	e011      	b.n	801346c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8013448:	4b12      	ldr	r3, [pc, #72]	; (8013494 <_tx_semaphore_create+0xa0>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 801344e:	6a3b      	ldr	r3, [r7, #32]
 8013450:	699b      	ldr	r3, [r3, #24]
 8013452:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8013454:	6a3b      	ldr	r3, [r7, #32]
 8013456:	68fa      	ldr	r2, [r7, #12]
 8013458:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	68fa      	ldr	r2, [r7, #12]
 801345e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	69fa      	ldr	r2, [r7, #28]
 8013464:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	6a3a      	ldr	r2, [r7, #32]
 801346a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 801346c:	4b08      	ldr	r3, [pc, #32]	; (8013490 <_tx_semaphore_create+0x9c>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	3301      	adds	r3, #1
 8013472:	4a07      	ldr	r2, [pc, #28]	; (8013490 <_tx_semaphore_create+0x9c>)
 8013474:	6013      	str	r3, [r2, #0]
 8013476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013478:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	f383 8810 	msr	PRIMASK, r3
}
 8013480:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013482:	2300      	movs	r3, #0
}
 8013484:	4618      	mov	r0, r3
 8013486:	3728      	adds	r7, #40	; 0x28
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	53454d41 	.word	0x53454d41
 8013490:	240035d8 	.word	0x240035d8
 8013494:	240035d4 	.word	0x240035d4

08013498 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b092      	sub	sp, #72	; 0x48
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134a0:	f3ef 8310 	mrs	r3, PRIMASK
 80134a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80134a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80134a8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80134aa:	b672      	cpsid	i
    return(int_posture);
 80134ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80134ae:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2200      	movs	r2, #0
 80134b4:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80134b6:	4b3d      	ldr	r3, [pc, #244]	; (80135ac <_tx_semaphore_delete+0x114>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	3b01      	subs	r3, #1
 80134bc:	4a3b      	ldr	r2, [pc, #236]	; (80135ac <_tx_semaphore_delete+0x114>)
 80134be:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80134c0:	4b3a      	ldr	r3, [pc, #232]	; (80135ac <_tx_semaphore_delete+0x114>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d103      	bne.n	80134d0 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80134c8:	4b39      	ldr	r3, [pc, #228]	; (80135b0 <_tx_semaphore_delete+0x118>)
 80134ca:	2200      	movs	r2, #0
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	e013      	b.n	80134f8 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	695b      	ldr	r3, [r3, #20]
 80134d4:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	699b      	ldr	r3, [r3, #24]
 80134da:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80134dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134e0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80134e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134e6:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80134e8:	4b31      	ldr	r3, [pc, #196]	; (80135b0 <_tx_semaphore_delete+0x118>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d102      	bne.n	80134f8 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80134f2:	4a2f      	ldr	r2, [pc, #188]	; (80135b0 <_tx_semaphore_delete+0x118>)
 80134f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80134f8:	4b2e      	ldr	r3, [pc, #184]	; (80135b4 <_tx_semaphore_delete+0x11c>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	3301      	adds	r3, #1
 80134fe:	4a2d      	ldr	r2, [pc, #180]	; (80135b4 <_tx_semaphore_delete+0x11c>)
 8013500:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2200      	movs	r2, #0
 801350c:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	691b      	ldr	r3, [r3, #16]
 8013512:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2200      	movs	r2, #0
 8013518:	611a      	str	r2, [r3, #16]
 801351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801351c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013520:	f383 8810 	msr	PRIMASK, r3
}
 8013524:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8013526:	e024      	b.n	8013572 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8013528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801352a:	3b01      	subs	r3, #1
 801352c:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801352e:	f3ef 8310 	mrs	r3, PRIMASK
 8013532:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013534:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013536:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013538:	b672      	cpsid	i
    return(int_posture);
 801353a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801353c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013540:	2200      	movs	r2, #0
 8013542:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8013544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013546:	2201      	movs	r2, #1
 8013548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801354c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013550:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8013552:	4b18      	ldr	r3, [pc, #96]	; (80135b4 <_tx_semaphore_delete+0x11c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	3301      	adds	r3, #1
 8013558:	4a16      	ldr	r2, [pc, #88]	; (80135b4 <_tx_semaphore_delete+0x11c>)
 801355a:	6013      	str	r3, [r2, #0]
 801355c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801355e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013560:	6a3b      	ldr	r3, [r7, #32]
 8013562:	f383 8810 	msr	PRIMASK, r3
}
 8013566:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013568:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801356a:	f000 fbd9 	bl	8013d20 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013570:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8013572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013574:	2b00      	cmp	r3, #0
 8013576:	d1d7      	bne.n	8013528 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013578:	f3ef 8310 	mrs	r3, PRIMASK
 801357c:	613b      	str	r3, [r7, #16]
    return(posture);
 801357e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013580:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013582:	b672      	cpsid	i
    return(int_posture);
 8013584:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8013586:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013588:	4b0a      	ldr	r3, [pc, #40]	; (80135b4 <_tx_semaphore_delete+0x11c>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	3b01      	subs	r3, #1
 801358e:	4a09      	ldr	r2, [pc, #36]	; (80135b4 <_tx_semaphore_delete+0x11c>)
 8013590:	6013      	str	r3, [r2, #0]
 8013592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013594:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	f383 8810 	msr	PRIMASK, r3
}
 801359c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801359e:	f000 fb85 	bl	8013cac <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3748      	adds	r7, #72	; 0x48
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	240035d8 	.word	0x240035d8
 80135b0:	240035d4 	.word	0x240035d4
 80135b4:	240036a4 	.word	0x240036a4

080135b8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08e      	sub	sp, #56	; 0x38
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80135c2:	2300      	movs	r3, #0
 80135c4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135c6:	f3ef 8310 	mrs	r3, PRIMASK
 80135ca:	623b      	str	r3, [r7, #32]
    return(posture);
 80135cc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80135ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135d0:	b672      	cpsid	i
    return(int_posture);
 80135d2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80135d4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d00a      	beq.n	80135f4 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	1e5a      	subs	r2, r3, #1
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	609a      	str	r2, [r3, #8]
 80135e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	f383 8810 	msr	PRIMASK, r3
}
 80135f2:	e068      	b.n	80136c6 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d05d      	beq.n	80136b6 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80135fa:	4b35      	ldr	r3, [pc, #212]	; (80136d0 <_tx_semaphore_get+0x118>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d008      	beq.n	8013614 <_tx_semaphore_get+0x5c>
 8013602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013604:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	f383 8810 	msr	PRIMASK, r3
}
 801360c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801360e:	230d      	movs	r3, #13
 8013610:	637b      	str	r3, [r7, #52]	; 0x34
 8013612:	e058      	b.n	80136c6 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013614:	4b2f      	ldr	r3, [pc, #188]	; (80136d4 <_tx_semaphore_get+0x11c>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361c:	4a2e      	ldr	r2, [pc, #184]	; (80136d8 <_tx_semaphore_get+0x120>)
 801361e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8013620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013628:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801362c:	1c5a      	adds	r2, r3, #1
 801362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013630:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	691b      	ldr	r3, [r3, #16]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d109      	bne.n	8013650 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013640:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8013642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013646:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8013648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801364c:	675a      	str	r2, [r3, #116]	; 0x74
 801364e:	e011      	b.n	8013674 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801365a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013660:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013666:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801366a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801366c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013672:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	691b      	ldr	r3, [r3, #16]
 8013678:	1c5a      	adds	r2, r3, #1
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013680:	2206      	movs	r2, #6
 8013682:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013686:	2201      	movs	r2, #1
 8013688:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368c:	683a      	ldr	r2, [r7, #0]
 801368e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013690:	4b0f      	ldr	r3, [pc, #60]	; (80136d0 <_tx_semaphore_get+0x118>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	3301      	adds	r3, #1
 8013696:	4a0e      	ldr	r2, [pc, #56]	; (80136d0 <_tx_semaphore_get+0x118>)
 8013698:	6013      	str	r3, [r2, #0]
 801369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	f383 8810 	msr	PRIMASK, r3
}
 80136a4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80136a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136a8:	f000 fc3a 	bl	8013f20 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80136ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80136b2:	637b      	str	r3, [r7, #52]	; 0x34
 80136b4:	e007      	b.n	80136c6 <_tx_semaphore_get+0x10e>
 80136b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f383 8810 	msr	PRIMASK, r3
}
 80136c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80136c2:	230d      	movs	r3, #13
 80136c4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80136c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3738      	adds	r7, #56	; 0x38
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	240036a4 	.word	0x240036a4
 80136d4:	2400360c 	.word	0x2400360c
 80136d8:	080132fd 	.word	0x080132fd

080136dc <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b08c      	sub	sp, #48	; 0x30
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136e4:	f3ef 8310 	mrs	r3, PRIMASK
 80136e8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80136ea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80136ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80136ee:	b672      	cpsid	i
    return(int_posture);
 80136f0:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80136f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	691b      	ldr	r3, [r3, #16]
 80136f8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80136fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d10a      	bne.n	8013716 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	1c5a      	adds	r2, r3, #1
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	609a      	str	r2, [r3, #8]
 801370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	f383 8810 	msr	PRIMASK, r3
}
 8013714:	e033      	b.n	801377e <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	68db      	ldr	r3, [r3, #12]
 801371a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 801371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371e:	3b01      	subs	r3, #1
 8013720:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013724:	2b00      	cmp	r3, #0
 8013726:	d103      	bne.n	8013730 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2200      	movs	r2, #0
 801372c:	60da      	str	r2, [r3, #12]
 801372e:	e00e      	b.n	801374e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8013730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013734:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6a3a      	ldr	r2, [r7, #32]
 801373a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013740:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013742:	6a3b      	ldr	r3, [r7, #32]
 8013744:	69fa      	ldr	r2, [r7, #28]
 8013746:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	6a3a      	ldr	r2, [r7, #32]
 801374c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013752:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	2200      	movs	r2, #0
 8013758:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	2200      	movs	r2, #0
 801375e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8013762:	4b09      	ldr	r3, [pc, #36]	; (8013788 <_tx_semaphore_put+0xac>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	3301      	adds	r3, #1
 8013768:	4a07      	ldr	r2, [pc, #28]	; (8013788 <_tx_semaphore_put+0xac>)
 801376a:	6013      	str	r3, [r2, #0]
 801376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f383 8810 	msr	PRIMASK, r3
}
 8013776:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801377a:	f000 fad1 	bl	8013d20 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3730      	adds	r7, #48	; 0x30
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	240036a4 	.word	0x240036a4

0801378c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b092      	sub	sp, #72	; 0x48
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	607a      	str	r2, [r7, #4]
 8013798:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801379a:	2300      	movs	r3, #0
 801379c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801379e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137a0:	21ef      	movs	r1, #239	; 0xef
 80137a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80137a4:	f001 fb54 	bl	8014e50 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80137a8:	22b0      	movs	r2, #176	; 0xb0
 80137aa:	2100      	movs	r1, #0
 80137ac:	68f8      	ldr	r0, [r7, #12]
 80137ae:	f001 fb4f 	bl	8014e50 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	68ba      	ldr	r2, [r7, #8]
 80137b6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	683a      	ldr	r2, [r7, #0]
 80137c2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80137c8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137ce:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80137d4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80137da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80137e2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80137e8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2220      	movs	r2, #32
 80137ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80137f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80137f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137f8:	3b01      	subs	r3, #1
 80137fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137fc:	4413      	add	r3, r2
 80137fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013804:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8013806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801380a:	429a      	cmp	r2, r3
 801380c:	d007      	beq.n	801381e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2200      	movs	r2, #0
 8013812:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2200      	movs	r2, #0
 8013818:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801381c:	e006      	b.n	801382c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013822:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013828:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	2203      	movs	r2, #3
 8013830:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	4a48      	ldr	r2, [pc, #288]	; (8013958 <_tx_thread_create+0x1cc>)
 8013836:	655a      	str	r2, [r3, #84]	; 0x54
 8013838:	68fa      	ldr	r2, [r7, #12]
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801383e:	4947      	ldr	r1, [pc, #284]	; (801395c <_tx_thread_create+0x1d0>)
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f7ec fded 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013846:	f3ef 8310 	mrs	r3, PRIMASK
 801384a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801384e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013850:	b672      	cpsid	i
    return(int_posture);
 8013852:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8013854:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	4a41      	ldr	r2, [pc, #260]	; (8013960 <_tx_thread_create+0x1d4>)
 801385a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 801385c:	4b41      	ldr	r3, [pc, #260]	; (8013964 <_tx_thread_create+0x1d8>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d10b      	bne.n	801387c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8013864:	4a40      	ldr	r2, [pc, #256]	; (8013968 <_tx_thread_create+0x1dc>)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	68fa      	ldr	r2, [r7, #12]
 801386e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	68fa      	ldr	r2, [r7, #12]
 8013876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801387a:	e016      	b.n	80138aa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 801387c:	4b3a      	ldr	r3, [pc, #232]	; (8013968 <_tx_thread_create+0x1dc>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8013882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013888:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8013892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013894:	68fa      	ldr	r2, [r7, #12]
 8013896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801389e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80138aa:	4b2e      	ldr	r3, [pc, #184]	; (8013964 <_tx_thread_create+0x1d8>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	3301      	adds	r3, #1
 80138b0:	4a2c      	ldr	r2, [pc, #176]	; (8013964 <_tx_thread_create+0x1d8>)
 80138b2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80138b4:	4b2d      	ldr	r3, [pc, #180]	; (801396c <_tx_thread_create+0x1e0>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	3301      	adds	r3, #1
 80138ba:	4a2c      	ldr	r2, [pc, #176]	; (801396c <_tx_thread_create+0x1e0>)
 80138bc:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80138be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d129      	bne.n	8013918 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138c4:	f3ef 8305 	mrs	r3, IPSR
 80138c8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80138ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80138cc:	4b28      	ldr	r3, [pc, #160]	; (8013970 <_tx_thread_create+0x1e4>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	4313      	orrs	r3, r2
 80138d2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80138d6:	d30d      	bcc.n	80138f4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80138d8:	4b26      	ldr	r3, [pc, #152]	; (8013974 <_tx_thread_create+0x1e8>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80138de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d009      	beq.n	80138f8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80138e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138e8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80138ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80138f2:	e001      	b.n	80138f8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80138f4:	2300      	movs	r3, #0
 80138f6:	647b      	str	r3, [r7, #68]	; 0x44
 80138f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	f383 8810 	msr	PRIMASK, r3
}
 8013902:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f000 fa0b 	bl	8013d20 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801390a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801390c:	2b00      	cmp	r3, #0
 801390e:	d01e      	beq.n	801394e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8013910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013914:	63da      	str	r2, [r3, #60]	; 0x3c
 8013916:	e01a      	b.n	801394e <_tx_thread_create+0x1c2>
 8013918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	f383 8810 	msr	PRIMASK, r3
}
 8013922:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013924:	f3ef 8310 	mrs	r3, PRIMASK
 8013928:	61bb      	str	r3, [r7, #24]
    return(posture);
 801392a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801392c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801392e:	b672      	cpsid	i
    return(int_posture);
 8013930:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8013932:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8013934:	4b0d      	ldr	r3, [pc, #52]	; (801396c <_tx_thread_create+0x1e0>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	3b01      	subs	r3, #1
 801393a:	4a0c      	ldr	r2, [pc, #48]	; (801396c <_tx_thread_create+0x1e0>)
 801393c:	6013      	str	r3, [r2, #0]
 801393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013940:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	f383 8810 	msr	PRIMASK, r3
}
 8013948:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801394a:	f000 f9af 	bl	8013cac <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801394e:	2300      	movs	r3, #0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3748      	adds	r7, #72	; 0x48
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	080141f5 	.word	0x080141f5
 801395c:	08013b15 	.word	0x08013b15
 8013960:	54485244 	.word	0x54485244
 8013964:	24003618 	.word	0x24003618
 8013968:	24003614 	.word	0x24003614
 801396c:	240036a4 	.word	0x240036a4
 8013970:	2400006c 	.word	0x2400006c
 8013974:	24003610 	.word	0x24003610

08013978 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8013978:	b480      	push	{r7}
 801397a:	b087      	sub	sp, #28
 801397c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801397e:	f3ef 8310 	mrs	r3, PRIMASK
 8013982:	60bb      	str	r3, [r7, #8]
    return(posture);
 8013984:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8013986:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013988:	b672      	cpsid	i
    return(int_posture);
 801398a:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801398c:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801398e:	4b08      	ldr	r3, [pc, #32]	; (80139b0 <_tx_thread_identify+0x38>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	613b      	str	r3, [r7, #16]
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f383 8810 	msr	PRIMASK, r3
}
 801399e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80139a0:	693b      	ldr	r3, [r7, #16]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	371c      	adds	r7, #28
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	2400360c 	.word	0x2400360c

080139b4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80139b8:	4b12      	ldr	r3, [pc, #72]	; (8013a04 <_tx_thread_initialize+0x50>)
 80139ba:	2200      	movs	r2, #0
 80139bc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80139be:	4b12      	ldr	r3, [pc, #72]	; (8013a08 <_tx_thread_initialize+0x54>)
 80139c0:	2200      	movs	r2, #0
 80139c2:	601a      	str	r2, [r3, #0]
 80139c4:	4b11      	ldr	r3, [pc, #68]	; (8013a0c <_tx_thread_initialize+0x58>)
 80139c6:	2200      	movs	r2, #0
 80139c8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80139ca:	4b11      	ldr	r3, [pc, #68]	; (8013a10 <_tx_thread_initialize+0x5c>)
 80139cc:	2220      	movs	r2, #32
 80139ce:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80139d0:	2280      	movs	r2, #128	; 0x80
 80139d2:	2100      	movs	r1, #0
 80139d4:	480f      	ldr	r0, [pc, #60]	; (8013a14 <_tx_thread_initialize+0x60>)
 80139d6:	f001 fa3b 	bl	8014e50 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80139da:	4b0f      	ldr	r3, [pc, #60]	; (8013a18 <_tx_thread_initialize+0x64>)
 80139dc:	2200      	movs	r2, #0
 80139de:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80139e0:	4b0e      	ldr	r3, [pc, #56]	; (8013a1c <_tx_thread_initialize+0x68>)
 80139e2:	2200      	movs	r2, #0
 80139e4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80139e6:	4b0e      	ldr	r3, [pc, #56]	; (8013a20 <_tx_thread_initialize+0x6c>)
 80139e8:	2200      	movs	r2, #0
 80139ea:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80139ec:	4b0d      	ldr	r3, [pc, #52]	; (8013a24 <_tx_thread_initialize+0x70>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80139f2:	4b0d      	ldr	r3, [pc, #52]	; (8013a28 <_tx_thread_initialize+0x74>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80139fa:	4a0b      	ldr	r2, [pc, #44]	; (8013a28 <_tx_thread_initialize+0x74>)
 80139fc:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80139fe:	bf00      	nop
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	2400360c 	.word	0x2400360c
 8013a08:	24003610 	.word	0x24003610
 8013a0c:	2400361c 	.word	0x2400361c
 8013a10:	24003620 	.word	0x24003620
 8013a14:	24003624 	.word	0x24003624
 8013a18:	24003614 	.word	0x24003614
 8013a1c:	24003618 	.word	0x24003618
 8013a20:	240036a4 	.word	0x240036a4
 8013a24:	240036a8 	.word	0x240036a8
 8013a28:	240036ac 	.word	0x240036ac

08013a2c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b08c      	sub	sp, #48	; 0x30
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a42:	68ba      	ldr	r2, [r7, #8]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d004      	beq.n	8013a52 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8013a4e:	2300      	movs	r3, #0
 8013a50:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a52:	f3ef 8310 	mrs	r3, PRIMASK
 8013a56:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013a5a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a5c:	b672      	cpsid	i
    return(int_posture);
 8013a5e:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013a60:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a68:	68ba      	ldr	r2, [r7, #8]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d902      	bls.n	8013a74 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8013a6e:	2318      	movs	r3, #24
 8013a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a72:	e03e      	b.n	8013af2 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d203      	bcs.n	8013a9a <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	68ba      	ldr	r2, [r7, #8]
 8013a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a98:	e004      	b.n	8013aa4 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa8:	4b17      	ldr	r3, [pc, #92]	; (8013b08 <_tx_thread_preemption_change+0xdc>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d920      	bls.n	8013af2 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8013ab0:	4b15      	ldr	r3, [pc, #84]	; (8013b08 <_tx_thread_preemption_change+0xdc>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	68ba      	ldr	r2, [r7, #8]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d91b      	bls.n	8013af2 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8013aba:	4b14      	ldr	r3, [pc, #80]	; (8013b0c <_tx_thread_preemption_change+0xe0>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d116      	bne.n	8013af2 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013ac4:	4b10      	ldr	r3, [pc, #64]	; (8013b08 <_tx_thread_preemption_change+0xdc>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	4a11      	ldr	r2, [pc, #68]	; (8013b10 <_tx_thread_preemption_change+0xe4>)
 8013aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ace:	4a0f      	ldr	r2, [pc, #60]	; (8013b0c <_tx_thread_preemption_change+0xe0>)
 8013ad0:	6013      	str	r3, [r2, #0]
 8013ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f383 8810 	msr	PRIMASK, r3
}
 8013adc:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8013ade:	f000 f8e5 	bl	8013cac <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae6:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013ae8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013aea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013aec:	b672      	cpsid	i
    return(int_posture);
 8013aee:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8013af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	f383 8810 	msr	PRIMASK, r3
}
 8013afc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8013afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3730      	adds	r7, #48	; 0x30
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	24003620 	.word	0x24003620
 8013b0c:	24003610 	.word	0x24003610
 8013b10:	24003624 	.word	0x24003624

08013b14 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b088      	sub	sp, #32
 8013b18:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013b1a:	4b21      	ldr	r3, [pc, #132]	; (8013ba0 <_tx_thread_shell_entry+0x8c>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b24:	69fa      	ldr	r2, [r7, #28]
 8013b26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013b28:	4610      	mov	r0, r2
 8013b2a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8013b2c:	4b1d      	ldr	r3, [pc, #116]	; (8013ba4 <_tx_thread_shell_entry+0x90>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d003      	beq.n	8013b3c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8013b34:	4b1b      	ldr	r3, [pc, #108]	; (8013ba4 <_tx_thread_shell_entry+0x90>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	69f8      	ldr	r0, [r7, #28]
 8013b3a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b40:	607b      	str	r3, [r7, #4]
    return(posture);
 8013b42:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013b44:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b46:	b672      	cpsid	i
    return(int_posture);
 8013b48:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8013b4a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	2201      	movs	r2, #1
 8013b50:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	2201      	movs	r2, #1
 8013b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013b5e:	4b12      	ldr	r3, [pc, #72]	; (8013ba8 <_tx_thread_shell_entry+0x94>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	3301      	adds	r3, #1
 8013b64:	4a10      	ldr	r2, [pc, #64]	; (8013ba8 <_tx_thread_shell_entry+0x94>)
 8013b66:	6013      	str	r3, [r2, #0]
 8013b68:	69bb      	ldr	r3, [r7, #24]
 8013b6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	f383 8810 	msr	PRIMASK, r3
}
 8013b72:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8013b74:	f3ef 8314 	mrs	r3, CONTROL
 8013b78:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8013b7a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8013b7c:	617b      	str	r3, [r7, #20]
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	f023 0304 	bic.w	r3, r3, #4
 8013b84:	617b      	str	r3, [r7, #20]
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	f383 8814 	msr	CONTROL, r3
}
 8013b90:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8013b92:	69f8      	ldr	r0, [r7, #28]
 8013b94:	f000 f9c4 	bl	8013f20 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8013b98:	bf00      	nop
 8013b9a:	3720      	adds	r7, #32
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	2400360c 	.word	0x2400360c
 8013ba4:	240036a8 	.word	0x240036a8
 8013ba8:	240036a4 	.word	0x240036a4

08013bac <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b08e      	sub	sp, #56	; 0x38
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8013bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013bbc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013bbe:	b672      	cpsid	i
    return(int_posture);
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013bc2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013bc4:	4b35      	ldr	r3, [pc, #212]	; (8013c9c <_tx_thread_sleep+0xf0>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8013bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d108      	bne.n	8013be2 <_tx_thread_sleep+0x36>
 8013bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bd4:	6a3b      	ldr	r3, [r7, #32]
 8013bd6:	f383 8810 	msr	PRIMASK, r3
}
 8013bda:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013bdc:	2313      	movs	r3, #19
 8013bde:	637b      	str	r3, [r7, #52]	; 0x34
 8013be0:	e056      	b.n	8013c90 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013be2:	f3ef 8305 	mrs	r3, IPSR
 8013be6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8013be8:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013bea:	4b2d      	ldr	r3, [pc, #180]	; (8013ca0 <_tx_thread_sleep+0xf4>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4313      	orrs	r3, r2
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d008      	beq.n	8013c06 <_tx_thread_sleep+0x5a>
 8013bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bf8:	69bb      	ldr	r3, [r7, #24]
 8013bfa:	f383 8810 	msr	PRIMASK, r3
}
 8013bfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013c00:	2313      	movs	r3, #19
 8013c02:	637b      	str	r3, [r7, #52]	; 0x34
 8013c04:	e044      	b.n	8013c90 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8013c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c08:	4a26      	ldr	r2, [pc, #152]	; (8013ca4 <_tx_thread_sleep+0xf8>)
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d108      	bne.n	8013c20 <_tx_thread_sleep+0x74>
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f383 8810 	msr	PRIMASK, r3
}
 8013c18:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013c1a:	2313      	movs	r3, #19
 8013c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8013c1e:	e037      	b.n	8013c90 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d108      	bne.n	8013c38 <_tx_thread_sleep+0x8c>
 8013c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c28:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	f383 8810 	msr	PRIMASK, r3
}
 8013c30:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8013c32:	2300      	movs	r3, #0
 8013c34:	637b      	str	r3, [r7, #52]	; 0x34
 8013c36:	e02b      	b.n	8013c90 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013c38:	4b1b      	ldr	r3, [pc, #108]	; (8013ca8 <_tx_thread_sleep+0xfc>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d008      	beq.n	8013c52 <_tx_thread_sleep+0xa6>
 8013c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f383 8810 	msr	PRIMASK, r3
}
 8013c4a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8013c4c:	2313      	movs	r3, #19
 8013c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8013c50:	e01e      	b.n	8013c90 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8013c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c54:	2204      	movs	r2, #4
 8013c56:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c60:	2200      	movs	r2, #0
 8013c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8013c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013c6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ca8 <_tx_thread_sleep+0xfc>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	3301      	adds	r3, #1
 8013c72:	4a0d      	ldr	r2, [pc, #52]	; (8013ca8 <_tx_thread_sleep+0xfc>)
 8013c74:	6013      	str	r3, [r2, #0]
 8013c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c78:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	f383 8810 	msr	PRIMASK, r3
}
 8013c80:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c84:	f000 f94c 	bl	8013f20 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8013c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3738      	adds	r7, #56	; 0x38
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	2400360c 	.word	0x2400360c
 8013ca0:	2400006c 	.word	0x2400006c
 8013ca4:	24003754 	.word	0x24003754
 8013ca8:	240036a4 	.word	0x240036a4

08013cac <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b089      	sub	sp, #36	; 0x24
 8013cb0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013cb2:	4b17      	ldr	r3, [pc, #92]	; (8013d10 <_tx_thread_system_preempt_check+0x64>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d121      	bne.n	8013d02 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8013cbe:	4b15      	ldr	r3, [pc, #84]	; (8013d14 <_tx_thread_system_preempt_check+0x68>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8013cc4:	4b14      	ldr	r3, [pc, #80]	; (8013d18 <_tx_thread_system_preempt_check+0x6c>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8013cca:	69ba      	ldr	r2, [r7, #24]
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d017      	beq.n	8013d02 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013cd2:	4b12      	ldr	r3, [pc, #72]	; (8013d1c <_tx_thread_system_preempt_check+0x70>)
 8013cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cd8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cda:	f3ef 8305 	mrs	r3, IPSR
 8013cde:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013ce0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d10c      	bne.n	8013d00 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8013cea:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013cec:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8013cee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013cf0:	b662      	cpsie	i
}
 8013cf2:	bf00      	nop
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f383 8810 	msr	PRIMASK, r3
}
 8013cfe:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8013d00:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8013d02:	bf00      	nop
 8013d04:	3724      	adds	r7, #36	; 0x24
 8013d06:	46bd      	mov	sp, r7
 8013d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	240036a4 	.word	0x240036a4
 8013d14:	2400360c 	.word	0x2400360c
 8013d18:	24003610 	.word	0x24003610
 8013d1c:	e000ed04 	.word	0xe000ed04

08013d20 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b096      	sub	sp, #88	; 0x58
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d28:	f3ef 8310 	mrs	r3, PRIMASK
 8013d2c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8013d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8013d30:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d32:	b672      	cpsid	i
    return(int_posture);
 8013d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013d36:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d005      	beq.n	8013d4c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	334c      	adds	r3, #76	; 0x4c
 8013d44:	4618      	mov	r0, r3
 8013d46:	f000 fc13 	bl	8014570 <_tx_timer_system_deactivate>
 8013d4a:	e002      	b.n	8013d52 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013d52:	4b6c      	ldr	r3, [pc, #432]	; (8013f04 <_tx_thread_system_resume+0x1e4>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	3b01      	subs	r3, #1
 8013d58:	4a6a      	ldr	r2, [pc, #424]	; (8013f04 <_tx_thread_system_resume+0x1e4>)
 8013d5a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	f040 8083 	bne.w	8013e6c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	f000 8097 	beq.w	8013e9e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d172      	bne.n	8013e5e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d82:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8013d84:	4a60      	ldr	r2, [pc, #384]	; (8013f08 <_tx_thread_system_resume+0x1e8>)
 8013d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8013d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d154      	bne.n	8013e3e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8013d94:	495c      	ldr	r1, [pc, #368]	; (8013f08 <_tx_thread_system_resume+0x1e8>)
 8013d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8013daa:	2201      	movs	r2, #1
 8013dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dae:	fa02 f303 	lsl.w	r3, r2, r3
 8013db2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8013db4:	4b55      	ldr	r3, [pc, #340]	; (8013f0c <_tx_thread_system_resume+0x1ec>)
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dba:	4313      	orrs	r3, r2
 8013dbc:	4a53      	ldr	r2, [pc, #332]	; (8013f0c <_tx_thread_system_resume+0x1ec>)
 8013dbe:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8013dc0:	4b53      	ldr	r3, [pc, #332]	; (8013f10 <_tx_thread_system_resume+0x1f0>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d269      	bcs.n	8013e9e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8013dca:	4a51      	ldr	r2, [pc, #324]	; (8013f10 <_tx_thread_system_resume+0x1f0>)
 8013dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dce:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8013dd0:	4b50      	ldr	r3, [pc, #320]	; (8013f14 <_tx_thread_system_resume+0x1f4>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8013dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d103      	bne.n	8013de4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8013ddc:	4a4d      	ldr	r2, [pc, #308]	; (8013f14 <_tx_thread_system_resume+0x1f4>)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6013      	str	r3, [r2, #0]
 8013de2:	e05c      	b.n	8013e9e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8013de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013de8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d257      	bcs.n	8013e9e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8013dee:	4a49      	ldr	r2, [pc, #292]	; (8013f14 <_tx_thread_system_resume+0x1f4>)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6013      	str	r3, [r2, #0]
 8013df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfa:	f383 8810 	msr	PRIMASK, r3
}
 8013dfe:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013e00:	4b40      	ldr	r3, [pc, #256]	; (8013f04 <_tx_thread_system_resume+0x1e4>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8013e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d174      	bne.n	8013ef6 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013e0c:	4b42      	ldr	r3, [pc, #264]	; (8013f18 <_tx_thread_system_resume+0x1f8>)
 8013e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e12:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e14:	f3ef 8305 	mrs	r3, IPSR
 8013e18:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8013e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d10c      	bne.n	8013e3a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e20:	f3ef 8310 	mrs	r3, PRIMASK
 8013e24:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8013e28:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013e2a:	b662      	cpsie	i
}
 8013e2c:	bf00      	nop
 8013e2e:	6a3b      	ldr	r3, [r7, #32]
 8013e30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	f383 8810 	msr	PRIMASK, r3
}
 8013e38:	bf00      	nop
}
 8013e3a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8013e3c:	e05b      	b.n	8013ef6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8013e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e42:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8013e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8013e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e54:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e5a:	621a      	str	r2, [r3, #32]
 8013e5c:	e01f      	b.n	8013e9e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2200      	movs	r2, #0
 8013e62:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2203      	movs	r2, #3
 8013e68:	631a      	str	r2, [r3, #48]	; 0x30
 8013e6a:	e018      	b.n	8013e9e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d014      	beq.n	8013e9e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e78:	2b02      	cmp	r3, #2
 8013e7a:	d010      	beq.n	8013e9e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d106      	bne.n	8013e92 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2200      	movs	r2, #0
 8013e88:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8013e90:	e005      	b.n	8013e9e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2203      	movs	r2, #3
 8013e9c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013e9e:	4b1f      	ldr	r3, [pc, #124]	; (8013f1c <_tx_thread_system_resume+0x1fc>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ea6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	f383 8810 	msr	PRIMASK, r3
}
 8013eae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013eb0:	4b18      	ldr	r3, [pc, #96]	; (8013f14 <_tx_thread_system_resume+0x1f4>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d020      	beq.n	8013efc <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013eba:	4b12      	ldr	r3, [pc, #72]	; (8013f04 <_tx_thread_system_resume+0x1e4>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8013ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d11a      	bne.n	8013efc <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013ec6:	4b14      	ldr	r3, [pc, #80]	; (8013f18 <_tx_thread_system_resume+0x1f8>)
 8013ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ecc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ece:	f3ef 8305 	mrs	r3, IPSR
 8013ed2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013ed4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d10f      	bne.n	8013efa <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013eda:	f3ef 8310 	mrs	r3, PRIMASK
 8013ede:	613b      	str	r3, [r7, #16]
    return(posture);
 8013ee0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8013ee2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013ee4:	b662      	cpsie	i
}
 8013ee6:	bf00      	nop
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	f383 8810 	msr	PRIMASK, r3
}
 8013ef2:	bf00      	nop
}
 8013ef4:	e001      	b.n	8013efa <_tx_thread_system_resume+0x1da>
                                return;
 8013ef6:	bf00      	nop
 8013ef8:	e000      	b.n	8013efc <_tx_thread_system_resume+0x1dc>
 8013efa:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8013efc:	3758      	adds	r7, #88	; 0x58
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	bf00      	nop
 8013f04:	240036a4 	.word	0x240036a4
 8013f08:	24003624 	.word	0x24003624
 8013f0c:	2400361c 	.word	0x2400361c
 8013f10:	24003620 	.word	0x24003620
 8013f14:	24003610 	.word	0x24003610
 8013f18:	e000ed04 	.word	0xe000ed04
 8013f1c:	2400360c 	.word	0x2400360c

08013f20 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b09e      	sub	sp, #120	; 0x78
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013f28:	4b81      	ldr	r3, [pc, #516]	; (8014130 <_tx_thread_system_suspend+0x210>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8013f32:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8013f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8013f36:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f38:	b672      	cpsid	i
    return(int_posture);
 8013f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013f3c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d112      	bne.n	8013f6c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f4a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8013f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d008      	beq.n	8013f64 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8013f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f58:	d004      	beq.n	8013f64 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	334c      	adds	r3, #76	; 0x4c
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f000 faa4 	bl	80144ac <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	69db      	ldr	r3, [r3, #28]
 8013f68:	4a72      	ldr	r2, [pc, #456]	; (8014134 <_tx_thread_system_suspend+0x214>)
 8013f6a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013f6c:	4b72      	ldr	r3, [pc, #456]	; (8014138 <_tx_thread_system_suspend+0x218>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	3b01      	subs	r3, #1
 8013f72:	4a71      	ldr	r2, [pc, #452]	; (8014138 <_tx_thread_system_suspend+0x218>)
 8013f74:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	f040 80a6 	bne.w	80140cc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2200      	movs	r2, #0
 8013f84:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f8a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6a1b      	ldr	r3, [r3, #32]
 8013f90:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8013f92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d015      	beq.n	8013fc6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f9e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8013fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013fa4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8013fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013faa:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8013fac:	4a63      	ldr	r2, [pc, #396]	; (801413c <_tx_thread_system_suspend+0x21c>)
 8013fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fb4:	687a      	ldr	r2, [r7, #4]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d157      	bne.n	801406a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8013fba:	4960      	ldr	r1, [pc, #384]	; (801413c <_tx_thread_system_suspend+0x21c>)
 8013fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013fc4:	e051      	b.n	801406a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8013fc6:	4a5d      	ldr	r2, [pc, #372]	; (801413c <_tx_thread_system_suspend+0x21c>)
 8013fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fca:	2100      	movs	r1, #0
 8013fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8013fd8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8013fda:	4b59      	ldr	r3, [pc, #356]	; (8014140 <_tx_thread_system_suspend+0x220>)
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013fe0:	43db      	mvns	r3, r3
 8013fe2:	4013      	ands	r3, r2
 8013fe4:	4a56      	ldr	r2, [pc, #344]	; (8014140 <_tx_thread_system_suspend+0x220>)
 8013fe6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013fe8:	2300      	movs	r3, #0
 8013fea:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8013fec:	4b54      	ldr	r3, [pc, #336]	; (8014140 <_tx_thread_system_suspend+0x220>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8013ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d12b      	bne.n	8014050 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013ff8:	4b52      	ldr	r3, [pc, #328]	; (8014144 <_tx_thread_system_suspend+0x224>)
 8013ffa:	2220      	movs	r2, #32
 8013ffc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8013ffe:	4b52      	ldr	r3, [pc, #328]	; (8014148 <_tx_thread_system_suspend+0x228>)
 8014000:	2200      	movs	r2, #0
 8014002:	601a      	str	r2, [r3, #0]
 8014004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014006:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801400a:	f383 8810 	msr	PRIMASK, r3
}
 801400e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014010:	4b49      	ldr	r3, [pc, #292]	; (8014138 <_tx_thread_system_suspend+0x218>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8014016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014018:	2b00      	cmp	r3, #0
 801401a:	f040 8081 	bne.w	8014120 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801401e:	4b4b      	ldr	r3, [pc, #300]	; (801414c <_tx_thread_system_suspend+0x22c>)
 8014020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014024:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014026:	f3ef 8305 	mrs	r3, IPSR
 801402a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 801402c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 801402e:	2b00      	cmp	r3, #0
 8014030:	d10c      	bne.n	801404c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014032:	f3ef 8310 	mrs	r3, PRIMASK
 8014036:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8014038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801403a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 801403c:	b662      	cpsie	i
}
 801403e:	bf00      	nop
 8014040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014042:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014046:	f383 8810 	msr	PRIMASK, r3
}
 801404a:	bf00      	nop
}
 801404c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801404e:	e067      	b.n	8014120 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8014050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014052:	fa93 f3a3 	rbit	r3, r3
 8014056:	65bb      	str	r3, [r7, #88]	; 0x58
 8014058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801405a:	fab3 f383 	clz	r3, r3
 801405e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8014060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014064:	4413      	add	r3, r2
 8014066:	4a37      	ldr	r2, [pc, #220]	; (8014144 <_tx_thread_system_suspend+0x224>)
 8014068:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801406a:	4b37      	ldr	r3, [pc, #220]	; (8014148 <_tx_thread_system_suspend+0x228>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	429a      	cmp	r2, r3
 8014072:	d12b      	bne.n	80140cc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014074:	4b33      	ldr	r3, [pc, #204]	; (8014144 <_tx_thread_system_suspend+0x224>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a30      	ldr	r2, [pc, #192]	; (801413c <_tx_thread_system_suspend+0x21c>)
 801407a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801407e:	4a32      	ldr	r2, [pc, #200]	; (8014148 <_tx_thread_system_suspend+0x228>)
 8014080:	6013      	str	r3, [r2, #0]
 8014082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014084:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014088:	f383 8810 	msr	PRIMASK, r3
}
 801408c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801408e:	4b2a      	ldr	r3, [pc, #168]	; (8014138 <_tx_thread_system_suspend+0x218>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8014094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014096:	2b00      	cmp	r3, #0
 8014098:	d144      	bne.n	8014124 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801409a:	4b2c      	ldr	r3, [pc, #176]	; (801414c <_tx_thread_system_suspend+0x22c>)
 801409c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80140a2:	f3ef 8305 	mrs	r3, IPSR
 80140a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d10c      	bne.n	80140c8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80140ae:	f3ef 8310 	mrs	r3, PRIMASK
 80140b2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80140b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80140b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80140b8:	b662      	cpsie	i
}
 80140ba:	bf00      	nop
 80140bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140be:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140c0:	6a3b      	ldr	r3, [r7, #32]
 80140c2:	f383 8810 	msr	PRIMASK, r3
}
 80140c6:	bf00      	nop
}
 80140c8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80140ca:	e02b      	b.n	8014124 <_tx_thread_system_suspend+0x204>
 80140cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140d0:	69fb      	ldr	r3, [r7, #28]
 80140d2:	f383 8810 	msr	PRIMASK, r3
}
 80140d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80140d8:	4b1b      	ldr	r3, [pc, #108]	; (8014148 <_tx_thread_system_suspend+0x228>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80140de:	429a      	cmp	r2, r3
 80140e0:	d022      	beq.n	8014128 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80140e2:	4b15      	ldr	r3, [pc, #84]	; (8014138 <_tx_thread_system_suspend+0x218>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80140e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d11c      	bne.n	8014128 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80140ee:	4b17      	ldr	r3, [pc, #92]	; (801414c <_tx_thread_system_suspend+0x22c>)
 80140f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80140f6:	f3ef 8305 	mrs	r3, IPSR
 80140fa:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80140fc:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d10c      	bne.n	801411c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014102:	f3ef 8310 	mrs	r3, PRIMASK
 8014106:	617b      	str	r3, [r7, #20]
    return(posture);
 8014108:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801410a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801410c:	b662      	cpsie	i
}
 801410e:	bf00      	nop
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	f383 8810 	msr	PRIMASK, r3
}
 801411a:	bf00      	nop
}
 801411c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801411e:	e003      	b.n	8014128 <_tx_thread_system_suspend+0x208>
                return;
 8014120:	bf00      	nop
 8014122:	e002      	b.n	801412a <_tx_thread_system_suspend+0x20a>
            return;
 8014124:	bf00      	nop
 8014126:	e000      	b.n	801412a <_tx_thread_system_suspend+0x20a>
    return;
 8014128:	bf00      	nop
}
 801412a:	3778      	adds	r7, #120	; 0x78
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	2400360c 	.word	0x2400360c
 8014134:	24003c10 	.word	0x24003c10
 8014138:	240036a4 	.word	0x240036a4
 801413c:	24003624 	.word	0x24003624
 8014140:	2400361c 	.word	0x2400361c
 8014144:	24003620 	.word	0x24003620
 8014148:	24003610 	.word	0x24003610
 801414c:	e000ed04 	.word	0xe000ed04

08014150 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8014150:	b480      	push	{r7}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014156:	4b21      	ldr	r3, [pc, #132]	; (80141dc <_tx_thread_time_slice+0x8c>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801415c:	f3ef 8310 	mrs	r3, PRIMASK
 8014160:	60fb      	str	r3, [r7, #12]
    return(posture);
 8014162:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8014164:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014166:	b672      	cpsid	i
    return(int_posture);
 8014168:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801416a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801416c:	4b1c      	ldr	r3, [pc, #112]	; (80141e0 <_tx_thread_time_slice+0x90>)
 801416e:	2200      	movs	r2, #0
 8014170:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d024      	beq.n	80141c2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801417c:	2b00      	cmp	r3, #0
 801417e:	d120      	bne.n	80141c2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	69da      	ldr	r2, [r3, #28]
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	699b      	ldr	r3, [r3, #24]
 801418c:	4a15      	ldr	r2, [pc, #84]	; (80141e4 <_tx_thread_time_slice+0x94>)
 801418e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	6a1b      	ldr	r3, [r3, #32]
 8014194:	697a      	ldr	r2, [r7, #20]
 8014196:	429a      	cmp	r2, r3
 8014198:	d013      	beq.n	80141c2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d10d      	bne.n	80141c2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141aa:	697a      	ldr	r2, [r7, #20]
 80141ac:	6a12      	ldr	r2, [r2, #32]
 80141ae:	490e      	ldr	r1, [pc, #56]	; (80141e8 <_tx_thread_time_slice+0x98>)
 80141b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80141b4:	4b0d      	ldr	r3, [pc, #52]	; (80141ec <_tx_thread_time_slice+0x9c>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	4a0b      	ldr	r2, [pc, #44]	; (80141e8 <_tx_thread_time_slice+0x98>)
 80141ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141be:	4a0c      	ldr	r2, [pc, #48]	; (80141f0 <_tx_thread_time_slice+0xa0>)
 80141c0:	6013      	str	r3, [r2, #0]
 80141c2:	693b      	ldr	r3, [r7, #16]
 80141c4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f383 8810 	msr	PRIMASK, r3
}
 80141cc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80141ce:	bf00      	nop
 80141d0:	371c      	adds	r7, #28
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop
 80141dc:	2400360c 	.word	0x2400360c
 80141e0:	240036b4 	.word	0x240036b4
 80141e4:	24003c10 	.word	0x24003c10
 80141e8:	24003624 	.word	0x24003624
 80141ec:	24003620 	.word	0x24003620
 80141f0:	24003610 	.word	0x24003610

080141f4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b08a      	sub	sp, #40	; 0x28
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014200:	f3ef 8310 	mrs	r3, PRIMASK
 8014204:	617b      	str	r3, [r7, #20]
    return(posture);
 8014206:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014208:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801420a:	b672      	cpsid	i
    return(int_posture);
 801420c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801420e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8014210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014214:	2b04      	cmp	r3, #4
 8014216:	d10e      	bne.n	8014236 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8014218:	4b13      	ldr	r3, [pc, #76]	; (8014268 <_tx_thread_timeout+0x74>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3301      	adds	r3, #1
 801421e:	4a12      	ldr	r2, [pc, #72]	; (8014268 <_tx_thread_timeout+0x74>)
 8014220:	6013      	str	r3, [r2, #0]
 8014222:	6a3b      	ldr	r3, [r7, #32]
 8014224:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f383 8810 	msr	PRIMASK, r3
}
 801422c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801422e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014230:	f7ff fd76 	bl	8013d20 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8014234:	e013      	b.n	801425e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8014236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801423a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014242:	61bb      	str	r3, [r7, #24]
 8014244:	6a3b      	ldr	r3, [r7, #32]
 8014246:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	f383 8810 	msr	PRIMASK, r3
}
 801424e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8014250:	69fb      	ldr	r3, [r7, #28]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d003      	beq.n	801425e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	69b9      	ldr	r1, [r7, #24]
 801425a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801425c:	4798      	blx	r3
}
 801425e:	bf00      	nop
 8014260:	3728      	adds	r7, #40	; 0x28
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	240036a4 	.word	0x240036a4

0801426c <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 801426c:	b480      	push	{r7}
 801426e:	b087      	sub	sp, #28
 8014270:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014272:	f3ef 8310 	mrs	r3, PRIMASK
 8014276:	60bb      	str	r3, [r7, #8]
    return(posture);
 8014278:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801427a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 801427c:	b672      	cpsid	i
    return(int_posture);
 801427e:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8014280:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8014282:	4b08      	ldr	r3, [pc, #32]	; (80142a4 <_tx_time_get+0x38>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	613b      	str	r3, [r7, #16]
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f383 8810 	msr	PRIMASK, r3
}
 8014292:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8014294:	693b      	ldr	r3, [r7, #16]
}
 8014296:	4618      	mov	r0, r3
 8014298:	371c      	adds	r7, #28
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	240036b0 	.word	0x240036b0

080142a8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b08a      	sub	sp, #40	; 0x28
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	60b9      	str	r1, [r7, #8]
 80142b2:	607a      	str	r2, [r7, #4]
 80142b4:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 80142b6:	222c      	movs	r2, #44	; 0x2c
 80142b8:	2100      	movs	r1, #0
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f000 fdc8 	bl	8014e50 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142ca:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142d0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	683a      	ldr	r2, [r7, #0]
 80142dc:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142de:	f3ef 8310 	mrs	r3, PRIMASK
 80142e2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80142e4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80142e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80142e8:	b672      	cpsid	i
    return(int_posture);
 80142ea:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80142ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	4a1c      	ldr	r2, [pc, #112]	; (8014364 <_tx_timer_create+0xbc>)
 80142f2:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80142f4:	4b1c      	ldr	r3, [pc, #112]	; (8014368 <_tx_timer_create+0xc0>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d109      	bne.n	8014310 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 80142fc:	4a1b      	ldr	r2, [pc, #108]	; (801436c <_tx_timer_create+0xc4>)
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	68fa      	ldr	r2, [r7, #12]
 8014306:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	68fa      	ldr	r2, [r7, #12]
 801430c:	629a      	str	r2, [r3, #40]	; 0x28
 801430e:	e011      	b.n	8014334 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8014310:	4b16      	ldr	r3, [pc, #88]	; (801436c <_tx_timer_create+0xc4>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8014316:	6a3b      	ldr	r3, [r7, #32]
 8014318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801431a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	68fa      	ldr	r2, [r7, #12]
 8014320:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	69fa      	ldr	r2, [r7, #28]
 801432c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	6a3a      	ldr	r2, [r7, #32]
 8014332:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8014334:	4b0c      	ldr	r3, [pc, #48]	; (8014368 <_tx_timer_create+0xc0>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	3301      	adds	r3, #1
 801433a:	4a0b      	ldr	r2, [pc, #44]	; (8014368 <_tx_timer_create+0xc0>)
 801433c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014340:	2b01      	cmp	r3, #1
 8014342:	d104      	bne.n	801434e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	3308      	adds	r3, #8
 8014348:	4618      	mov	r0, r3
 801434a:	f000 f8af 	bl	80144ac <_tx_timer_system_activate>
 801434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014350:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	f383 8810 	msr	PRIMASK, r3
}
 8014358:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801435a:	2300      	movs	r3, #0
}
 801435c:	4618      	mov	r0, r3
 801435e:	3728      	adds	r7, #40	; 0x28
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	4154494d 	.word	0x4154494d
 8014368:	2400374c 	.word	0x2400374c
 801436c:	24003748 	.word	0x24003748

08014370 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014376:	f3ef 8310 	mrs	r3, PRIMASK
 801437a:	607b      	str	r3, [r7, #4]
    return(posture);
 801437c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801437e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014380:	b672      	cpsid	i
    return(int_posture);
 8014382:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8014384:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8014386:	4b09      	ldr	r3, [pc, #36]	; (80143ac <_tx_timer_expiration_process+0x3c>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	3301      	adds	r3, #1
 801438c:	4a07      	ldr	r2, [pc, #28]	; (80143ac <_tx_timer_expiration_process+0x3c>)
 801438e:	6013      	str	r3, [r2, #0]
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	f383 8810 	msr	PRIMASK, r3
}
 801439a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801439c:	4804      	ldr	r0, [pc, #16]	; (80143b0 <_tx_timer_expiration_process+0x40>)
 801439e:	f7ff fcbf 	bl	8013d20 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80143a2:	bf00      	nop
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	240036a4 	.word	0x240036a4
 80143b0:	24003754 	.word	0x24003754

080143b4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80143b4:	b590      	push	{r4, r7, lr}
 80143b6:	b089      	sub	sp, #36	; 0x24
 80143b8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80143ba:	4b28      	ldr	r3, [pc, #160]	; (801445c <_tx_timer_initialize+0xa8>)
 80143bc:	2200      	movs	r2, #0
 80143be:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80143c0:	4b27      	ldr	r3, [pc, #156]	; (8014460 <_tx_timer_initialize+0xac>)
 80143c2:	2200      	movs	r2, #0
 80143c4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80143c6:	4b27      	ldr	r3, [pc, #156]	; (8014464 <_tx_timer_initialize+0xb0>)
 80143c8:	2200      	movs	r2, #0
 80143ca:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80143cc:	4b26      	ldr	r3, [pc, #152]	; (8014468 <_tx_timer_initialize+0xb4>)
 80143ce:	2200      	movs	r2, #0
 80143d0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80143d2:	4b26      	ldr	r3, [pc, #152]	; (801446c <_tx_timer_initialize+0xb8>)
 80143d4:	2200      	movs	r2, #0
 80143d6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80143d8:	2280      	movs	r2, #128	; 0x80
 80143da:	2100      	movs	r1, #0
 80143dc:	4824      	ldr	r0, [pc, #144]	; (8014470 <_tx_timer_initialize+0xbc>)
 80143de:	f000 fd37 	bl	8014e50 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80143e2:	4b24      	ldr	r3, [pc, #144]	; (8014474 <_tx_timer_initialize+0xc0>)
 80143e4:	4a22      	ldr	r2, [pc, #136]	; (8014470 <_tx_timer_initialize+0xbc>)
 80143e6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80143e8:	4b23      	ldr	r3, [pc, #140]	; (8014478 <_tx_timer_initialize+0xc4>)
 80143ea:	4a21      	ldr	r2, [pc, #132]	; (8014470 <_tx_timer_initialize+0xbc>)
 80143ec:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80143ee:	4b23      	ldr	r3, [pc, #140]	; (801447c <_tx_timer_initialize+0xc8>)
 80143f0:	4a23      	ldr	r2, [pc, #140]	; (8014480 <_tx_timer_initialize+0xcc>)
 80143f2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80143f4:	4b21      	ldr	r3, [pc, #132]	; (801447c <_tx_timer_initialize+0xc8>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	3304      	adds	r3, #4
 80143fa:	4a20      	ldr	r2, [pc, #128]	; (801447c <_tx_timer_initialize+0xc8>)
 80143fc:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80143fe:	4b21      	ldr	r3, [pc, #132]	; (8014484 <_tx_timer_initialize+0xd0>)
 8014400:	4a21      	ldr	r2, [pc, #132]	; (8014488 <_tx_timer_initialize+0xd4>)
 8014402:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8014404:	4b21      	ldr	r3, [pc, #132]	; (801448c <_tx_timer_initialize+0xd8>)
 8014406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801440a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801440c:	4b20      	ldr	r3, [pc, #128]	; (8014490 <_tx_timer_initialize+0xdc>)
 801440e:	2200      	movs	r2, #0
 8014410:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8014412:	4b1c      	ldr	r3, [pc, #112]	; (8014484 <_tx_timer_initialize+0xd0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	4a1d      	ldr	r2, [pc, #116]	; (801448c <_tx_timer_initialize+0xd8>)
 8014418:	6812      	ldr	r2, [r2, #0]
 801441a:	491d      	ldr	r1, [pc, #116]	; (8014490 <_tx_timer_initialize+0xdc>)
 801441c:	6809      	ldr	r1, [r1, #0]
 801441e:	481c      	ldr	r0, [pc, #112]	; (8014490 <_tx_timer_initialize+0xdc>)
 8014420:	6800      	ldr	r0, [r0, #0]
 8014422:	2400      	movs	r4, #0
 8014424:	9405      	str	r4, [sp, #20]
 8014426:	2400      	movs	r4, #0
 8014428:	9404      	str	r4, [sp, #16]
 801442a:	9003      	str	r0, [sp, #12]
 801442c:	9102      	str	r1, [sp, #8]
 801442e:	9201      	str	r2, [sp, #4]
 8014430:	9300      	str	r3, [sp, #0]
 8014432:	4b18      	ldr	r3, [pc, #96]	; (8014494 <_tx_timer_initialize+0xe0>)
 8014434:	4a18      	ldr	r2, [pc, #96]	; (8014498 <_tx_timer_initialize+0xe4>)
 8014436:	4919      	ldr	r1, [pc, #100]	; (801449c <_tx_timer_initialize+0xe8>)
 8014438:	4819      	ldr	r0, [pc, #100]	; (80144a0 <_tx_timer_initialize+0xec>)
 801443a:	f7ff f9a7 	bl	801378c <_tx_thread_create>
 801443e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d1e5      	bne.n	8014412 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8014446:	4b17      	ldr	r3, [pc, #92]	; (80144a4 <_tx_timer_initialize+0xf0>)
 8014448:	2200      	movs	r2, #0
 801444a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801444c:	4b16      	ldr	r3, [pc, #88]	; (80144a8 <_tx_timer_initialize+0xf4>)
 801444e:	2200      	movs	r2, #0
 8014450:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8014452:	bf00      	nop
 8014454:	370c      	adds	r7, #12
 8014456:	46bd      	mov	sp, r7
 8014458:	bd90      	pop	{r4, r7, pc}
 801445a:	bf00      	nop
 801445c:	240036b0 	.word	0x240036b0
 8014460:	24003c10 	.word	0x24003c10
 8014464:	240036b4 	.word	0x240036b4
 8014468:	24003744 	.word	0x24003744
 801446c:	24003750 	.word	0x24003750
 8014470:	240036b8 	.word	0x240036b8
 8014474:	24003738 	.word	0x24003738
 8014478:	24003740 	.word	0x24003740
 801447c:	2400373c 	.word	0x2400373c
 8014480:	24003734 	.word	0x24003734
 8014484:	24003804 	.word	0x24003804
 8014488:	24003810 	.word	0x24003810
 801448c:	24003808 	.word	0x24003808
 8014490:	2400380c 	.word	0x2400380c
 8014494:	4154494d 	.word	0x4154494d
 8014498:	080145e1 	.word	0x080145e1
 801449c:	08014fcc 	.word	0x08014fcc
 80144a0:	24003754 	.word	0x24003754
 80144a4:	24003748 	.word	0x24003748
 80144a8:	2400374c 	.word	0x2400374c

080144ac <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80144ac:	b480      	push	{r7}
 80144ae:	b089      	sub	sp, #36	; 0x24
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d04a      	beq.n	8014556 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144c6:	d046      	beq.n	8014556 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	699b      	ldr	r3, [r3, #24]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d142      	bne.n	8014556 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	2b20      	cmp	r3, #32
 80144d4:	d902      	bls.n	80144dc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80144d6:	231f      	movs	r3, #31
 80144d8:	61bb      	str	r3, [r7, #24]
 80144da:	e002      	b.n	80144e2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	3b01      	subs	r3, #1
 80144e0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80144e2:	4b20      	ldr	r3, [pc, #128]	; (8014564 <_tx_timer_system_activate+0xb8>)
 80144e4:	681a      	ldr	r2, [r3, #0]
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80144ee:	4b1e      	ldr	r3, [pc, #120]	; (8014568 <_tx_timer_system_activate+0xbc>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	69fa      	ldr	r2, [r7, #28]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d30b      	bcc.n	8014510 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80144f8:	4b1b      	ldr	r3, [pc, #108]	; (8014568 <_tx_timer_system_activate+0xbc>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	69fa      	ldr	r2, [r7, #28]
 80144fe:	1ad3      	subs	r3, r2, r3
 8014500:	109b      	asrs	r3, r3, #2
 8014502:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8014504:	4b19      	ldr	r3, [pc, #100]	; (801456c <_tx_timer_system_activate+0xc0>)
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	009b      	lsls	r3, r3, #2
 801450c:	4413      	add	r3, r2
 801450e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d109      	bne.n	801452c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	687a      	ldr	r2, [r7, #4]
 8014522:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8014524:	69fb      	ldr	r3, [r7, #28]
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	601a      	str	r2, [r3, #0]
 801452a:	e011      	b.n	8014550 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	695b      	ldr	r3, [r3, #20]
 8014536:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	687a      	ldr	r2, [r7, #4]
 801453c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	68fa      	ldr	r2, [r7, #12]
 8014548:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	68ba      	ldr	r2, [r7, #8]
 801454e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	69fa      	ldr	r2, [r7, #28]
 8014554:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8014556:	bf00      	nop
 8014558:	3724      	adds	r7, #36	; 0x24
 801455a:	46bd      	mov	sp, r7
 801455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014560:	4770      	bx	lr
 8014562:	bf00      	nop
 8014564:	24003740 	.word	0x24003740
 8014568:	2400373c 	.word	0x2400373c
 801456c:	24003738 	.word	0x24003738

08014570 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014570:	b480      	push	{r7}
 8014572:	b087      	sub	sp, #28
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	699b      	ldr	r3, [r3, #24]
 801457c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d026      	beq.n	80145d2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	691b      	ldr	r3, [r3, #16]
 8014588:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	429a      	cmp	r2, r3
 8014590:	d108      	bne.n	80145a4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	429a      	cmp	r2, r3
 801459a:	d117      	bne.n	80145cc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	2200      	movs	r2, #0
 80145a0:	601a      	str	r2, [r3, #0]
 80145a2:	e013      	b.n	80145cc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	695b      	ldr	r3, [r3, #20]
 80145a8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	68fa      	ldr	r2, [r7, #12]
 80145ae:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	693a      	ldr	r2, [r7, #16]
 80145b4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d105      	bne.n	80145cc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	697a      	ldr	r2, [r7, #20]
 80145c4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80145c6:	697b      	ldr	r3, [r7, #20]
 80145c8:	693a      	ldr	r2, [r7, #16]
 80145ca:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	619a      	str	r2, [r3, #24]
    }
}
 80145d2:	bf00      	nop
 80145d4:	371c      	adds	r7, #28
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr
	...

080145e0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b098      	sub	sp, #96	; 0x60
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80145e8:	2300      	movs	r3, #0
 80145ea:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	4a73      	ldr	r2, [pc, #460]	; (80147bc <_tx_timer_thread_entry+0x1dc>)
 80145f0:	4293      	cmp	r3, r2
 80145f2:	f040 80de 	bne.w	80147b2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145f6:	f3ef 8310 	mrs	r3, PRIMASK
 80145fa:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80145fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80145fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014600:	b672      	cpsid	i
    return(int_posture);
 8014602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8014604:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8014606:	4b6e      	ldr	r3, [pc, #440]	; (80147c0 <_tx_timer_thread_entry+0x1e0>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d003      	beq.n	801461c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f107 020c 	add.w	r2, r7, #12
 801461a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801461c:	4b68      	ldr	r3, [pc, #416]	; (80147c0 <_tx_timer_thread_entry+0x1e0>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2200      	movs	r2, #0
 8014622:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8014624:	4b66      	ldr	r3, [pc, #408]	; (80147c0 <_tx_timer_thread_entry+0x1e0>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	3304      	adds	r3, #4
 801462a:	4a65      	ldr	r2, [pc, #404]	; (80147c0 <_tx_timer_thread_entry+0x1e0>)
 801462c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801462e:	4b64      	ldr	r3, [pc, #400]	; (80147c0 <_tx_timer_thread_entry+0x1e0>)
 8014630:	681a      	ldr	r2, [r3, #0]
 8014632:	4b64      	ldr	r3, [pc, #400]	; (80147c4 <_tx_timer_thread_entry+0x1e4>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	429a      	cmp	r2, r3
 8014638:	d103      	bne.n	8014642 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801463a:	4b63      	ldr	r3, [pc, #396]	; (80147c8 <_tx_timer_thread_entry+0x1e8>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4a60      	ldr	r2, [pc, #384]	; (80147c0 <_tx_timer_thread_entry+0x1e0>)
 8014640:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8014642:	4b62      	ldr	r3, [pc, #392]	; (80147cc <_tx_timer_thread_entry+0x1ec>)
 8014644:	2200      	movs	r2, #0
 8014646:	601a      	str	r2, [r3, #0]
 8014648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801464a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464e:	f383 8810 	msr	PRIMASK, r3
}
 8014652:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014654:	f3ef 8310 	mrs	r3, PRIMASK
 8014658:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801465c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801465e:	b672      	cpsid	i
    return(int_posture);
 8014660:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8014662:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8014664:	e07f      	b.n	8014766 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8014670:	2300      	movs	r3, #0
 8014672:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8014674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014678:	429a      	cmp	r2, r3
 801467a:	d102      	bne.n	8014682 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801467c:	2300      	movs	r3, #0
 801467e:	60fb      	str	r3, [r7, #12]
 8014680:	e00e      	b.n	80146a0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8014682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014684:	695b      	ldr	r3, [r3, #20]
 8014686:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801468a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801468c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801468e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014692:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8014694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014696:	f107 020c 	add.w	r2, r7, #12
 801469a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801469e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80146a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	2b20      	cmp	r3, #32
 80146a6:	d911      	bls.n	80146cc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80146a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80146b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146b2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80146b4:	2300      	movs	r3, #0
 80146b6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80146b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146ba:	f107 0208 	add.w	r2, r7, #8
 80146be:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80146c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146c4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80146c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146c8:	60bb      	str	r3, [r7, #8]
 80146ca:	e01a      	b.n	8014702 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80146cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146ce:	689b      	ldr	r3, [r3, #8]
 80146d0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80146d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80146d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146da:	685a      	ldr	r2, [r3, #4]
 80146dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146de:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80146e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d009      	beq.n	80146fc <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80146e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146ea:	f107 0208 	add.w	r2, r7, #8
 80146ee:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80146f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146f4:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80146f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146f8:	60bb      	str	r3, [r7, #8]
 80146fa:	e002      	b.n	8014702 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80146fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146fe:	2200      	movs	r2, #0
 8014700:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8014702:	4a33      	ldr	r2, [pc, #204]	; (80147d0 <_tx_timer_thread_entry+0x1f0>)
 8014704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014706:	6013      	str	r3, [r2, #0]
 8014708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801470a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470e:	f383 8810 	msr	PRIMASK, r3
}
 8014712:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8014714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014716:	2b00      	cmp	r3, #0
 8014718:	d002      	beq.n	8014720 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801471a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801471c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801471e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014720:	f3ef 8310 	mrs	r3, PRIMASK
 8014724:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014726:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014728:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801472a:	b672      	cpsid	i
    return(int_posture);
 801472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801472e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8014730:	4b27      	ldr	r3, [pc, #156]	; (80147d0 <_tx_timer_thread_entry+0x1f0>)
 8014732:	2200      	movs	r2, #0
 8014734:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801473a:	429a      	cmp	r2, r3
 801473c:	d105      	bne.n	801474a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014740:	2200      	movs	r2, #0
 8014742:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8014744:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014746:	f7ff feb1 	bl	80144ac <_tx_timer_system_activate>
 801474a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801474c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	f383 8810 	msr	PRIMASK, r3
}
 8014754:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014756:	f3ef 8310 	mrs	r3, PRIMASK
 801475a:	623b      	str	r3, [r7, #32]
    return(posture);
 801475c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801475e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014760:	b672      	cpsid	i
    return(int_posture);
 8014762:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014764:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	2b00      	cmp	r3, #0
 801476a:	f47f af7c 	bne.w	8014666 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801476e:	4b17      	ldr	r3, [pc, #92]	; (80147cc <_tx_timer_thread_entry+0x1ec>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d116      	bne.n	80147a4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8014776:	4b17      	ldr	r3, [pc, #92]	; (80147d4 <_tx_timer_thread_entry+0x1f4>)
 8014778:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801477c:	2203      	movs	r2, #3
 801477e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014782:	2201      	movs	r2, #1
 8014784:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8014786:	4b14      	ldr	r3, [pc, #80]	; (80147d8 <_tx_timer_thread_entry+0x1f8>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	3301      	adds	r3, #1
 801478c:	4a12      	ldr	r2, [pc, #72]	; (80147d8 <_tx_timer_thread_entry+0x1f8>)
 801478e:	6013      	str	r3, [r2, #0]
 8014790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014792:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	f383 8810 	msr	PRIMASK, r3
}
 801479a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801479c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801479e:	f7ff fbbf 	bl	8013f20 <_tx_thread_system_suspend>
 80147a2:	e728      	b.n	80145f6 <_tx_timer_thread_entry+0x16>
 80147a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80147a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	f383 8810 	msr	PRIMASK, r3
}
 80147ae:	bf00      	nop
            TX_DISABLE
 80147b0:	e721      	b.n	80145f6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80147b2:	bf00      	nop
 80147b4:	3760      	adds	r7, #96	; 0x60
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop
 80147bc:	4154494d 	.word	0x4154494d
 80147c0:	24003740 	.word	0x24003740
 80147c4:	2400373c 	.word	0x2400373c
 80147c8:	24003738 	.word	0x24003738
 80147cc:	24003744 	.word	0x24003744
 80147d0:	24003750 	.word	0x24003750
 80147d4:	24003754 	.word	0x24003754
 80147d8:	240036a4 	.word	0x240036a4

080147dc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08a      	sub	sp, #40	; 0x28
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80147ea:	2300      	movs	r3, #0
 80147ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d102      	bne.n	80147fa <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80147f4:	2302      	movs	r3, #2
 80147f6:	627b      	str	r3, [r7, #36]	; 0x24
 80147f8:	e029      	b.n	801484e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	4a2d      	ldr	r2, [pc, #180]	; (80148b4 <_txe_byte_allocate+0xd8>)
 8014800:	4293      	cmp	r3, r2
 8014802:	d002      	beq.n	801480a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014804:	2302      	movs	r3, #2
 8014806:	627b      	str	r3, [r7, #36]	; 0x24
 8014808:	e021      	b.n	801484e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d102      	bne.n	8014816 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014810:	2303      	movs	r3, #3
 8014812:	627b      	str	r3, [r7, #36]	; 0x24
 8014814:	e01b      	b.n	801484e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d102      	bne.n	8014822 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801481c:	2305      	movs	r3, #5
 801481e:	627b      	str	r3, [r7, #36]	; 0x24
 8014820:	e015      	b.n	801484e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	69db      	ldr	r3, [r3, #28]
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	429a      	cmp	r2, r3
 801482a:	d902      	bls.n	8014832 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801482c:	2305      	movs	r3, #5
 801482e:	627b      	str	r3, [r7, #36]	; 0x24
 8014830:	e00d      	b.n	801484e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d00a      	beq.n	801484e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014838:	f3ef 8305 	mrs	r3, IPSR
 801483c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801483e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014840:	4b1d      	ldr	r3, [pc, #116]	; (80148b8 <_txe_byte_allocate+0xdc>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4313      	orrs	r3, r2
 8014846:	2b00      	cmp	r3, #0
 8014848:	d001      	beq.n	801484e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801484a:	2304      	movs	r3, #4
 801484c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014850:	2b00      	cmp	r3, #0
 8014852:	d108      	bne.n	8014866 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014854:	4b19      	ldr	r3, [pc, #100]	; (80148bc <_txe_byte_allocate+0xe0>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801485a:	6a3b      	ldr	r3, [r7, #32]
 801485c:	4a18      	ldr	r2, [pc, #96]	; (80148c0 <_txe_byte_allocate+0xe4>)
 801485e:	4293      	cmp	r3, r2
 8014860:	d101      	bne.n	8014866 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014862:	2313      	movs	r3, #19
 8014864:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8014866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014868:	2b00      	cmp	r3, #0
 801486a:	d114      	bne.n	8014896 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801486c:	f3ef 8305 	mrs	r3, IPSR
 8014870:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014872:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014874:	4b10      	ldr	r3, [pc, #64]	; (80148b8 <_txe_byte_allocate+0xdc>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4313      	orrs	r3, r2
 801487a:	2b00      	cmp	r3, #0
 801487c:	d00b      	beq.n	8014896 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801487e:	f3ef 8305 	mrs	r3, IPSR
 8014882:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014884:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014886:	4b0c      	ldr	r3, [pc, #48]	; (80148b8 <_txe_byte_allocate+0xdc>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	4313      	orrs	r3, r2
 801488c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014890:	d201      	bcs.n	8014896 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014892:	2313      	movs	r3, #19
 8014894:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	2b00      	cmp	r3, #0
 801489a:	d106      	bne.n	80148aa <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	68b9      	ldr	r1, [r7, #8]
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f7fd fb74 	bl	8011f90 <_tx_byte_allocate>
 80148a8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80148aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3728      	adds	r7, #40	; 0x28
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	42595445 	.word	0x42595445
 80148b8:	2400006c 	.word	0x2400006c
 80148bc:	2400360c 	.word	0x2400360c
 80148c0:	24003754 	.word	0x24003754

080148c4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b092      	sub	sp, #72	; 0x48
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
 80148d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80148d2:	2300      	movs	r3, #0
 80148d4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d102      	bne.n	80148e2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80148dc:	2302      	movs	r3, #2
 80148de:	647b      	str	r3, [r7, #68]	; 0x44
 80148e0:	e075      	b.n	80149ce <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80148e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148e4:	2b34      	cmp	r3, #52	; 0x34
 80148e6:	d002      	beq.n	80148ee <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80148e8:	2302      	movs	r3, #2
 80148ea:	647b      	str	r3, [r7, #68]	; 0x44
 80148ec:	e06f      	b.n	80149ce <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148ee:	f3ef 8310 	mrs	r3, PRIMASK
 80148f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80148f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80148f6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80148f8:	b672      	cpsid	i
    return(int_posture);
 80148fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80148fc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80148fe:	4b3b      	ldr	r3, [pc, #236]	; (80149ec <_txe_byte_pool_create+0x128>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	3301      	adds	r3, #1
 8014904:	4a39      	ldr	r2, [pc, #228]	; (80149ec <_txe_byte_pool_create+0x128>)
 8014906:	6013      	str	r3, [r2, #0]
 8014908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490e:	f383 8810 	msr	PRIMASK, r3
}
 8014912:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8014914:	4b36      	ldr	r3, [pc, #216]	; (80149f0 <_txe_byte_pool_create+0x12c>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801491a:	2300      	movs	r3, #0
 801491c:	643b      	str	r3, [r7, #64]	; 0x40
 801491e:	e009      	b.n	8014934 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014924:	429a      	cmp	r2, r3
 8014926:	d00b      	beq.n	8014940 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8014928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801492c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801492e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014930:	3301      	adds	r3, #1
 8014932:	643b      	str	r3, [r7, #64]	; 0x40
 8014934:	4b2f      	ldr	r3, [pc, #188]	; (80149f4 <_txe_byte_pool_create+0x130>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801493a:	429a      	cmp	r2, r3
 801493c:	d3f0      	bcc.n	8014920 <_txe_byte_pool_create+0x5c>
 801493e:	e000      	b.n	8014942 <_txe_byte_pool_create+0x7e>
                break;
 8014940:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014942:	f3ef 8310 	mrs	r3, PRIMASK
 8014946:	623b      	str	r3, [r7, #32]
    return(posture);
 8014948:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801494a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801494c:	b672      	cpsid	i
    return(int_posture);
 801494e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014950:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014952:	4b26      	ldr	r3, [pc, #152]	; (80149ec <_txe_byte_pool_create+0x128>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	3b01      	subs	r3, #1
 8014958:	4a24      	ldr	r2, [pc, #144]	; (80149ec <_txe_byte_pool_create+0x128>)
 801495a:	6013      	str	r3, [r2, #0]
 801495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014962:	f383 8810 	msr	PRIMASK, r3
}
 8014966:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014968:	f7ff f9a0 	bl	8013cac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014970:	429a      	cmp	r2, r3
 8014972:	d102      	bne.n	801497a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8014974:	2302      	movs	r3, #2
 8014976:	647b      	str	r3, [r7, #68]	; 0x44
 8014978:	e029      	b.n	80149ce <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d102      	bne.n	8014986 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014980:	2303      	movs	r3, #3
 8014982:	647b      	str	r3, [r7, #68]	; 0x44
 8014984:	e023      	b.n	80149ce <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	2b63      	cmp	r3, #99	; 0x63
 801498a:	d802      	bhi.n	8014992 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801498c:	2305      	movs	r3, #5
 801498e:	647b      	str	r3, [r7, #68]	; 0x44
 8014990:	e01d      	b.n	80149ce <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014992:	4b19      	ldr	r3, [pc, #100]	; (80149f8 <_txe_byte_pool_create+0x134>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801499a:	4a18      	ldr	r2, [pc, #96]	; (80149fc <_txe_byte_pool_create+0x138>)
 801499c:	4293      	cmp	r3, r2
 801499e:	d101      	bne.n	80149a4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80149a0:	2313      	movs	r3, #19
 80149a2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80149a4:	f3ef 8305 	mrs	r3, IPSR
 80149a8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80149aa:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80149ac:	4b14      	ldr	r3, [pc, #80]	; (8014a00 <_txe_byte_pool_create+0x13c>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4313      	orrs	r3, r2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00b      	beq.n	80149ce <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80149b6:	f3ef 8305 	mrs	r3, IPSR
 80149ba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80149bc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80149be:	4b10      	ldr	r3, [pc, #64]	; (8014a00 <_txe_byte_pool_create+0x13c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4313      	orrs	r3, r2
 80149c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80149c8:	d201      	bcs.n	80149ce <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80149ca:	2313      	movs	r3, #19
 80149cc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80149ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d106      	bne.n	80149e2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	68b9      	ldr	r1, [r7, #8]
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f7fd fc1a 	bl	8012214 <_tx_byte_pool_create>
 80149e0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80149e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3748      	adds	r7, #72	; 0x48
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	240036a4 	.word	0x240036a4
 80149f0:	240035fc 	.word	0x240035fc
 80149f4:	24003600 	.word	0x24003600
 80149f8:	2400360c 	.word	0x2400360c
 80149fc:	24003754 	.word	0x24003754
 8014a00:	2400006c 	.word	0x2400006c

08014a04 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b092      	sub	sp, #72	; 0x48
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
 8014a10:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014a12:	2300      	movs	r3, #0
 8014a14:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d102      	bne.n	8014a22 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014a1c:	230c      	movs	r3, #12
 8014a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8014a20:	e054      	b.n	8014acc <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	2b1c      	cmp	r3, #28
 8014a26:	d002      	beq.n	8014a2e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014a28:	230c      	movs	r3, #12
 8014a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8014a2c:	e04e      	b.n	8014acc <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8014a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014a36:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a38:	b672      	cpsid	i
    return(int_posture);
 8014a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014a3c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014a3e:	4b36      	ldr	r3, [pc, #216]	; (8014b18 <_txe_semaphore_create+0x114>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	3301      	adds	r3, #1
 8014a44:	4a34      	ldr	r2, [pc, #208]	; (8014b18 <_txe_semaphore_create+0x114>)
 8014a46:	6013      	str	r3, [r2, #0]
 8014a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4e:	f383 8810 	msr	PRIMASK, r3
}
 8014a52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8014a54:	4b31      	ldr	r3, [pc, #196]	; (8014b1c <_txe_semaphore_create+0x118>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8014a5e:	e009      	b.n	8014a74 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8014a60:	68fa      	ldr	r2, [r7, #12]
 8014a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d00b      	beq.n	8014a80 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8014a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a6a:	695b      	ldr	r3, [r3, #20]
 8014a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a70:	3301      	adds	r3, #1
 8014a72:	643b      	str	r3, [r7, #64]	; 0x40
 8014a74:	4b2a      	ldr	r3, [pc, #168]	; (8014b20 <_txe_semaphore_create+0x11c>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d3f0      	bcc.n	8014a60 <_txe_semaphore_create+0x5c>
 8014a7e:	e000      	b.n	8014a82 <_txe_semaphore_create+0x7e>
                break;
 8014a80:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a82:	f3ef 8310 	mrs	r3, PRIMASK
 8014a86:	623b      	str	r3, [r7, #32]
    return(posture);
 8014a88:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014a8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a8c:	b672      	cpsid	i
    return(int_posture);
 8014a8e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014a90:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014a92:	4b21      	ldr	r3, [pc, #132]	; (8014b18 <_txe_semaphore_create+0x114>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	3b01      	subs	r3, #1
 8014a98:	4a1f      	ldr	r2, [pc, #124]	; (8014b18 <_txe_semaphore_create+0x114>)
 8014a9a:	6013      	str	r3, [r2, #0]
 8014a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa2:	f383 8810 	msr	PRIMASK, r3
}
 8014aa6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014aa8:	f7ff f900 	bl	8013cac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d102      	bne.n	8014aba <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8014ab4:	230c      	movs	r3, #12
 8014ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8014ab8:	e008      	b.n	8014acc <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014aba:	4b1a      	ldr	r3, [pc, #104]	; (8014b24 <_txe_semaphore_create+0x120>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ac2:	4a19      	ldr	r2, [pc, #100]	; (8014b28 <_txe_semaphore_create+0x124>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d101      	bne.n	8014acc <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014ac8:	2313      	movs	r3, #19
 8014aca:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d114      	bne.n	8014afc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ad2:	f3ef 8305 	mrs	r3, IPSR
 8014ad6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014ad8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014ada:	4b14      	ldr	r3, [pc, #80]	; (8014b2c <_txe_semaphore_create+0x128>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	4313      	orrs	r3, r2
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d00b      	beq.n	8014afc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ae4:	f3ef 8305 	mrs	r3, IPSR
 8014ae8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014aea:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014aec:	4b0f      	ldr	r3, [pc, #60]	; (8014b2c <_txe_semaphore_create+0x128>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4313      	orrs	r3, r2
 8014af2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014af6:	d201      	bcs.n	8014afc <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014af8:	2313      	movs	r3, #19
 8014afa:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d105      	bne.n	8014b0e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	68b9      	ldr	r1, [r7, #8]
 8014b06:	68f8      	ldr	r0, [r7, #12]
 8014b08:	f7fe fc74 	bl	80133f4 <_tx_semaphore_create>
 8014b0c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3748      	adds	r7, #72	; 0x48
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	240036a4 	.word	0x240036a4
 8014b1c:	240035d4 	.word	0x240035d4
 8014b20:	240035d8 	.word	0x240035d8
 8014b24:	2400360c 	.word	0x2400360c
 8014b28:	24003754 	.word	0x24003754
 8014b2c:	2400006c 	.word	0x2400006c

08014b30 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b086      	sub	sp, #24
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d102      	bne.n	8014b48 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014b42:	230c      	movs	r3, #12
 8014b44:	617b      	str	r3, [r7, #20]
 8014b46:	e01c      	b.n	8014b82 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	4a13      	ldr	r2, [pc, #76]	; (8014b9c <_txe_semaphore_delete+0x6c>)
 8014b4e:	4293      	cmp	r3, r2
 8014b50:	d002      	beq.n	8014b58 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014b52:	230c      	movs	r3, #12
 8014b54:	617b      	str	r3, [r7, #20]
 8014b56:	e014      	b.n	8014b82 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014b58:	f3ef 8305 	mrs	r3, IPSR
 8014b5c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014b5e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014b60:	4b0f      	ldr	r3, [pc, #60]	; (8014ba0 <_txe_semaphore_delete+0x70>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	4313      	orrs	r3, r2
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d002      	beq.n	8014b70 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014b6a:	2313      	movs	r3, #19
 8014b6c:	617b      	str	r3, [r7, #20]
 8014b6e:	e008      	b.n	8014b82 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014b70:	4b0c      	ldr	r3, [pc, #48]	; (8014ba4 <_txe_semaphore_delete+0x74>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	4a0b      	ldr	r2, [pc, #44]	; (8014ba8 <_txe_semaphore_delete+0x78>)
 8014b7a:	4293      	cmp	r3, r2
 8014b7c:	d101      	bne.n	8014b82 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014b7e:	2313      	movs	r3, #19
 8014b80:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d103      	bne.n	8014b90 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7fe fc85 	bl	8013498 <_tx_semaphore_delete>
 8014b8e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014b90:	697b      	ldr	r3, [r7, #20]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3718      	adds	r7, #24
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	53454d41 	.word	0x53454d41
 8014ba0:	2400006c 	.word	0x2400006c
 8014ba4:	2400360c 	.word	0x2400360c
 8014ba8:	24003754 	.word	0x24003754

08014bac <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b086      	sub	sp, #24
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d102      	bne.n	8014bc6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014bc0:	230c      	movs	r3, #12
 8014bc2:	617b      	str	r3, [r7, #20]
 8014bc4:	e01f      	b.n	8014c06 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4a15      	ldr	r2, [pc, #84]	; (8014c20 <_txe_semaphore_get+0x74>)
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d002      	beq.n	8014bd6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014bd0:	230c      	movs	r3, #12
 8014bd2:	617b      	str	r3, [r7, #20]
 8014bd4:	e017      	b.n	8014c06 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d014      	beq.n	8014c06 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014bdc:	f3ef 8305 	mrs	r3, IPSR
 8014be0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014be2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014be4:	4b0f      	ldr	r3, [pc, #60]	; (8014c24 <_txe_semaphore_get+0x78>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	4313      	orrs	r3, r2
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d002      	beq.n	8014bf4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014bee:	2304      	movs	r3, #4
 8014bf0:	617b      	str	r3, [r7, #20]
 8014bf2:	e008      	b.n	8014c06 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014bf4:	4b0c      	ldr	r3, [pc, #48]	; (8014c28 <_txe_semaphore_get+0x7c>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	4a0b      	ldr	r2, [pc, #44]	; (8014c2c <_txe_semaphore_get+0x80>)
 8014bfe:	4293      	cmp	r3, r2
 8014c00:	d101      	bne.n	8014c06 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8014c02:	2304      	movs	r3, #4
 8014c04:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014c06:	697b      	ldr	r3, [r7, #20]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d104      	bne.n	8014c16 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8014c0c:	6839      	ldr	r1, [r7, #0]
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f7fe fcd2 	bl	80135b8 <_tx_semaphore_get>
 8014c14:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014c16:	697b      	ldr	r3, [r7, #20]
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3718      	adds	r7, #24
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	53454d41 	.word	0x53454d41
 8014c24:	2400006c 	.word	0x2400006c
 8014c28:	2400360c 	.word	0x2400360c
 8014c2c:	24003754 	.word	0x24003754

08014c30 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d102      	bne.n	8014c44 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014c3e:	230c      	movs	r3, #12
 8014c40:	60fb      	str	r3, [r7, #12]
 8014c42:	e00b      	b.n	8014c5c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	4a07      	ldr	r2, [pc, #28]	; (8014c68 <_txe_semaphore_put+0x38>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d002      	beq.n	8014c54 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014c4e:	230c      	movs	r3, #12
 8014c50:	60fb      	str	r3, [r7, #12]
 8014c52:	e003      	b.n	8014c5c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7fe fd41 	bl	80136dc <_tx_semaphore_put>
 8014c5a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014c5c:	68fb      	ldr	r3, [r7, #12]
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3710      	adds	r7, #16
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	53454d41 	.word	0x53454d41

08014c6c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b09a      	sub	sp, #104	; 0x68
 8014c70:	af06      	add	r7, sp, #24
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	607a      	str	r2, [r7, #4]
 8014c78:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d102      	bne.n	8014c8a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014c84:	230e      	movs	r3, #14
 8014c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c88:	e0bb      	b.n	8014e02 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8014c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c8c:	2bb0      	cmp	r3, #176	; 0xb0
 8014c8e:	d002      	beq.n	8014c96 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014c90:	230e      	movs	r3, #14
 8014c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c94:	e0b5      	b.n	8014e02 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c96:	f3ef 8310 	mrs	r3, PRIMASK
 8014c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014c9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ca0:	b672      	cpsid	i
    return(int_posture);
 8014ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014ca4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014ca6:	4b64      	ldr	r3, [pc, #400]	; (8014e38 <_txe_thread_create+0x1cc>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	3301      	adds	r3, #1
 8014cac:	4a62      	ldr	r2, [pc, #392]	; (8014e38 <_txe_thread_create+0x1cc>)
 8014cae:	6013      	str	r3, [r2, #0]
 8014cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb6:	f383 8810 	msr	PRIMASK, r3
}
 8014cba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8014cc0:	4b5e      	ldr	r3, [pc, #376]	; (8014e3c <_txe_thread_create+0x1d0>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014cc8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8014cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ccc:	3b01      	subs	r3, #1
 8014cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cd0:	4413      	add	r3, r2
 8014cd2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8014cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014cd8:	2300      	movs	r3, #0
 8014cda:	647b      	str	r3, [r7, #68]	; 0x44
 8014cdc:	e02b      	b.n	8014d36 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8014cde:	68fa      	ldr	r2, [r7, #12]
 8014ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d101      	bne.n	8014cea <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8014cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d028      	beq.n	8014d42 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8014cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d308      	bcc.n	8014d0c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8014cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cfc:	691b      	ldr	r3, [r3, #16]
 8014cfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d203      	bcs.n	8014d0c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014d04:	2300      	movs	r3, #0
 8014d06:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014d08:	2301      	movs	r3, #1
 8014d0a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d308      	bcc.n	8014d28 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8014d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d18:	691b      	ldr	r3, [r3, #16]
 8014d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d203      	bcs.n	8014d28 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014d20:	2300      	movs	r3, #0
 8014d22:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014d24:	2301      	movs	r3, #1
 8014d26:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8014d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014d2e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d32:	3301      	adds	r3, #1
 8014d34:	647b      	str	r3, [r7, #68]	; 0x44
 8014d36:	4b42      	ldr	r3, [pc, #264]	; (8014e40 <_txe_thread_create+0x1d4>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	d3ce      	bcc.n	8014cde <_txe_thread_create+0x72>
 8014d40:	e000      	b.n	8014d44 <_txe_thread_create+0xd8>
                break;
 8014d42:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d44:	f3ef 8310 	mrs	r3, PRIMASK
 8014d48:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014d4a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014d4c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d4e:	b672      	cpsid	i
    return(int_posture);
 8014d50:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014d52:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014d54:	4b38      	ldr	r3, [pc, #224]	; (8014e38 <_txe_thread_create+0x1cc>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	3b01      	subs	r3, #1
 8014d5a:	4a37      	ldr	r2, [pc, #220]	; (8014e38 <_txe_thread_create+0x1cc>)
 8014d5c:	6013      	str	r3, [r2, #0]
 8014d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d60:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d62:	6a3b      	ldr	r3, [r7, #32]
 8014d64:	f383 8810 	msr	PRIMASK, r3
}
 8014d68:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014d6a:	f7fe ff9f 	bl	8013cac <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8014d6e:	68fa      	ldr	r2, [r7, #12]
 8014d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d102      	bne.n	8014d7c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8014d76:	230e      	movs	r3, #14
 8014d78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d7a:	e042      	b.n	8014e02 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8014d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d102      	bne.n	8014d88 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014d82:	2303      	movs	r3, #3
 8014d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d86:	e03c      	b.n	8014e02 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d102      	bne.n	8014d94 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014d8e:	2303      	movs	r3, #3
 8014d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d92:	e036      	b.n	8014e02 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8014d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d96:	2bc7      	cmp	r3, #199	; 0xc7
 8014d98:	d802      	bhi.n	8014da0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8014d9a:	2305      	movs	r3, #5
 8014d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d9e:	e030      	b.n	8014e02 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8014da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014da2:	2b1f      	cmp	r3, #31
 8014da4:	d902      	bls.n	8014dac <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8014da6:	230f      	movs	r3, #15
 8014da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014daa:	e02a      	b.n	8014e02 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8014dac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d902      	bls.n	8014dba <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8014db4:	2318      	movs	r3, #24
 8014db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014db8:	e023      	b.n	8014e02 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8014dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d902      	bls.n	8014dc6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8014dc0:	2310      	movs	r3, #16
 8014dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014dc4:	e01d      	b.n	8014e02 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8014dc6:	4b1f      	ldr	r3, [pc, #124]	; (8014e44 <_txe_thread_create+0x1d8>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8014dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dce:	4a1e      	ldr	r2, [pc, #120]	; (8014e48 <_txe_thread_create+0x1dc>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d101      	bne.n	8014dd8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014dd4:	2313      	movs	r3, #19
 8014dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014dd8:	f3ef 8305 	mrs	r3, IPSR
 8014ddc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014dde:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014de0:	4b1a      	ldr	r3, [pc, #104]	; (8014e4c <_txe_thread_create+0x1e0>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	4313      	orrs	r3, r2
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00b      	beq.n	8014e02 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014dea:	f3ef 8305 	mrs	r3, IPSR
 8014dee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014df0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014df2:	4b16      	ldr	r3, [pc, #88]	; (8014e4c <_txe_thread_create+0x1e0>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	4313      	orrs	r3, r2
 8014df8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014dfc:	d201      	bcs.n	8014e02 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014dfe:	2313      	movs	r3, #19
 8014e00:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d112      	bne.n	8014e2e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e0a:	9305      	str	r3, [sp, #20]
 8014e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e0e:	9304      	str	r3, [sp, #16]
 8014e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e12:	9303      	str	r3, [sp, #12]
 8014e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e16:	9302      	str	r3, [sp, #8]
 8014e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e1a:	9301      	str	r3, [sp, #4]
 8014e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e1e:	9300      	str	r3, [sp, #0]
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	68b9      	ldr	r1, [r7, #8]
 8014e26:	68f8      	ldr	r0, [r7, #12]
 8014e28:	f7fe fcb0 	bl	801378c <_tx_thread_create>
 8014e2c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3750      	adds	r7, #80	; 0x50
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	240036a4 	.word	0x240036a4
 8014e3c:	24003614 	.word	0x24003614
 8014e40:	24003618 	.word	0x24003618
 8014e44:	2400360c 	.word	0x2400360c
 8014e48:	24003754 	.word	0x24003754
 8014e4c:	2400006c 	.word	0x2400006c

08014e50 <memset>:
 8014e50:	4402      	add	r2, r0
 8014e52:	4603      	mov	r3, r0
 8014e54:	4293      	cmp	r3, r2
 8014e56:	d100      	bne.n	8014e5a <memset+0xa>
 8014e58:	4770      	bx	lr
 8014e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8014e5e:	e7f9      	b.n	8014e54 <memset+0x4>

08014e60 <__libc_init_array>:
 8014e60:	b570      	push	{r4, r5, r6, lr}
 8014e62:	4d0d      	ldr	r5, [pc, #52]	; (8014e98 <__libc_init_array+0x38>)
 8014e64:	4c0d      	ldr	r4, [pc, #52]	; (8014e9c <__libc_init_array+0x3c>)
 8014e66:	1b64      	subs	r4, r4, r5
 8014e68:	10a4      	asrs	r4, r4, #2
 8014e6a:	2600      	movs	r6, #0
 8014e6c:	42a6      	cmp	r6, r4
 8014e6e:	d109      	bne.n	8014e84 <__libc_init_array+0x24>
 8014e70:	4d0b      	ldr	r5, [pc, #44]	; (8014ea0 <__libc_init_array+0x40>)
 8014e72:	4c0c      	ldr	r4, [pc, #48]	; (8014ea4 <__libc_init_array+0x44>)
 8014e74:	f000 f826 	bl	8014ec4 <_init>
 8014e78:	1b64      	subs	r4, r4, r5
 8014e7a:	10a4      	asrs	r4, r4, #2
 8014e7c:	2600      	movs	r6, #0
 8014e7e:	42a6      	cmp	r6, r4
 8014e80:	d105      	bne.n	8014e8e <__libc_init_array+0x2e>
 8014e82:	bd70      	pop	{r4, r5, r6, pc}
 8014e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e88:	4798      	blx	r3
 8014e8a:	3601      	adds	r6, #1
 8014e8c:	e7ee      	b.n	8014e6c <__libc_init_array+0xc>
 8014e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e92:	4798      	blx	r3
 8014e94:	3601      	adds	r6, #1
 8014e96:	e7f2      	b.n	8014e7e <__libc_init_array+0x1e>
 8014e98:	08014ff8 	.word	0x08014ff8
 8014e9c:	08014ff8 	.word	0x08014ff8
 8014ea0:	08014ff8 	.word	0x08014ff8
 8014ea4:	08014ffc 	.word	0x08014ffc

08014ea8 <memcpy>:
 8014ea8:	440a      	add	r2, r1
 8014eaa:	4291      	cmp	r1, r2
 8014eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8014eb0:	d100      	bne.n	8014eb4 <memcpy+0xc>
 8014eb2:	4770      	bx	lr
 8014eb4:	b510      	push	{r4, lr}
 8014eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ebe:	4291      	cmp	r1, r2
 8014ec0:	d1f9      	bne.n	8014eb6 <memcpy+0xe>
 8014ec2:	bd10      	pop	{r4, pc}

08014ec4 <_init>:
 8014ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ec6:	bf00      	nop
 8014ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eca:	bc08      	pop	{r3}
 8014ecc:	469e      	mov	lr, r3
 8014ece:	4770      	bx	lr

08014ed0 <_fini>:
 8014ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed2:	bf00      	nop
 8014ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ed6:	bc08      	pop	{r3}
 8014ed8:	469e      	mov	lr, r3
 8014eda:	4770      	bx	lr
