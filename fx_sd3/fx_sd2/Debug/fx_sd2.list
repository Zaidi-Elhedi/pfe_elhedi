
fx_sd2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014154  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080143f4  080143f4  000243f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080144d4  080144d4  000244d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080144dc  080144dc  000244dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080144e0  080144e0  000244e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  080144e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003bd4  24000080  08014554  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24003c54  08014554  00033c54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003009e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004a21f  00000000  00000000  000300e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a78c  00000000  00000000  0007a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d10  00000000  00000000  00084a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000146b  00000000  00000000  000867a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042ba1  00000000  00000000  00087c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00040071  00000000  00000000  000ca7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001704ae  00000000  00000000  0010a81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005e78  00000000  00000000  0027accc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000fd  00000000  00000000  00280b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080143dc 	.word	0x080143dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	080143dc 	.word	0x080143dc

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24003648 	.word	0x24003648
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	240036e4 	.word	0x240036e4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	2400364c 	.word	0x2400364c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24003650 	.word	0x24003650
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24003c50 	.word	0x24003c50

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f013 f9e5 	bl	8013888 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f013 f8d0 	bl	8013668 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	240036f0 	.word	0x240036f0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24003c50 	.word	0x24003c50
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	240036f4 	.word	0x240036f4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24003780 	.word	0x24003780
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24003784 	.word	0x24003784
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2400377c 	.word	0x2400377c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24003778 	.word	0x24003778
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	240036e4 	.word	0x240036e4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	2400364c 	.word	0x2400364c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24003650 	.word	0x24003650
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <__aeabi_uldivmod>:
 8000518:	b953      	cbnz	r3, 8000530 <__aeabi_uldivmod+0x18>
 800051a:	b94a      	cbnz	r2, 8000530 <__aeabi_uldivmod+0x18>
 800051c:	2900      	cmp	r1, #0
 800051e:	bf08      	it	eq
 8000520:	2800      	cmpeq	r0, #0
 8000522:	bf1c      	itt	ne
 8000524:	f04f 31ff 	movne.w	r1, #4294967295
 8000528:	f04f 30ff 	movne.w	r0, #4294967295
 800052c:	f000 b970 	b.w	8000810 <__aeabi_idiv0>
 8000530:	f1ad 0c08 	sub.w	ip, sp, #8
 8000534:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000538:	f000 f806 	bl	8000548 <__udivmoddi4>
 800053c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000544:	b004      	add	sp, #16
 8000546:	4770      	bx	lr

08000548 <__udivmoddi4>:
 8000548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800054c:	9e08      	ldr	r6, [sp, #32]
 800054e:	460d      	mov	r5, r1
 8000550:	4604      	mov	r4, r0
 8000552:	460f      	mov	r7, r1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d14a      	bne.n	80005ee <__udivmoddi4+0xa6>
 8000558:	428a      	cmp	r2, r1
 800055a:	4694      	mov	ip, r2
 800055c:	d965      	bls.n	800062a <__udivmoddi4+0xe2>
 800055e:	fab2 f382 	clz	r3, r2
 8000562:	b143      	cbz	r3, 8000576 <__udivmoddi4+0x2e>
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	f1c3 0220 	rsb	r2, r3, #32
 800056c:	409f      	lsls	r7, r3
 800056e:	fa20 f202 	lsr.w	r2, r0, r2
 8000572:	4317      	orrs	r7, r2
 8000574:	409c      	lsls	r4, r3
 8000576:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800057a:	fa1f f58c 	uxth.w	r5, ip
 800057e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000582:	0c22      	lsrs	r2, r4, #16
 8000584:	fb0e 7711 	mls	r7, lr, r1, r7
 8000588:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800058c:	fb01 f005 	mul.w	r0, r1, r5
 8000590:	4290      	cmp	r0, r2
 8000592:	d90a      	bls.n	80005aa <__udivmoddi4+0x62>
 8000594:	eb1c 0202 	adds.w	r2, ip, r2
 8000598:	f101 37ff 	add.w	r7, r1, #4294967295
 800059c:	f080 811c 	bcs.w	80007d8 <__udivmoddi4+0x290>
 80005a0:	4290      	cmp	r0, r2
 80005a2:	f240 8119 	bls.w	80007d8 <__udivmoddi4+0x290>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	1a12      	subs	r2, r2, r0
 80005ac:	b2a4      	uxth	r4, r4
 80005ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80005b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80005b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005ba:	fb00 f505 	mul.w	r5, r0, r5
 80005be:	42a5      	cmp	r5, r4
 80005c0:	d90a      	bls.n	80005d8 <__udivmoddi4+0x90>
 80005c2:	eb1c 0404 	adds.w	r4, ip, r4
 80005c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80005ca:	f080 8107 	bcs.w	80007dc <__udivmoddi4+0x294>
 80005ce:	42a5      	cmp	r5, r4
 80005d0:	f240 8104 	bls.w	80007dc <__udivmoddi4+0x294>
 80005d4:	4464      	add	r4, ip
 80005d6:	3802      	subs	r0, #2
 80005d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005dc:	1b64      	subs	r4, r4, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	b11e      	cbz	r6, 80005ea <__udivmoddi4+0xa2>
 80005e2:	40dc      	lsrs	r4, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	e9c6 4300 	strd	r4, r3, [r6]
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0xbc>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	f000 80ed 	beq.w	80007d2 <__udivmoddi4+0x28a>
 80005f8:	2100      	movs	r1, #0
 80005fa:	e9c6 0500 	strd	r0, r5, [r6]
 80005fe:	4608      	mov	r0, r1
 8000600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000604:	fab3 f183 	clz	r1, r3
 8000608:	2900      	cmp	r1, #0
 800060a:	d149      	bne.n	80006a0 <__udivmoddi4+0x158>
 800060c:	42ab      	cmp	r3, r5
 800060e:	d302      	bcc.n	8000616 <__udivmoddi4+0xce>
 8000610:	4282      	cmp	r2, r0
 8000612:	f200 80f8 	bhi.w	8000806 <__udivmoddi4+0x2be>
 8000616:	1a84      	subs	r4, r0, r2
 8000618:	eb65 0203 	sbc.w	r2, r5, r3
 800061c:	2001      	movs	r0, #1
 800061e:	4617      	mov	r7, r2
 8000620:	2e00      	cmp	r6, #0
 8000622:	d0e2      	beq.n	80005ea <__udivmoddi4+0xa2>
 8000624:	e9c6 4700 	strd	r4, r7, [r6]
 8000628:	e7df      	b.n	80005ea <__udivmoddi4+0xa2>
 800062a:	b902      	cbnz	r2, 800062e <__udivmoddi4+0xe6>
 800062c:	deff      	udf	#255	; 0xff
 800062e:	fab2 f382 	clz	r3, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8090 	bne.w	8000758 <__udivmoddi4+0x210>
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800063e:	fa1f fe8c 	uxth.w	lr, ip
 8000642:	2101      	movs	r1, #1
 8000644:	fbb2 f5f7 	udiv	r5, r2, r7
 8000648:	fb07 2015 	mls	r0, r7, r5, r2
 800064c:	0c22      	lsrs	r2, r4, #16
 800064e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000652:	fb0e f005 	mul.w	r0, lr, r5
 8000656:	4290      	cmp	r0, r2
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x124>
 800065a:	eb1c 0202 	adds.w	r2, ip, r2
 800065e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000662:	d202      	bcs.n	800066a <__udivmoddi4+0x122>
 8000664:	4290      	cmp	r0, r2
 8000666:	f200 80cb 	bhi.w	8000800 <__udivmoddi4+0x2b8>
 800066a:	4645      	mov	r5, r8
 800066c:	1a12      	subs	r2, r2, r0
 800066e:	b2a4      	uxth	r4, r4
 8000670:	fbb2 f0f7 	udiv	r0, r2, r7
 8000674:	fb07 2210 	mls	r2, r7, r0, r2
 8000678:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800067c:	fb0e fe00 	mul.w	lr, lr, r0
 8000680:	45a6      	cmp	lr, r4
 8000682:	d908      	bls.n	8000696 <__udivmoddi4+0x14e>
 8000684:	eb1c 0404 	adds.w	r4, ip, r4
 8000688:	f100 32ff 	add.w	r2, r0, #4294967295
 800068c:	d202      	bcs.n	8000694 <__udivmoddi4+0x14c>
 800068e:	45a6      	cmp	lr, r4
 8000690:	f200 80bb 	bhi.w	800080a <__udivmoddi4+0x2c2>
 8000694:	4610      	mov	r0, r2
 8000696:	eba4 040e 	sub.w	r4, r4, lr
 800069a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800069e:	e79f      	b.n	80005e0 <__udivmoddi4+0x98>
 80006a0:	f1c1 0720 	rsb	r7, r1, #32
 80006a4:	408b      	lsls	r3, r1
 80006a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ae:	fa05 f401 	lsl.w	r4, r5, r1
 80006b2:	fa20 f307 	lsr.w	r3, r0, r7
 80006b6:	40fd      	lsrs	r5, r7
 80006b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006bc:	4323      	orrs	r3, r4
 80006be:	fbb5 f8f9 	udiv	r8, r5, r9
 80006c2:	fa1f fe8c 	uxth.w	lr, ip
 80006c6:	fb09 5518 	mls	r5, r9, r8, r5
 80006ca:	0c1c      	lsrs	r4, r3, #16
 80006cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006d0:	fb08 f50e 	mul.w	r5, r8, lr
 80006d4:	42a5      	cmp	r5, r4
 80006d6:	fa02 f201 	lsl.w	r2, r2, r1
 80006da:	fa00 f001 	lsl.w	r0, r0, r1
 80006de:	d90b      	bls.n	80006f8 <__udivmoddi4+0x1b0>
 80006e0:	eb1c 0404 	adds.w	r4, ip, r4
 80006e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006e8:	f080 8088 	bcs.w	80007fc <__udivmoddi4+0x2b4>
 80006ec:	42a5      	cmp	r5, r4
 80006ee:	f240 8085 	bls.w	80007fc <__udivmoddi4+0x2b4>
 80006f2:	f1a8 0802 	sub.w	r8, r8, #2
 80006f6:	4464      	add	r4, ip
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	b29d      	uxth	r5, r3
 80006fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000700:	fb09 4413 	mls	r4, r9, r3, r4
 8000704:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000708:	fb03 fe0e 	mul.w	lr, r3, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x1da>
 8000710:	eb1c 0404 	adds.w	r4, ip, r4
 8000714:	f103 35ff 	add.w	r5, r3, #4294967295
 8000718:	d26c      	bcs.n	80007f4 <__udivmoddi4+0x2ac>
 800071a:	45a6      	cmp	lr, r4
 800071c:	d96a      	bls.n	80007f4 <__udivmoddi4+0x2ac>
 800071e:	3b02      	subs	r3, #2
 8000720:	4464      	add	r4, ip
 8000722:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000726:	fba3 9502 	umull	r9, r5, r3, r2
 800072a:	eba4 040e 	sub.w	r4, r4, lr
 800072e:	42ac      	cmp	r4, r5
 8000730:	46c8      	mov	r8, r9
 8000732:	46ae      	mov	lr, r5
 8000734:	d356      	bcc.n	80007e4 <__udivmoddi4+0x29c>
 8000736:	d053      	beq.n	80007e0 <__udivmoddi4+0x298>
 8000738:	b156      	cbz	r6, 8000750 <__udivmoddi4+0x208>
 800073a:	ebb0 0208 	subs.w	r2, r0, r8
 800073e:	eb64 040e 	sbc.w	r4, r4, lr
 8000742:	fa04 f707 	lsl.w	r7, r4, r7
 8000746:	40ca      	lsrs	r2, r1
 8000748:	40cc      	lsrs	r4, r1
 800074a:	4317      	orrs	r7, r2
 800074c:	e9c6 7400 	strd	r7, r4, [r6]
 8000750:	4618      	mov	r0, r3
 8000752:	2100      	movs	r1, #0
 8000754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000758:	f1c3 0120 	rsb	r1, r3, #32
 800075c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000760:	fa20 f201 	lsr.w	r2, r0, r1
 8000764:	fa25 f101 	lsr.w	r1, r5, r1
 8000768:	409d      	lsls	r5, r3
 800076a:	432a      	orrs	r2, r5
 800076c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000770:	fa1f fe8c 	uxth.w	lr, ip
 8000774:	fbb1 f0f7 	udiv	r0, r1, r7
 8000778:	fb07 1510 	mls	r5, r7, r0, r1
 800077c:	0c11      	lsrs	r1, r2, #16
 800077e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000782:	fb00 f50e 	mul.w	r5, r0, lr
 8000786:	428d      	cmp	r5, r1
 8000788:	fa04 f403 	lsl.w	r4, r4, r3
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x258>
 800078e:	eb1c 0101 	adds.w	r1, ip, r1
 8000792:	f100 38ff 	add.w	r8, r0, #4294967295
 8000796:	d22f      	bcs.n	80007f8 <__udivmoddi4+0x2b0>
 8000798:	428d      	cmp	r5, r1
 800079a:	d92d      	bls.n	80007f8 <__udivmoddi4+0x2b0>
 800079c:	3802      	subs	r0, #2
 800079e:	4461      	add	r1, ip
 80007a0:	1b49      	subs	r1, r1, r5
 80007a2:	b292      	uxth	r2, r2
 80007a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80007a8:	fb07 1115 	mls	r1, r7, r5, r1
 80007ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007b0:	fb05 f10e 	mul.w	r1, r5, lr
 80007b4:	4291      	cmp	r1, r2
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x282>
 80007b8:	eb1c 0202 	adds.w	r2, ip, r2
 80007bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c0:	d216      	bcs.n	80007f0 <__udivmoddi4+0x2a8>
 80007c2:	4291      	cmp	r1, r2
 80007c4:	d914      	bls.n	80007f0 <__udivmoddi4+0x2a8>
 80007c6:	3d02      	subs	r5, #2
 80007c8:	4462      	add	r2, ip
 80007ca:	1a52      	subs	r2, r2, r1
 80007cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007d0:	e738      	b.n	8000644 <__udivmoddi4+0xfc>
 80007d2:	4631      	mov	r1, r6
 80007d4:	4630      	mov	r0, r6
 80007d6:	e708      	b.n	80005ea <__udivmoddi4+0xa2>
 80007d8:	4639      	mov	r1, r7
 80007da:	e6e6      	b.n	80005aa <__udivmoddi4+0x62>
 80007dc:	4610      	mov	r0, r2
 80007de:	e6fb      	b.n	80005d8 <__udivmoddi4+0x90>
 80007e0:	4548      	cmp	r0, r9
 80007e2:	d2a9      	bcs.n	8000738 <__udivmoddi4+0x1f0>
 80007e4:	ebb9 0802 	subs.w	r8, r9, r2
 80007e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ec:	3b01      	subs	r3, #1
 80007ee:	e7a3      	b.n	8000738 <__udivmoddi4+0x1f0>
 80007f0:	4645      	mov	r5, r8
 80007f2:	e7ea      	b.n	80007ca <__udivmoddi4+0x282>
 80007f4:	462b      	mov	r3, r5
 80007f6:	e794      	b.n	8000722 <__udivmoddi4+0x1da>
 80007f8:	4640      	mov	r0, r8
 80007fa:	e7d1      	b.n	80007a0 <__udivmoddi4+0x258>
 80007fc:	46d0      	mov	r8, sl
 80007fe:	e77b      	b.n	80006f8 <__udivmoddi4+0x1b0>
 8000800:	3d02      	subs	r5, #2
 8000802:	4462      	add	r2, ip
 8000804:	e732      	b.n	800066c <__udivmoddi4+0x124>
 8000806:	4608      	mov	r0, r1
 8000808:	e70a      	b.n	8000620 <__udivmoddi4+0xd8>
 800080a:	4464      	add	r4, ip
 800080c:	3802      	subs	r0, #2
 800080e:	e742      	b.n	8000696 <__udivmoddi4+0x14e>

08000810 <__aeabi_idiv0>:
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000820:	2334      	movs	r3, #52	; 0x34
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <tx_application_define+0x6c>)
 800082a:	4916      	ldr	r1, [pc, #88]	; (8000884 <tx_application_define+0x70>)
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <tx_application_define+0x74>)
 800082e:	f013 fad5 	bl	8013ddc <_txe_byte_pool_create>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d109      	bne.n	800084c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <tx_application_define+0x74>)
 800083a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f000 f82b 	bl	8000898 <App_ThreadX_Init>
 8000842:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d000      	beq.n	800084c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800084a:	e7fe      	b.n	800084a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <tx_application_define+0x78>)
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <tx_application_define+0x7c>)
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <tx_application_define+0x80>)
 800085a:	f013 fabf 	bl	8013ddc <_txe_byte_pool_create>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <tx_application_define+0x80>)
 8000866:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000868:	68b8      	ldr	r0, [r7, #8]
 800086a:	f008 fb69 	bl	8008f40 <MX_FileX_Init>
 800086e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d000      	beq.n	8000878 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000876:	e7fe      	b.n	8000876 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400009c 	.word	0x2400009c
 8000884:	080143f4 	.word	0x080143f4
 8000888:	2400049c 	.word	0x2400049c
 800088c:	240004d0 	.word	0x240004d0
 8000890:	08014408 	.word	0x08014408
 8000894:	240008d0 	.word	0x240008d0

08000898 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b6:	f011 f921 	bl	8011afc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <main+0xe8>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d11b      	bne.n	800090a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
}
 80008d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d8:	f3bf 8f6f 	isb	sy
}
 80008dc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <main+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e6:	f3bf 8f4f 	dsb	sy
}
 80008ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ec:	f3bf 8f6f 	isb	sy
}
 80008f0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <main+0xe8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <main+0xe8>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fe:	f3bf 8f4f 	dsb	sy
}
 8000902:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000904:	f3bf 8f6f 	isb	sy
}
 8000908:	e000      	b.n	800090c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800090a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <main+0xe8>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d138      	bne.n	800098a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <main+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000920:	f3bf 8f4f 	dsb	sy
}
 8000924:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <main+0xe8>)
 8000928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800092c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	0b5b      	lsrs	r3, r3, #13
 8000932:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000936:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000940:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	015a      	lsls	r2, r3, #5
 8000946:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800094a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000950:	4915      	ldr	r1, [pc, #84]	; (80009a8 <main+0xe8>)
 8000952:	4313      	orrs	r3, r2
 8000954:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ef      	bne.n	8000942 <main+0x82>
    } while(sets-- != 0U);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1e5      	bne.n	8000938 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800096c:	f3bf 8f4f 	dsb	sy
}
 8000970:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <main+0xe8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <main+0xe8>)
 8000978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800097e:	f3bf 8f4f 	dsb	sy
}
 8000982:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000984:	f3bf 8f6f 	isb	sy
}
 8000988:	e000      	b.n	800098c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800098a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f001 f80a 	bl	80019a4 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000990:	f000 fd52 	bl	8001438 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f80a 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f93e 	bl	8000c18 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800099c:	f000 f91a 	bl	8000bd4 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009a0:	f7ff ff87 	bl	80008b2 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0xe4>
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ce      	sub	sp, #312	; 0x138
 80009b0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;
	  HAL_StatusTypeDef ret = HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  /*!< Supply configuration update enable */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f002 f82f 	bl	8002a1c <HAL_PWREx_ConfigSupply>

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	4a7e      	ldr	r2, [pc, #504]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009d6:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	f003 0201 	and.w	r2, r3, #1
 80009de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <SystemClock_Config+0x220>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <SystemClock_Config+0x220>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b75      	ldr	r3, [pc, #468]	; (8000bcc <SystemClock_Config+0x220>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a0e:	681b      	ldr	r3, [r3, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <SystemClock_Config+0x220>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x66>

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a46:	2305      	movs	r3, #5
 8000a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a70:	2308      	movs	r3, #8
 8000a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f808 	bl	8002a90 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000a86:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xe6>
	  {
	    Error_Handler();
 8000a8e:	f000 fd11 	bl	80014b4 <Error_Handler>
	  }

	/* Select PLL as system clock source and configure  bus clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000a92:	233f      	movs	r3, #63	; 0x3f
 8000a94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	                                  RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000ac4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fc3a 	bl	8003344 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000ad6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x136>
	  {
	    Error_Handler();
 8000ade:	f000 fce9 	bl	80014b4 <Error_Handler>
	  }

	  /* PLL2_VCO Input = HSE_VALUE/PLL2_M = 5 Mhz */
	  /* PLL2_VCO Output = PLL2_VCO Input * PLL_N = 700 Mhz */
	  /* SDMMC Kernel Clock = PLL2_VCO Output/PLL_R = 700/6 = 116 Mhz */
	  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ae2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ae6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8000aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	e9c1 2300 	strd	r2, r3, [r1]
	  RCC_PeriphCLKInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000afe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b02:	651a      	str	r2, [r3, #80]	; 0x50
	  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL1VCIRANGE_2;
 8000b04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	61da      	str	r2, [r3, #28]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 5;
 8000b10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b18:	2205      	movs	r2, #5
 8000b1a:	609a      	str	r2, [r3, #8]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 140;
 8000b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b24:	228c      	movs	r2, #140	; 0x8c
 8000b26:	60da      	str	r2, [r3, #12]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 8000b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 2;
 8000b34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 6;
 8000b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b48:	2206      	movs	r2, #6
 8000b4a:	619a      	str	r2, [r3, #24]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 4;
 8000b4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b54:	2204      	movs	r2, #4
 8000b56:	615a      	str	r2, [r3, #20]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
	  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 ffa3 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000b74:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x1d4>
	  {
	    Error_Handler();
 8000b7c:	f000 fc9a 	bl	80014b4 <Error_Handler>
	  }

	  /*activate CSI clock mondatory for I/O Compensation Cell*/
	  __HAL_RCC_CSI_ENABLE() ;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	6013      	str	r3, [r2, #0]

	  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
	  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba2:	f003 0202 	and.w	r2, r3, #2
 8000ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000baa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bb4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bb8:	681b      	ldr	r3, [r3, #0]

	  /* Enables the I/O Compensation Cell */
	  HAL_EnableCompensationCell();
 8000bba:	f000 ff95 	bl	8001ae8 <HAL_EnableCompensationCell>

}
 8000bbe:	bf00      	nop
 8000bc0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58000400 	.word	0x58000400
 8000bcc:	58024800 	.word	0x58024800
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_SDMMC1_SD_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <MX_SDMMC1_SD_Init+0x40>)
 8000bdc:	601a      	str	r2, [r3, #0]

  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
 // hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bfe:	f005 fc57 	bl	80064b0 <HAL_SD_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000c08:	f000 fc54 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000904 	.word	0x24000904
 8000c14:	52007000 	.word	0x52007000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c2e:	4bbd      	ldr	r3, [pc, #756]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4abb      	ldr	r2, [pc, #748]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4bb9      	ldr	r3, [pc, #740]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4bb5      	ldr	r3, [pc, #724]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4ab4      	ldr	r2, [pc, #720]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4bb1      	ldr	r3, [pc, #708]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6a:	4bae      	ldr	r3, [pc, #696]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4aac      	ldr	r2, [pc, #688]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4baa      	ldr	r3, [pc, #680]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4ba6      	ldr	r3, [pc, #664]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4aa5      	ldr	r2, [pc, #660]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4ba2      	ldr	r3, [pc, #648]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b9f      	ldr	r3, [pc, #636]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a9d      	ldr	r2, [pc, #628]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b9b      	ldr	r3, [pc, #620]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b97      	ldr	r3, [pc, #604]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a96      	ldr	r2, [pc, #600]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b90      	ldr	r3, [pc, #576]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a8e      	ldr	r2, [pc, #568]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d00:	4b88      	ldr	r3, [pc, #544]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a87      	ldr	r2, [pc, #540]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b84      	ldr	r3, [pc, #528]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d1e:	4b81      	ldr	r3, [pc, #516]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a7f      	ldr	r2, [pc, #508]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3c:	4b79      	ldr	r3, [pc, #484]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a78      	ldr	r2, [pc, #480]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5a:	4b72      	ldr	r3, [pc, #456]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a70      	ldr	r2, [pc, #448]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <MX_GPIO_Init+0x30c>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	486a      	ldr	r0, [pc, #424]	; (8000f28 <MX_GPIO_Init+0x310>)
 8000d7e:	f001 fe0f 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	4869      	ldr	r0, [pc, #420]	; (8000f2c <MX_GPIO_Init+0x314>)
 8000d88:	f001 fe0a 	bl	80029a0 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : D28_Pin FMC_NBL3_Pin FMC_NBL2_Pin D25_Pin
                           D24_Pin D29_Pin D26_Pin D27__IS42S32800G_DQ27_Pin
                           D30_Pin D31_Pin */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin
 8000d8c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	4861      	ldr	r0, [pc, #388]	; (8000f30 <MX_GPIO_Init+0x318>)
 8000daa:	f001 fb3f 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D3_Pin ULPI_D4_Pin ULPI_D2_Pin
                           ULPI_D5_Pin ULPI_D1_Pin ULPI_D6_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8000dae:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	485a      	ldr	r0, [pc, #360]	; (8000f34 <MX_GPIO_Init+0x31c>)
 8000dcc:	f001 fb2e 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B5_Pin LCD_B7_Pin LCD_B4_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G5_Pin LCD_G6_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin
 8000dd0:	23ff      	movs	r3, #255	; 0xff
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000de0:	230e      	movs	r3, #14
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4853      	ldr	r0, [pc, #332]	; (8000f38 <MX_GPIO_Init+0x320>)
 8000dec:	f001 fb1e 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NE3_Pin SDNCAS_Pin SDCLK_Pin PG5
                           PG4 A13_Pin A12_Pin A10_Pin
                           A11_Pin */
  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5
 8000df0:	f248 533f 	movw	r3, #34111	; 0x853f
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e02:	230c      	movs	r3, #12
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	484b      	ldr	r0, [pc, #300]	; (8000f3c <MX_GPIO_Init+0x324>)
 8000e0e:	f001 fb0d 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK2_IO2_Pin QSPI_BK2_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8000e12:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e24:	2309      	movs	r3, #9
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4843      	ldr	r0, [pc, #268]	; (8000f3c <MX_GPIO_Init+0x324>)
 8000e30:	f001 fafc 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NWE_Pin FMC_NOE_Pin FMC_NWAIT_Pin FMC_NE1_Pin
                           D2_Pin D3_Pin D1_Pin D0_Pin
                           A16_Pin A17_Pin A18_Pin D15_Pin
                           D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin
 8000e34:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e46:	230c      	movs	r3, #12
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x310>)
 8000e52:	f001 faeb 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin D7_Pin D6_Pin
                           D8_Pin D9_Pin D12_Pin D5_Pin
                           D10_Pin D4_Pin D11_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 8000e56:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_GPIO_Init+0x328>)
 8000e74:	f001 fada 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e78:	23c0      	movs	r3, #192	; 0xc0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_GPIO_Init+0x31c>)
 8000e94:	f001 faca 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD1_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8000e98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4821      	ldr	r0, [pc, #132]	; (8000f3c <MX_GPIO_Init+0x324>)
 8000eb6:	f001 fab9 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B0_Pin LCD_B1_Pin
                           LCD_G4_Pin LCd_G3_Pin LCD_G2_Pin LCD_R1_Pin
                           LCD_G1_Pin LCD_G0_Pin LCD_R7_Pin LCD_R2_Pin
                           LCD_R6_Pin LCD_R3_Pin LCD_R4_Pin LCD_R5_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481b      	ldr	r0, [pc, #108]	; (8000f44 <MX_GPIO_Init+0x32c>)
 8000ed8:	f001 faa8 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 8000edc:	2308      	movs	r3, #8
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_GPIO_Init+0x310>)
 8000ef4:	f001 fa9a 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D22_Pin D21_Pin SDNWE_Pin
                           D18_Pin D19_Pin D17_Pin D20_Pin
                           SDNE1_Pin D16_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 8000ef8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_GPIO_Init+0x330>)
 8000f16:	f001 fa89 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
 8000f22:	e013      	b.n	8000f4c <MX_GPIO_Init+0x334>
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020c00 	.word	0x58020c00
 8000f2c:	58020000 	.word	0x58020000
 8000f30:	58022000 	.word	0x58022000
 8000f34:	58020400 	.word	0x58020400
 8000f38:	58022800 	.word	0x58022800
 8000f3c:	58021800 	.word	0x58021800
 8000f40:	58021000 	.word	0x58021000
 8000f44:	58022400 	.word	0x58022400
 8000f48:	58021c00 	.word	0x58021c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f54:	230a      	movs	r3, #10
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	48bb      	ldr	r0, [pc, #748]	; (800124c <MX_GPIO_Init+0x634>)
 8000f60:	f001 fa64 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCKA_Pin SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SDA_Pin;
 8000f64:	2378      	movs	r3, #120	; 0x78
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	48b3      	ldr	r0, [pc, #716]	; (800124c <MX_GPIO_Init+0x634>)
 8000f80:	f001 fa54 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_ID_Pin USB_FS1_DP_Pin USB_FS1_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8000f84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f96:	230a      	movs	r3, #10
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	48ab      	ldr	r0, [pc, #684]	; (8001250 <MX_GPIO_Init+0x638>)
 8000fa2:	f001 fa43 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	48a5      	ldr	r0, [pc, #660]	; (8001254 <MX_GPIO_Init+0x63c>)
 8000fbe:	f001 fa35 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	489c      	ldr	r0, [pc, #624]	; (8001250 <MX_GPIO_Init+0x638>)
 8000fe0:	f001 fa24 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4894      	ldr	r0, [pc, #592]	; (8001254 <MX_GPIO_Init+0x63c>)
 8001002:	f001 fa13 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001016:	2306      	movs	r3, #6
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	488d      	ldr	r0, [pc, #564]	; (8001258 <MX_GPIO_Init+0x640>)
 8001022:	f001 fa03 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_Pin A1_Pin A0_Pin A3_Pin
                           A4_Pin A7_Pin A8_Pin A6_Pin
                           A9_Pin SNDRAS_Pin */
  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 8001026:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A4_Pin|A7_Pin|A8_Pin|A6_Pin
                          |A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001038:	230c      	movs	r3, #12
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	4886      	ldr	r0, [pc, #536]	; (800125c <MX_GPIO_Init+0x644>)
 8001044:	f001 f9f2 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001058:	230a      	movs	r3, #10
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	487d      	ldr	r0, [pc, #500]	; (8001258 <MX_GPIO_Init+0x640>)
 8001064:	f001 f9e2 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 8001068:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107a:	230e      	movs	r3, #14
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	4873      	ldr	r0, [pc, #460]	; (8001254 <MX_GPIO_Init+0x63c>)
 8001086:	f001 f9d1 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800108a:	2320      	movs	r3, #32
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109c:	4619      	mov	r1, r3
 800109e:	486f      	ldr	r0, [pc, #444]	; (800125c <MX_GPIO_Init+0x644>)
 80010a0:	f001 f9c4 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010b4:	2309      	movs	r3, #9
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4867      	ldr	r0, [pc, #412]	; (800125c <MX_GPIO_Init+0x644>)
 80010c0:	f001 f9b4 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80010c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010d6:	230a      	movs	r3, #10
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	485e      	ldr	r0, [pc, #376]	; (800125c <MX_GPIO_Init+0x644>)
 80010e2:	f001 f9a3 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	4857      	ldr	r0, [pc, #348]	; (8001260 <MX_GPIO_Init+0x648>)
 8001102:	f001 f993 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	484f      	ldr	r0, [pc, #316]	; (800125c <MX_GPIO_Init+0x644>)
 8001120:	f001 f984 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001124:	2332      	movs	r3, #50	; 0x32
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001134:	230b      	movs	r3, #11
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4848      	ldr	r0, [pc, #288]	; (8001260 <MX_GPIO_Init+0x648>)
 8001140:	f001 f974 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CLK_Pin */
  GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001144:	2304      	movs	r3, #4
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001154:	2306      	movs	r3, #6
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4840      	ldr	r0, [pc, #256]	; (8001260 <MX_GPIO_Init+0x648>)
 8001160:	f001 f964 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSM_DAT1_Pin */
  GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001164:	2308      	movs	r3, #8
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001174:	2303      	movs	r3, #3
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4838      	ldr	r0, [pc, #224]	; (8001260 <MX_GPIO_Init+0x648>)
 8001180:	f001 f954 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK2_IO0_Pin QSPI_BK2_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001184:	230c      	movs	r3, #12
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001194:	2309      	movs	r3, #9
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4831      	ldr	r0, [pc, #196]	; (8001264 <MX_GPIO_Init+0x64c>)
 80011a0:	f001 f944 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_MDIO_Pin RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80011a4:	2386      	movs	r3, #134	; 0x86
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b4:	230b      	movs	r3, #11
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	4619      	mov	r1, r3
 80011be:	4824      	ldr	r0, [pc, #144]	; (8001250 <MX_GPIO_Init+0x638>)
 80011c0:	f001 f934 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80011d4:	230a      	movs	r3, #10
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	4821      	ldr	r0, [pc, #132]	; (8001264 <MX_GPIO_Init+0x64c>)
 80011e0:	f001 f924 	bl	800242c <HAL_GPIO_Init>



  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80011e4:	2304      	movs	r3, #4
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f4:	2309      	movs	r3, #9
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	481a      	ldr	r0, [pc, #104]	; (8001268 <MX_GPIO_Init+0x650>)
 8001200:	f001 f914 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001204:	2328      	movs	r3, #40	; 0x28
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2302      	movs	r3, #2
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001214:	230a      	movs	r3, #10
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_GPIO_Init+0x638>)
 8001220:	f001 f904 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_232RX_Pin RS232_TX_Pin */
  GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001224:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001236:	2304      	movs	r3, #4
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_GPIO_Init+0x650>)
 8001242:	f001 f8f3 	bl	800242c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8001246:	2320      	movs	r3, #32
 8001248:	e010      	b.n	800126c <MX_GPIO_Init+0x654>
 800124a:	bf00      	nop
 800124c:	58021000 	.word	0x58021000
 8001250:	58020000 	.word	0x58020000
 8001254:	58022000 	.word	0x58022000
 8001258:	58021800 	.word	0x58021800
 800125c:	58021400 	.word	0x58021400
 8001260:	58020800 	.word	0x58020800
 8001264:	58021c00 	.word	0x58021c00
 8001268:	58020400 	.word	0x58020400
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800126e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127c:	4619      	mov	r1, r3
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <MX_GPIO_Init+0x690>)
 8001280:	f001 f8d4 	bl	800242c <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001284:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001288:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800128c:	f000 fc16 	bl	8001abc <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2106      	movs	r1, #6
 8001294:	2017      	movs	r0, #23
 8001296:	f000 fd13 	bl	8001cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800129a:	2017      	movs	r0, #23
 800129c:	f000 fd2a 	bl	8001cf4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3740      	adds	r7, #64	; 0x40
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58021400 	.word	0x58021400

080012ac <GetSector>:

/* USER CODE BEGIN 4 */
uint32_t GetSector(uint32_t Address)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a50      	ldr	r2, [pc, #320]	; (80013fc <GetSector+0x150>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d803      	bhi.n	80012c8 <GetSector+0x1c>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012c6:	d207      	bcs.n	80012d8 <GetSector+0x2c>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <GetSector+0x154>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d806      	bhi.n	80012de <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80012d6:	d302      	bcc.n	80012de <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e086      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <GetSector+0x158>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d803      	bhi.n	80012ee <GetSector+0x42>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <GetSector+0x150>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d807      	bhi.n	80012fe <GetSector+0x52>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a45      	ldr	r2, [pc, #276]	; (8001408 <GetSector+0x15c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d806      	bhi.n	8001304 <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a41      	ldr	r2, [pc, #260]	; (8001400 <GetSector+0x154>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d902      	bls.n	8001304 <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e073      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a41      	ldr	r2, [pc, #260]	; (800140c <GetSector+0x160>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d803      	bhi.n	8001314 <GetSector+0x68>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <GetSector+0x158>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d807      	bhi.n	8001324 <GetSector+0x78>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <GetSector+0x164>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d806      	bhi.n	800132a <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3a      	ldr	r2, [pc, #232]	; (8001408 <GetSector+0x15c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d902      	bls.n	800132a <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8001324:	2302      	movs	r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e060      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a39      	ldr	r2, [pc, #228]	; (8001414 <GetSector+0x168>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d803      	bhi.n	800133a <GetSector+0x8e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a35      	ldr	r2, [pc, #212]	; (800140c <GetSector+0x160>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d807      	bhi.n	800134a <GetSector+0x9e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <GetSector+0x16c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d806      	bhi.n	8001350 <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <GetSector+0x164>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d902      	bls.n	8001350 <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 800134a:	2303      	movs	r3, #3
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e04d      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <GetSector+0x170>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d803      	bhi.n	8001360 <GetSector+0xb4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <GetSector+0x168>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d807      	bhi.n	8001370 <GetSector+0xc4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <GetSector+0x174>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d806      	bhi.n	8001376 <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <GetSector+0x16c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d902      	bls.n	8001376 <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 8001370:	2304      	movs	r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e03a      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <GetSector+0x178>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d803      	bhi.n	8001386 <GetSector+0xda>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <GetSector+0x170>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d807      	bhi.n	8001396 <GetSector+0xea>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <GetSector+0x17c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d806      	bhi.n	800139c <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a23      	ldr	r2, [pc, #140]	; (8001420 <GetSector+0x174>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d902      	bls.n	800139c <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8001396:	2305      	movs	r3, #5
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e027      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <GetSector+0x180>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d803      	bhi.n	80013ac <GetSector+0x100>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <GetSector+0x178>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d807      	bhi.n	80013bc <GetSector+0x110>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <GetSector+0x184>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d806      	bhi.n	80013c2 <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <GetSector+0x17c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d902      	bls.n	80013c2 <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 80013bc:	2306      	movs	r3, #6
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e014      	b.n	80013ec <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80013c8:	d203      	bcs.n	80013d2 <GetSector+0x126>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <GetSector+0x180>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d807      	bhi.n	80013e2 <GetSector+0x136>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <GetSector+0x188>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d806      	bhi.n	80013e8 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <GetSector+0x184>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d902      	bls.n	80013e8 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 80013e2:	2307      	movs	r3, #7
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e001      	b.n	80013ec <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	0801ffff 	.word	0x0801ffff
 8001400:	0811ffff 	.word	0x0811ffff
 8001404:	0803ffff 	.word	0x0803ffff
 8001408:	0813ffff 	.word	0x0813ffff
 800140c:	0805ffff 	.word	0x0805ffff
 8001410:	0815ffff 	.word	0x0815ffff
 8001414:	0807ffff 	.word	0x0807ffff
 8001418:	0817ffff 	.word	0x0817ffff
 800141c:	0809ffff 	.word	0x0809ffff
 8001420:	0819ffff 	.word	0x0819ffff
 8001424:	080bffff 	.word	0x080bffff
 8001428:	081bffff 	.word	0x081bffff
 800142c:	080dffff 	.word	0x080dffff
 8001430:	081dffff 	.word	0x081dffff
 8001434:	081ffffe 	.word	0x081ffffe

08001438 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800144a:	f000 fc6f 	bl	8001d2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800144e:	2301      	movs	r3, #1
 8001450:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001452:	2300      	movs	r3, #0
 8001454:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800145a:	231f      	movs	r3, #31
 800145c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800145e:	2387      	movs	r3, #135	; 0x87
 8001460:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001462:	2300      	movs	r3, #0
 8001464:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001466:	2300      	movs	r3, #0
 8001468:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800146a:	2301      	movs	r3, #1
 800146c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800146e:	2301      	movs	r3, #1
 8001470:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800147a:	463b      	mov	r3, r7
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fc8d 	bl	8001d9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001482:	2004      	movs	r0, #4
 8001484:	f000 fc6a 	bl	8001d5c <HAL_MPU_Enable>

}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014a2:	f000 fabb 	bl	8001a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40001000 	.word	0x40001000

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_MspInit+0x30>)
 80014c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014cc:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x30>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x30>)
 80014d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58024400 	.word	0x58024400

080014f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0bc      	sub	sp, #240	; 0xf0
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	22c0      	movs	r2, #192	; 0xc0
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f012 ff27 	bl	8014368 <memset>
  if(hsd->Instance==SDMMC1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <HAL_SD_MspInit+0x194>)
 8001520:	4293      	cmp	r3, r2
 8001522:	f040 80ac 	bne.w	800167e <HAL_SD_MspInit+0x18a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001532:	2300      	movs	r3, #0
 8001534:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	4618      	mov	r0, r3
 800153c:	f002 faba 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001546:	f7ff ffb5 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_SD_MspInit+0x198>)
 800154c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_SD_MspInit+0x198>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <HAL_SD_MspInit+0x198>)
 800155c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <HAL_SD_MspInit+0x198>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a47      	ldr	r2, [pc, #284]	; (800168c <HAL_SD_MspInit+0x198>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_SD_MspInit+0x198>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_SD_MspInit+0x198>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a3f      	ldr	r2, [pc, #252]	; (800168c <HAL_SD_MspInit+0x198>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_SD_MspInit+0x198>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_SD_MspInit+0x198>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_SD_MspInit+0x198>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <HAL_SD_MspInit+0x198>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 80015c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80015dc:	230c      	movs	r3, #12
 80015de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e6:	4619      	mov	r1, r3
 80015e8:	4829      	ldr	r0, [pc, #164]	; (8001690 <HAL_SD_MspInit+0x19c>)
 80015ea:	f000 ff1f 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 80015ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001612:	4619      	mov	r1, r3
 8001614:	481f      	ldr	r0, [pc, #124]	; (8001694 <HAL_SD_MspInit+0x1a0>)
 8001616:	f000 ff09 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800161a:	2304      	movs	r3, #4
 800161c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001632:	230c      	movs	r3, #12
 8001634:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800163c:	4619      	mov	r1, r3
 800163e:	4816      	ldr	r0, [pc, #88]	; (8001698 <HAL_SD_MspInit+0x1a4>)
 8001640:	f000 fef4 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 8001644:	23c0      	movs	r3, #192	; 0xc0
 8001646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 800165c:	2308      	movs	r3, #8
 800165e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001666:	4619      	mov	r1, r3
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <HAL_SD_MspInit+0x19c>)
 800166a:	f000 fedf 	bl	800242c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2107      	movs	r1, #7
 8001672:	2031      	movs	r0, #49	; 0x31
 8001674:	f000 fb24 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001678:	2031      	movs	r0, #49	; 0x31
 800167a:	f000 fb3b 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	37f0      	adds	r7, #240	; 0xf0
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	52007000 	.word	0x52007000
 800168c:	58024400 	.word	0x58024400
 8001690:	58020800 	.word	0x58020800
 8001694:	58020400 	.word	0x58020400
 8001698:	58020c00 	.word	0x58020c00

0800169c <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_SD_MspDeInit+0x4c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d118      	bne.n	80016e0 <HAL_SD_MspDeInit+0x44>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_SD_MspDeInit+0x50>)
 80016b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_SD_MspDeInit+0x50>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 80016be:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <HAL_SD_MspDeInit+0x54>)
 80016c4:	f001 f862 	bl	800278c <HAL_GPIO_DeInit>
                          |SDIO1_D1_Pin|SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin);

    HAL_GPIO_DeInit(GPIOB, SDIO1_CDIR_Pin|SDIO1_CKIN_Pin);
 80016c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <HAL_SD_MspDeInit+0x58>)
 80016ce:	f001 f85d 	bl	800278c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 80016d2:	2104      	movs	r1, #4
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <HAL_SD_MspDeInit+0x5c>)
 80016d6:	f001 f859 	bl	800278c <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80016da:	2031      	movs	r0, #49	; 0x31
 80016dc:	f000 fb18 	bl	8001d10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	52007000 	.word	0x52007000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58020800 	.word	0x58020800
 80016f4:	58020400 	.word	0x58020400
 80016f8:	58020c00 	.word	0x58020c00

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d827      	bhi.n	800175a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800170a:	2200      	movs	r2, #0
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	2036      	movs	r0, #54	; 0x36
 8001710:	f000 fad6 	bl	8001cc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001714:	2036      	movs	r0, #54	; 0x36
 8001716:	f000 faed 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <HAL_InitTick+0xc4>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_InitTick+0xc8>)
 8001722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001726:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <HAL_InitTick+0xc8>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_InitTick+0xc8>)
 8001732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800173e:	f107 0210 	add.w	r2, r7, #16
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f002 f971 	bl	8003a30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001754:	2b00      	cmp	r3, #0
 8001756:	d106      	bne.n	8001766 <HAL_InitTick+0x6a>
 8001758:	e001      	b.n	800175e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e02b      	b.n	80017b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800175e:	f002 f951 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8001762:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001766:	f002 f94d 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 800176a:	4603      	mov	r3, r0
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_InitTick+0xcc>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	3b01      	subs	r3, #1
 800177c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_InitTick+0xd0>)
 8001780:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_InitTick+0xd4>)
 8001782:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_InitTick+0xd0>)
 8001786:	f240 32e7 	movw	r2, #999	; 0x3e7
 800178a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_InitTick+0xd0>)
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_InitTick+0xd0>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_InitTick+0xd0>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <HAL_InitTick+0xd0>)
 80017a0:	f006 fb1a 	bl	8007dd8 <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d104      	bne.n	80017b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <HAL_InitTick+0xd0>)
 80017ac:	f006 fb76 	bl	8007e9c <HAL_TIM_Base_Start_IT>
 80017b0:	4603      	mov	r3, r0
 80017b2:	e000      	b.n	80017b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3740      	adds	r7, #64	; 0x40
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24000008 	.word	0x24000008
 80017c4:	58024400 	.word	0x58024400
 80017c8:	431bde83 	.word	0x431bde83
 80017cc:	24000984 	.word	0x24000984
 80017d0:	40001000 	.word	0x40001000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001804:	2020      	movs	r0, #32
 8001806:	f001 f8e4 	bl	80029d2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQOUT_Pin);
 800180a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800180e:	f001 f8e0 	bl	80029d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <SDMMC1_IRQHandler+0x10>)
 800181e:	f005 f8f1 	bl	8006a04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000904 	.word	0x24000904

0800182c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM6_DAC_IRQHandler+0x10>)
 8001832:	f006 fbab 	bl	8007f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24000984 	.word	0x24000984

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001844:	4b37      	ldr	r3, [pc, #220]	; (8001924 <SystemInit+0xe4>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a36      	ldr	r2, [pc, #216]	; (8001924 <SystemInit+0xe4>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001854:	4b34      	ldr	r3, [pc, #208]	; (8001928 <SystemInit+0xe8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	2b06      	cmp	r3, #6
 800185e:	d807      	bhi.n	8001870 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <SystemInit+0xe8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 030f 	bic.w	r3, r3, #15
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <SystemInit+0xe8>)
 800186a:	f043 0307 	orr.w	r3, r3, #7
 800186e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <SystemInit+0xec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2d      	ldr	r2, [pc, #180]	; (800192c <SystemInit+0xec>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <SystemInit+0xec>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <SystemInit+0xec>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4929      	ldr	r1, [pc, #164]	; (800192c <SystemInit+0xec>)
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <SystemInit+0xf0>)
 800188a:	4013      	ands	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <SystemInit+0xe8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <SystemInit+0xe8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 030f 	bic.w	r3, r3, #15
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <SystemInit+0xe8>)
 80018a4:	f043 0307 	orr.w	r3, r3, #7
 80018a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <SystemInit+0xec>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <SystemInit+0xec>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <SystemInit+0xec>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <SystemInit+0xec>)
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <SystemInit+0xf4>)
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <SystemInit+0xec>)
 80018c4:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <SystemInit+0xf8>)
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <SystemInit+0xec>)
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <SystemInit+0xfc>)
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <SystemInit+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <SystemInit+0xec>)
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <SystemInit+0xfc>)
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <SystemInit+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <SystemInit+0xec>)
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <SystemInit+0xfc>)
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <SystemInit+0xec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <SystemInit+0xec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <SystemInit+0xec>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <SystemInit+0xec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <SystemInit+0x100>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <SystemInit+0x104>)
 8001904:	4013      	ands	r3, r2
 8001906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190a:	d202      	bcs.n	8001912 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <SystemInit+0x108>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <SystemInit+0x10c>)
 8001914:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001918:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00
 8001928:	52002000 	.word	0x52002000
 800192c:	58024400 	.word	0x58024400
 8001930:	eaf6ed7f 	.word	0xeaf6ed7f
 8001934:	02020200 	.word	0x02020200
 8001938:	01ff0000 	.word	0x01ff0000
 800193c:	01010280 	.word	0x01010280
 8001940:	5c001000 	.word	0x5c001000
 8001944:	ffff0000 	.word	0xffff0000
 8001948:	51008108 	.word	0x51008108
 800194c:	52004000 	.word	0x52004000

08001950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff ff74 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	; (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f012 fcfb 	bl	8014378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001982:	f7fe ff9d 	bl	80008c0 <main>
  bx  lr
 8001986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001988:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800198c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001990:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001994:	080144e4 	.word	0x080144e4
  ldr r2, =_sbss
 8001998:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800199c:	24003c54 	.word	0x24003c54

080019a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC3_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019aa:	2003      	movs	r0, #3
 80019ac:	f000 f97d 	bl	8001caa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019b0:	f001 fe7e 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_Init+0x68>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	4913      	ldr	r1, [pc, #76]	; (8001a10 <HAL_Init+0x6c>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_Init+0x68>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_Init+0x6c>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_Init+0x70>)
 80019e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_Init+0x74>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ee:	200f      	movs	r0, #15
 80019f0:	f7ff fe84 	bl	80016fc <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e002      	b.n	8001a04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019fe:	f7ff fd5f 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	080144c4 	.word	0x080144c4
 8001a14:	24000004 	.word	0x24000004
 8001a18:	24000000 	.word	0x24000000

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2400000c 	.word	0x2400000c
 8001a40:	240009d0 	.word	0x240009d0

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	240009d0 	.word	0x240009d0

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2400000c 	.word	0x2400000c

08001aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetREVID+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0c1b      	lsrs	r3, r3, #16
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	5c001000 	.word	0x5c001000

08001abc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	401a      	ands	r2, r3
 8001ad0:	4904      	ldr	r1, [pc, #16]	; (8001ae4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	58000400 	.word	0x58000400

08001ae8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_EnableCompensationCell+0x1c>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <HAL_EnableCompensationCell+0x1c>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6213      	str	r3, [r2, #32]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	58000400 	.word	0x58000400

08001b08 <__NVIC_SetPriorityGrouping>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <__NVIC_SetPriorityGrouping+0x40>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x40>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	05fa0000 	.word	0x05fa0000

08001b50 <__NVIC_GetPriorityGrouping>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_DisableIRQ>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db12      	blt.n	8001be0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	490a      	ldr	r1, [pc, #40]	; (8001bec <__NVIC_DisableIRQ+0x44>)
 8001bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	3320      	adds	r3, #32
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd4:	f3bf 8f4f 	dsb	sy
}
 8001bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bda:	f3bf 8f6f 	isb	sy
}
 8001bde:	bf00      	nop
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff28 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cce:	f7ff ff3f 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7ff ffb3 	bl	8001c44 <NVIC_EncodePriority>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff82 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff32 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff42 	bl	8001ba8 <__NVIC_DisableIRQ>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d30:	f3bf 8f5f 	dmb	sy
}
 8001d34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_MPU_Disable+0x28>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_MPU_Disable+0x28>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d40:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_MPU_Disable+0x2c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	e000ed90 	.word	0xe000ed90

08001d5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d64:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <HAL_MPU_Enable+0x38>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_MPU_Enable+0x3c>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_MPU_Enable+0x3c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7a:	f3bf 8f4f 	dsb	sy
}
 8001d7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d80:	f3bf 8f6f 	isb	sy
}
 8001d84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed90 	.word	0xe000ed90
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	785a      	ldrb	r2, [r3, #1]
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_MPU_ConfigRegion+0x84>)
 8001daa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d029      	beq.n	8001e08 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_MPU_ConfigRegion+0x84>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7b1b      	ldrb	r3, [r3, #12]
 8001dc0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7adb      	ldrb	r3, [r3, #11]
 8001dc6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a9b      	ldrb	r3, [r3, #10]
 8001dce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7b5b      	ldrb	r3, [r3, #13]
 8001dd6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7b9b      	ldrb	r3, [r3, #14]
 8001dde:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001de0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7bdb      	ldrb	r3, [r3, #15]
 8001de6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001de8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a5b      	ldrb	r3, [r3, #9]
 8001dee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001df0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7a1b      	ldrb	r3, [r3, #8]
 8001df6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001df8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e02:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e04:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001e06:	e005      	b.n	8001e14 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_MPU_ConfigRegion+0x84>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_MPU_ConfigRegion+0x84>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed90 	.word	0xe000ed90

08001e24 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_FLASH_Program+0x11c>)
 8001e3e:	7d1b      	ldrb	r3, [r3, #20]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_FLASH_Program+0x24>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e076      	b.n	8001f36 <HAL_FLASH_Program+0x112>
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_FLASH_Program+0x11c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e54:	d306      	bcc.n	8001e64 <HAL_FLASH_Program+0x40>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001e5c:	d202      	bcs.n	8001e64 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	e00c      	b.n	8001e7e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001e6a:	d306      	bcc.n	8001e7a <HAL_FLASH_Program+0x56>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8001e72:	d202      	bcs.n	8001e7a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	e001      	b.n	8001e7e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e05b      	b.n	8001f36 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e7e:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_FLASH_Program+0x11c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e8a:	f000 f8c1 	bl	8002010 <FLASH_WaitForLastOperation>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8001e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d147      	bne.n	8001f2c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d106      	bne.n	8001eb0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	60d3      	str	r3, [r2, #12]
 8001eae:	e007      	b.n	8001ec0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001eb2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001eb6:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8001ec0:	f3bf 8f6f 	isb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec6:	f3bf 8f4f 	dsb	sy
}
 8001eca:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ef      	bne.n	8001ecc <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8001eec:	f3bf 8f6f 	isb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef2:	f3bf 8f4f 	dsb	sy
}
 8001ef6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001ef8:	69b9      	ldr	r1, [r7, #24]
 8001efa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001efe:	f000 f887 	bl	8002010 <FLASH_WaitForLastOperation>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d106      	bne.n	8001f1c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001f14:	f023 0302 	bic.w	r3, r3, #2
 8001f18:	60d3      	str	r3, [r2, #12]
 8001f1a:	e007      	b.n	8001f2c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001f1e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_FLASH_Program+0x120>)
 8001f24:	f023 0302 	bic.w	r3, r3, #2
 8001f28:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_FLASH_Program+0x11c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	751a      	strb	r2, [r3, #20]

  return status;
 8001f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	240009d4 	.word	0x240009d4
 8001f44:	52002000 	.word	0x52002000

08001f48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f5a:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_FLASH_Unlock+0x6c>)
 8001f5c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_FLASH_Unlock+0x70>)
 8001f62:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e018      	b.n	8001fa6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f76:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_FLASH_Unlock+0x6c>)
 8001f86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_FLASH_Unlock+0x70>)
 8001f8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_FLASH_Unlock+0x68>)
 8001f94:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	52002000 	.word	0x52002000
 8001fb4:	45670123 	.word	0x45670123
 8001fb8:	cdef89ab 	.word	0xcdef89ab

08001fbc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_FLASH_Lock+0x50>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_FLASH_Lock+0x50>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_FLASH_Lock+0x50>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e011      	b.n	8002000 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_FLASH_Lock+0x50>)
 8001fde:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_FLASH_Lock+0x50>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_FLASH_Lock+0x50>)
 8001fee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	52002000 	.word	0x52002000

08002010 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800201a:	2304      	movs	r3, #4
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8002022:	f7ff fd0f 	bl	8001a44 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d113      	bne.n	8002056 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <FLASH_WaitForLastOperation+0x124>)
 8002030:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002032:	e010      	b.n	8002056 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d00c      	beq.n	8002056 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800203c:	f7ff fd02 	bl	8001a44 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <FLASH_WaitForLastOperation+0x42>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e06a      	b.n	800212c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4b37      	ldr	r3, [pc, #220]	; (8002138 <FLASH_WaitForLastOperation+0x128>)
 800205a:	4013      	ands	r3, r2
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	429a      	cmp	r2, r3
 8002060:	d10a      	bne.n	8002078 <FLASH_WaitForLastOperation+0x68>
 8002062:	4b36      	ldr	r3, [pc, #216]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e00c      	b.n	8002092 <FLASH_WaitForLastOperation+0x82>
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 800207a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800207e:	43da      	mvns	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4013      	ands	r3, r2
 8002084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ce      	bne.n	8002034 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <FLASH_WaitForLastOperation+0x130>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e007      	b.n	80020b8 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 80020aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <FLASH_WaitForLastOperation+0x130>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020b6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d017      	beq.n	80020f2 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <FLASH_WaitForLastOperation+0x134>)
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <FLASH_WaitForLastOperation+0x134>)
 80020cc:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <FLASH_WaitForLastOperation+0x128>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d103      	bne.n	80020e2 <FLASH_WaitForLastOperation+0xd2>
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6153      	str	r3, [r2, #20]
 80020e0:	e005      	b.n	80020ee <FLASH_WaitForLastOperation+0xde>
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020ea:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e01c      	b.n	800212c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10b      	bne.n	8002110 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d111      	bne.n	800212a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 8002108:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210c:	615a      	str	r2, [r3, #20]
 800210e:	e00c      	b.n	800212a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 8002112:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d104      	bne.n	800212a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <FLASH_WaitForLastOperation+0x12c>)
 8002122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002126:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	80000004 	.word	0x80000004
 8002138:	1fef000f 	.word	0x1fef000f
 800213c:	52002000 	.word	0x52002000
 8002140:	17ee0000 	.word	0x17ee0000
 8002144:	240009d4 	.word	0x240009d4

08002148 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_FLASHEx_Erase+0x188>)
 8002158:	7d1b      	ldrb	r3, [r3, #20]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_FLASHEx_Erase+0x1a>
 800215e:	2302      	movs	r3, #2
 8002160:	e0b2      	b.n	80022c8 <HAL_FLASHEx_Erase+0x180>
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <HAL_FLASHEx_Erase+0x188>)
 8002164:	2201      	movs	r2, #1
 8002166:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_FLASHEx_Erase+0x188>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800217a:	2101      	movs	r1, #1
 800217c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002180:	f7ff ff46 	bl	8002010 <FLASH_WaitForLastOperation>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800219a:	2102      	movs	r1, #2
 800219c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021a0:	f7ff ff36 	bl	8002010 <FLASH_WaitForLastOperation>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8085 	bne.w	80022c0 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d136      	bne.n	800222c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f000 f887 	bl	80022dc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00f      	beq.n	80021fa <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80021da:	2101      	movs	r1, #1
 80021dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021e0:	f7ff ff16 	bl	8002010 <FLASH_WaitForLastOperation>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 80021f4:	f023 0308 	bic.w	r3, r3, #8
 80021f8:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d05c      	beq.n	80022c0 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002206:	2102      	movs	r1, #2
 8002208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800220c:	f7ff ff00 	bl	8002010 <FLASH_WaitForLastOperation>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 800221c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 8002222:	f023 0308 	bic.w	r3, r3, #8
 8002226:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800222a:	e049      	b.n	80022c0 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f04f 32ff 	mov.w	r2, #4294967295
 8002232:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	e039      	b.n	80022b0 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	461a      	mov	r2, r3
 8002246:	68b8      	ldr	r0, [r7, #8]
 8002248:	f000 f8b2 	bl	80023b0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002258:	2101      	movs	r1, #1
 800225a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800225e:	f7ff fed7 	bl	8002010 <FLASH_WaitForLastOperation>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	491a      	ldr	r1, [pc, #104]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_FLASHEx_Erase+0x190>)
 800226e:	4013      	ands	r3, r2
 8002270:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800227e:	2102      	movs	r1, #2
 8002280:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002284:	f7ff fec4 	bl	8002010 <FLASH_WaitForLastOperation>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 800228e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002292:	4910      	ldr	r1, [pc, #64]	; (80022d4 <HAL_FLASHEx_Erase+0x18c>)
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_FLASHEx_Erase+0x190>)
 8002296:	4013      	ands	r3, r2
 8002298:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	601a      	str	r2, [r3, #0]
          break;
 80022a8:	e00a      	b.n	80022c0 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4413      	add	r3, r2
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3bd      	bcc.n	800223c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_FLASHEx_Erase+0x188>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	751a      	strb	r2, [r3, #20]

  return status;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	240009d4 	.word	0x240009d4
 80022d4:	52002000 	.word	0x52002000
 80022d8:	fffff8fb 	.word	0xfffff8fb

080022dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d122      	bne.n	8002336 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <FLASH_MassErase+0xd0>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <FLASH_MassErase+0xd0>)
 80022f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022fa:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <FLASH_MassErase+0xd0>)
 80022fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002302:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <FLASH_MassErase+0xd0>)
 8002304:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002308:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <FLASH_MassErase+0xd0>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4926      	ldr	r1, [pc, #152]	; (80023ac <FLASH_MassErase+0xd0>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <FLASH_MassErase+0xd0>)
 800231a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800231e:	4923      	ldr	r1, [pc, #140]	; (80023ac <FLASH_MassErase+0xd0>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <FLASH_MassErase+0xd0>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <FLASH_MassErase+0xd0>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002334:	e033      	b.n	800239e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d011      	beq.n	8002364 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <FLASH_MassErase+0xd0>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <FLASH_MassErase+0xd0>)
 8002346:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800234a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <FLASH_MassErase+0xd0>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <FLASH_MassErase+0xd0>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <FLASH_MassErase+0xd0>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <FLASH_MassErase+0xd0>)
 800235e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002362:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d017      	beq.n	800239e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <FLASH_MassErase+0xd0>)
 8002370:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <FLASH_MassErase+0xd0>)
 8002376:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800237a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <FLASH_MassErase+0xd0>)
 8002380:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002384:	4909      	ldr	r1, [pc, #36]	; (80023ac <FLASH_MassErase+0xd0>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <FLASH_MassErase+0xd0>)
 8002390:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002394:	4a05      	ldr	r2, [pc, #20]	; (80023ac <FLASH_MassErase+0xd0>)
 8002396:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800239a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	52002000 	.word	0x52002000

080023b0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <FLASH_Erase_Sector+0x78>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <FLASH_Erase_Sector+0x78>)
 80023cc:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80023d0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <FLASH_Erase_Sector+0x78>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0219      	lsls	r1, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	430b      	orrs	r3, r1
 80023de:	4313      	orrs	r3, r2
 80023e0:	4a11      	ldr	r2, [pc, #68]	; (8002428 <FLASH_Erase_Sector+0x78>)
 80023e2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80023e6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <FLASH_Erase_Sector+0x78>)
 80023f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <FLASH_Erase_Sector+0x78>)
 80023fa:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80023fe:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <FLASH_Erase_Sector+0x78>)
 8002404:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	0219      	lsls	r1, r3, #8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	430b      	orrs	r3, r1
 8002410:	4313      	orrs	r3, r2
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <FLASH_Erase_Sector+0x78>)
 8002414:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002418:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	52002000 	.word	0x52002000

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800243a:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_GPIO_Init+0x234>)
 800243c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800243e:	e194      	b.n	800276a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8186 	beq.w	8002764 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d005      	beq.n	8002470 <HAL_GPIO_Init+0x44>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d130      	bne.n	80024d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a6:	2201      	movs	r2, #1
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 0201 	and.w	r2, r3, #1
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d017      	beq.n	800250e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d123      	bne.n	8002562 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80e0 	beq.w	8002764 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a4:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_GPIO_Init+0x238>)
 80025a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025aa:	4a2e      	ldr	r2, [pc, #184]	; (8002664 <HAL_GPIO_Init+0x238>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_GPIO_Init+0x238>)
 80025b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c2:	4a29      	ldr	r2, [pc, #164]	; (8002668 <HAL_GPIO_Init+0x23c>)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a20      	ldr	r2, [pc, #128]	; (800266c <HAL_GPIO_Init+0x240>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d052      	beq.n	8002694 <HAL_GPIO_Init+0x268>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_GPIO_Init+0x244>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_GPIO_Init+0x22e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <HAL_GPIO_Init+0x248>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <HAL_GPIO_Init+0x22a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <HAL_GPIO_Init+0x24c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x226>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_GPIO_Init+0x250>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x222>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_GPIO_Init+0x254>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x21e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_GPIO_Init+0x258>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x21a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_GPIO_Init+0x25c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x216>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_GPIO_Init+0x260>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x212>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_GPIO_Init+0x264>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x20e>
 8002636:	2309      	movs	r3, #9
 8002638:	e02d      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 800263a:	230a      	movs	r3, #10
 800263c:	e02b      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 800263e:	2308      	movs	r3, #8
 8002640:	e029      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 8002642:	2307      	movs	r3, #7
 8002644:	e027      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 8002646:	2306      	movs	r3, #6
 8002648:	e025      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 800264a:	2305      	movs	r3, #5
 800264c:	e023      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 800264e:	2304      	movs	r3, #4
 8002650:	e021      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 8002652:	2303      	movs	r3, #3
 8002654:	e01f      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 8002656:	2302      	movs	r3, #2
 8002658:	e01d      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 800265a:	2301      	movs	r3, #1
 800265c:	e01b      	b.n	8002696 <HAL_GPIO_Init+0x26a>
 800265e:	bf00      	nop
 8002660:	58000080 	.word	0x58000080
 8002664:	58024400 	.word	0x58024400
 8002668:	58000400 	.word	0x58000400
 800266c:	58020000 	.word	0x58020000
 8002670:	58020400 	.word	0x58020400
 8002674:	58020800 	.word	0x58020800
 8002678:	58020c00 	.word	0x58020c00
 800267c:	58021000 	.word	0x58021000
 8002680:	58021400 	.word	0x58021400
 8002684:	58021800 	.word	0x58021800
 8002688:	58021c00 	.word	0x58021c00
 800268c:	58022000 	.word	0x58022000
 8002690:	58022400 	.word	0x58022400
 8002694:	2300      	movs	r3, #0
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	f002 0203 	and.w	r2, r2, #3
 800269c:	0092      	lsls	r2, r2, #2
 800269e:	4093      	lsls	r3, r2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a6:	4938      	ldr	r1, [pc, #224]	; (8002788 <HAL_GPIO_Init+0x35c>)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	3302      	adds	r3, #2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f ae63 	bne.w	8002440 <HAL_GPIO_Init+0x14>
  }
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	3724      	adds	r7, #36	; 0x24
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	58000400 	.word	0x58000400

0800278c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800279a:	4b75      	ldr	r3, [pc, #468]	; (8002970 <HAL_GPIO_DeInit+0x1e4>)
 800279c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800279e:	e0d9      	b.n	8002954 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80027a0:	2201      	movs	r2, #1
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4013      	ands	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80cc 	beq.w	800294e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80027b6:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_GPIO_DeInit+0x1e8>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a67      	ldr	r2, [pc, #412]	; (8002978 <HAL_GPIO_DeInit+0x1ec>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d037      	beq.n	8002850 <HAL_GPIO_DeInit+0xc4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a66      	ldr	r2, [pc, #408]	; (800297c <HAL_GPIO_DeInit+0x1f0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d031      	beq.n	800284c <HAL_GPIO_DeInit+0xc0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_GPIO_DeInit+0x1f4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d02b      	beq.n	8002848 <HAL_GPIO_DeInit+0xbc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a64      	ldr	r2, [pc, #400]	; (8002984 <HAL_GPIO_DeInit+0x1f8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d025      	beq.n	8002844 <HAL_GPIO_DeInit+0xb8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a63      	ldr	r2, [pc, #396]	; (8002988 <HAL_GPIO_DeInit+0x1fc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01f      	beq.n	8002840 <HAL_GPIO_DeInit+0xb4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a62      	ldr	r2, [pc, #392]	; (800298c <HAL_GPIO_DeInit+0x200>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d019      	beq.n	800283c <HAL_GPIO_DeInit+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a61      	ldr	r2, [pc, #388]	; (8002990 <HAL_GPIO_DeInit+0x204>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_GPIO_DeInit+0xac>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a60      	ldr	r2, [pc, #384]	; (8002994 <HAL_GPIO_DeInit+0x208>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_DeInit+0xa8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a5f      	ldr	r2, [pc, #380]	; (8002998 <HAL_GPIO_DeInit+0x20c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_DeInit+0xa4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_GPIO_DeInit+0x210>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_DeInit+0xa0>
 8002828:	2309      	movs	r3, #9
 800282a:	e012      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 800282c:	230a      	movs	r3, #10
 800282e:	e010      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002830:	2308      	movs	r3, #8
 8002832:	e00e      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002834:	2307      	movs	r3, #7
 8002836:	e00c      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002838:	2306      	movs	r3, #6
 800283a:	e00a      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 800283c:	2305      	movs	r3, #5
 800283e:	e008      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002840:	2304      	movs	r3, #4
 8002842:	e006      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002844:	2303      	movs	r3, #3
 8002846:	e004      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002848:	2302      	movs	r3, #2
 800284a:	e002      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_GPIO_DeInit+0xc6>
 8002850:	2300      	movs	r3, #0
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	f002 0203 	and.w	r2, r2, #3
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	4093      	lsls	r3, r2
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d136      	bne.n	80028d0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	401a      	ands	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288c:	4013      	ands	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289e:	4013      	ands	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_GPIO_DeInit+0x1e8>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	482c      	ldr	r0, [pc, #176]	; (8002974 <HAL_GPIO_DeInit+0x1e8>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	400a      	ands	r2, r1
 80028ca:	3302      	adds	r3, #2
 80028cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2103      	movs	r1, #3
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	08d2      	lsrs	r2, r2, #3
 8002904:	4019      	ands	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2103      	movs	r1, #3
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	2101      	movs	r1, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2103      	movs	r1, #3
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f af1f 	bne.w	80027a0 <HAL_GPIO_DeInit+0x14>
  }
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	58000080 	.word	0x58000080
 8002974:	58000400 	.word	0x58000400
 8002978:	58020000 	.word	0x58020000
 800297c:	58020400 	.word	0x58020400
 8002980:	58020800 	.word	0x58020800
 8002984:	58020c00 	.word	0x58020c00
 8002988:	58021000 	.word	0x58021000
 800298c:	58021400 	.word	0x58021400
 8002990:	58021800 	.word	0x58021800
 8002994:	58021c00 	.word	0x58021c00
 8002998:	58022000 	.word	0x58022000
 800299c:	58022400 	.word	0x58022400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029bc:	e003      	b.n	80029c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	041a      	lsls	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f804 	bl	8002a06 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d00a      	beq.n	8002a46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e01f      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e01d      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 0207 	bic.w	r2, r3, #7
 8002a4e:	490f      	ldr	r1, [pc, #60]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a56:	f7fe fff5 	bl	8001a44 <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a5c:	e009      	b.n	8002a72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a5e:	f7fe fff1 	bl	8001a44 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6c:	d901      	bls.n	8002a72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	58024800 	.word	0x58024800

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f000 bc48 	b.w	8003334 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8088 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002abc:	4b96      	ldr	r3, [pc, #600]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d007      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x48>
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	2b18      	cmp	r3, #24
 8002acc:	d111      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62>
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d06d      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x130>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d169      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f000 bc21 	b.w	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x7a>
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a85      	ldr	r2, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e02e      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x9c>
 8002b12:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a80      	ldr	r2, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7d      	ldr	r2, [pc, #500]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b36:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a77      	ldr	r2, [pc, #476]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a74      	ldr	r2, [pc, #464]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b50:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a70      	ldr	r2, [pc, #448]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6e      	ldr	r3, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6d      	ldr	r2, [pc, #436]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe ff68 	bl	8001a44 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe ff64 	bl	8001a44 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e3d4      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe ff54 	bl	8001a44 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe ff50 	bl	8001a44 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e3c0      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bb2:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x110>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80ca 	beq.w	8002d64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd0:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bda:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x166>
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2b18      	cmp	r3, #24
 8002bea:	d156      	bne.n	8002c9a <HAL_RCC_OscConfig+0x20a>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d151      	bne.n	8002c9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf6:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e392      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c0e:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0219 	bic.w	r2, r3, #25
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	493f      	ldr	r1, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe ff10 	bl	8001a44 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe ff0c 	bl	8001a44 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e37c      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3a:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	f7fe ff2d 	bl	8001aa4 <HAL_GetREVID>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d817      	bhi.n	8002c84 <HAL_RCC_OscConfig+0x1f4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d108      	bne.n	8002c6e <HAL_RCC_OscConfig+0x1de>
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c6c:	e07a      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	4926      	ldr	r1, [pc, #152]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c82:	e06f      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	4921      	ldr	r1, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c98:	e064      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d047      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0219 	bic.w	r2, r3, #25
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	491a      	ldr	r1, [pc, #104]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fec6 	bl	8001a44 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fec2 	bl	8001a44 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e332      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	f7fe fee3 	bl	8001aa4 <HAL_GetREVID>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d819      	bhi.n	8002d1c <HAL_RCC_OscConfig+0x28c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d108      	bne.n	8002d02 <HAL_RCC_OscConfig+0x272>
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	6053      	str	r3, [r2, #4]
 8002d00:	e030      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	031b      	lsls	r3, r3, #12
 8002d10:	4901      	ldr	r1, [pc, #4]	; (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
 8002d16:	e025      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	4b9a      	ldr	r3, [pc, #616]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	4997      	ldr	r1, [pc, #604]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e018      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b95      	ldr	r3, [pc, #596]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a94      	ldr	r2, [pc, #592]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fe81 	bl	8001a44 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe fe7d 	bl	8001a44 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e2ed      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d58:	4b8b      	ldr	r3, [pc, #556]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80a9 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b85      	ldr	r3, [pc, #532]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d7c:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d007      	beq.n	8002d98 <HAL_RCC_OscConfig+0x308>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b18      	cmp	r3, #24
 8002d8c:	d13a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x374>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d135      	bne.n	8002e04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d98:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x320>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e2c1      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002db0:	f7fe fe78 	bl	8001aa4 <HAL_GetREVID>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d817      	bhi.n	8002dee <HAL_RCC_OscConfig+0x35e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x348>
 8002dc6:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002dce:	4a6e      	ldr	r2, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd6:	e075      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	069b      	lsls	r3, r3, #26
 8002de6:	4968      	ldr	r1, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dec:	e06a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dee:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	4962      	ldr	r1, [pc, #392]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e02:	e05f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d042      	beq.n	8002e92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fe14 	bl	8001a44 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e20:	f7fe fe10 	bl	8001a44 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e280      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e3e:	f7fe fe31 	bl	8001aa4 <HAL_GetREVID>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d817      	bhi.n	8002e7c <HAL_RCC_OscConfig+0x3ec>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d108      	bne.n	8002e66 <HAL_RCC_OscConfig+0x3d6>
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e62:	6053      	str	r3, [r2, #4]
 8002e64:	e02e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	4944      	ldr	r1, [pc, #272]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	e023      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
 8002e7c:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	493f      	ldr	r1, [pc, #252]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60cb      	str	r3, [r1, #12]
 8002e90:	e018      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fdd1 	bl	8001a44 <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fdcd 	bl	8001a44 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e23d      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002eb8:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d036      	beq.n	8002f3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fdae 	bl	8001a44 <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe fdaa 	bl	8001a44 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e21a      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x45c>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe fd94 	bl	8001a44 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe fd90 	bl	8001a44 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e200      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d039      	beq.n	8002fbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fd71 	bl	8001a44 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f66:	f7fe fd6d 	bl	8001a44 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1dd      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
 8002f84:	e01b      	b.n	8002fbe <HAL_RCC_OscConfig+0x52e>
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8c:	4b9b      	ldr	r3, [pc, #620]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a9a      	ldr	r2, [pc, #616]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8002f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f98:	f7fe fd54 	bl	8001a44 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa0:	f7fe fd50 	bl	8001a44 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1c0      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fb2:	4b92      	ldr	r3, [pc, #584]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8081 	beq.w	80030ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fcc:	4b8c      	ldr	r3, [pc, #560]	; (8003200 <HAL_RCC_OscConfig+0x770>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a8b      	ldr	r2, [pc, #556]	; (8003200 <HAL_RCC_OscConfig+0x770>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fd34 	bl	8001a44 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fe fd30 	bl	8001a44 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1a0      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	4b83      	ldr	r3, [pc, #524]	; (8003200 <HAL_RCC_OscConfig+0x770>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x584>
 8003006:	4b7d      	ldr	r3, [pc, #500]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a7c      	ldr	r2, [pc, #496]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e02d      	b.n	8003070 <HAL_RCC_OscConfig+0x5e0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10c      	bne.n	8003036 <HAL_RCC_OscConfig+0x5a6>
 800301c:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a76      	ldr	r2, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	4b74      	ldr	r3, [pc, #464]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a73      	ldr	r2, [pc, #460]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x5e0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b05      	cmp	r3, #5
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x5c8>
 800303e:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a6e      	ldr	r2, [pc, #440]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a6b      	ldr	r2, [pc, #428]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0x5e0>
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a67      	ldr	r2, [pc, #412]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
 8003064:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a64      	ldr	r2, [pc, #400]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe fce4 	bl	8001a44 <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fce0 	bl	8001a44 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e14e      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ee      	beq.n	8003080 <HAL_RCC_OscConfig+0x5f0>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fcce 	bl	8001a44 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fcca 	bl	8001a44 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e138      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c2:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ee      	bne.n	80030ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 812d 	beq.w	8003332 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030d8:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e0:	2b18      	cmp	r3, #24
 80030e2:	f000 80bd 	beq.w	8003260 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 809e 	bne.w	800322c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a41      	ldr	r2, [pc, #260]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fca2 	bl	8001a44 <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe fc9e 	bl	8001a44 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e10e      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003116:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCC_OscConfig+0x774>)
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	430a      	orrs	r2, r1
 8003136:	4931      	ldr	r1, [pc, #196]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	628b      	str	r3, [r1, #40]	; 0x28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	3b01      	subs	r3, #1
 8003142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	3b01      	subs	r3, #1
 800314c:	025b      	lsls	r3, r3, #9
 800314e:	b29b      	uxth	r3, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	3b01      	subs	r3, #1
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800316c:	4923      	ldr	r1, [pc, #140]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800317e:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x778>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800318a:	00d2      	lsls	r2, r2, #3
 800318c:	491b      	ldr	r1, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	f023 020c 	bic.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4917      	ldr	r1, [pc, #92]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f023 0202 	bic.w	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	4912      	ldr	r1, [pc, #72]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe fc27 	bl	8001a44 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f8:	e011      	b.n	800321e <HAL_RCC_OscConfig+0x78e>
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
 8003200:	58024800 	.word	0x58024800
 8003204:	fffffc0c 	.word	0xfffffc0c
 8003208:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fc1a 	bl	8001a44 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e08a      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x77c>
 800322a:	e082      	b.n	8003332 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a42      	ldr	r2, [pc, #264]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fc04 	bl	8001a44 <HAL_GetTick>
 800323c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fc00 	bl	8001a44 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e070      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x7b0>
 800325e:	e068      	b.n	8003332 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2b01      	cmp	r3, #1
 8003272:	d031      	beq.n	80032d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 0203 	and.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d12a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d122      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d11a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0a5b      	lsrs	r3, r3, #9
 80032a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d111      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e02b      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d01f      	beq.n	8003332 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032fe:	f7fe fba1 	bl	8001a44 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003304:	bf00      	nop
 8003306:	f7fe fb9d 	bl	8001a44 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	4293      	cmp	r3, r2
 8003310:	d0f9      	beq.n	8003306 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_RCC_OscConfig+0x8b0>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	4906      	ldr	r1, [pc, #24]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003322:	4313      	orrs	r3, r2
 8003324:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_RCC_OscConfig+0x8ac>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3730      	adds	r7, #48	; 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400
 8003340:	ffff0007 	.word	0xffff0007

08003344 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e19c      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b8a      	ldr	r3, [pc, #552]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b87      	ldr	r3, [pc, #540]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	4985      	ldr	r1, [pc, #532]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b83      	ldr	r3, [pc, #524]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e184      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d010      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d908      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033a4:	4b78      	ldr	r3, [pc, #480]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4975      	ldr	r1, [pc, #468]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d010      	beq.n	80033e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d908      	bls.n	80033e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033d2:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	496a      	ldr	r1, [pc, #424]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d908      	bls.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003400:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	495e      	ldr	r1, [pc, #376]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 800340e:	4313      	orrs	r3, r2
 8003410:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800342a:	429a      	cmp	r2, r3
 800342c:	d908      	bls.n	8003440 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800342e:	4b56      	ldr	r3, [pc, #344]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4953      	ldr	r1, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 800343c:	4313      	orrs	r3, r2
 800343e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d010      	beq.n	800346e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	429a      	cmp	r2, r3
 800345a:	d908      	bls.n	800346e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f023 020f 	bic.w	r2, r3, #15
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4947      	ldr	r1, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 800346a:	4313      	orrs	r3, r2
 800346c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d055      	beq.n	8003526 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4940      	ldr	r1, [pc, #256]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003488:	4313      	orrs	r3, r2
 800348a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003494:	4b3c      	ldr	r3, [pc, #240]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0f6      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034ac:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ea      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034c4:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0de      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d4:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d6      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e4:	4b28      	ldr	r3, [pc, #160]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f023 0207 	bic.w	r2, r3, #7
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4925      	ldr	r1, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fe faa5 	bl	8001a44 <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fe:	f7fe faa1 	bl	8001a44 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0be      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003514:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	429a      	cmp	r2, r3
 8003524:	d1eb      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	429a      	cmp	r2, r3
 8003540:	d208      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003550:	4313      	orrs	r3, r2
 8003552:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d214      	bcs.n	800358c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 020f 	bic.w	r2, r3, #15
 800356a:	4906      	ldr	r1, [pc, #24]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e086      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
 8003584:	52002000 	.word	0x52002000
 8003588:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	4b3f      	ldr	r3, [pc, #252]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d208      	bcs.n	80035ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035a8:	4b3c      	ldr	r3, [pc, #240]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	4939      	ldr	r1, [pc, #228]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d208      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035d6:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	492e      	ldr	r1, [pc, #184]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003600:	429a      	cmp	r2, r3
 8003602:	d208      	bcs.n	8003616 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	4922      	ldr	r1, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 8003612:	4313      	orrs	r3, r2
 8003614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800362e:	429a      	cmp	r2, r3
 8003630:	d208      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4917      	ldr	r1, [pc, #92]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 8003640:	4313      	orrs	r3, r2
 8003642:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003644:	f000 f834 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	4912      	ldr	r1, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x35c>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_RCC_ClockConfig+0x358>)
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <HAL_RCC_ClockConfig+0x35c>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x360>)
 800367a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_RCC_ClockConfig+0x364>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x368>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe f838 	bl	80016fc <HAL_InitTick>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	58024400 	.word	0x58024400
 80036a0:	080144c4 	.word	0x080144c4
 80036a4:	24000004 	.word	0x24000004
 80036a8:	24000000 	.word	0x24000000
 80036ac:	24000008 	.word	0x24000008

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b6:	4bb3      	ldr	r3, [pc, #716]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036be:	2b18      	cmp	r3, #24
 80036c0:	f200 8155 	bhi.w	800396e <HAL_RCC_GetSysClockFreq+0x2be>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	08003731 	.word	0x08003731
 80036d0:	0800396f 	.word	0x0800396f
 80036d4:	0800396f 	.word	0x0800396f
 80036d8:	0800396f 	.word	0x0800396f
 80036dc:	0800396f 	.word	0x0800396f
 80036e0:	0800396f 	.word	0x0800396f
 80036e4:	0800396f 	.word	0x0800396f
 80036e8:	0800396f 	.word	0x0800396f
 80036ec:	08003757 	.word	0x08003757
 80036f0:	0800396f 	.word	0x0800396f
 80036f4:	0800396f 	.word	0x0800396f
 80036f8:	0800396f 	.word	0x0800396f
 80036fc:	0800396f 	.word	0x0800396f
 8003700:	0800396f 	.word	0x0800396f
 8003704:	0800396f 	.word	0x0800396f
 8003708:	0800396f 	.word	0x0800396f
 800370c:	0800375d 	.word	0x0800375d
 8003710:	0800396f 	.word	0x0800396f
 8003714:	0800396f 	.word	0x0800396f
 8003718:	0800396f 	.word	0x0800396f
 800371c:	0800396f 	.word	0x0800396f
 8003720:	0800396f 	.word	0x0800396f
 8003724:	0800396f 	.word	0x0800396f
 8003728:	0800396f 	.word	0x0800396f
 800372c:	08003763 	.word	0x08003763
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003730:	4b94      	ldr	r3, [pc, #592]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800373c:	4b91      	ldr	r3, [pc, #580]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	4a90      	ldr	r2, [pc, #576]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800374e:	e111      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003750:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003752:	61bb      	str	r3, [r7, #24]
      break;
 8003754:	e10e      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003758:	61bb      	str	r3, [r7, #24]
      break;
 800375a:	e10b      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800375c:	4b8c      	ldr	r3, [pc, #560]	; (8003990 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800375e:	61bb      	str	r3, [r7, #24]
      break;
 8003760:	e108      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003762:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800376c:	4b85      	ldr	r3, [pc, #532]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003776:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003778:	4b82      	ldr	r3, [pc, #520]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003782:	4b80      	ldr	r3, [pc, #512]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80e1 	beq.w	8003968 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f000 8083 	beq.w	80038b4 <HAL_RCC_GetSysClockFreq+0x204>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	f200 80a1 	bhi.w	80038f8 <HAL_RCC_GetSysClockFreq+0x248>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x114>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d056      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037c2:	e099      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02d      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037d0:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	4a6b      	ldr	r2, [pc, #428]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	4b62      	ldr	r3, [pc, #392]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380a:	ed97 6a02 	vldr	s12, [r7, #8]
 800380e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800382a:	e087      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2e8>
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003852:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800386e:	e065      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800399c <HAL_RCC_GetSysClockFreq+0x2ec>
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b40      	ldr	r3, [pc, #256]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a02 	vldr	s12, [r7, #8]
 8003896:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038b2:	e043      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038f6:	e021      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a26 	vldr	s13, [pc, #152]	; 800399c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a02 	vldr	s12, [r7, #8]
 800391e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800393a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	0a5b      	lsrs	r3, r3, #9
 8003942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003946:	3301      	adds	r3, #1
 8003948:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003954:	edd7 6a07 	vldr	s13, [r7, #28]
 8003958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003960:	ee17 3a90 	vmov	r3, s15
 8003964:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003966:	e005      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
      break;
 800396c:	e002      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003970:	61bb      	str	r3, [r7, #24]
      break;
 8003972:	bf00      	nop
  }

  return sysclockfreq;
 8003974:	69bb      	ldr	r3, [r7, #24]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	; 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400
 8003988:	03d09000 	.word	0x03d09000
 800398c:	003d0900 	.word	0x003d0900
 8003990:	017d7840 	.word	0x017d7840
 8003994:	46000000 	.word	0x46000000
 8003998:	4c742400 	.word	0x4c742400
 800399c:	4a742400 	.word	0x4a742400
 80039a0:	4bbebc20 	.word	0x4bbebc20

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039aa:	f7ff fe81 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490f      	ldr	r1, [pc, #60]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a07      	ldr	r2, [pc, #28]	; (80039fc <HAL_RCC_GetHCLKFreq+0x58>)
 80039e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <HAL_RCC_GetHCLKFreq+0x58>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58024400 	.word	0x58024400
 80039f8:	080144c4 	.word	0x080144c4
 80039fc:	24000004 	.word	0x24000004
 8003a00:	24000000 	.word	0x24000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a08:	f7ff ffcc 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4904      	ldr	r1, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	080144c4 	.word	0x080144c4

08003a30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	223f      	movs	r2, #63	; 0x3f
 8003a3e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0207 	and.w	r2, r3, #7
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003a4c:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003a58:	4b14      	ldr	r3, [pc, #80]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_RCC_GetClockConfig+0x7c>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_GetClockConfig+0x80>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	58024400 	.word	0x58024400
 8003ab0:	52002000 	.word	0x52002000

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b0ca      	sub	sp, #296	; 0x128
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ad8:	2500      	movs	r5, #0
 8003ada:	ea54 0305 	orrs.w	r3, r4, r5
 8003ade:	d049      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aea:	d02f      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003af0:	d828      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af6:	d01a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afc:	d822      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b06:	d007      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b08:	e01c      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0a:	4bb8      	ldr	r3, [pc, #736]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	4ab7      	ldr	r2, [pc, #732]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b16:	e01a      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 fb61 	bl	80061e8 <RCCEx_PLL2_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b2c:	e00f      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b32:	3328      	adds	r3, #40	; 0x28
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 fc08 	bl	800634c <RCCEx_PLL3_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b42:	e004      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b4a:	e000      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b56:	4ba5      	ldr	r3, [pc, #660]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b64:	4aa1      	ldr	r2, [pc, #644]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	6513      	str	r3, [r2, #80]	; 0x50
 8003b6a:	e003      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003b80:	f04f 0900 	mov.w	r9, #0
 8003b84:	ea58 0309 	orrs.w	r3, r8, r9
 8003b88:	d047      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d82a      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bb1 	.word	0x08003bb1
 8003ba0:	08003bbf 	.word	0x08003bbf
 8003ba4:	08003bd5 	.word	0x08003bd5
 8003ba8:	08003bf3 	.word	0x08003bf3
 8003bac:	08003bf3 	.word	0x08003bf3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b8e      	ldr	r3, [pc, #568]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4a8d      	ldr	r2, [pc, #564]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bbc:	e01a      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fb0e 	bl	80061e8 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bd2:	e00f      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd8:	3328      	adds	r3, #40	; 0x28
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f002 fbb5 	bl	800634c <RCCEx_PLL3_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003be8:	e004      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bfc:	4b7b      	ldr	r3, [pc, #492]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	f023 0107 	bic.w	r1, r3, #7
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	4a78      	ldr	r2, [pc, #480]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003c26:	f04f 0b00 	mov.w	fp, #0
 8003c2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c2e:	d04c      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3a:	d030      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c40:	d829      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c42:	2bc0      	cmp	r3, #192	; 0xc0
 8003c44:	d02d      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c46:	2bc0      	cmp	r3, #192	; 0xc0
 8003c48:	d825      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c4a:	2b80      	cmp	r3, #128	; 0x80
 8003c4c:	d018      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d821      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d007      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c5a:	e01c      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a62      	ldr	r2, [pc, #392]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6e:	3308      	adds	r3, #8
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 fab8 	bl	80061e8 <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c84:	3328      	adds	r3, #40	; 0x28
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f002 fb5f 	bl	800634c <RCCEx_PLL3_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c94:	e006      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cac:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	4a4c      	ldr	r2, [pc, #304]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6513      	str	r3, [r2, #80]	; 0x50
 8003cc0:	e003      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003cd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003ce0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	d053      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cf6:	d035      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfc:	d82e      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d02:	d031      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003d04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d08:	d828      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0e:	d01a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d14:	d822      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1e:	d007      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003d20:	e01c      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d22:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d2e:	e01c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	3308      	adds	r3, #8
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 fa55 	bl	80061e8 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d44:	e011      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4a:	3328      	adds	r3, #40	; 0x28
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f002 fafc 	bl	800634c <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d5a:	e006      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d62:	e002      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d64:	bf00      	nop
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d72:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d82:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003da8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d056      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dbe:	d038      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc4:	d831      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dca:	d034      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003dcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dd0:	d82b      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ddc:	d825      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003de2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003de8:	e01f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dea:	bf00      	nop
 8003dec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df0:	4ba2      	ldr	r3, [pc, #648]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	4aa1      	ldr	r2, [pc, #644]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dfc:	e01c      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e02:	3308      	adds	r3, #8
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f002 f9ee 	bl	80061e8 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e12:	e011      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	3328      	adds	r3, #40	; 0x28
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 fa95 	bl	800634c <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e40:	4b8e      	ldr	r3, [pc, #568]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e50:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d03a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	2b30      	cmp	r3, #48	; 0x30
 8003e88:	d01f      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e8a:	2b30      	cmp	r3, #48	; 0x30
 8003e8c:	d819      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d00c      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d815      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d019      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d111      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9e:	4b77      	ldr	r3, [pc, #476]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4a76      	ldr	r2, [pc, #472]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003eaa:	e011      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 f997 	bl	80061e8 <RCCEx_PLL2_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eec:	e003      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	d051      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f20:	d035      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f26:	d82e      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f2c:	d031      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f32:	d828      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f38:	d01a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d822      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d007      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4a4a      	ldr	r2, [pc, #296]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f58:	e01c      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	3308      	adds	r3, #8
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 f940 	bl	80061e8 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f74:	3328      	adds	r3, #40	; 0x28
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 f9e7 	bl	800634c <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f9c:	4b37      	ldr	r3, [pc, #220]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003faa:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6513      	str	r3, [r2, #80]	; 0x50
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003fd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d056      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d033      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fea:	d82c      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ff0:	d02f      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ff6:	d826      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ffc:	d02b      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004002:	d820      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004008:	d012      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800400a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400e:	d81a      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d022      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d115      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401e:	3308      	adds	r3, #8
 8004020:	2101      	movs	r1, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f002 f8e0 	bl	80061e8 <RCCEx_PLL2_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800402e:	e015      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004034:	3328      	adds	r3, #40	; 0x28
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f002 f987 	bl	800634c <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004044:	e00a      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800404e:	bf00      	nop
 8004050:	e004      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800405a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004072:	4a02      	ldr	r2, [pc, #8]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004074:	430b      	orrs	r3, r1
 8004076:	6513      	str	r3, [r2, #80]	; 0x50
 8004078:	e006      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004098:	2300      	movs	r3, #0
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	d055      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b4:	d033      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80040b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ba:	d82c      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c0:	d02f      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d826      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040cc:	d02b      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040d2:	d820      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d8:	d012      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80040da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040de:	d81a      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d022      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80040e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e8:	d115      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	3308      	adds	r3, #8
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f002 f878 	bl	80061e8 <RCCEx_PLL2_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040fe:	e015      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	3328      	adds	r3, #40	; 0x28
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f002 f91f 	bl	800634c <RCCEx_PLL3_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004114:	e00a      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800411c:	e006      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800411e:	bf00      	nop
 8004120:	e004      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800412a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004134:	4ba3      	ldr	r3, [pc, #652]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004144:	4a9f      	ldr	r2, [pc, #636]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004146:	430b      	orrs	r3, r1
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
 800414a:	e003      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800416a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800416e:	460b      	mov	r3, r1
 8004170:	4313      	orrs	r3, r2
 8004172:	d037      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417e:	d00e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004184:	d816      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418e:	d111      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004190:	4b8c      	ldr	r3, [pc, #560]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	4a8b      	ldr	r2, [pc, #556]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800419c:	e00f      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	3308      	adds	r3, #8
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f81e 	bl	80061e8 <RCCEx_PLL2_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6513      	str	r3, [r2, #80]	; 0x50
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80041f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d039      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	2b03      	cmp	r3, #3
 800420c:	d81c      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004251 	.word	0x08004251
 8004218:	08004225 	.word	0x08004225
 800421c:	08004233 	.word	0x08004233
 8004220:	08004251 	.word	0x08004251
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004224:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a66      	ldr	r2, [pc, #408]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004236:	3308      	adds	r3, #8
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f001 ffd4 	bl	80061e8 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800425a:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	f023 0103 	bic.w	r1, r3, #3
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	4a56      	ldr	r2, [pc, #344]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426a:	430b      	orrs	r3, r1
 800426c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800428e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	f000 809f 	beq.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429a:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4a      	ldr	r2, [pc, #296]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a6:	f7fd fbcd 	bl	8001a44 <HAL_GetTick>
 80042aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ae:	e00b      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b0:	f7fd fbc8 	bl	8001a44 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d903      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c6:	e005      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c8:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ed      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80042d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d179      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042e8:	4053      	eors	r3, r2
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d015      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a2d      	ldr	r2, [pc, #180]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d118      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd fb8a 	bl	8001a44 <HAL_GetTick>
 8004330:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004334:	e00d      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fd fb85 	bl	8001a44 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	f241 3388 	movw	r3, #5000	; 0x1388
 8004346:	429a      	cmp	r2, r3
 8004348:	d903      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004350:	e005      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0eb      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004362:	2b00      	cmp	r3, #0
 8004364:	d129      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d10e      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004388:	091a      	lsrs	r2, r3, #4
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800438c:	4013      	ands	r3, r2
 800438e:	4a0d      	ldr	r2, [pc, #52]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004390:	430b      	orrs	r3, r1
 8004392:	6113      	str	r3, [r2, #16]
 8004394:	e005      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800439c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043a0:	6113      	str	r3, [r2, #16]
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b2:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e00e      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80043c4:	58024400 	.word	0x58024400
 80043c8:	58024800 	.word	0x58024800
 80043cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f002 0301 	and.w	r3, r2, #1
 80043e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f000 8089 	beq.w	800450c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004400:	2b28      	cmp	r3, #40	; 0x28
 8004402:	d86b      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	080044e5 	.word	0x080044e5
 8004410:	080044dd 	.word	0x080044dd
 8004414:	080044dd 	.word	0x080044dd
 8004418:	080044dd 	.word	0x080044dd
 800441c:	080044dd 	.word	0x080044dd
 8004420:	080044dd 	.word	0x080044dd
 8004424:	080044dd 	.word	0x080044dd
 8004428:	080044dd 	.word	0x080044dd
 800442c:	080044b1 	.word	0x080044b1
 8004430:	080044dd 	.word	0x080044dd
 8004434:	080044dd 	.word	0x080044dd
 8004438:	080044dd 	.word	0x080044dd
 800443c:	080044dd 	.word	0x080044dd
 8004440:	080044dd 	.word	0x080044dd
 8004444:	080044dd 	.word	0x080044dd
 8004448:	080044dd 	.word	0x080044dd
 800444c:	080044c7 	.word	0x080044c7
 8004450:	080044dd 	.word	0x080044dd
 8004454:	080044dd 	.word	0x080044dd
 8004458:	080044dd 	.word	0x080044dd
 800445c:	080044dd 	.word	0x080044dd
 8004460:	080044dd 	.word	0x080044dd
 8004464:	080044dd 	.word	0x080044dd
 8004468:	080044dd 	.word	0x080044dd
 800446c:	080044e5 	.word	0x080044e5
 8004470:	080044dd 	.word	0x080044dd
 8004474:	080044dd 	.word	0x080044dd
 8004478:	080044dd 	.word	0x080044dd
 800447c:	080044dd 	.word	0x080044dd
 8004480:	080044dd 	.word	0x080044dd
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044dd 	.word	0x080044dd
 800448c:	080044e5 	.word	0x080044e5
 8004490:	080044dd 	.word	0x080044dd
 8004494:	080044dd 	.word	0x080044dd
 8004498:	080044dd 	.word	0x080044dd
 800449c:	080044dd 	.word	0x080044dd
 80044a0:	080044dd 	.word	0x080044dd
 80044a4:	080044dd 	.word	0x080044dd
 80044a8:	080044dd 	.word	0x080044dd
 80044ac:	080044e5 	.word	0x080044e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b4:	3308      	adds	r3, #8
 80044b6:	2101      	movs	r1, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 fe95 	bl	80061e8 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	3328      	adds	r3, #40	; 0x28
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 ff3c 	bl	800634c <RCCEx_PLL3_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044ee:	4bbf      	ldr	r3, [pc, #764]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fc:	4abb      	ldr	r2, [pc, #748]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	6553      	str	r3, [r2, #84]	; 0x54
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 0302 	and.w	r3, r2, #2
 8004518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004522:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d041      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004532:	2b05      	cmp	r3, #5
 8004534:	d824      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004589 	.word	0x08004589
 8004540:	08004555 	.word	0x08004555
 8004544:	0800456b 	.word	0x0800456b
 8004548:	08004589 	.word	0x08004589
 800454c:	08004589 	.word	0x08004589
 8004550:	08004589 	.word	0x08004589
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004558:	3308      	adds	r3, #8
 800455a:	2101      	movs	r1, #1
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fe43 	bl	80061e8 <RCCEx_PLL2_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004568:	e00f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456e:	3328      	adds	r3, #40	; 0x28
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f001 feea 	bl	800634c <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004592:	4b96      	ldr	r3, [pc, #600]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f023 0107 	bic.w	r1, r3, #7
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a0:	4a92      	ldr	r2, [pc, #584]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6553      	str	r3, [r2, #84]	; 0x54
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 0304 	and.w	r3, r2, #4
 80045bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d044      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d825      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004631 	.word	0x08004631
 80045e8:	080045fd 	.word	0x080045fd
 80045ec:	08004613 	.word	0x08004613
 80045f0:	08004631 	.word	0x08004631
 80045f4:	08004631 	.word	0x08004631
 80045f8:	08004631 	.word	0x08004631
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	3308      	adds	r3, #8
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f001 fdef 	bl	80061e8 <RCCEx_PLL2_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004610:	e00f      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	3328      	adds	r3, #40	; 0x28
 8004618:	2101      	movs	r1, #1
 800461a:	4618      	mov	r0, r3
 800461c:	f001 fe96 	bl	800634c <RCCEx_PLL3_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004626:	e004      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800463a:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	f023 0107 	bic.w	r1, r3, #7
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464a:	4a68      	ldr	r2, [pc, #416]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800464c:	430b      	orrs	r3, r1
 800464e:	6593      	str	r3, [r2, #88]	; 0x58
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f002 0320 	and.w	r3, r2, #32
 8004666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800466a:	2300      	movs	r3, #0
 800466c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d055      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004686:	d033      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800468c:	d82c      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d02f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d826      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800469a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800469e:	d02b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80046a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046a4:	d820      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046aa:	d012      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80046ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b0:	d81a      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d022      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80046b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ba:	d115      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c0:	3308      	adds	r3, #8
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 fd8f 	bl	80061e8 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046d0:	e015      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	3328      	adds	r3, #40	; 0x28
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fe36 	bl	800634c <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046e6:	e00a      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046ee:	e006      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046f0:	bf00      	nop
 80046f2:	e004      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046f4:	bf00      	nop
 80046f6:	e002      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004706:	4b39      	ldr	r3, [pc, #228]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	4a35      	ldr	r2, [pc, #212]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6553      	str	r3, [r2, #84]	; 0x54
 800471c:	e003      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004736:	2300      	movs	r3, #0
 8004738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800473c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d058      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800474e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004752:	d033      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004754:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004758:	d82c      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d02f      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d826      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476a:	d02b      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800476c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004770:	d820      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d012      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d81a      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d022      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004786:	d115      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478c:	3308      	adds	r3, #8
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fd29 	bl	80061e8 <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800479c:	e015      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a2:	3328      	adds	r3, #40	; 0x28
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 fdd0 	bl	800634c <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047b2:	e00a      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ba:	e006      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047bc:	bf00      	nop
 80047be:	e004      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047c0:	bf00      	nop
 80047c2:	e002      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10e      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047e2:	4a02      	ldr	r2, [pc, #8]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6593      	str	r3, [r2, #88]	; 0x58
 80047e8:	e006      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800480e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d055      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004820:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004824:	d033      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004826:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800482a:	d82c      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004830:	d02f      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004836:	d826      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004838:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800483c:	d02b      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800483e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004842:	d820      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004848:	d012      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800484a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484e:	d81a      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d022      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004858:	d115      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485e:	3308      	adds	r3, #8
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fcc0 	bl	80061e8 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800486e:	e015      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004874:	3328      	adds	r3, #40	; 0x28
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f001 fd67 	bl	800634c <RCCEx_PLL3_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004884:	e00a      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800488e:	bf00      	nop
 8004890:	e004      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800489a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048a4:	4ba1      	ldr	r3, [pc, #644]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048b4:	4a9d      	ldr	r2, [pc, #628]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ba:	e003      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f002 0308 	and.w	r3, r2, #8
 80048d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80048de:	460b      	mov	r3, r1
 80048e0:	4313      	orrs	r3, r2
 80048e2:	d01e      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f6:	3328      	adds	r3, #40	; 0x28
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fd26 	bl	800634c <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800490c:	4b87      	ldr	r3, [pc, #540]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	4a83      	ldr	r2, [pc, #524]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800491e:	430b      	orrs	r3, r1
 8004920:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f002 0310 	and.w	r3, r2, #16
 800492e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004938:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d01e      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494e:	d10c      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004954:	3328      	adds	r3, #40	; 0x28
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fcf7 	bl	800634c <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800496a:	4b70      	ldr	r3, [pc, #448]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800497a:	4a6c      	ldr	r2, [pc, #432]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800498c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004990:	2300      	movs	r3, #0
 8004992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004996:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800499a:	460b      	mov	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	d03e      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ac:	d022      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80049ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b2:	d81b      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80049be:	e015      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	3308      	adds	r3, #8
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fc0d 	bl	80061e8 <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049d4:	e00f      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049da:	3328      	adds	r3, #40	; 0x28
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fcb4 	bl	800634c <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049ea:	e004      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049fe:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a0e:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6593      	str	r3, [r2, #88]	; 0x58
 8004a14:	e003      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004a2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d03b      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a46:	d01f      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a4c:	d818      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a52:	d003      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a58:	d007      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a5a:	e011      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5c:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a68:	e00f      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	3328      	adds	r3, #40	; 0x28
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 fc6a 	bl	800634c <RCCEx_PLL3_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a7e:	e004      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6553      	str	r3, [r2, #84]	; 0x54
 8004aa8:	e003      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004abe:	673b      	str	r3, [r7, #112]	; 0x70
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	677b      	str	r3, [r7, #116]	; 0x74
 8004ac4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d034      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004adc:	d007      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ade:	e011      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004aec:	e00e      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	3308      	adds	r3, #8
 8004af4:	2102      	movs	r1, #2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fb76 	bl	80061e8 <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b02:	e003      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b22:	4a02      	ldr	r2, [pc, #8]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b2a:	bf00      	nop
 8004b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b46:	2300      	movs	r3, #0
 8004b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4313      	orrs	r3, r2
 8004b52:	d00c      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b58:	3328      	adds	r3, #40	; 0x28
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 fbf5 	bl	800634c <RCCEx_PLL3_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004b80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d038      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d018      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d811      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba2:	d014      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d80b      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d011      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4bc3      	ldr	r3, [pc, #780]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4ac2      	ldr	r2, [pc, #776]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bdc:	4bb9      	ldr	r3, [pc, #740]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bec:	4ab5      	ldr	r2, [pc, #724]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	6553      	str	r3, [r2, #84]	; 0x54
 8004bf2:	e003      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c18:	4baa      	ldr	r3, [pc, #680]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	4aa7      	ldr	r2, [pc, #668]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004c38:	653b      	str	r3, [r7, #80]	; 0x50
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c48:	4b9e      	ldr	r3, [pc, #632]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c58:	4a9a      	ldr	r2, [pc, #616]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004c74:	460b      	mov	r3, r1
 8004c76:	4313      	orrs	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c7a:	4b92      	ldr	r3, [pc, #584]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c88:	4a8e      	ldr	r2, [pc, #568]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004caa:	4b86      	ldr	r3, [pc, #536]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	4a85      	ldr	r2, [pc, #532]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb4:	6113      	str	r3, [r2, #16]
 8004cb6:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb8:	6919      	ldr	r1, [r3, #16]
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cc2:	4a80      	ldr	r2, [pc, #512]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ce4:	4b77      	ldr	r3, [pc, #476]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	4a74      	ldr	r2, [pc, #464]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d14:	4b6b      	ldr	r3, [pc, #428]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d24:	4a67      	ldr	r2, [pc, #412]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d26:	430b      	orrs	r3, r1
 8004d28:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	2100      	movs	r1, #0
 8004d34:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d011      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 fa4a 	bl	80061e8 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	2100      	movs	r1, #0
 8004d74:	6239      	str	r1, [r7, #32]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d80:	460b      	mov	r3, r1
 8004d82:	4313      	orrs	r3, r2
 8004d84:	d011      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fa2a 	bl	80061e8 <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	2100      	movs	r1, #0
 8004db4:	61b9      	str	r1, [r7, #24]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d011      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dca:	3308      	adds	r3, #8
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fa0a 	bl	80061e8 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	2100      	movs	r1, #0
 8004df4:	6139      	str	r1, [r7, #16]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e00:	460b      	mov	r3, r1
 8004e02:	4313      	orrs	r3, r2
 8004e04:	d011      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0a:	3328      	adds	r3, #40	; 0x28
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fa9c 	bl	800634c <RCCEx_PLL3_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	2100      	movs	r1, #0
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e40:	460b      	mov	r3, r1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	d011      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4a:	3328      	adds	r3, #40	; 0x28
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fa7c 	bl	800634c <RCCEx_PLL3_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	2100      	movs	r1, #0
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d011      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e8a:	3328      	adds	r3, #40	; 0x28
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 fa5c 	bl	800634c <RCCEx_PLL3_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004eaa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec4:	58024400 	.word	0x58024400

08004ec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b090      	sub	sp, #64	; 0x40
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004eda:	430b      	orrs	r3, r1
 8004edc:	f040 8094 	bne.w	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004ee0:	4b9e      	ldr	r3, [pc, #632]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	f200 8087 	bhi.w	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f0d 	.word	0x08004f0d
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004ff9 	.word	0x08004ff9
 8004f08:	08004f85 	.word	0x08004f85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f0c:	4b93      	ldr	r3, [pc, #588]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f18:	d108      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 f810 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f28:	f000 bd45 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f30:	f000 bd41 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f34:	4b89      	ldr	r3, [pc, #548]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f40:	d108      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f42:	f107 0318 	add.w	r3, r7, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fd54 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f50:	f000 bd31 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f58:	f000 bd2d 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f5c:	4b7f      	ldr	r3, [pc, #508]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f68:	d108      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fe94 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f78:	f000 bd1d 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f80:	f000 bd19 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f84:	4b75      	ldr	r3, [pc, #468]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f8e:	4b73      	ldr	r3, [pc, #460]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fa0:	4b6e      	ldr	r3, [pc, #440]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	08db      	lsrs	r3, r3, #3
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	4a6d      	ldr	r2, [pc, #436]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb2:	e01f      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fb4:	4b69      	ldr	r3, [pc, #420]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc0:	d106      	bne.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc8:	d102      	bne.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004fca:	4b66      	ldr	r3, [pc, #408]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fce:	e011      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fd0:	4b62      	ldr	r3, [pc, #392]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe4:	d102      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004fe6:	4b60      	ldr	r3, [pc, #384]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004ff0:	f000 bce1 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ff4:	f000 bcdf 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ff8:	4b5c      	ldr	r3, [pc, #368]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ffc:	f000 bcdb 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005004:	f000 bcd7 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005010:	430b      	orrs	r3, r1
 8005012:	f040 80ad 	bne.w	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005016:	4b51      	ldr	r3, [pc, #324]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800501e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d056      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502e:	f200 8090 	bhi.w	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	2bc0      	cmp	r3, #192	; 0xc0
 8005036:	f000 8088 	beq.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2bc0      	cmp	r3, #192	; 0xc0
 800503e:	f200 8088 	bhi.w	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d032      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	f200 8081 	bhi.w	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d014      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800505c:	e079      	b.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800505e:	4b3f      	ldr	r3, [pc, #252]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800506a:	d108      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800506c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005070:	4618      	mov	r0, r3
 8005072:	f000 ff67 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800507a:	f000 bc9c 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005082:	f000 bc98 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005086:	4b35      	ldr	r3, [pc, #212]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005092:	d108      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005094:	f107 0318 	add.w	r3, r7, #24
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fcab 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050a2:	f000 bc88 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050aa:	f000 bc84 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d108      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fdeb 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050ca:	f000 bc74 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d2:	f000 bc70 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050d6:	4b21      	ldr	r3, [pc, #132]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050e0:	4b1e      	ldr	r3, [pc, #120]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d10c      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	08db      	lsrs	r3, r3, #3
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005104:	e01f      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	d106      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511a:	d102      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	e011      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005122:	4b0e      	ldr	r3, [pc, #56]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512e:	d106      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005136:	d102      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005142:	f000 bc38 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005146:	f000 bc36 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800514a:	4b08      	ldr	r3, [pc, #32]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800514e:	f000 bc32 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005156:	f000 bc2e 	b.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
 8005160:	03d09000 	.word	0x03d09000
 8005164:	003d0900 	.word	0x003d0900
 8005168:	017d7840 	.word	0x017d7840
 800516c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005174:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005178:	430b      	orrs	r3, r1
 800517a:	f040 809c 	bne.w	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800517e:	4b9e      	ldr	r3, [pc, #632]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005186:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800518e:	d054      	beq.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005196:	f200 808b 	bhi.w	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051a0:	f000 8083 	beq.w	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051aa:	f200 8081 	bhi.w	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b4:	d02f      	beq.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051bc:	d878      	bhi.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ca:	d012      	beq.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80051cc:	e070      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051ce:	4b8a      	ldr	r3, [pc, #552]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051da:	d107      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 feaf 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051ea:	e3e4      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051f0:	e3e1      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051f2:	4b81      	ldr	r3, [pc, #516]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fe:	d107      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005200:	f107 0318 	add.w	r3, r7, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fbf5 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800520e:	e3d2      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005214:	e3cf      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005216:	4b78      	ldr	r3, [pc, #480]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005222:	d107      	bne.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005224:	f107 030c 	add.w	r3, r7, #12
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fd37 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005232:	e3c0      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005238:	e3bd      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800523a:	4b6f      	ldr	r3, [pc, #444]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005242:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005244:	4b6c      	ldr	r3, [pc, #432]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005256:	4b68      	ldr	r3, [pc, #416]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	4a66      	ldr	r2, [pc, #408]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005262:	fa22 f303 	lsr.w	r3, r2, r3
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005268:	e01e      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800526a:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	d106      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800527e:	d102      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005280:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e010      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005286:	4b5c      	ldr	r3, [pc, #368]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005292:	d106      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529a:	d102      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800529c:	4b59      	ldr	r3, [pc, #356]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a0:	e002      	b.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80052a6:	e386      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80052a8:	e385      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80052aa:	4b57      	ldr	r3, [pc, #348]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ae:	e382      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052b4:	e37f      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80052b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80052be:	430b      	orrs	r3, r1
 80052c0:	f040 80a7 	bne.w	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80052c4:	4b4c      	ldr	r3, [pc, #304]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80052cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d4:	d055      	beq.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052dc:	f200 8096 	bhi.w	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052e6:	f000 8084 	beq.w	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052f0:	f200 808c 	bhi.w	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052fa:	d030      	beq.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005302:	f200 8083 	bhi.w	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005312:	d012      	beq.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005314:	e07a      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005316:	4b38      	ldr	r3, [pc, #224]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005322:	d107      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe0b 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005332:	e340      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005338:	e33d      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800533a:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005346:	d107      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005348:	f107 0318 	add.w	r3, r7, #24
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fb51 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005356:	e32e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800535c:	e32b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536a:	d107      	bne.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fc93 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800537a:	e31c      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005380:	e319      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005382:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800538a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b04      	cmp	r3, #4
 8005396:	d10c      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	08db      	lsrs	r3, r3, #3
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80053aa:	fa22 f303 	lsr.w	r3, r2, r3
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	e01e      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053be:	d106      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c6:	d102      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053cc:	e010      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053da:	d106      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e2:	d102      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80053e4:	4b07      	ldr	r3, [pc, #28]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e8:	e002      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80053ee:	e2e2      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80053f0:	e2e1      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f6:	e2de      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80053f8:	58024400 	.word	0x58024400
 80053fc:	03d09000 	.word	0x03d09000
 8005400:	003d0900 	.word	0x003d0900
 8005404:	017d7840 	.word	0x017d7840
 8005408:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005410:	e2d1      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005416:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800541a:	430b      	orrs	r3, r1
 800541c:	f040 809c 	bne.w	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005420:	4b93      	ldr	r3, [pc, #588]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005424:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005430:	d054      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005438:	f200 808b 	bhi.w	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005442:	f000 8083 	beq.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800544c:	f200 8081 	bhi.w	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545e:	d878      	bhi.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d012      	beq.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800546e:	e070      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005470:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547c:	d107      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800547e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fd5e 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800548c:	e293      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005492:	e290      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005494:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a0:	d107      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054a2:	f107 0318 	add.w	r3, r7, #24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 faa4 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054b0:	e281      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b6:	e27e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054b8:	4b6d      	ldr	r3, [pc, #436]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c4:	d107      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054c6:	f107 030c 	add.w	r3, r7, #12
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fbe6 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054d4:	e26f      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054da:	e26c      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054dc:	4b64      	ldr	r3, [pc, #400]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054e6:	4b62      	ldr	r3, [pc, #392]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054f8:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	08db      	lsrs	r3, r3, #3
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	4a5c      	ldr	r2, [pc, #368]	; (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550a:	e01e      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005518:	d106      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005520:	d102      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005522:	4b55      	ldr	r3, [pc, #340]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005526:	e010      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005528:	4b51      	ldr	r3, [pc, #324]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005534:	d106      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553c:	d102      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800553e:	4b4f      	ldr	r3, [pc, #316]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005542:	e002      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005548:	e235      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800554a:	e234      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005550:	e231      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005556:	e22e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800555c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005560:	430b      	orrs	r3, r1
 8005562:	f040 808f 	bne.w	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005566:	4b42      	ldr	r3, [pc, #264]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800556e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005576:	d06b      	beq.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800557e:	d874      	bhi.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005586:	d056      	beq.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800558e:	d86c      	bhi.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005596:	d03b      	beq.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800559e:	d864      	bhi.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a6:	d021      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ae:	d85c      	bhi.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055bc:	d004      	beq.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80055be:	e054      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fe fa20 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 80055c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055c6:	e1f6      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055c8:	4b29      	ldr	r3, [pc, #164]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d4:	d107      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d6:	f107 0318 	add.w	r3, r7, #24
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa0a 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055e4:	e1e7      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ea:	e1e4      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055ec:	4b20      	ldr	r3, [pc, #128]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f8:	d107      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fb4c 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005608:	e1d5      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560e:	e1d2      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d109      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800561c:	4b14      	ldr	r3, [pc, #80]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800562e:	e1c2      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005634:	e1bf      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005642:	d102      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005648:	e1b5      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800564e:	e1b2      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800565c:	d102      	bne.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005662:	e1a8      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005668:	e1a5      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800566e:	e1a2      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005670:	58024400 	.word	0x58024400
 8005674:	03d09000 	.word	0x03d09000
 8005678:	003d0900 	.word	0x003d0900
 800567c:	017d7840 	.word	0x017d7840
 8005680:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005688:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800568c:	430b      	orrs	r3, r1
 800568e:	d173      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005690:	4b9c      	ldr	r3, [pc, #624]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a0:	d02f      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a8:	d863      	bhi.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b6:	d012      	beq.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80056b8:	e05b      	b.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056ba:	4b92      	ldr	r3, [pc, #584]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c6:	d107      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056c8:	f107 0318 	add.w	r3, r7, #24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f991 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056d6:	e16e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056dc:	e16b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056de:	4b89      	ldr	r3, [pc, #548]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ea:	d107      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ec:	f107 030c 	add.w	r3, r7, #12
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fad3 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056fa:	e15c      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005700:	e159      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005702:	4b80      	ldr	r3, [pc, #512]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800570a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800570c:	4b7d      	ldr	r3, [pc, #500]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b04      	cmp	r3, #4
 8005716:	d10c      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800571e:	4b79      	ldr	r3, [pc, #484]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	08db      	lsrs	r3, r3, #3
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	4a77      	ldr	r2, [pc, #476]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800572a:	fa22 f303 	lsr.w	r3, r2, r3
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005730:	e01e      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005732:	4b74      	ldr	r3, [pc, #464]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005746:	d102      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005748:	4b70      	ldr	r3, [pc, #448]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574c:	e010      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800574e:	4b6d      	ldr	r3, [pc, #436]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800575a:	d106      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005762:	d102      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800576e:	e122      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005770:	e121      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005776:	e11e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800577c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005780:	430b      	orrs	r3, r1
 8005782:	d133      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005784:	4b5f      	ldr	r3, [pc, #380]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800578c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579a:	d012      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800579c:	e023      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800579e:	4b59      	ldr	r3, [pc, #356]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057aa:	d107      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fbc7 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ba:	e0fc      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c0:	e0f9      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057c2:	4b50      	ldr	r3, [pc, #320]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ce:	d107      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d0:	f107 0318 	add.w	r3, r7, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f90d 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057de:	e0ea      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e4:	e0e7      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ea:	e0e4      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80057ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80057f4:	430b      	orrs	r3, r1
 80057f6:	f040 808d 	bne.w	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80057fa:	4b42      	ldr	r3, [pc, #264]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005802:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800580a:	d06b      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005812:	d874      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d056      	beq.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005822:	d86c      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800582a:	d03b      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005832:	d864      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583a:	d021      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005842:	d85c      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005850:	d004      	beq.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005852:	e054      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005854:	f000 f8b8 	bl	80059c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005858:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800585a:	e0ac      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800585c:	4b29      	ldr	r3, [pc, #164]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005868:	d107      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800586a:	f107 0318 	add.w	r3, r7, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f8c0 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005878:	e09d      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587e:	e09a      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005880:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800588c:	d107      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800588e:	f107 030c 	add.w	r3, r7, #12
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fa02 	bl	8005c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800589c:	e08b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a2:	e088      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d109      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	08db      	lsrs	r3, r3, #3
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
 80058c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058c2:	e078      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c8:	e075      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d6:	d102      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058dc:	e06b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e2:	e068      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058f0:	d102      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f6:	e05e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058fc:	e05b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005902:	e058      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005904:	58024400 	.word	0x58024400
 8005908:	03d09000 	.word	0x03d09000
 800590c:	003d0900 	.word	0x003d0900
 8005910:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005918:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800591c:	430b      	orrs	r3, r1
 800591e:	d148      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005930:	d02a      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005938:	d838      	bhi.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005946:	d00d      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005948:	e030      	b.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005956:	d102      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595c:	e02b      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005962:	e028      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005970:	d107      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fae4 	bl	8005f44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005980:	e019      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005986:	e016      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005994:	d107      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005996:	f107 0318 	add.w	r3, r7, #24
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f82a 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059a4:	e007      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059aa:	e004      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b0:	e001      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3740      	adds	r7, #64	; 0x40
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	58024400 	.word	0x58024400
 80059c4:	017d7840 	.word	0x017d7840

080059c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059cc:	f7fd ffea 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4904      	ldr	r1, [pc, #16]	; (80059f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	58024400 	.word	0x58024400
 80059f0:	080144c4 	.word	0x080144c4

080059f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059fc:	4ba1      	ldr	r3, [pc, #644]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a06:	4b9f      	ldr	r3, [pc, #636]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	0b1b      	lsrs	r3, r3, #12
 8005a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a12:	4b9c      	ldr	r3, [pc, #624]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a1e:	4b99      	ldr	r3, [pc, #612]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	08db      	lsrs	r3, r3, #3
 8005a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8111 	beq.w	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f000 8083 	beq.w	8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	f200 80a1 	bhi.w	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d056      	beq.n	8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a5e:	e099      	b.n	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a60:	4b88      	ldr	r3, [pc, #544]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02d      	beq.n	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a6c:	4b85      	ldr	r3, [pc, #532]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	08db      	lsrs	r3, r3, #3
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	4a84      	ldr	r2, [pc, #528]	; (8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b7b      	ldr	r3, [pc, #492]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ac6:	e087      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b6a      	ldr	r3, [pc, #424]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b0a:	e065      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b59      	ldr	r3, [pc, #356]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	e043      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b48      	ldr	r3, [pc, #288]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e021      	b.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b37      	ldr	r3, [pc, #220]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	0a5b      	lsrs	r3, r3, #9
 8005bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bfe:	ee17 2a90 	vmov	r2, s15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c06:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	0c1b      	lsrs	r3, r3, #16
 8005c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 2a90 	vmov	r2, s15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5a:	ee17 2a90 	vmov	r2, s15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c62:	e008      	b.n	8005c76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
}
 8005c76:	bf00      	nop
 8005c78:	3724      	adds	r7, #36	; 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	03d09000 	.word	0x03d09000
 8005c8c:	46000000 	.word	0x46000000
 8005c90:	4c742400 	.word	0x4c742400
 8005c94:	4a742400 	.word	0x4a742400
 8005c98:	4bbebc20 	.word	0x4bbebc20

08005c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca4:	4ba1      	ldr	r3, [pc, #644]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005cae:	4b9f      	ldr	r3, [pc, #636]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	0d1b      	lsrs	r3, r3, #20
 8005cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cba:	4b9c      	ldr	r3, [pc, #624]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cc6:	4b99      	ldr	r3, [pc, #612]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	08db      	lsrs	r3, r3, #3
 8005ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8111 	beq.w	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	f000 8083 	beq.w	8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	f200 80a1 	bhi.w	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d056      	beq.n	8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d06:	e099      	b.n	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d08:	4b88      	ldr	r3, [pc, #544]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d02d      	beq.n	8005d70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d14:	4b85      	ldr	r3, [pc, #532]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	08db      	lsrs	r3, r3, #3
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	4a84      	ldr	r2, [pc, #528]	; (8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
 8005d24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b7b      	ldr	r3, [pc, #492]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d6e:	e087      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	4b6a      	ldr	r3, [pc, #424]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005db2:	e065      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc6:	4b59      	ldr	r3, [pc, #356]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df6:	e043      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b48      	ldr	r3, [pc, #288]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e3a:	e021      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e80:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	0a5b      	lsrs	r3, r3, #9
 8005e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea6:	ee17 2a90 	vmov	r2, s15
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005eae:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed4:	ee17 2a90 	vmov	r2, s15
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005edc:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	0e1b      	lsrs	r3, r3, #24
 8005ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f02:	ee17 2a90 	vmov	r2, s15
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f0a:	e008      	b.n	8005f1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
}
 8005f1e:	bf00      	nop
 8005f20:	3724      	adds	r7, #36	; 0x24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	03d09000 	.word	0x03d09000
 8005f34:	46000000 	.word	0x46000000
 8005f38:	4c742400 	.word	0x4c742400
 8005f3c:	4a742400 	.word	0x4a742400
 8005f40:	4bbebc20 	.word	0x4bbebc20

08005f44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b089      	sub	sp, #36	; 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f4c:	4ba0      	ldr	r3, [pc, #640]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005f56:	4b9e      	ldr	r3, [pc, #632]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005f62:	4b9b      	ldr	r3, [pc, #620]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f6c:	4b98      	ldr	r3, [pc, #608]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f70:	08db      	lsrs	r3, r3, #3
 8005f72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8111 	beq.w	80061b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	f000 8083 	beq.w	800609e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	f200 80a1 	bhi.w	80060e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d056      	beq.n	800605a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005fac:	e099      	b.n	80060e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fae:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02d      	beq.n	8006016 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fba:	4b85      	ldr	r3, [pc, #532]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	08db      	lsrs	r3, r3, #3
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	4a83      	ldr	r2, [pc, #524]	; (80061d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe4:	4b7a      	ldr	r3, [pc, #488]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006010:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006014:	e087      	b.n	8006126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006020:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80061dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006028:	4b69      	ldr	r3, [pc, #420]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006038:	ed97 6a03 	vldr	s12, [r7, #12]
 800603c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006058:	e065      	b.n	8006126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006064:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606c:	4b58      	ldr	r3, [pc, #352]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006080:	eddf 5a55 	vldr	s11, [pc, #340]	; 80061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609c:	e043      	b.n	8006126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80061e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80060ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b0:	4b47      	ldr	r3, [pc, #284]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e0:	e021      	b.n	8006126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80061dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80060f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f4:	4b36      	ldr	r3, [pc, #216]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006104:	ed97 6a03 	vldr	s12, [r7, #12]
 8006108:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800610c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006124:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006126:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	0a5b      	lsrs	r3, r3, #9
 800612c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006140:	edd7 6a07 	vldr	s13, [r7, #28]
 8006144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614c:	ee17 2a90 	vmov	r2, s15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006154:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617a:	ee17 2a90 	vmov	r2, s15
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006182:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	0e1b      	lsrs	r3, r3, #24
 8006188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619c:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a8:	ee17 2a90 	vmov	r2, s15
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80061b0:	e008      	b.n	80061c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	609a      	str	r2, [r3, #8]
}
 80061c4:	bf00      	nop
 80061c6:	3724      	adds	r7, #36	; 0x24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	58024400 	.word	0x58024400
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	46000000 	.word	0x46000000
 80061dc:	4c742400 	.word	0x4c742400
 80061e0:	4a742400 	.word	0x4a742400
 80061e4:	4bbebc20 	.word	0x4bbebc20

080061e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061f6:	4b53      	ldr	r3, [pc, #332]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d101      	bne.n	8006206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e099      	b.n	800633a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006206:	4b4f      	ldr	r3, [pc, #316]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a4e      	ldr	r2, [pc, #312]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 800620c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006212:	f7fb fc17 	bl	8001a44 <HAL_GetTick>
 8006216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006218:	e008      	b.n	800622c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800621a:	f7fb fc13 	bl	8001a44 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e086      	b.n	800633a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800622c:	4b45      	ldr	r3, [pc, #276]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f0      	bne.n	800621a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006238:	4b42      	ldr	r3, [pc, #264]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	493f      	ldr	r1, [pc, #252]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	628b      	str	r3, [r1, #40]	; 0x28
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	3b01      	subs	r3, #1
 8006252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	3b01      	subs	r3, #1
 800625c:	025b      	lsls	r3, r3, #9
 800625e:	b29b      	uxth	r3, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	3b01      	subs	r3, #1
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	3b01      	subs	r3, #1
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800627c:	4931      	ldr	r1, [pc, #196]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006282:	4b30      	ldr	r3, [pc, #192]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	492d      	ldr	r1, [pc, #180]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006290:	4313      	orrs	r3, r2
 8006292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006294:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	f023 0220 	bic.w	r2, r3, #32
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	4928      	ldr	r1, [pc, #160]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	4a26      	ldr	r2, [pc, #152]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	f023 0310 	bic.w	r3, r3, #16
 80062b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b6:	4b24      	ldr	r3, [pc, #144]	; (8006348 <RCCEx_PLL2_Config+0x160>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	69d2      	ldr	r2, [r2, #28]
 80062be:	00d2      	lsls	r2, r2, #3
 80062c0:	4920      	ldr	r1, [pc, #128]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062c6:	4b1f      	ldr	r3, [pc, #124]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	f043 0310 	orr.w	r3, r3, #16
 80062d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062d8:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062e4:	e00f      	b.n	8006306 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d106      	bne.n	80062fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062ec:	4b15      	ldr	r3, [pc, #84]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	4a14      	ldr	r2, [pc, #80]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062f8:	e005      	b.n	8006306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	4a11      	ldr	r2, [pc, #68]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 800630c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006312:	f7fb fb97 	bl	8001a44 <HAL_GetTick>
 8006316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006318:	e008      	b.n	800632c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800631a:	f7fb fb93 	bl	8001a44 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e006      	b.n	800633a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <RCCEx_PLL2_Config+0x15c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	58024400 	.word	0x58024400
 8006348:	ffff0007 	.word	0xffff0007

0800634c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800635a:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b03      	cmp	r3, #3
 8006364:	d101      	bne.n	800636a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e099      	b.n	800649e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800636a:	4b4f      	ldr	r3, [pc, #316]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a4e      	ldr	r2, [pc, #312]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006376:	f7fb fb65 	bl	8001a44 <HAL_GetTick>
 800637a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800637c:	e008      	b.n	8006390 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800637e:	f7fb fb61 	bl	8001a44 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e086      	b.n	800649e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006390:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f0      	bne.n	800637e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800639c:	4b42      	ldr	r3, [pc, #264]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	051b      	lsls	r3, r3, #20
 80063aa:	493f      	ldr	r1, [pc, #252]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	628b      	str	r3, [r1, #40]	; 0x28
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	3b01      	subs	r3, #1
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	3b01      	subs	r3, #1
 80063da:	061b      	lsls	r3, r3, #24
 80063dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063e0:	4931      	ldr	r1, [pc, #196]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063e6:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	492d      	ldr	r1, [pc, #180]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	4928      	ldr	r1, [pc, #160]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800640a:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006416:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <RCCEx_PLL3_Config+0x160>)
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	69d2      	ldr	r2, [r2, #28]
 8006422:	00d2      	lsls	r2, r2, #3
 8006424:	4920      	ldr	r1, [pc, #128]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800642a:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800643c:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006448:	e00f      	b.n	800646a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d106      	bne.n	800645e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006450:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800645c:	e005      	b.n	800646a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006468:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006476:	f7fb fae5 	bl	8001a44 <HAL_GetTick>
 800647a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800647c:	e008      	b.n	8006490 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800647e:	f7fb fae1 	bl	8001a44 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f0      	beq.n	800647e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	58024400 	.word	0x58024400
 80064ac:	ffff0007 	.word	0xffff0007

080064b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e07c      	b.n	80065bc <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10c      	bne.n	80064e8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb f806 	bl	80014f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2204      	movs	r2, #4
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f867 	bl	80065c4 <HAL_SD_InitCard>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e05d      	b.n	80065bc <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fdee 	bl	80070e8 <HAL_SD_GetCardStatus>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e052      	b.n	80065bc <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006516:	7e3b      	ldrb	r3, [r7, #24]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800651c:	7e7b      	ldrb	r3, [r7, #25]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	2b01      	cmp	r3, #1
 8006528:	d10a      	bne.n	8006540 <HAL_SD_Init+0x90>
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <HAL_SD_Init+0x86>
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653c:	65da      	str	r2, [r3, #92]	; 0x5c
 800653e:	e00b      	b.n	8006558 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d104      	bne.n	8006552 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800654e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006550:	e002      	b.n	8006558 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fe80 	bl	8007264 <HAL_SD_ConfigWideBusOperation>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e026      	b.n	80065bc <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800656e:	f7fb fa69 	bl	8001a44 <HAL_GetTick>
 8006572:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006574:	e011      	b.n	800659a <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006576:	f7fb fa65 	bl	8001a44 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d109      	bne.n	800659a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e010      	b.n	80065bc <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 ff78 	bl	8007490 <HAL_SD_GetCardState>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d1e7      	bne.n	8006576 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3728      	adds	r7, #40	; 0x28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065c4:	b5b0      	push	{r4, r5, r7, lr}
 80065c6:	b08e      	sub	sp, #56	; 0x38
 80065c8:	af04      	add	r7, sp, #16
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80065dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80065e0:	f04f 0100 	mov.w	r1, #0
 80065e4:	f7fe fc70 	bl	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 80065e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e07f      	b.n	8006704 <HAL_SD_InitCard+0x140>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	4a40      	ldr	r2, [pc, #256]	; (800670c <HAL_SD_InitCard+0x148>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	091b      	lsrs	r3, r3, #4
 8006610:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d107      	bne.n	8006630 <HAL_SD_InitCard+0x6c>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0210 	orr.w	r2, r2, #16
 800662e:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681d      	ldr	r5, [r3, #0]
 8006634:	466c      	mov	r4, sp
 8006636:	f107 0314 	add.w	r3, r7, #20
 800663a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800663e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006642:	f107 0308 	add.w	r3, r7, #8
 8006646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006648:	4628      	mov	r0, r5
 800664a:	f001 fe9f 	bl	800838c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fee2 	bl	800841c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_SD_InitCard+0xa6>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006664:	fbb2 f3f3 	udiv	r3, r2, r3
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_SD_InitCard+0xbc>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006670:	4a27      	ldr	r2, [pc, #156]	; (8006710 <HAL_SD_InitCard+0x14c>)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	3301      	adds	r3, #1
 800667a:	4618      	mov	r0, r3
 800667c:	f7fb f9ee 	bl	8001a5c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fff3 	bl	800766c <SD_PowerON>
 8006686:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_SD_InitCard+0xe2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e02e      	b.n	8006704 <HAL_SD_InitCard+0x140>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 ff12 	bl	80074d0 <SD_InitCard>
 80066ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_SD_InitCard+0x108>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e01b      	b.n	8006704 <HAL_SD_InitCard+0x140>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 ff47 	bl	8008568 <SDMMC_CmdBlockLength>
 80066da:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00f      	beq.n	8006702 <HAL_SD_InitCard+0x13e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a0b      	ldr	r2, [pc, #44]	; (8006714 <HAL_SD_InitCard+0x150>)
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <HAL_SD_InitCard+0x140>
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3728      	adds	r7, #40	; 0x28
 8006708:	46bd      	mov	sp, r7
 800670a:	bdb0      	pop	{r4, r5, r7, pc}
 800670c:	014f8b59 	.word	0x014f8b59
 8006710:	00012110 	.word	0x00012110
 8006714:	1fe00fff 	.word	0x1fe00fff

08006718 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e018      	b.n	800675c <HAL_SD_DeInit+0x44>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2203      	movs	r2, #3
 800672e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_SD_TRANSCEIVER != 0U)
  /* Deactivate the 1.8V Mode */
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d102      	bne.n	8006740 <HAL_SD_DeInit+0x28>
    {
      hsd->DriveTransceiver_1_8V_Callback = HAL_SD_DriveTransceiver_1_8V_Callback;
    }
    hsd->DriveTransceiver_1_8V_Callback(RESET);
#else
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 800673a:	2000      	movs	r0, #0
 800673c:	f000 fb24 	bl	8006d88 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f825 	bl	8007790 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fa ffa8 	bl	800169c <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	; 0x30
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e08d      	b.n	80068a8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	f040 8086 	bne.w	80068a6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d907      	bls.n	80067be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e074      	b.n	80068a8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2203      	movs	r2, #3
 80067c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	025a      	lsls	r2, r3, #9
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d002      	beq.n	80067ea <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	025b      	lsls	r3, r3, #9
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067ea:	f04f 33ff 	mov.w	r3, #4294967295
 80067ee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	025b      	lsls	r3, r3, #9
 80067f4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067f6:	2390      	movs	r3, #144	; 0x90
 80067f8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067fa:	2302      	movs	r3, #2
 80067fc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067fe:	2300      	movs	r3, #0
 8006800:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f107 0210 	add.w	r2, r7, #16
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f001 fe7d 	bl	8008510 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006824:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2201      	movs	r2, #1
 8006834:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d90a      	bls.n	8006852 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2282      	movs	r2, #130	; 0x82
 8006840:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fed3 	bl	80085f4 <SDMMC_CmdReadMultiBlock>
 800684e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006850:	e009      	b.n	8006866 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2281      	movs	r2, #129	; 0x81
 8006856:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800685e:	4618      	mov	r0, r3
 8006860:	f001 fea5 	bl	80085ae <SDMMC_CmdReadSingleBlock>
 8006864:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687a:	431a      	orrs	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e00a      	b.n	80068a8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3730      	adds	r7, #48	; 0x30
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	1fe00fff 	.word	0x1fe00fff

080068b4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d107      	bne.n	80068dc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e08d      	b.n	80069f8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	f040 8086 	bne.w	80069f6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	441a      	add	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d907      	bls.n	800690e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e074      	b.n	80069f8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2203      	movs	r2, #3
 8006912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	025a      	lsls	r2, r3, #9
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d002      	beq.n	800693a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	025b      	lsls	r3, r3, #9
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	025b      	lsls	r3, r3, #9
 8006944:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006946:	2390      	movs	r3, #144	; 0x90
 8006948:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f107 0210 	add.w	r2, r7, #16
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fdd5 	bl	8008510 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006974:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2201      	movs	r2, #1
 8006984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d90a      	bls.n	80069a2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	22a0      	movs	r2, #160	; 0xa0
 8006990:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006998:	4618      	mov	r0, r3
 800699a:	f001 fe71 	bl	8008680 <SDMMC_CmdWriteMultiBlock>
 800699e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80069a0:	e009      	b.n	80069b6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2290      	movs	r2, #144	; 0x90
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 fe43 	bl	800863a <SDMMC_CmdWriteSingleBlock>
 80069b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d012      	beq.n	80069e2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	431a      	orrs	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e00a      	b.n	80069f8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80069f0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3730      	adds	r7, #48	; 0x30
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	1fe00fff 	.word	0x1fe00fff

08006a04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_SD_IRQHandler+0x2e>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 f91c 	bl	8007c68 <SD_Read_IT>
 8006a30:	e19a      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80ac 	beq.w	8006b9a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <HAL_SD_IRQHandler+0x1b8>)
 8006a58:	400b      	ands	r3, r1
 8006a5a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d038      	beq.n	8006af8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <HAL_SD_IRQHandler+0x96>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d011      	beq.n	8006abe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 fe12 	bl	80086c8 <SDMMC_CmdStopTransfer>
 8006aa4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f95b 	bl	8006d74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a3f      	ldr	r2, [pc, #252]	; (8006bc0 <HAL_SD_IRQHandler+0x1bc>)
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <HAL_SD_IRQHandler+0xe4>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f002 fbd3 	bl	8009294 <HAL_SD_RxCpltCallback>
 8006aee:	e13b      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f002 fbc1 	bl	8009278 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006af6:	e137      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8132 	beq.w	8006d68 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_SD_IRQHandler+0x12c>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d011      	beq.n	8006b54 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 fdc7 	bl	80086c8 <SDMMC_CmdStopTransfer>
 8006b3a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f910 	bl	8006d74 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <HAL_SD_IRQHandler+0x172>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f002 fb7e 	bl	8009278 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d105      	bne.n	8006b92 <HAL_SD_IRQHandler+0x18e>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80eb 	beq.w	8006d68 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fb7e 	bl	8009294 <HAL_SD_RxCpltCallback>
}
 8006b98:	e0e6      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00d      	beq.n	8006bc4 <HAL_SD_IRQHandler+0x1c0>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f89e 	bl	8007cf4 <SD_Write_IT>
 8006bb8:	e0d6      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
 8006bba:	bf00      	nop
 8006bbc:	ffff3ec5 	.word	0xffff3ec5
 8006bc0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 809d 	beq.w	8006d0e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f043 0202 	orr.w	r2, r3, #2
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	f043 0208 	orr.w	r2, r3, #8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	f043 0210 	orr.w	r2, r3, #16
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a4b      	ldr	r2, [pc, #300]	; (8006d70 <HAL_SD_IRQHandler+0x36c>)
 8006c42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c52:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c62:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c82:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 fd1d 	bl	80086c8 <SDMMC_CmdStopTransfer>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ca8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f851 	bl	8006d74 <HAL_SD_ErrorCallback>
}
 8006cd2:	e049      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d044      	beq.n	8006d68 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d040      	beq.n	8006d68 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cf4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f834 	bl	8006d74 <HAL_SD_ErrorCallback>
}
 8006d0c:	e02c      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d025      	beq.n	8006d68 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 f840 	bl	8007dc4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006d44:	e010      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f828 	bl	8007d9c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006d4c:	e00c      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 f829 	bl	8007db0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006d5e:	e003      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f811 	bl	8007d88 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006d66:	e7ff      	b.n	8006d68 <HAL_SD_IRQHandler+0x364>
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	18000f3a 	.word	0x18000f3a

08006d74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dae:	0f9b      	lsrs	r3, r3, #30
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dba:	0e9b      	lsrs	r3, r3, #26
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dcc:	0e1b      	lsrs	r3, r3, #24
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dde:	0c1b      	lsrs	r3, r3, #16
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	0d1b      	lsrs	r3, r3, #20
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e1e:	0bdb      	lsrs	r3, r3, #15
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	0b9b      	lsrs	r3, r3, #14
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e42:	0b5b      	lsrs	r3, r3, #13
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e54:	0b1b      	lsrs	r3, r3, #12
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2200      	movs	r2, #0
 8006e66:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d163      	bne.n	8006f38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e74:	009a      	lsls	r2, r3, #2
 8006e76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e80:	0f92      	lsrs	r2, r2, #30
 8006e82:	431a      	orrs	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8c:	0edb      	lsrs	r3, r3, #27
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9e:	0e1b      	lsrs	r3, r3, #24
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb0:	0d5b      	lsrs	r3, r3, #21
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ec2:	0c9b      	lsrs	r3, r3, #18
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ed4:	0bdb      	lsrs	r3, r3, #15
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	7e1b      	ldrb	r3, [r3, #24]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	2201      	movs	r2, #1
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006f02:	fb03 f202 	mul.w	r2, r3, r2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	7a1b      	ldrb	r3, [r3, #8]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	2201      	movs	r2, #1
 8006f16:	409a      	lsls	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f24:	0a52      	lsrs	r2, r2, #9
 8006f26:	fb03 f202 	mul.w	r2, r3, r2
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f34:	659a      	str	r2, [r3, #88]	; 0x58
 8006f36:	e031      	b.n	8006f9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d11d      	bne.n	8006f7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f44:	041b      	lsls	r3, r3, #16
 8006f46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f4e:	0c1b      	lsrs	r3, r3, #16
 8006f50:	431a      	orrs	r2, r3
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	029a      	lsls	r2, r3, #10
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f70:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	659a      	str	r2, [r3, #88]	; 0x58
 8006f7a:	e00f      	b.n	8006f9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a58      	ldr	r2, [pc, #352]	; (80070e4 <HAL_SD_GetCardCSD+0x344>)
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e09d      	b.n	80070d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa0:	0b9b      	lsrs	r3, r3, #14
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fb2:	09db      	lsrs	r3, r3, #7
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd4:	0fdb      	lsrs	r3, r3, #31
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe0:	0f5b      	lsrs	r3, r3, #29
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff2:	0e9b      	lsrs	r3, r3, #26
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007004:	0d9b      	lsrs	r3, r3, #22
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	0d5b      	lsrs	r3, r3, #21
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	b2da      	uxtb	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	b2da      	uxtb	r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007046:	0bdb      	lsrs	r3, r3, #15
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705a:	0b9b      	lsrs	r3, r3, #14
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706e:	0b5b      	lsrs	r3, r3, #13
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	0b1b      	lsrs	r3, r3, #12
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007096:	0a9b      	lsrs	r3, r3, #10
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	1fe00fff 	.word	0x1fe00fff

080070e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b094      	sub	sp, #80	; 0x50
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b03      	cmp	r3, #3
 8007102:	d101      	bne.n	8007108 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e0a7      	b.n	8007258 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fb4c 	bl	80077ac <SD_SendSDStatus>
 8007114:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a4f      	ldr	r2, [pc, #316]	; (8007260 <HAL_SD_GetCardStatus+0x178>)
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800713e:	e070      	b.n	8007222 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	099b      	lsrs	r3, r3, #6
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800716a:	b29a      	uxth	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	0e1b      	lsrs	r3, r3, #24
 8007170:	b29b      	uxth	r3, r3
 8007172:	4313      	orrs	r3, r2
 8007174:	b29a      	uxth	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	061a      	lsls	r2, r3, #24
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007186:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007190:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	0d1b      	lsrs	r3, r3, #20
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	0c1b      	lsrs	r3, r3, #16
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	0a9b      	lsrs	r3, r3, #10
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 030f 	and.w	r3, r3, #15
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	b2da      	uxtb	r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	0e1b      	lsrs	r3, r3, #24
 800721c:	b2da      	uxtb	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800722a:	4618      	mov	r0, r3
 800722c:	f001 f99c 	bl	8008568 <SDMMC_CmdBlockLength>
 8007230:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00d      	beq.n	8007254 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <HAL_SD_GetCardStatus+0x178>)
 800723e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007254:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007258:	4618      	mov	r0, r3
 800725a:	3750      	adds	r7, #80	; 0x50
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	1fe00fff 	.word	0x1fe00fff

08007264 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007264:	b5b0      	push	{r4, r5, r7, lr}
 8007266:	b090      	sub	sp, #64	; 0x40
 8007268:	af04      	add	r7, sp, #16
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2203      	movs	r2, #3
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	2b03      	cmp	r3, #3
 8007282:	d02e      	beq.n	80072e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728a:	d106      	bne.n	800729a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	; 0x38
 8007298:	e029      	b.n	80072ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a0:	d10a      	bne.n	80072b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fb7a 	bl	800799c <SD_WideBus_Enable>
 80072a8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	639a      	str	r2, [r3, #56]	; 0x38
 80072b6:	e01a      	b.n	80072ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fbb7 	bl	8007a32 <SD_WideBus_Disable>
 80072c4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	431a      	orrs	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
 80072d2:	e00c      	b.n	80072ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
 80072e0:	e005      	b.n	80072ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a61      	ldr	r2, [pc, #388]	; (8007480 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007304:	e099      	b.n	800743a <HAL_SD_ConfigWideBusOperation+0x1d6>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007306:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800730a:	f04f 0100 	mov.w	r1, #0
 800730e:	f7fd fddb 	bl	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007312:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8086 	beq.w	8007428 <HAL_SD_ConfigWideBusOperation+0x1c4>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	4952      	ldr	r1, [pc, #328]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x220>)
 800733a:	fba1 1303 	umull	r1, r3, r1, r3
 800733e:	0e1b      	lsrs	r3, r3, #24
 8007340:	429a      	cmp	r2, r3
 8007342:	d303      	bcc.n	800734c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	e05a      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007354:	d103      	bne.n	800735e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	e051      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007366:	d126      	bne.n	80073b6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10e      	bne.n	800738e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	4a45      	ldr	r2, [pc, #276]	; (8007488 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d906      	bls.n	8007386 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	4a42      	ldr	r2, [pc, #264]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x220>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	0e5b      	lsrs	r3, r3, #25
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e03d      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e039      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <HAL_SD_ConfigWideBusOperation+0x224>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d906      	bls.n	80073ae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	4a38      	ldr	r2, [pc, #224]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x220>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	0e5b      	lsrs	r3, r3, #25
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e029      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e025      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10e      	bne.n	80073dc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	4a32      	ldr	r2, [pc, #200]	; (800748c <HAL_SD_ConfigWideBusOperation+0x228>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d906      	bls.n	80073d4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	4a2e      	ldr	r2, [pc, #184]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x220>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	0e1b      	lsrs	r3, r3, #24
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	e016      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	e012      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	4a28      	ldr	r2, [pc, #160]	; (800748c <HAL_SD_ConfigWideBusOperation+0x228>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d906      	bls.n	80073fc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	4a24      	ldr	r2, [pc, #144]	; (8007484 <HAL_SD_ConfigWideBusOperation+0x220>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	0e1b      	lsrs	r3, r3, #24
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e002      	b.n	8007402 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681d      	ldr	r5, [r3, #0]
 800740c:	466c      	mov	r4, sp
 800740e:	f107 0318 	add.w	r3, r7, #24
 8007412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800741a:	f107 030c 	add.w	r3, r7, #12
 800741e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007420:	4628      	mov	r0, r5
 8007422:	f000 ffb3 	bl	800838c <SDMMC_Init>
 8007426:	e008      	b.n	800743a <HAL_SD_ConfigWideBusOperation+0x1d6>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f890 	bl	8008568 <SDMMC_CmdBlockLength>
 8007448:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <HAL_SD_ConfigWideBusOperation+0x206>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bdb0      	pop	{r4, r5, r7, pc}
 800747e:	bf00      	nop
 8007480:	1fe00fff 	.word	0x1fe00fff
 8007484:	55e63b89 	.word	0x55e63b89
 8007488:	02faf080 	.word	0x02faf080
 800748c:	017d7840 	.word	0x017d7840

08007490 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa52 	bl	800794c <SD_SendStatus>
 80074a8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	0a5b      	lsrs	r3, r3, #9
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80074c6:	693b      	ldr	r3, [r7, #16]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b090      	sub	sp, #64	; 0x40
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80074dc:	f7fa fab2 	bl	8001a44 <HAL_GetTick>
 80074e0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 ffba 	bl	8008460 <SDMMC_GetPowerState>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074f6:	e0b5      	b.n	8007664 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d02e      	beq.n	800755e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f001 fa04 	bl	8008912 <SDMMC_CmdSendCID>
 800750a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <SD_InitCard+0x46>
    {
      return errorstate;
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	e0a6      	b.n	8007664 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f000 ffe4 	bl	80084ea <SDMMC_GetResponse>
 8007522:	4602      	mov	r2, r0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2104      	movs	r1, #4
 800752e:	4618      	mov	r0, r3
 8007530:	f000 ffdb 	bl	80084ea <SDMMC_GetResponse>
 8007534:	4602      	mov	r2, r0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2108      	movs	r1, #8
 8007540:	4618      	mov	r0, r3
 8007542:	f000 ffd2 	bl	80084ea <SDMMC_GetResponse>
 8007546:	4602      	mov	r2, r0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	210c      	movs	r1, #12
 8007552:	4618      	mov	r0, r3
 8007554:	f000 ffc9 	bl	80084ea <SDMMC_GetResponse>
 8007558:	4602      	mov	r2, r0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	2b03      	cmp	r3, #3
 8007564:	d01d      	beq.n	80075a2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007566:	e019      	b.n	800759c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f107 020a 	add.w	r2, r7, #10
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fa0c 	bl	8008990 <SDMMC_CmdSetRelAdd>
 8007578:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	e06f      	b.n	8007664 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007584:	f7fa fa5e 	bl	8001a44 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	f241 3287 	movw	r2, #4999	; 0x1387
 8007592:	4293      	cmp	r3, r2
 8007594:	d902      	bls.n	800759c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007596:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800759a:	e063      	b.n	8007664 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800759c:	897b      	ldrh	r3, [r7, #10]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0e2      	beq.n	8007568 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d036      	beq.n	8007618 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075aa:	897b      	ldrh	r3, [r7, #10]
 80075ac:	461a      	mov	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f001 f9c6 	bl	8008950 <SDMMC_CmdSendCSD>
 80075c4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <SD_InitCard+0x100>
    {
      return errorstate;
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	e049      	b.n	8007664 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 ff87 	bl	80084ea <SDMMC_GetResponse>
 80075dc:	4602      	mov	r2, r0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2104      	movs	r1, #4
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 ff7e 	bl	80084ea <SDMMC_GetResponse>
 80075ee:	4602      	mov	r2, r0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2108      	movs	r1, #8
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ff75 	bl	80084ea <SDMMC_GetResponse>
 8007600:	4602      	mov	r2, r0
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	210c      	movs	r1, #12
 800760c:	4618      	mov	r0, r3
 800760e:	f000 ff6c 	bl	80084ea <SDMMC_GetResponse>
 8007612:	4602      	mov	r2, r0
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2104      	movs	r1, #4
 800761e:	4618      	mov	r0, r3
 8007620:	f000 ff63 	bl	80084ea <SDMMC_GetResponse>
 8007624:	4603      	mov	r3, r0
 8007626:	0d1a      	lsrs	r2, r3, #20
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fbb4 	bl	8006da0 <HAL_SD_GetCardCSD>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800763e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007642:	e00f      	b.n	8007664 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f001 f875 	bl	8008740 <SDMMC_CmdSelDesel>
 8007656:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <SD_InitCard+0x192>
  {
    return errorstate;
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	e000      	b.n	8007664 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3740      	adds	r7, #64	; 0x40
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007680:	f7fa f9e0 	bl	8001a44 <HAL_GetTick>
 8007684:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f001 f87b 	bl	8008786 <SDMMC_CmdGoIdleState>
 8007690:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <SD_PowerON+0x30>
  {
    return errorstate;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	e072      	b.n	8007782 <SD_PowerON+0x116>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 f88e 	bl	80087c2 <SDMMC_CmdOperCond>
 80076a6:	6138      	str	r0, [r7, #16]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076ae:	d10d      	bne.n	80076cc <SD_PowerON+0x60>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 f863 	bl	8008786 <SDMMC_CmdGoIdleState>
 80076c0:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <SD_PowerON+0x66>
    {
      return errorstate;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	e05a      	b.n	8007782 <SD_PowerON+0x116>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d137      	bne.n	800774a <SD_PowerON+0xde>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2100      	movs	r1, #0
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 f88e 	bl	8008802 <SDMMC_CmdAppCommand>
 80076e6:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d02d      	beq.n	800774a <SD_PowerON+0xde>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076f2:	e046      	b.n	8007782 <SD_PowerON+0x116>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 f881 	bl	8008802 <SDMMC_CmdAppCommand>
 8007700:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <SD_PowerON+0xa0>
    {
      return errorstate;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	e03a      	b.n	8007782 <SD_PowerON+0x116>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	491e      	ldr	r1, [pc, #120]	; (800778c <SD_PowerON+0x120>)
 8007712:	4618      	mov	r0, r3
 8007714:	f001 f898 	bl	8008848 <SDMMC_CmdAppOperCommand>
 8007718:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <SD_PowerON+0xba>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007724:	e02d      	b.n	8007782 <SD_PowerON+0x116>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fedc 	bl	80084ea <SDMMC_GetResponse>
 8007732:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	0fdb      	lsrs	r3, r3, #31
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <SD_PowerON+0xd4>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <SD_PowerON+0xd6>
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]

    count++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007750:	4293      	cmp	r3, r2
 8007752:	d802      	bhi.n	800775a <SD_PowerON+0xee>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0cc      	beq.n	80076f4 <SD_PowerON+0x88>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007760:	4293      	cmp	r3, r2
 8007762:	d902      	bls.n	800776a <SD_PowerON+0xfe>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007768:	e00b      	b.n	8007782 <SD_PowerON+0x116>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <SD_PowerON+0x114>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	c1100000 	.word	0xc1100000

08007790 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe4e 	bl	800843e <SDMMC_PowerState_OFF>
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08c      	sub	sp, #48	; 0x30
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077b6:	f7fa f945 	bl	8001a44 <HAL_GetTick>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fe8f 	bl	80084ea <SDMMC_GetResponse>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d6:	d102      	bne.n	80077de <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077dc:	e0b0      	b.n	8007940 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2140      	movs	r1, #64	; 0x40
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 febf 	bl	8008568 <SDMMC_CmdBlockLength>
 80077ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	e0a0      	b.n	8007940 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f000 fff9 	bl	8008802 <SDMMC_CmdAppCommand>
 8007810:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	e08d      	b.n	8007940 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007824:	f04f 33ff 	mov.w	r3, #4294967295
 8007828:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800782e:	2360      	movs	r3, #96	; 0x60
 8007830:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007832:	2302      	movs	r3, #2
 8007834:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007836:	2300      	movs	r3, #0
 8007838:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800783a:	2301      	movs	r3, #1
 800783c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f107 0208 	add.w	r2, r7, #8
 8007846:	4611      	mov	r1, r2
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fe61 	bl	8008510 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f001 f8e1 	bl	8008a1a <SDMMC_CmdStatusRegister>
 8007858:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d02b      	beq.n	80078b8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	e069      	b.n	8007940 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800787a:	2300      	movs	r3, #0
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787e:	e00d      	b.n	800789c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fdab 	bl	80083e0 <SDMMC_ReadFIFO>
 800788a:	4602      	mov	r2, r0
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	601a      	str	r2, [r3, #0]
        pData++;
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	3304      	adds	r3, #4
 8007894:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	3301      	adds	r3, #1
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	2b07      	cmp	r3, #7
 80078a0:	d9ee      	bls.n	8007880 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078a2:	f7fa f8cf 	bl	8001a44 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d102      	bne.n	80078b8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80078b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078b6:	e043      	b.n	8007940 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0d2      	beq.n	800786c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80078d4:	2308      	movs	r3, #8
 80078d6:	e033      	b.n	8007940 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	e02a      	b.n	8007940 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d017      	beq.n	8007928 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80078f8:	2320      	movs	r3, #32
 80078fa:	e021      	b.n	8007940 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fd6d 	bl	80083e0 <SDMMC_ReadFIFO>
 8007906:	4602      	mov	r2, r0
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	601a      	str	r2, [r3, #0]
    pData++;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	3304      	adds	r3, #4
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007912:	f7fa f897 	bl	8001a44 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d102      	bne.n	8007928 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007926:	e00b      	b.n	8007940 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e2      	bne.n	80078fc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a03      	ldr	r2, [pc, #12]	; (8007948 <SD_SendSDStatus+0x19c>)
 800793c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3730      	adds	r7, #48	; 0x30
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	18000f3a 	.word	0x18000f3a

0800794c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800795c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007960:	e018      	b.n	8007994 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f001 f830 	bl	80089d4 <SDMMC_CmdSendStatus>
 8007974:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <SD_SendStatus+0x34>
  {
    return errorstate;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	e009      	b.n	8007994 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fdaf 	bl	80084ea <SDMMC_GetResponse>
 800798c:	4602      	mov	r2, r0
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fd99 	bl	80084ea <SDMMC_GetResponse>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079c2:	d102      	bne.n	80079ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079c8:	e02f      	b.n	8007a2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079ca:	f107 030c 	add.w	r3, r7, #12
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f879 	bl	8007ac8 <SD_FindSCR>
 80079d6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	e023      	b.n	8007a2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01c      	beq.n	8007a26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f000 ff02 	bl	8008802 <SDMMC_CmdAppCommand>
 80079fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	e00f      	b.n	8007a2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2102      	movs	r1, #2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 ff39 	bl	8008888 <SDMMC_CmdBusWidth>
 8007a16:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	e003      	b.n	8007a2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e001      	b.n	8007a2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fd4e 	bl	80084ea <SDMMC_GetResponse>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a58:	d102      	bne.n	8007a60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a5e:	e02f      	b.n	8007ac0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a60:	f107 030c 	add.w	r3, r7, #12
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f82e 	bl	8007ac8 <SD_FindSCR>
 8007a6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	e023      	b.n	8007ac0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01c      	beq.n	8007abc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f000 feb7 	bl	8008802 <SDMMC_CmdAppCommand>
 8007a94:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	e00f      	b.n	8007ac0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 feee 	bl	8008888 <SDMMC_CmdBusWidth>
 8007aac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	e003      	b.n	8007ac0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e001      	b.n	8007ac0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007abc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08e      	sub	sp, #56	; 0x38
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ad2:	f7f9 ffb7 	bl	8001a44 <HAL_GetTick>
 8007ad6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007adc:	2300      	movs	r3, #0
 8007ade:	60bb      	str	r3, [r7, #8]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2108      	movs	r1, #8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fd3a 	bl	8008568 <SDMMC_CmdBlockLength>
 8007af4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	e0ad      	b.n	8007c5c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f000 fe78 	bl	8008802 <SDMMC_CmdAppCommand>
 8007b12:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	e09e      	b.n	8007c5c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007b24:	2308      	movs	r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007b28:	2330      	movs	r3, #48	; 0x30
 8007b2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f107 0210 	add.w	r2, r7, #16
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fce4 	bl	8008510 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 febe 	bl	80088ce <SDMMC_CmdSendSCR>
 8007b52:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d027      	beq.n	8007baa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	e07e      	b.n	8007c5c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d113      	bne.n	8007b94 <SD_FindSCR+0xcc>
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d110      	bne.n	8007b94 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fc32 	bl	80083e0 <SDMMC_ReadFIFO>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fc2b 	bl	80083e0 <SDMMC_ReadFIFO>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	60fb      	str	r3, [r7, #12]
      index++;
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b90:	3301      	adds	r3, #1
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b94:	f7f9 ff56 	bl	8001a44 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d102      	bne.n	8007baa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ba8:	e058      	b.n	8007c5c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bb0:	f240 532a 	movw	r3, #1322	; 0x52a
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0d1      	beq.n	8007b5e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2208      	movs	r2, #8
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	e043      	b.n	8007c5c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2202      	movs	r2, #2
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	e036      	b.n	8007c5c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2220      	movs	r2, #32
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c04:	2320      	movs	r3, #32
 8007c06:	e029      	b.n	8007c5c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a15      	ldr	r2, [pc, #84]	; (8007c64 <SD_FindSCR+0x19c>)
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	061a      	lsls	r2, r3, #24
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	0a1b      	lsrs	r3, r3, #8
 8007c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007c26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	0e1b      	lsrs	r3, r3, #24
 8007c2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	601a      	str	r2, [r3, #0]
    scr++;
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	3304      	adds	r3, #4
 8007c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	061a      	lsls	r2, r3, #24
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	0a1b      	lsrs	r3, r3, #8
 8007c4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007c4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	0e1b      	lsrs	r3, r3, #24
 8007c54:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3738      	adds	r7, #56	; 0x38
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	18000f3a 	.word	0x18000f3a

08007c68 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	2b1f      	cmp	r3, #31
 8007c7c:	d936      	bls.n	8007cec <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	e027      	b.n	8007cd4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fba9 	bl	80083e0 <SDMMC_ReadFIFO>
 8007c8e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	0a1b      	lsrs	r3, r3, #8
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3301      	adds	r3, #1
 8007cac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	0e1b      	lsrs	r3, r3, #24
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	617b      	str	r3, [r7, #20]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2b07      	cmp	r3, #7
 8007cd8:	d9d4      	bls.n	8007c84 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	f1a3 0220 	sub.w	r2, r3, #32
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007cec:	bf00      	nop
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b1f      	cmp	r3, #31
 8007d08:	d93a      	bls.n	8007d80 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e02b      	b.n	8007d68 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	021a      	lsls	r2, r3, #8
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	041a      	lsls	r2, r3, #16
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	061a      	lsls	r2, r3, #24
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f107 020c 	add.w	r2, r7, #12
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fb4c 	bl	80083fa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	3301      	adds	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	d9d0      	bls.n	8007d10 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	f1a3 0220 	sub.w	r2, r3, #32
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007d80:	bf00      	nop
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e049      	b.n	8007e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f841 	bl	8007e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f000 fa00 	bl	800821c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d001      	beq.n	8007eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e054      	b.n	8007f5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d022      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ede:	d01d      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a22      	ldr	r2, [pc, #136]	; (8007f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d018      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a21      	ldr	r2, [pc, #132]	; (8007f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d013      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1f      	ldr	r2, [pc, #124]	; (8007f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00e      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1e      	ldr	r2, [pc, #120]	; (8007f7c <HAL_TIM_Base_Start_IT+0xe0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d009      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a1c      	ldr	r2, [pc, #112]	; (8007f80 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_TIM_Base_Start_IT+0x80>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a1b      	ldr	r2, [pc, #108]	; (8007f84 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d115      	bne.n	8007f48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	4b19      	ldr	r3, [pc, #100]	; (8007f88 <HAL_TIM_Base_Start_IT+0xec>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d015      	beq.n	8007f5a <HAL_TIM_Base_Start_IT+0xbe>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f34:	d011      	beq.n	8007f5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0201 	orr.w	r2, r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f46:	e008      	b.n	8007f5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e000      	b.n	8007f5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00
 8007f7c:	40010400 	.word	0x40010400
 8007f80:	40001800 	.word	0x40001800
 8007f84:	40014000 	.word	0x40014000
 8007f88:	00010007 	.word	0x00010007

08007f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d122      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d11b      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0202 	mvn.w	r2, #2
 8007fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f905 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8f7 	bl	80081ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f908 	bl	80081f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d122      	bne.n	800803c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b04      	cmp	r3, #4
 8008002:	d11b      	bne.n	800803c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0204 	mvn.w	r2, #4
 800800c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8db 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 8008028:	e005      	b.n	8008036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8cd 	bl	80081ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8de 	bl	80081f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0308 	and.w	r3, r3, #8
 8008046:	2b08      	cmp	r3, #8
 8008048:	d122      	bne.n	8008090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b08      	cmp	r3, #8
 8008056:	d11b      	bne.n	8008090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0208 	mvn.w	r2, #8
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2204      	movs	r2, #4
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8b1 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8a3 	bl	80081ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8b4 	bl	80081f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b10      	cmp	r3, #16
 800809c:	d122      	bne.n	80080e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b10      	cmp	r3, #16
 80080aa:	d11b      	bne.n	80080e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0210 	mvn.w	r2, #16
 80080b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2208      	movs	r2, #8
 80080ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f887 	bl	80081de <HAL_TIM_IC_CaptureCallback>
 80080d0:	e005      	b.n	80080de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f879 	bl	80081ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f88a 	bl	80081f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d10e      	bne.n	8008110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d107      	bne.n	8008110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f06f 0201 	mvn.w	r2, #1
 8008108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7f9 f9c0 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811a:	2b80      	cmp	r3, #128	; 0x80
 800811c:	d10e      	bne.n	800813c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008128:	2b80      	cmp	r3, #128	; 0x80
 800812a:	d107      	bne.n	800813c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f914 	bl	8008364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814a:	d10e      	bne.n	800816a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d107      	bne.n	800816a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f907 	bl	8008378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d10e      	bne.n	8008196 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d107      	bne.n	8008196 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800818e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f838 	bl	8008206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d10e      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d107      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f06f 0220 	mvn.w	r2, #32
 80081ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8c7 	bl	8008350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a40      	ldr	r2, [pc, #256]	; (8008330 <TIM_Base_SetConfig+0x114>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823a:	d00f      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a3d      	ldr	r2, [pc, #244]	; (8008334 <TIM_Base_SetConfig+0x118>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00b      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a3c      	ldr	r2, [pc, #240]	; (8008338 <TIM_Base_SetConfig+0x11c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d007      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a3b      	ldr	r2, [pc, #236]	; (800833c <TIM_Base_SetConfig+0x120>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d003      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a3a      	ldr	r2, [pc, #232]	; (8008340 <TIM_Base_SetConfig+0x124>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d108      	bne.n	800826e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2f      	ldr	r2, [pc, #188]	; (8008330 <TIM_Base_SetConfig+0x114>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d01f      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827c:	d01b      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a2c      	ldr	r2, [pc, #176]	; (8008334 <TIM_Base_SetConfig+0x118>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d017      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a2b      	ldr	r2, [pc, #172]	; (8008338 <TIM_Base_SetConfig+0x11c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a2a      	ldr	r2, [pc, #168]	; (800833c <TIM_Base_SetConfig+0x120>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00f      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a29      	ldr	r2, [pc, #164]	; (8008340 <TIM_Base_SetConfig+0x124>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00b      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a28      	ldr	r2, [pc, #160]	; (8008344 <TIM_Base_SetConfig+0x128>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d007      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a27      	ldr	r2, [pc, #156]	; (8008348 <TIM_Base_SetConfig+0x12c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_Base_SetConfig+0x9a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a26      	ldr	r2, [pc, #152]	; (800834c <TIM_Base_SetConfig+0x130>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d108      	bne.n	80082c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a10      	ldr	r2, [pc, #64]	; (8008330 <TIM_Base_SetConfig+0x114>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0xf8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a12      	ldr	r2, [pc, #72]	; (8008340 <TIM_Base_SetConfig+0x124>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0xf8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a11      	ldr	r2, [pc, #68]	; (8008344 <TIM_Base_SetConfig+0x128>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0xf8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a10      	ldr	r2, [pc, #64]	; (8008348 <TIM_Base_SetConfig+0x12c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0xf8>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a0f      	ldr	r2, [pc, #60]	; (800834c <TIM_Base_SetConfig+0x130>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d103      	bne.n	800831c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	615a      	str	r2, [r3, #20]
}
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	40010400 	.word	0x40010400
 8008344:	40014000 	.word	0x40014000
 8008348:	40014400 	.word	0x40014400
 800834c:	40014800 	.word	0x40014800

08008350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800838c:	b084      	sub	sp, #16
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	f107 001c 	add.w	r0, r7, #28
 800839a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80083a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80083a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80083a6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80083aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80083ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80083b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <SDMMC_Init+0x50>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	b004      	add	sp, #16
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	ffc02c00 	.word	0xffc02c00

080083e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f043 0203 	orr.w	r2, r3, #3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f023 0203 	bic.w	r2, r3, #3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0303 	and.w	r3, r3, #3
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800849a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80084a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80084a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	4b06      	ldr	r3, [pc, #24]	; (80084cc <SDMMC_SendCommand+0x50>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	fffee0c0 	.word	0xfffee0c0

080084d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	b2db      	uxtb	r3, r3
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3314      	adds	r3, #20
 80084f8:	461a      	mov	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	4413      	add	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008536:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800853c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008542:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800855a:	2300      	movs	r3, #0

}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008576:	2310      	movs	r3, #16
 8008578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800857a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800857e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff ff73 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008596:	f241 3288 	movw	r2, #5000	; 0x1388
 800859a:	2110      	movs	r1, #16
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa5f 	bl	8008a60 <SDMMC_GetCmdResp1>
 80085a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a4:	69fb      	ldr	r3, [r7, #28]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b088      	sub	sp, #32
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085bc:	2311      	movs	r3, #17
 80085be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff ff50 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80085dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e0:	2111      	movs	r1, #17
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa3c 	bl	8008a60 <SDMMC_GetCmdResp1>
 80085e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085ea:	69fb      	ldr	r3, [r7, #28]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008602:	2312      	movs	r3, #18
 8008604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800860a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff2d 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008622:	f241 3288 	movw	r2, #5000	; 0x1388
 8008626:	2112      	movs	r1, #18
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fa19 	bl	8008a60 <SDMMC_GetCmdResp1>
 800862e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008630:	69fb      	ldr	r3, [r7, #28]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3720      	adds	r7, #32
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b088      	sub	sp, #32
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008648:	2318      	movs	r3, #24
 800864a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800864c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800865c:	f107 0308 	add.w	r3, r7, #8
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff ff0a 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008668:	f241 3288 	movw	r2, #5000	; 0x1388
 800866c:	2118      	movs	r1, #24
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f9f6 	bl	8008a60 <SDMMC_GetCmdResp1>
 8008674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008676:	69fb      	ldr	r3, [r7, #28]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800868e:	2319      	movs	r3, #25
 8008690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800869c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086a2:	f107 0308 	add.w	r3, r7, #8
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fee7 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80086ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b2:	2119      	movs	r1, #25
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9d3 	bl	8008a60 <SDMMC_GetCmdResp1>
 80086ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086bc:	69fb      	ldr	r3, [r7, #28]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3720      	adds	r7, #32
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80086d4:	230c      	movs	r3, #12
 80086d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008700:	f107 0308 	add.w	r3, r7, #8
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff feb8 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800870c:	4a0b      	ldr	r2, [pc, #44]	; (800873c <SDMMC_CmdStopTransfer+0x74>)
 800870e:	210c      	movs	r1, #12
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f9a5 	bl	8008a60 <SDMMC_GetCmdResp1>
 8008716:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872a:	d101      	bne.n	8008730 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800872c:	2300      	movs	r3, #0
 800872e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008730:	69fb      	ldr	r3, [r7, #28]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3720      	adds	r7, #32
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	05f5e100 	.word	0x05f5e100

08008740 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800874e:	2307      	movs	r3, #7
 8008750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800875c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff fe87 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800876e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008772:	2107      	movs	r1, #7
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f973 	bl	8008a60 <SDMMC_GetCmdResp1>
 800877a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800877c:	69fb      	ldr	r3, [r7, #28]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3720      	adds	r7, #32
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b088      	sub	sp, #32
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800879e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087a4:	f107 0308 	add.w	r3, r7, #8
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fe66 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fb97 	bl	8008ee4 <SDMMC_GetCmdError>
 80087b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b8:	69fb      	ldr	r3, [r7, #28]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b088      	sub	sp, #32
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087d0:	2308      	movs	r3, #8
 80087d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087e4:	f107 0308 	add.w	r3, r7, #8
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff fe46 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb29 	bl	8008e48 <SDMMC_GetCmdResp7>
 80087f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f8:	69fb      	ldr	r3, [r7, #28]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b088      	sub	sp, #32
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008810:	2337      	movs	r3, #55	; 0x37
 8008812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800881e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008824:	f107 0308 	add.w	r3, r7, #8
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff fe26 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008830:	f241 3288 	movw	r2, #5000	; 0x1388
 8008834:	2137      	movs	r1, #55	; 0x37
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f912 	bl	8008a60 <SDMMC_GetCmdResp1>
 800883c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800883e:	69fb      	ldr	r3, [r7, #28]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008856:	2329      	movs	r3, #41	; 0x29
 8008858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800885a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800885e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fe03 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fa2e 	bl	8008cd8 <SDMMC_GetCmdResp3>
 800887c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800887e:	69fb      	ldr	r3, [r7, #28]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008896:	2306      	movs	r3, #6
 8008898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800889a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800889e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fde3 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	2106      	movs	r1, #6
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8cf 	bl	8008a60 <SDMMC_GetCmdResp1>
 80088c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088c4:	69fb      	ldr	r3, [r7, #28]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b088      	sub	sp, #32
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80088da:	2333      	movs	r3, #51	; 0x33
 80088dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088ee:	f107 0308 	add.w	r3, r7, #8
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff fdc1 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80088fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fe:	2133      	movs	r1, #51	; 0x33
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f8ad 	bl	8008a60 <SDMMC_GetCmdResp1>
 8008906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008908:	69fb      	ldr	r3, [r7, #28]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b088      	sub	sp, #32
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800891e:	2302      	movs	r3, #2
 8008920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800892c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008932:	f107 0308 	add.w	r3, r7, #8
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff fd9f 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f980 	bl	8008c44 <SDMMC_GetCmdResp2>
 8008944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008946:	69fb      	ldr	r3, [r7, #28]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800895e:	2309      	movs	r3, #9
 8008960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800896c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008972:	f107 0308 	add.w	r3, r7, #8
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fd7f 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f960 	bl	8008c44 <SDMMC_GetCmdResp2>
 8008984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008986:	69fb      	ldr	r3, [r7, #28]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800899e:	2303      	movs	r3, #3
 80089a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089b2:	f107 0308 	add.w	r3, r7, #8
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff fd5f 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	2103      	movs	r1, #3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f9c8 	bl	8008d58 <SDMMC_GetCmdResp6>
 80089c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ca:	69fb      	ldr	r3, [r7, #28]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80089e2:	230d      	movs	r3, #13
 80089e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff fd3d 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a06:	210d      	movs	r1, #13
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f829 	bl	8008a60 <SDMMC_GetCmdResp1>
 8008a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a10:	69fb      	ldr	r3, [r7, #28]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3720      	adds	r7, #32
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008a26:	230d      	movs	r3, #13
 8008a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a3a:	f107 0308 	add.w	r3, r7, #8
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fd1b 	bl	800847c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a4a:	210d      	movs	r1, #13
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f807 	bl	8008a60 <SDMMC_GetCmdResp1>
 8008a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a54:	69fb      	ldr	r3, [r7, #28]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a6e:	4b70      	ldr	r3, [pc, #448]	; (8008c30 <SDMMC_GetCmdResp1+0x1d0>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a70      	ldr	r2, [pc, #448]	; (8008c34 <SDMMC_GetCmdResp1+0x1d4>)
 8008a74:	fba2 2303 	umull	r2, r3, r2, r3
 8008a78:	0a5a      	lsrs	r2, r3, #9
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	fb02 f303 	mul.w	r3, r2, r3
 8008a80:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	61fa      	str	r2, [r7, #28]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a90:	e0c9      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	4b67      	ldr	r3, [pc, #412]	; (8008c38 <SDMMC_GetCmdResp1+0x1d8>)
 8008a9c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0ef      	beq.n	8008a82 <SDMMC_GetCmdResp1+0x22>
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1ea      	bne.n	8008a82 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab0:	f003 0304 	and.w	r3, r3, #4
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2204      	movs	r2, #4
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008abe:	2304      	movs	r3, #4
 8008ac0:	e0b1      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d004      	beq.n	8008ad8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0a6      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a58      	ldr	r2, [pc, #352]	; (8008c3c <SDMMC_GetCmdResp1+0x1dc>)
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff fcf6 	bl	80084d0 <SDMMC_GetCommandResponse>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d001      	beq.n	8008af2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e099      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008af2:	2100      	movs	r1, #0
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f7ff fcf8 	bl	80084ea <SDMMC_GetResponse>
 8008afa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4b50      	ldr	r3, [pc, #320]	; (8008c40 <SDMMC_GetCmdResp1+0x1e0>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e08d      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da02      	bge.n	8008b16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b14:	e087      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008b20:	2340      	movs	r3, #64	; 0x40
 8008b22:	e080      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	e079      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b40:	e071      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b50:	e069      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b60:	e061      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b70:	e059      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b80:	e051      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b90:	e049      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ba0:	e041      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bb0:	e039      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bc0:	e031      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008bcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bd0:	e029      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008bdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008be0:	e021      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008bec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008bf0:	e019      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008bfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c00:	e011      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008c0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c10:	e009      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c20:	e001      	b.n	8008c26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	24000000 	.word	0x24000000
 8008c34:	10624dd3 	.word	0x10624dd3
 8008c38:	00200045 	.word	0x00200045
 8008c3c:	002000c5 	.word	0x002000c5
 8008c40:	fdffe008 	.word	0xfdffe008

08008c44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008c4c:	4b1f      	ldr	r3, [pc, #124]	; (8008ccc <SDMMC_GetCmdResp2+0x88>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <SDMMC_GetCmdResp2+0x8c>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	0a5b      	lsrs	r3, r3, #9
 8008c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1e5a      	subs	r2, r3, #1
 8008c66:	60fa      	str	r2, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c70:	e026      	b.n	8008cc0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0ef      	beq.n	8008c62 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1ea      	bne.n	8008c62 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	e00e      	b.n	8008cc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e003      	b.n	8008cc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a06      	ldr	r2, [pc, #24]	; (8008cd4 <SDMMC_GetCmdResp2+0x90>)
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	24000000 	.word	0x24000000
 8008cd0:	10624dd3 	.word	0x10624dd3
 8008cd4:	002000c5 	.word	0x002000c5

08008cd8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <SDMMC_GetCmdResp3+0x74>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1a      	ldr	r2, [pc, #104]	; (8008d50 <SDMMC_GetCmdResp3+0x78>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	0a5b      	lsrs	r3, r3, #9
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	fb02 f303 	mul.w	r3, r2, r3
 8008cf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	1e5a      	subs	r2, r3, #1
 8008cfa:	60fa      	str	r2, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d04:	e01b      	b.n	8008d3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0ef      	beq.n	8008cf6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1ea      	bne.n	8008cf6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d32:	2304      	movs	r3, #4
 8008d34:	e003      	b.n	8008d3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a06      	ldr	r2, [pc, #24]	; (8008d54 <SDMMC_GetCmdResp3+0x7c>)
 8008d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	24000000 	.word	0x24000000
 8008d50:	10624dd3 	.word	0x10624dd3
 8008d54:	002000c5 	.word	0x002000c5

08008d58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	460b      	mov	r3, r1
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008d66:	4b35      	ldr	r3, [pc, #212]	; (8008e3c <SDMMC_GetCmdResp6+0xe4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a35      	ldr	r2, [pc, #212]	; (8008e40 <SDMMC_GetCmdResp6+0xe8>)
 8008d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d70:	0a5b      	lsrs	r3, r3, #9
 8008d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	1e5a      	subs	r2, r3, #1
 8008d80:	61fa      	str	r2, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d8a:	e052      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0ef      	beq.n	8008d7c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1ea      	bne.n	8008d7c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2204      	movs	r2, #4
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008db8:	2304      	movs	r3, #4
 8008dba:	e03a      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e02f      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff fb7c 	bl	80084d0 <SDMMC_GetCommandResponse>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d001      	beq.n	8008de6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e025      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4a16      	ldr	r2, [pc, #88]	; (8008e44 <SDMMC_GetCmdResp6+0xec>)
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fb7b 	bl	80084ea <SDMMC_GetResponse>
 8008df4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d106      	bne.n	8008e0e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	0c1b      	lsrs	r3, r3, #16
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e011      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e1c:	e009      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e2c:	e001      	b.n	8008e32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	24000000 	.word	0x24000000
 8008e40:	10624dd3 	.word	0x10624dd3
 8008e44:	002000c5 	.word	0x002000c5

08008e48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008e50:	4b22      	ldr	r3, [pc, #136]	; (8008edc <SDMMC_GetCmdResp7+0x94>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a22      	ldr	r2, [pc, #136]	; (8008ee0 <SDMMC_GetCmdResp7+0x98>)
 8008e56:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5a:	0a5b      	lsrs	r3, r3, #9
 8008e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e60:	fb02 f303 	mul.w	r3, r2, r3
 8008e64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	1e5a      	subs	r2, r3, #1
 8008e6a:	60fa      	str	r2, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d102      	bne.n	8008e76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e74:	e02c      	b.n	8008ed0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0ef      	beq.n	8008e66 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1ea      	bne.n	8008e66 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2204      	movs	r2, #4
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	e014      	b.n	8008ed0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e009      	b.n	8008ed0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2240      	movs	r2, #64	; 0x40
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ece:	2300      	movs	r3, #0

}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	24000000 	.word	0x24000000
 8008ee0:	10624dd3 	.word	0x10624dd3

08008ee4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008eec:	4b11      	ldr	r3, [pc, #68]	; (8008f34 <SDMMC_GetCmdError+0x50>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a11      	ldr	r2, [pc, #68]	; (8008f38 <SDMMC_GetCmdError+0x54>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	0a5b      	lsrs	r3, r3, #9
 8008ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efc:	fb02 f303 	mul.w	r3, r2, r3
 8008f00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1e5a      	subs	r2, r3, #1
 8008f06:	60fa      	str	r2, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f10:	e009      	b.n	8008f26 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f1      	beq.n	8008f02 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a06      	ldr	r2, [pc, #24]	; (8008f3c <SDMMC_GetCmdError+0x58>)
 8008f22:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	24000000 	.word	0x24000000
 8008f38:	10624dd3 	.word	0x10624dd3
 8008f3c:	002000c5 	.word	0x002000c5

08008f40 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
*/
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08e      	sub	sp, #56	; 0x38
 8008f44:	af08      	add	r7, sp, #32
 8008f46:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	613b      	str	r3, [r7, #16]
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 8008f50:	f107 010c 	add.w	r1, r7, #12
 8008f54:	2300      	movs	r3, #0
 8008f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f5a:	6938      	ldr	r0, [r7, #16]
 8008f5c:	f00a feca 	bl	8013cf4 <_txe_byte_allocate>
 8008f60:	6178      	str	r0, [r7, #20]

/* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e01d      	b.n	8008fa8 <MX_FileX_Init+0x68>
  }

/* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	22b0      	movs	r2, #176	; 0xb0
 8008f70:	9206      	str	r2, [sp, #24]
 8008f72:	2201      	movs	r2, #1
 8008f74:	9205      	str	r2, [sp, #20]
 8008f76:	2200      	movs	r2, #0
 8008f78:	9204      	str	r2, [sp, #16]
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	9203      	str	r2, [sp, #12]
 8008f7e:	220a      	movs	r2, #10
 8008f80:	9202      	str	r2, [sp, #8]
 8008f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f86:	9201      	str	r2, [sp, #4]
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4a08      	ldr	r2, [pc, #32]	; (8008fb0 <MX_FileX_Init+0x70>)
 8008f8e:	4909      	ldr	r1, [pc, #36]	; (8008fb4 <MX_FileX_Init+0x74>)
 8008f90:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <MX_FileX_Init+0x78>)
 8008f92:	f00b f8f7 	bl	8014184 <_txe_thread_create>
 8008f96:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

/* Check main thread creation */
  if (ret != FX_SUCCESS)
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 8008f9e:	230e      	movs	r3, #14
 8008fa0:	e002      	b.n	8008fa8 <MX_FileX_Init+0x68>
/* USER CODE BEGIN MX_FileX_Init */

/* USER CODE END MX_FileX_Init */

/* Initialize FileX.  */
  fx_system_initialize();
 8008fa2:	f005 fe45 	bl	800ec30 <_fx_system_initialize>

/* USER CODE BEGIN MX_FileX_Init 1*/

/* USER CODE END MX_FileX_Init 1*/

  return ret;
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	08008fbd 	.word	0x08008fbd
 8008fb4:	0801441c 	.word	0x0801441c
 8008fb8:	24000a14 	.word	0x24000a14

08008fbc <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
*/
 void fx_app_thread_entry(ULONG thread_input)
 {
 8008fbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008fc0:	b08c      	sub	sp, #48	; 0x30
 8008fc2:	af04      	add	r7, sp, #16
 8008fc4:	6078      	str	r0, [r7, #4]

  UINT sd_status = FX_SUCCESS;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]
/* USER CODE BEGIN fx_app_thread_entry 0*/
  ULONG bytes_read;
  ULONG offset=32;
 8008fca:	2320      	movs	r3, #32
 8008fcc:	617b      	str	r3, [r7, #20]
  int k =0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
 // int j=0;
  CHAR read_buffer[offset];
 8008fd2:	6979      	ldr	r1, [r7, #20]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4688      	mov	r8, r1
 8008fde:	4699      	mov	r9, r3
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ff0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	461d      	mov	r5, r3
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	00eb      	lsls	r3, r5, #3
 8009004:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009008:	00e2      	lsls	r2, r4, #3
 800900a:	1dcb      	adds	r3, r1, #7
 800900c:	08db      	lsrs	r3, r3, #3
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	ebad 0d03 	sub.w	sp, sp, r3
 8009014:	ab04      	add	r3, sp, #16
 8009016:	3300      	adds	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
 // CHAR* place = SRAM2_ADDR;
 // CHAR data[] = "69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ";
  Address = FLASH_USER_START_ADDR;
 800901a:	4b51      	ldr	r3, [pc, #324]	; (8009160 <fx_app_thread_entry+0x1a4>)
 800901c:	4a51      	ldr	r2, [pc, #324]	; (8009164 <fx_app_thread_entry+0x1a8>)
 800901e:	601a      	str	r2, [r3, #0]
 	    // ram_adrr =place ;

/* USER CODE END fx_app_thread_entry 0*/

/* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 8009020:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8009024:	9302      	str	r3, [sp, #8]
 8009026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	4b4e      	ldr	r3, [pc, #312]	; (8009168 <fx_app_thread_entry+0x1ac>)
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	2300      	movs	r3, #0
 8009032:	4a4e      	ldr	r2, [pc, #312]	; (800916c <fx_app_thread_entry+0x1b0>)
 8009034:	494e      	ldr	r1, [pc, #312]	; (8009170 <fx_app_thread_entry+0x1b4>)
 8009036:	484f      	ldr	r0, [pc, #316]	; (8009174 <fx_app_thread_entry+0x1b8>)
 8009038:	f008 f99a 	bl	8011370 <_fxe_media_open>
 800903c:	61f8      	str	r0, [r7, #28]

/* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d000      	beq.n	8009046 <fx_app_thread_entry+0x8a>
  {
     /* USER CODE BEGIN SD DRIVER get info error */
    while(1);
 8009044:	e7fe      	b.n	8009044 <fx_app_thread_entry+0x88>




  /* Create a file called STM32.TXT in the root directory.  */
 sd_status =  fx_file_create(&sdio_disk, "led_binarry.bin");
 8009046:	494c      	ldr	r1, [pc, #304]	; (8009178 <fx_app_thread_entry+0x1bc>)
 8009048:	484a      	ldr	r0, [pc, #296]	; (8009174 <fx_app_thread_entry+0x1b8>)
 800904a:	f008 f84f 	bl	80110ec <_fxe_file_create>
 800904e:	61f8      	str	r0, [r7, #28]

 if (sd_status != FX_SUCCESS)
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <fx_app_thread_entry+0xa4>
 {
    if (sd_status != FX_ALREADY_CREATED)
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2b0b      	cmp	r3, #11
 800905a:	d001      	beq.n	8009060 <fx_app_thread_entry+0xa4>
    {
      Error_Handler();
 800905c:	f7f8 fa2a 	bl	80014b4 <Error_Handler>
   Error_Handler();
  }
*/


  sd_status =  fx_file_open(&sdio_disk, &fx_file, "led_binarry.bin", FX_OPEN_FOR_READ);
 8009060:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	2300      	movs	r3, #0
 8009068:	4a43      	ldr	r2, [pc, #268]	; (8009178 <fx_app_thread_entry+0x1bc>)
 800906a:	4944      	ldr	r1, [pc, #272]	; (800917c <fx_app_thread_entry+0x1c0>)
 800906c:	4841      	ldr	r0, [pc, #260]	; (8009174 <fx_app_thread_entry+0x1b8>)
 800906e:	f008 f86b 	bl	8011148 <_fxe_file_open>
 8009072:	61f8      	str	r0, [r7, #28]

  if (sd_status != FX_SUCCESS)
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <fx_app_thread_entry+0xc2>
  {
    Error_Handler();
 800907a:	f7f8 fa1b 	bl	80014b4 <Error_Handler>
  }
  HAL_FLASH_Unlock();
 800907e:	f7f8 ff63 	bl	8001f48 <HAL_FLASH_Unlock>


    FirstSector = GetSector(FLASH_USER_START_ADDR);
 8009082:	4838      	ldr	r0, [pc, #224]	; (8009164 <fx_app_thread_entry+0x1a8>)
 8009084:	f7f8 f912 	bl	80012ac <GetSector>
 8009088:	4603      	mov	r3, r0
 800908a:	4a3d      	ldr	r2, [pc, #244]	; (8009180 <fx_app_thread_entry+0x1c4>)
 800908c:	6013      	str	r3, [r2, #0]
    NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800908e:	483d      	ldr	r0, [pc, #244]	; (8009184 <fx_app_thread_entry+0x1c8>)
 8009090:	f7f8 f90c 	bl	80012ac <GetSector>
 8009094:	4602      	mov	r2, r0
 8009096:	4b3a      	ldr	r3, [pc, #232]	; (8009180 <fx_app_thread_entry+0x1c4>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	3301      	adds	r3, #1
 800909e:	4a3a      	ldr	r2, [pc, #232]	; (8009188 <fx_app_thread_entry+0x1cc>)
 80090a0:	6013      	str	r3, [r2, #0]

    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80090a2:	4b3a      	ldr	r3, [pc, #232]	; (800918c <fx_app_thread_entry+0x1d0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80090a8:	4b38      	ldr	r3, [pc, #224]	; (800918c <fx_app_thread_entry+0x1d0>)
 80090aa:	2220      	movs	r2, #32
 80090ac:	611a      	str	r2, [r3, #16]
    EraseInitStruct.Banks         = FLASH_BANK_1;
 80090ae:	4b37      	ldr	r3, [pc, #220]	; (800918c <fx_app_thread_entry+0x1d0>)
 80090b0:	2201      	movs	r2, #1
 80090b2:	605a      	str	r2, [r3, #4]
    EraseInitStruct.Sector        = FirstSector;
 80090b4:	4b32      	ldr	r3, [pc, #200]	; (8009180 <fx_app_thread_entry+0x1c4>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a34      	ldr	r2, [pc, #208]	; (800918c <fx_app_thread_entry+0x1d0>)
 80090ba:	6093      	str	r3, [r2, #8]
    EraseInitStruct.NbSectors     = NbOfSectors;
 80090bc:	4b32      	ldr	r3, [pc, #200]	; (8009188 <fx_app_thread_entry+0x1cc>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a32      	ldr	r2, [pc, #200]	; (800918c <fx_app_thread_entry+0x1d0>)
 80090c2:	60d3      	str	r3, [r2, #12]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80090c4:	4932      	ldr	r1, [pc, #200]	; (8009190 <fx_app_thread_entry+0x1d4>)
 80090c6:	4831      	ldr	r0, [pc, #196]	; (800918c <fx_app_thread_entry+0x1d0>)
 80090c8:	f7f9 f83e 	bl	8002148 <HAL_FLASHEx_Erase>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d02a      	beq.n	8009128 <fx_app_thread_entry+0x16c>
    {

      while (1)
 80090d2:	e7fe      	b.n	80090d2 <fx_app_thread_entry+0x116>
       // BSP_LED_On(LED3);
      }
    }
  while(sd_status != FX_END_OF_FILE){

  sd_status =  fx_file_seek(&fx_file,k*offset);
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	fb02 f303 	mul.w	r3, r2, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	4827      	ldr	r0, [pc, #156]	; (800917c <fx_app_thread_entry+0x1c0>)
 80090e0:	f008 f8ec 	bl	80112bc <_fxe_file_seek>
 80090e4:	61f8      	str	r0, [r7, #28]
  if (sd_status != FX_SUCCESS)
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <fx_app_thread_entry+0x134>
  {
    Error_Handler();
 80090ec:	f7f8 f9e2 	bl	80014b4 <Error_Handler>
  }


  sd_status =  fx_file_read(&fx_file, read_buffer,32, &bytes_read);
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	2220      	movs	r2, #32
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	4820      	ldr	r0, [pc, #128]	; (800917c <fx_app_thread_entry+0x1c0>)
 80090fa:	f008 f8a7 	bl	801124c <_fxe_file_read>
 80090fe:	61f8      	str	r0, [r7, #28]




	       if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)read_buffer)) == HAL_OK)
 8009100:	4b17      	ldr	r3, [pc, #92]	; (8009160 <fx_app_thread_entry+0x1a4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4619      	mov	r1, r3
 8009108:	2001      	movs	r0, #1
 800910a:	f7f8 fe8b 	bl	8001e24 <HAL_FLASH_Program>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d105      	bne.n	8009120 <fx_app_thread_entry+0x164>
	       {
	         Address = Address + 32; // increment for the next Flash word
 8009114:	4b12      	ldr	r3, [pc, #72]	; (8009160 <fx_app_thread_entry+0x1a4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3320      	adds	r3, #32
 800911a:	4a11      	ldr	r2, [pc, #68]	; (8009160 <fx_app_thread_entry+0x1a4>)
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	e000      	b.n	8009122 <fx_app_thread_entry+0x166>
	         //ram_adrr = ram_adrr +32;
	       }
	       else
	       {
	         while (1)
 8009120:	e7fe      	b.n	8009120 <fx_app_thread_entry+0x164>
	         {
	           //BSP_LED_On(LED3);
	         }
	       }

  k++;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	3301      	adds	r3, #1
 8009126:	61bb      	str	r3, [r7, #24]
  while(sd_status != FX_END_OF_FILE){
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	2b09      	cmp	r3, #9
 800912c:	d1d2      	bne.n	80090d4 <fx_app_thread_entry+0x118>

  }

    HAL_FLASH_Lock();
 800912e:	f7f8 ff45 	bl	8001fbc <HAL_FLASH_Lock>
    Error_Handler();
  }*/


  /* Close the test file.  */
  sd_status =  fx_file_close(&fx_file);
 8009132:	4812      	ldr	r0, [pc, #72]	; (800917c <fx_app_thread_entry+0x1c0>)
 8009134:	f007 ffae 	bl	8011094 <_fxe_file_close>
 8009138:	61f8      	str	r0, [r7, #28]

  /* Check the file close sd_status.  */
  if (sd_status != FX_SUCCESS)
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <fx_app_thread_entry+0x188>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 8009140:	f7f8 f9b8 	bl	80014b4 <Error_Handler>
  }

  /* Close the media.  */
  sd_status =  fx_media_close(&sdio_disk);
 8009144:	480b      	ldr	r0, [pc, #44]	; (8009174 <fx_app_thread_entry+0x1b8>)
 8009146:	f008 f8e7 	bl	8011318 <_fxe_media_close>
 800914a:	61f8      	str	r0, [r7, #28]

  /* Check the media close sd_status.  */
  if (sd_status != FX_SUCCESS)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <fx_app_thread_entry+0x19a>
  {
    /* Error closing the media, call error handler.  */
    Error_Handler();
 8009152:	f7f8 f9af 	bl	80014b4 <Error_Handler>


  while(1)
  {
   // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    tx_thread_sleep(40);
 8009156:	2028      	movs	r0, #40	; 0x28
 8009158:	f009 ffb4 	bl	80130c4 <_tx_thread_sleep>
 800915c:	e7fb      	b.n	8009156 <fx_app_thread_entry+0x19a>
 800915e:	bf00      	nop
 8009160:	240009f8 	.word	0x240009f8
 8009164:	08040000 	.word	0x08040000
 8009168:	24000ae0 	.word	0x24000ae0
 800916c:	080092ed 	.word	0x080092ed
 8009170:	08014430 	.word	0x08014430
 8009174:	24000ce0 	.word	0x24000ce0
 8009178:	08014440 	.word	0x08014440
 800917c:	24003198 	.word	0x24003198
 8009180:	240009f0 	.word	0x240009f0
 8009184:	080dffff 	.word	0x080dffff
 8009188:	240009f4 	.word	0x240009f4
 800918c:	24000a00 	.word	0x24000a00
 8009190:	240009fc 	.word	0x240009fc

08009194 <fx_stm32_sd_init>:
* @brief Initializes the SD IP instance
* @param UINT instance SD instance to initialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_init(UINT instance)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN PRE_FX_SD_INIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_INIT */

#if (FX_STM32_SD_INIT == 1)
  MX_SDMMC1_SD_Init();
 80091a0:	f7f7 fd18 	bl	8000bd4 <MX_SDMMC1_SD_Init>

  /* USER CODE BEGIN POST_FX_SD_INIT */

  /* USER CODE END POST_FX_SD_INIT */

  return ret;
 80091a4:	68fb      	ldr	r3, [r7, #12]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <fx_stm32_sd_deinit>:
* @brief Deinitializes the SD IP instance
* @param UINT instance SD instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_deinit(UINT instance)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_FX_SD_DEINIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_DEINIT */
#if (FX_STM32_SD_INIT == 1)
  if(HAL_SD_DeInit(&hsd1) != HAL_OK)
 80091bc:	4806      	ldr	r0, [pc, #24]	; (80091d8 <fx_stm32_sd_deinit+0x28>)
 80091be:	f7fd faab 	bl	8006718 <HAL_SD_DeInit>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <fx_stm32_sd_deinit+0x1c>
  {
    ret = 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	60fb      	str	r3, [r7, #12]
#endif
  /* USER CODE BEGIN POST_FX_SD_DEINIT */

  /* USER CODE END POST_FX_SD_DEINIT */

  return ret;
 80091cc:	68fb      	ldr	r3, [r7, #12]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	24000904 	.word	0x24000904

080091dc <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 80091e8:	4806      	ldr	r0, [pc, #24]	; (8009204 <fx_stm32_sd_get_status+0x28>)
 80091ea:	f7fe f951 	bl	8007490 <HAL_SD_GetCardState>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d001      	beq.n	80091f8 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 80091f4:	2301      	movs	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 80091f8:	68fb      	ldr	r3, [r7, #12]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	24000904 	.word	0x24000904

08009208 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	4806      	ldr	r0, [pc, #24]	; (800923c <fx_stm32_sd_read_blocks+0x34>)
 8009222:	f7fd fa9f 	bl	8006764 <HAL_SD_ReadBlocks_DMA>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 800922c:	2301      	movs	r3, #1
 800922e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8009230:	697b      	ldr	r3, [r7, #20]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	24000904 	.word	0x24000904

08009240 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	4806      	ldr	r0, [pc, #24]	; (8009274 <fx_stm32_sd_write_blocks+0x34>)
 800925a:	f7fd fb2b 	bl	80068b4 <HAL_SD_WriteBlocks_DMA>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 8009268:	697b      	ldr	r3, [r7, #20]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	24000904 	.word	0x24000904

08009278 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 8009280:	4803      	ldr	r0, [pc, #12]	; (8009290 <HAL_SD_TxCpltCallback+0x18>)
 8009282:	f00a ff61 	bl	8014148 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	24003378 	.word	0x24003378

08009294 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 800929c:	4803      	ldr	r0, [pc, #12]	; (80092ac <HAL_SD_RxCpltCallback+0x18>)
 800929e:	f00a ff53 	bl	8014148 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	24003394 	.word	0x24003394

080092b0 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 80092b8:	f00a fa64 	bl	8013784 <_tx_time_get>
 80092bc:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80092be:	e007      	b.n	80092d0 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff8b 	bl	80091dc <fx_stm32_sd_get_status>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <check_sd_status+0x20>
    {
      return 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	e008      	b.n	80092e2 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80092d0:	f00a fa58 	bl	8013784 <_tx_time_get>
 80092d4:	4602      	mov	r2, r0
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092de:	d3ef      	bcc.n	80092c0 <check_sd_status+0x10>
    }
  }

  return 1;
 80092e0:	2301      	movs	r3, #1
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 80092f4:	4b8e      	ldr	r3, [pc, #568]	; (8009530 <fx_stm32_sd_driver+0x244>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d10a      	bne.n	8009312 <fx_stm32_sd_driver+0x26>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80092fc:	2000      	movs	r0, #0
 80092fe:	f7ff ffd7 	bl	80092b0 <check_sd_status>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <fx_stm32_sd_driver+0x26>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2290      	movs	r2, #144	; 0x90
 800930c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009310:	e10a      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009324:	2b08      	cmp	r3, #8
 8009326:	f200 80f5 	bhi.w	8009514 <fx_stm32_sd_driver+0x228>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <fx_stm32_sd_driver+0x44>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	080093eb 	.word	0x080093eb
 8009334:	0800941f 	.word	0x0800941f
 8009338:	08009451 	.word	0x08009451
 800933c:	0800945b 	.word	0x0800945b
 8009340:	08009355 	.word	0x08009355
 8009344:	08009465 	.word	0x08009465
 8009348:	08009515 	.word	0x08009515
 800934c:	080094f9 	.word	0x080094f9
 8009350:	080093b5 	.word	0x080093b5
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 800935c:	231c      	movs	r3, #28
 800935e:	2200      	movs	r2, #0
 8009360:	4974      	ldr	r1, [pc, #464]	; (8009534 <fx_stm32_sd_driver+0x248>)
 8009362:	4875      	ldr	r0, [pc, #468]	; (8009538 <fx_stm32_sd_driver+0x24c>)
 8009364:	f00a fdda 	bl	8013f1c <_txe_semaphore_create>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d108      	bne.n	8009380 <fx_stm32_sd_driver+0x94>
 800936e:	231c      	movs	r3, #28
 8009370:	2200      	movs	r2, #0
 8009372:	4972      	ldr	r1, [pc, #456]	; (800953c <fx_stm32_sd_driver+0x250>)
 8009374:	4872      	ldr	r0, [pc, #456]	; (8009540 <fx_stm32_sd_driver+0x254>)
 8009376:	f00a fdd1 	bl	8013f1c <_txe_semaphore_create>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <fx_stm32_sd_driver+0x9c>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2290      	movs	r2, #144	; 0x90
 8009384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      /* Initialize the SD instance */
      if (is_initialized == 0)
 8009388:	4b69      	ldr	r3, [pc, #420]	; (8009530 <fx_stm32_sd_driver+0x244>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 80c6 	bne.w	800951e <fx_stm32_sd_driver+0x232>
      {
        status = fx_stm32_sd_init(FX_STM32_SD_INSTANCE);
 8009392:	2000      	movs	r0, #0
 8009394:	f7ff fefe 	bl	8009194 <fx_stm32_sd_init>
 8009398:	4603      	mov	r3, r0
 800939a:	613b      	str	r3, [r7, #16]

        if (status == 0)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <fx_stm32_sd_driver+0xbe>
        {
          is_initialized = 1;
 80093a2:	4b63      	ldr	r3, [pc, #396]	; (8009530 <fx_stm32_sd_driver+0x244>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 80093a8:	e0b9      	b.n	800951e <fx_stm32_sd_driver+0x232>
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2290      	movs	r2, #144	; 0x90
 80093ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80093b2:	e0b4      	b.n	800951e <fx_stm32_sd_driver+0x232>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      status = fx_stm32_sd_deinit(FX_STM32_SD_INSTANCE);
 80093bc:	2000      	movs	r0, #0
 80093be:	f7ff fef7 	bl	80091b0 <fx_stm32_sd_deinit>
 80093c2:	4603      	mov	r3, r0
 80093c4:	613b      	str	r3, [r7, #16]

      if (status != 0)
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <fx_stm32_sd_driver+0xea>
      {
        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2290      	movs	r2, #144	; 0x90
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80093d4:	e002      	b.n	80093dc <fx_stm32_sd_driver+0xf0>
      }
      else
      {
        is_initialized = 0;
 80093d6:	4b56      	ldr	r3, [pc, #344]	; (8009530 <fx_stm32_sd_driver+0x244>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 80093dc:	4856      	ldr	r0, [pc, #344]	; (8009538 <fx_stm32_sd_driver+0x24c>)
 80093de:	f00a fe33 	bl	8014048 <_txe_semaphore_delete>
 80093e2:	4857      	ldr	r0, [pc, #348]	; (8009540 <fx_stm32_sd_driver+0x254>)
 80093e4:	f00a fe30 	bl	8014048 <_txe_semaphore_delete>

      break;
 80093e8:	e09e      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2290      	movs	r2, #144	; 0x90
 80093ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f89c 	bl	8009544 <sd_read_data>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 8087 	bne.w	8009522 <fx_stm32_sd_driver+0x236>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800941c:	e081      	b.n	8009522 <fx_stm32_sd_driver+0x236>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2290      	movs	r2, #144	; 0x90
 8009422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009430:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f940 	bl	80096c0 <sd_write_data>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d16f      	bne.n	8009526 <fx_stm32_sd_driver+0x23a>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800944e:	e06a      	b.n	8009526 <fx_stm32_sd_driver+0x23a>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8009458:	e066      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 8009462:	e061      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2100      	movs	r1, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f868 	bl	8009544 <sd_read_data>
 8009474:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <fx_stm32_sd_driver+0x19a>
      {
        media_ptr->fx_media_driver_status = status;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009484:	e050      	b.n	8009528 <fx_stm32_sd_driver+0x23c>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009490:	f107 0308 	add.w	r3, r7, #8
 8009494:	f107 020c 	add.w	r2, r7, #12
 8009498:	2100      	movs	r1, #0
 800949a:	f005 fa77 	bl	800e98c <_fx_partition_offset_calculate>
 800949e:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <fx_stm32_sd_driver+0x1c4>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2290      	movs	r2, #144	; 0x90
 80094aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80094ae:	e03b      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d01b      	beq.n	80094ee <fx_stm32_sd_driver+0x202>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80094b6:	2000      	movs	r0, #0
 80094b8:	f7ff fefa 	bl	80092b0 <check_sd_status>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <fx_stm32_sd_driver+0x1e0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2290      	movs	r2, #144	; 0x90
 80094c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80094ca:	e02d      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80094cc:	68f9      	ldr	r1, [r7, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f834 	bl	8009544 <sd_read_data>
 80094dc:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <fx_stm32_sd_driver+0x202>
        {
          media_ptr->fx_media_driver_status = status;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80094ec:	e01c      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80094f6:	e017      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2100      	movs	r1, #0
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f8dc 	bl	80096c0 <sd_write_data>
 8009508:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 8009512:	e009      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2290      	movs	r2, #144	; 0x90
 8009518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800951c:	e004      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
      break;
 800951e:	bf00      	nop
 8009520:	e002      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
      break;
 8009522:	bf00      	nop
 8009524:	e000      	b.n	8009528 <fx_stm32_sd_driver+0x23c>
      break;
 8009526:	bf00      	nop
    }
  }
}
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	240035c0 	.word	0x240035c0
 8009534:	08014450 	.word	0x08014450
 8009538:	24003394 	.word	0x24003394
 800953c:	0801446c 	.word	0x0801446c
 8009540:	24003378 	.word	0x24003378

08009544 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b090      	sub	sp, #64	; 0x40
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d061      	beq.n	8009620 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009562:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009568:	e04c      	b.n	8009604 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	1c53      	adds	r3, r2, #1
 800956e:	60bb      	str	r3, [r7, #8]
 8009570:	2301      	movs	r3, #1
 8009572:	4950      	ldr	r1, [pc, #320]	; (80096b4 <sd_read_data+0x170>)
 8009574:	2000      	movs	r0, #0
 8009576:	f7ff fe47 	bl	8009208 <fx_stm32_sd_read_blocks>
 800957a:	4603      	mov	r3, r0
 800957c:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8009584:	2390      	movs	r3, #144	; 0x90
 8009586:	e090      	b.n	80096aa <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8009588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800958c:	484a      	ldr	r0, [pc, #296]	; (80096b8 <sd_read_data+0x174>)
 800958e:	f00a fd99 	bl	80140c4 <_txe_semaphore_get>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <sd_read_data+0x58>
 8009598:	2390      	movs	r3, #144	; 0x90
 800959a:	e086      	b.n	80096aa <sd_read_data+0x166>
 800959c:	4b45      	ldr	r3, [pc, #276]	; (80096b4 <sd_read_data+0x170>)
 800959e:	633b      	str	r3, [r7, #48]	; 0x30
 80095a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dd1d      	ble.n	80095e8 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	f003 021f 	and.w	r2, r3, #31
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	4413      	add	r3, r2
 80095b6:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80095bc:	f3bf 8f4f 	dsb	sy
}
 80095c0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80095c2:	4a3e      	ldr	r2, [pc, #248]	; (80096bc <sd_read_data+0x178>)
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	3320      	adds	r3, #32
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	3b20      	subs	r3, #32
 80095d4:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dcf2      	bgt.n	80095c2 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80095dc:	f3bf 8f4f 	dsb	sy
}
 80095e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80095e2:	f3bf 8f6f 	isb	sy
}
 80095e6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80095e8:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80095ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095f0:	4830      	ldr	r0, [pc, #192]	; (80096b4 <sd_read_data+0x170>)
 80095f2:	f007 fd3f 	bl	8011074 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80095f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 80095fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009600:	3301      	adds	r3, #1
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d8ae      	bhi.n	800956a <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 800960c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d102      	bne.n	800961a <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 8009614:	2300      	movs	r3, #0
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
 8009618:	e046      	b.n	80096a8 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800961a:	2321      	movs	r3, #33	; 0x21
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
 800961e:	e043      	b.n	80096a8 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	2000      	movs	r0, #0
 800962c:	f7ff fdec 	bl	8009208 <fx_stm32_sd_read_blocks>
 8009630:	4603      	mov	r3, r0
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 800963a:	2390      	movs	r3, #144	; 0x90
 800963c:	e035      	b.n	80096aa <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800963e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009642:	481d      	ldr	r0, [pc, #116]	; (80096b8 <sd_read_data+0x174>)
 8009644:	f00a fd3e 	bl	80140c4 <_txe_semaphore_get>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <sd_read_data+0x10e>
 800964e:	2390      	movs	r3, #144	; 0x90
 8009650:	e02b      	b.n	80096aa <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	025b      	lsls	r3, r3, #9
 800965c:	623a      	str	r2, [r7, #32]
 800965e:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dd1d      	ble.n	80096a2 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	f003 021f 	and.w	r2, r3, #31
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	4413      	add	r3, r2
 8009670:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009676:	f3bf 8f4f 	dsb	sy
}
 800967a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800967c:	4a0f      	ldr	r2, [pc, #60]	; (80096bc <sd_read_data+0x178>)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	3320      	adds	r3, #32
 8009688:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	3b20      	subs	r3, #32
 800968e:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	dcf2      	bgt.n	800967c <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 8009696:	f3bf 8f4f 	dsb	sy
}
 800969a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800969c:	f3bf 8f6f 	isb	sy
}
 80096a0:	bf00      	nop
}
 80096a2:	bf00      	nop
#endif

    status = FX_SUCCESS;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3740      	adds	r7, #64	; 0x40
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	240033c0 	.word	0x240033c0
 80096b8:	24003394 	.word	0x24003394
 80096bc:	e000ed00 	.word	0xe000ed00

080096c0 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b090      	sub	sp, #64	; 0x40
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
  INT i = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d061      	beq.n	800979c <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096de:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 80096e0:	2300      	movs	r3, #0
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e4:	e04c      	b.n	8009780 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80096e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ea:	4951      	ldr	r1, [pc, #324]	; (8009830 <sd_write_data+0x170>)
 80096ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80096ee:	f007 fcc1 	bl	8011074 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80096f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80096f8:	637b      	str	r3, [r7, #52]	; 0x34
 80096fa:	4b4d      	ldr	r3, [pc, #308]	; (8009830 <sd_write_data+0x170>)
 80096fc:	633b      	str	r3, [r7, #48]	; 0x30
 80096fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	dd1d      	ble.n	8009746 <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	f003 021f 	and.w	r2, r3, #31
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	4413      	add	r3, r2
 8009714:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800971a:	f3bf 8f4f 	dsb	sy
}
 800971e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009720:	4a44      	ldr	r2, [pc, #272]	; (8009834 <sd_write_data+0x174>)
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	3320      	adds	r3, #32
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	3b20      	subs	r3, #32
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	2b00      	cmp	r3, #0
 8009738:	dcf2      	bgt.n	8009720 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 800973a:	f3bf 8f4f 	dsb	sy
}
 800973e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009740:	f3bf 8f6f 	isb	sy
}
 8009744:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009746:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	1c53      	adds	r3, r2, #1
 800974c:	60bb      	str	r3, [r7, #8]
 800974e:	2301      	movs	r3, #1
 8009750:	4937      	ldr	r1, [pc, #220]	; (8009830 <sd_write_data+0x170>)
 8009752:	2000      	movs	r0, #0
 8009754:	f7ff fd74 	bl	8009240 <fx_stm32_sd_write_blocks>
 8009758:	4603      	mov	r3, r0
 800975a:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8009762:	2390      	movs	r3, #144	; 0x90
 8009764:	e05f      	b.n	8009826 <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8009766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800976a:	4833      	ldr	r0, [pc, #204]	; (8009838 <sd_write_data+0x178>)
 800976c:	f00a fcaa 	bl	80140c4 <_txe_semaphore_get>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <sd_write_data+0xba>
 8009776:	2390      	movs	r3, #144	; 0x90
 8009778:	e055      	b.n	8009826 <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 800977a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977c:	3301      	adds	r3, #1
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d8ae      	bhi.n	80096e6 <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8009788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d102      	bne.n	8009796 <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8009790:	2300      	movs	r3, #0
 8009792:	63bb      	str	r3, [r7, #56]	; 0x38
 8009794:	e046      	b.n	8009824 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8009796:	2321      	movs	r3, #33	; 0x21
 8009798:	63bb      	str	r3, [r7, #56]	; 0x38
 800979a:	e043      	b.n	8009824 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	025b      	lsls	r3, r3, #9
 80097a6:	623a      	str	r2, [r7, #32]
 80097a8:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd1d      	ble.n	80097ec <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	f003 021f 	and.w	r2, r3, #31
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80097c0:	f3bf 8f4f 	dsb	sy
}
 80097c4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80097c6:	4a1b      	ldr	r2, [pc, #108]	; (8009834 <sd_write_data+0x174>)
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	3320      	adds	r3, #32
 80097d2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	3b20      	subs	r3, #32
 80097d8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dcf2      	bgt.n	80097c6 <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 80097e0:	f3bf 8f4f 	dsb	sy
}
 80097e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80097e6:	f3bf 8f6f 	isb	sy
}
 80097ea:	bf00      	nop
}
 80097ec:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	2000      	movs	r0, #0
 80097fa:	f7ff fd21 	bl	8009240 <fx_stm32_sd_write_blocks>
 80097fe:	4603      	mov	r3, r0
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8009808:	2390      	movs	r3, #144	; 0x90
 800980a:	e00c      	b.n	8009826 <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800980c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009810:	4809      	ldr	r0, [pc, #36]	; (8009838 <sd_write_data+0x178>)
 8009812:	f00a fc57 	bl	80140c4 <_txe_semaphore_get>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <sd_write_data+0x160>
 800981c:	2390      	movs	r3, #144	; 0x90
 800981e:	e002      	b.n	8009826 <sd_write_data+0x166>

    status = FX_SUCCESS;
 8009820:	2300      	movs	r3, #0
 8009822:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009826:	4618      	mov	r0, r3
 8009828:	3740      	adds	r7, #64	; 0x40
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	240033c0 	.word	0x240033c0
 8009834:	e000ed00 	.word	0xe000ed00
 8009838:	24003378 	.word	0x24003378

0800983c <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800983c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009840:	b09e      	sub	sp, #120	; 0x78
 8009842:	af04      	add	r7, sp, #16
 8009844:	61f8      	str	r0, [r7, #28]
 8009846:	61b9      	str	r1, [r7, #24]
 8009848:	617a      	str	r2, [r7, #20]
 800984a:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	015b      	lsls	r3, r3, #5
 8009868:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <_fx_directory_entry_read+0x3e>
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80a1 	beq.w	80099bc <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009882:	fb02 f303 	mul.w	r3, r2, r3
 8009886:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800988e:	2302      	movs	r3, #2
 8009890:	e355      	b.n	8009f3e <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8009892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800989c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800989e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80098a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098a6:	fb01 f202 	mul.w	r2, r1, r2
 80098aa:	1a9b      	subs	r3, r3, r2
 80098ac:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d028      	beq.n	8009912 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d01e      	beq.n	8009906 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80098cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d319      	bcc.n	8009906 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80098de:	4299      	cmp	r1, r3
 80098e0:	bf08      	it	eq
 80098e2:	4290      	cmpeq	r0, r2
 80098e4:	d10f      	bne.n	8009906 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d109      	bne.n	8009906 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fc:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2200      	movs	r2, #0
 8009902:	651a      	str	r2, [r3, #80]	; 0x50
 8009904:	e00a      	b.n	800991c <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990a:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800990c:	2300      	movs	r3, #0
 800990e:	667b      	str	r3, [r7, #100]	; 0x64
 8009910:	e024      	b.n	800995c <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009916:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 8009918:	2300      	movs	r3, #0
 800991a:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800991c:	e01e      	b.n	800995c <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800991e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009920:	2b01      	cmp	r3, #1
 8009922:	d907      	bls.n	8009934 <_fx_directory_entry_read+0xf8>
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800992a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800992e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009930:	429a      	cmp	r2, r3
 8009932:	d301      	bcc.n	8009938 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 8009934:	2308      	movs	r3, #8
 8009936:	e302      	b.n	8009f3e <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800993c:	461a      	mov	r2, r3
 800993e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009940:	69f8      	ldr	r0, [r7, #28]
 8009942:	f005 fb8d 	bl	800f060 <_fx_utility_FAT_entry_read>
 8009946:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 8009948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	e2f5      	b.n	8009f3e <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 8009956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009958:	3301      	adds	r3, #1
 800995a:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800995c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800995e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009960:	429a      	cmp	r2, r3
 8009962:	d3dc      	bcc.n	800991e <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800996a:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800996c:	69f9      	ldr	r1, [r7, #28]
 800996e:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009970:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009974:	4413      	add	r3, r2
 8009976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009978:	4413      	add	r3, r2
 800997a:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800997c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800997e:	2200      	movs	r2, #0
 8009980:	60bb      	str	r3, [r7, #8]
 8009982:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009988:	2203      	movs	r2, #3
 800998a:	9202      	str	r2, [sp, #8]
 800998c:	2201      	movs	r2, #1
 800998e:	9201      	str	r2, [sp, #4]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009996:	69f8      	ldr	r0, [r7, #28]
 8009998:	f006 ff70 	bl	801087c <_fx_utility_logical_sector_read>
 800999c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 80099a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a6:	e2ca      	b.n	8009f3e <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80099b2:	fb01 f202 	mul.w	r2, r1, r2
 80099b6:	1a9b      	subs	r3, r3, r2
 80099b8:	647b      	str	r3, [r7, #68]	; 0x44
 80099ba:	e02f      	b.n	8009a1c <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099c2:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80099ca:	4413      	add	r3, r2
 80099cc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80099ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d0:	2200      	movs	r2, #0
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80099da:	2203      	movs	r2, #3
 80099dc:	9202      	str	r2, [sp, #8]
 80099de:	2201      	movs	r2, #1
 80099e0:	9201      	str	r2, [sp, #4]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e8:	69f8      	ldr	r0, [r7, #28]
 80099ea:	f006 ff47 	bl	801087c <_fx_utility_logical_sector_read>
 80099ee:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 80099f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f8:	e2a1      	b.n	8009f3e <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	657b      	str	r3, [r7, #84]	; 0x54
 80099fe:	2300      	movs	r3, #0
 8009a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a04:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a0c:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8009a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a22:	4413      	add	r3, r2
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8009a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	4691      	mov	r9, r2
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a38:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2200      	movs	r2, #0
 8009a44:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8009a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a52:	330b      	adds	r3, #11
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	f040 8129 	bne.w	8009cae <_fx_directory_entry_read+0x472>
 8009a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2be5      	cmp	r3, #229	; 0xe5
 8009a62:	f000 8124 	beq.w	8009cae <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 8009a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	f003 021f 	and.w	r2, r3, #31
 8009a6e:	4613      	mov	r3, r2
 8009a70:	005b      	lsls	r3, r3, #1
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	3b0d      	subs	r3, #13
 8009a7a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8009a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a88:	2bfe      	cmp	r3, #254	; 0xfe
 8009a8a:	d908      	bls.n	8009a9e <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 021f 	and.w	r2, r3, #31
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	619a      	str	r2, [r3, #24]
 8009a9c:	e015      	b.n	8009aca <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8009aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa6:	330e      	adds	r3, #14
 8009aa8:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ab0:	4413      	add	r3, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8009ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ab8:	3301      	adds	r3, #1
 8009aba:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8009abc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d202      	bcs.n	8009aca <_fx_directory_entry_read+0x28e>
 8009ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ac6:	2bff      	cmp	r3, #255	; 0xff
 8009ac8:	d9ef      	bls.n	8009aaa <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 8009aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8009ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d168      	bne.n	8009bae <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009adc:	2301      	movs	r3, #1
 8009ade:	667b      	str	r3, [r7, #100]	; 0x64
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ae4:	e060      	b.n	8009ba8 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 8009ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae8:	2b0b      	cmp	r3, #11
 8009aea:	d057      	beq.n	8009b9c <_fx_directory_entry_read+0x360>
 8009aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aee:	2b1a      	cmp	r3, #26
 8009af0:	d054      	beq.n	8009b9c <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 8009af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af4:	2b0d      	cmp	r3, #13
 8009af6:	d102      	bne.n	8009afe <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 8009af8:	230c      	movs	r3, #12
 8009afa:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 8009afc:	e051      	b.n	8009ba2 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 8009afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b00:	3301      	adds	r3, #1
 8009b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b04:	4413      	add	r3, r2
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d014      	beq.n	8009b36 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8009b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b12:	4413      	add	r3, r2
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2bff      	cmp	r3, #255	; 0xff
 8009b18:	d105      	bne.n	8009b26 <_fx_directory_entry_read+0x2ea>
 8009b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b1e:	4413      	add	r3, r2
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2bff      	cmp	r3, #255	; 0xff
 8009b24:	d007      	beq.n	8009b36 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 8009b26:	2301      	movs	r3, #1
 8009b28:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b2e:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8009b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b3a:	4413      	add	r3, r2
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d02e      	beq.n	8009ba0 <_fx_directory_entry_read+0x364>
 8009b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b46:	4413      	add	r3, r2
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2bff      	cmp	r3, #255	; 0xff
 8009b4c:	d028      	beq.n	8009ba0 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8009b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b50:	4613      	mov	r3, r2
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	441a      	add	r2, r3
 8009b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b5c:	4413      	add	r3, r2
 8009b5e:	2bfe      	cmp	r3, #254	; 0xfe
 8009b60:	d908      	bls.n	8009b74 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b6a:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 8009b72:	e01c      	b.n	8009bae <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 8009b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b78:	18d1      	adds	r1, r2, r3
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b80:	4613      	mov	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	441a      	add	r2, r3
 8009b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b8c:	4413      	add	r3, r2
 8009b8e:	4403      	add	r3, r0
 8009b90:	780a      	ldrb	r2, [r1, #0]
 8009b92:	701a      	strb	r2, [r3, #0]

                    j++;
 8009b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b96:	3301      	adds	r3, #1
 8009b98:	663b      	str	r3, [r7, #96]	; 0x60
 8009b9a:	e002      	b.n	8009ba2 <_fx_directory_entry_read+0x366>
                        continue;
 8009b9c:	bf00      	nop
 8009b9e:	e000      	b.n	8009ba2 <_fx_directory_entry_read+0x366>
                        continue;
 8009ba0:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8009ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009baa:	2b1f      	cmp	r3, #31
 8009bac:	d99b      	bls.n	8009ae6 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8009bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb0:	f103 0220 	add.w	r2, r3, #32
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d365      	bcc.n	8009c88 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <_fx_directory_entry_read+0x38e>
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d038      	beq.n	8009c3c <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d206      	bcs.n	8009be4 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8009bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd8:	3301      	adds	r3, #1
 8009bda:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 8009bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bde:	3301      	adds	r3, #1
 8009be0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009be2:	e038      	b.n	8009c56 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be8:	461a      	mov	r2, r3
 8009bea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bec:	69f8      	ldr	r0, [r7, #28]
 8009bee:	f005 fa37 	bl	800f060 <_fx_utility_FAT_entry_read>
 8009bf2:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfc:	e19f      	b.n	8009f3e <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8009c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d907      	bls.n	8009c18 <_fx_directory_entry_read+0x3dc>
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009c0e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009c12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d301      	bcc.n	8009c1c <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8009c18:	2308      	movs	r3, #8
 8009c1a:	e190      	b.n	8009f3e <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 8009c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c1e:	3301      	adds	r3, #1
 8009c20:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c2c:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009c2e:	69f9      	ldr	r1, [r7, #28]
 8009c30:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009c32:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009c36:	4413      	add	r3, r2
 8009c38:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009c3a:	e00c      	b.n	8009c56 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 8009c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c3e:	3301      	adds	r3, #1
 8009c40:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4a:	4413      	add	r3, r2
 8009c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d301      	bcc.n	8009c56 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8009c52:	2308      	movs	r3, #8
 8009c54:	e173      	b.n	8009f3e <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c58:	2200      	movs	r2, #0
 8009c5a:	469a      	mov	sl, r3
 8009c5c:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009c62:	2203      	movs	r2, #3
 8009c64:	9202      	str	r2, [sp, #8]
 8009c66:	2201      	movs	r2, #1
 8009c68:	9201      	str	r2, [sp, #4]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	465b      	mov	r3, fp
 8009c70:	69f8      	ldr	r0, [r7, #28]
 8009c72:	f006 fe03 	bl	801087c <_fx_utility_logical_sector_read>
 8009c76:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c80:	e15d      	b.n	8009f3e <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	647b      	str	r3, [r7, #68]	; 0x44
 8009c86:	e002      	b.n	8009c8e <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8009c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c8a:	3320      	adds	r3, #32
 8009c8c:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c94:	4413      	add	r3, r2
 8009c96:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f47f af12 	bne.w	8009aca <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	615a      	str	r2, [r3, #20]
 8009cac:	e001      	b.n	8009cb2 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 8009cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d102      	bne.n	8009cbe <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	667b      	str	r3, [r7, #100]	; 0x64
 8009ccc:	2300      	movs	r3, #0
 8009cce:	663b      	str	r3, [r7, #96]	; 0x60
 8009cd0:	e03d      	b.n	8009d4e <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 8009cd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cd6:	4413      	add	r3, r2
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d03b      	beq.n	8009d56 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 8009cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce2:	4413      	add	r3, r2
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce8:	d101      	bne.n	8009cee <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 8009cea:	2302      	movs	r3, #2
 8009cec:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 8009cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf2:	4413      	add	r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b20      	cmp	r3, #32
 8009cf8:	d105      	bne.n	8009d06 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 8009cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d122      	bne.n	8009d46 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 8009d00:	2301      	movs	r3, #1
 8009d02:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 8009d04:	e01f      	b.n	8009d46 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 8009d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d104      	bne.n	8009d16 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 8009d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 8009d12:	2301      	movs	r3, #1
 8009d14:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 8009d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d108      	bne.n	8009d2e <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8009d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	663a      	str	r2, [r7, #96]	; 0x60
 8009d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d24:	4413      	add	r3, r2
 8009d26:	222e      	movs	r2, #46	; 0x2e
 8009d28:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8009d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d32:	441a      	add	r2, r3
 8009d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d38:	440b      	add	r3, r1
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 8009d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d40:	3301      	adds	r3, #1
 8009d42:	663b      	str	r3, [r7, #96]	; 0x60
 8009d44:	e000      	b.n	8009d48 <_fx_directory_entry_read+0x50c>
            continue;
 8009d46:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d50:	2b0a      	cmp	r3, #10
 8009d52:	d9be      	bls.n	8009cd2 <_fx_directory_entry_read+0x496>
 8009d54:	e000      	b.n	8009d58 <_fx_directory_entry_read+0x51c>
            break;
 8009d56:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00a      	beq.n	8009d76 <_fx_directory_entry_read+0x53a>
 8009d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2be5      	cmp	r3, #229	; 0xe5
 8009d66:	d106      	bne.n	8009d76 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	22e5      	movs	r2, #229	; 0xe5
 8009d6e:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8009d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8009d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d114      	bne.n	8009da8 <_fx_directory_entry_read+0x56c>
 8009d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	2b20      	cmp	r3, #32
 8009d84:	d110      	bne.n	8009da8 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009d86:	2300      	movs	r3, #0
 8009d88:	663b      	str	r3, [r7, #96]	; 0x60
 8009d8a:	e00a      	b.n	8009da2 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8009d8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d90:	441a      	add	r2, r3
 8009d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d96:	440b      	add	r3, r1
 8009d98:	7812      	ldrb	r2, [r2, #0]
 8009d9a:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d9e:	3301      	adds	r3, #1
 8009da0:	663b      	str	r3, [r7, #96]	; 0x60
 8009da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009da4:	2b0a      	cmp	r3, #10
 8009da6:	d9f1      	bls.n	8009d8c <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8009da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dac:	4413      	add	r3, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8009db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db4:	330b      	adds	r3, #11
 8009db6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8009db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8009dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	643a      	str	r2, [r7, #64]	; 0x40
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8009dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d02a      	beq.n	8009e2c <_fx_directory_entry_read+0x5f0>
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	7f5b      	ldrb	r3, [r3, #29]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d024      	beq.n	8009e2c <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009de2:	2300      	movs	r3, #0
 8009de4:	663b      	str	r3, [r7, #96]	; 0x60
 8009de6:	e018      	b.n	8009e1a <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8009de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dec:	4413      	add	r3, r2
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b40      	cmp	r3, #64	; 0x40
 8009df2:	d90f      	bls.n	8009e14 <_fx_directory_entry_read+0x5d8>
 8009df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009df8:	4413      	add	r3, r2
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b5a      	cmp	r3, #90	; 0x5a
 8009dfe:	d809      	bhi.n	8009e14 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8009e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e04:	4413      	add	r3, r2
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3220      	adds	r2, #32
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e16:	3301      	adds	r3, #1
 8009e18:	663b      	str	r3, [r7, #96]	; 0x60
 8009e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e1c:	2b0b      	cmp	r3, #11
 8009e1e:	d805      	bhi.n	8009e2c <_fx_directory_entry_read+0x5f0>
 8009e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e24:	4413      	add	r3, r2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1dd      	bne.n	8009de8 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8009e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	643a      	str	r2, [r7, #64]	; 0x40
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009e38:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e3a:	f005 f8ab 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e46:	3302      	adds	r3, #2
 8009e48:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e4c:	f005 f8a2 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009e50:	4602      	mov	r2, r0
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e58:	3302      	adds	r3, #2
 8009e5a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e5e:	f005 f899 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009e62:	4602      	mov	r2, r0
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6a:	3302      	adds	r3, #2
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8009e76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e78:	f005 f88c 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e86:	041a      	lsls	r2, r3, #16
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	635a      	str	r2, [r3, #52]	; 0x34
 8009e8c:	e002      	b.n	8009e94 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2200      	movs	r2, #0
 8009e92:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e96:	3302      	adds	r3, #2
 8009e98:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009e9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e9c:	f005 f87a 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009eac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009eae:	f005 f871 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eba:	3302      	adds	r3, #2
 8009ebc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8009ebe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ec0:	f005 f868 	bl	800ef94 <_fx_utility_16_unsigned_read>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eca:	441a      	add	r2, r3
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8009ed6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ed8:	f005 f884 	bl	800efe4 <_fx_utility_32_unsigned_read>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	461c      	mov	r4, r3
 8009ee2:	4615      	mov	r5, r2
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	2200      	movs	r2, #0
 8009eee:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8009ef6:	6939      	ldr	r1, [r7, #16]
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2200      	movs	r2, #0
 8009f08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f14:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00f      	beq.n	8009f3c <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f20:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009f2e:	69b9      	ldr	r1, [r7, #24]
 8009f30:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3768      	adds	r7, #104	; 0x68
 8009f42:	46bd      	mov	sp, r7
 8009f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f48 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8009f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f4c:	b0a2      	sub	sp, #136	; 0x88
 8009f4e:	af04      	add	r7, sp, #16
 8009f50:	6178      	str	r0, [r7, #20]
 8009f52:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2be5      	cmp	r3, #229	; 0xe5
 8009f6a:	d109      	bne.n	8009f80 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009f70:	2be5      	cmp	r3, #229	; 0xe5
 8009f72:	d105      	bne.n	8009f80 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8009f74:	2301      	movs	r3, #1
 8009f76:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	711a      	strb	r2, [r3, #4]
 8009f7e:	e001      	b.n	8009f84 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009f90:	4613      	mov	r3, r2
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d316      	bcc.n	8009fcc <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fa4:	1ad2      	subs	r2, r2, r3
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	3302      	adds	r3, #2
 8009fb0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 8009fba:	6979      	ldr	r1, [r7, #20]
 8009fbc:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009fbe:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009fc2:	4413      	add	r3, r2
 8009fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fca:	e003      	b.n	8009fd4 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009fde:	2303      	movs	r3, #3
 8009fe0:	9302      	str	r3, [sp, #8]
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	9200      	str	r2, [sp, #0]
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	6978      	ldr	r0, [r7, #20]
 8009fee:	f006 fc45 	bl	801087c <_fx_utility_logical_sector_read>
 8009ff2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	f000 bdda 	b.w	800abb4 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a00a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a00c:	4413      	add	r3, r2
 800a00e:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 83cc 	beq.w	800a7b2 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a01a:	2300      	movs	r3, #0
 800a01c:	653b      	str	r3, [r7, #80]	; 0x50
 800a01e:	2300      	movs	r3, #0
 800a020:	667b      	str	r3, [r7, #100]	; 0x64
 800a022:	2300      	movs	r3, #0
 800a024:	64bb      	str	r3, [r7, #72]	; 0x48
 800a026:	2300      	movs	r3, #0
 800a028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a02a:	e02c      	b.n	800a086 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a032:	4413      	add	r3, r2
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b2e      	cmp	r3, #46	; 0x2e
 800a038:	d108      	bne.n	800a04c <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800a03a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d01e      	beq.n	800a07e <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800a040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a042:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800a044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a046:	3301      	adds	r3, #1
 800a048:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800a04a:	e019      	b.n	800a080 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a052:	4413      	add	r3, r2
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b20      	cmp	r3, #32
 800a058:	d012      	beq.n	800a080 <_fx_directory_entry_write+0x138>
 800a05a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a05c:	2b07      	cmp	r3, #7
 800a05e:	d80f      	bhi.n	800a080 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a066:	4413      	add	r3, r2
 800a068:	7819      	ldrb	r1, [r3, #0]
 800a06a:	f107 021c 	add.w	r2, r7, #28
 800a06e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a070:	4413      	add	r3, r2
 800a072:	460a      	mov	r2, r1
 800a074:	701a      	strb	r2, [r3, #0]
                i++;
 800a076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a078:	3301      	adds	r3, #1
 800a07a:	667b      	str	r3, [r7, #100]	; 0x64
 800a07c:	e000      	b.n	800a080 <_fx_directory_entry_write+0x138>
                    continue;
 800a07e:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a082:	3301      	adds	r3, #1
 800a084:	653b      	str	r3, [r7, #80]	; 0x50
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a08c:	4413      	add	r3, r2
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1cb      	bne.n	800a02c <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a096:	663b      	str	r3, [r7, #96]	; 0x60
 800a098:	e008      	b.n	800a0ac <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800a09a:	f107 021c 	add.w	r2, r7, #28
 800a09e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a0:	4413      	add	r3, r2
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	663b      	str	r3, [r7, #96]	; 0x60
 800a0ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	d9f3      	bls.n	800a09a <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800a0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d03e      	beq.n	800a136 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0be:	4413      	add	r3, r2
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d008      	beq.n	800a0d8 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0cc:	1c59      	adds	r1, r3, #1
 800a0ce:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0d0:	4413      	add	r3, r2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0de:	4413      	add	r3, r2
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d008      	beq.n	800a0f8 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ec:	1c59      	adds	r1, r3, #1
 800a0ee:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0f0:	4413      	add	r3, r2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0fe:	4413      	add	r3, r2
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d008      	beq.n	800a118 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a10c:	1c59      	adds	r1, r3, #1
 800a10e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a110:	4413      	add	r3, r2
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800a118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11a:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800a11c:	e008      	b.n	800a130 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800a11e:	f107 021c 	add.w	r2, r7, #28
 800a122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a124:	4413      	add	r3, r2
 800a126:	2220      	movs	r2, #32
 800a128:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800a12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12c:	3301      	adds	r3, #1
 800a12e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a132:	2b07      	cmp	r3, #7
 800a134:	d9f3      	bls.n	800a11e <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800a136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a138:	4b8e      	ldr	r3, [pc, #568]	; (800a374 <_fx_directory_entry_write+0x42c>)
 800a13a:	fba3 2301 	umull	r2, r3, r3, r1
 800a13e:	089a      	lsrs	r2, r3, #2
 800a140:	4613      	mov	r3, r2
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	1aca      	subs	r2, r1, r3
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d106      	bne.n	800a15e <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800a150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a152:	4a88      	ldr	r2, [pc, #544]	; (800a374 <_fx_directory_entry_write+0x42c>)
 800a154:	fba2 2303 	umull	r2, r3, r2, r3
 800a158:	089b      	lsrs	r3, r3, #2
 800a15a:	657b      	str	r3, [r7, #84]	; 0x54
 800a15c:	e006      	b.n	800a16c <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800a15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a160:	4a84      	ldr	r2, [pc, #528]	; (800a374 <_fx_directory_entry_write+0x42c>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	089b      	lsrs	r3, r3, #2
 800a168:	3301      	adds	r3, #1
 800a16a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800a16c:	2301      	movs	r3, #1
 800a16e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800a170:	2300      	movs	r3, #0
 800a172:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800a174:	2300      	movs	r3, #0
 800a176:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a178:	e03f      	b.n	800a1fa <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800a17a:	f107 021c 	add.w	r2, r7, #28
 800a17e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a180:	4413      	add	r3, r2
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b20      	cmp	r3, #32
 800a186:	d116      	bne.n	800a1b6 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a18e:	4413      	add	r3, r2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d035      	beq.n	800a202 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a19c:	4413      	add	r3, r2
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a1a2:	d002      	beq.n	800a1aa <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a1a8:	e02c      	b.n	800a204 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800a1ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800a1b4:	e021      	b.n	800a1fa <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800a1b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d109      	bne.n	800a1d0 <_fx_directory_entry_write+0x288>
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1c2:	4413      	add	r3, r2
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c8:	d102      	bne.n	800a1d0 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800a1ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800a1d0:	f107 021c 	add.w	r2, r7, #28
 800a1d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1d6:	4413      	add	r3, r2
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	6819      	ldr	r1, [r3, #0]
 800a1de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1e0:	440b      	add	r3, r1
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d002      	beq.n	800a1ee <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800a1ec:	e00a      	b.n	800a204 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800a1ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800a1f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fc:	2b0a      	cmp	r3, #10
 800a1fe:	d9bc      	bls.n	800a17a <_fx_directory_entry_write+0x232>
 800a200:	e000      	b.n	800a204 <_fx_directory_entry_write+0x2bc>
                    break;
 800a202:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800a204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <_fx_directory_entry_write+0x2ce>
 800a20a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a20e:	2b20      	cmp	r3, #32
 800a210:	d101      	bne.n	800a216 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a212:	2300      	movs	r3, #0
 800a214:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a21c:	4413      	add	r3, r2
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a224:	2300      	movs	r3, #0
 800a226:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800a228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d15a      	bne.n	800a2e4 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a232:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	b29b      	uxth	r3, r3
 800a238:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800a23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d901      	bls.n	800a244 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800a240:	2303      	movs	r3, #3
 800a242:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800a244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	667a      	str	r2, [r7, #100]	; 0x64
 800a24a:	3368      	adds	r3, #104	; 0x68
 800a24c:	f107 0210 	add.w	r2, r7, #16
 800a250:	4413      	add	r3, r2
 800a252:	227e      	movs	r2, #126	; 0x7e
 800a254:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800a258:	2300      	movs	r3, #0
 800a25a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a25c:	e03f      	b.n	800a2de <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800a25e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	0b1b      	lsrs	r3, r3, #12
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a26e:	e015      	b.n	800a29c <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800a270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a272:	2b01      	cmp	r3, #1
 800a274:	d105      	bne.n	800a282 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	0a1b      	lsrs	r3, r3, #8
 800a27a:	f003 030f 	and.w	r3, r3, #15
 800a27e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a280:	e00c      	b.n	800a29c <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800a282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a284:	2b02      	cmp	r3, #2
 800a286:	d105      	bne.n	800a294 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	091b      	lsrs	r3, r3, #4
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a292:	e003      	b.n	800a29c <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800a29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d90d      	bls.n	800a2be <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800a2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2a8:	1c59      	adds	r1, r3, #1
 800a2aa:	6679      	str	r1, [r7, #100]	; 0x64
 800a2ac:	3237      	adds	r2, #55	; 0x37
 800a2ae:	b2d2      	uxtb	r2, r2
 800a2b0:	3368      	adds	r3, #104	; 0x68
 800a2b2:	f107 0110 	add.w	r1, r7, #16
 800a2b6:	440b      	add	r3, r1
 800a2b8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800a2bc:	e00c      	b.n	800a2d8 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800a2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2c4:	1c59      	adds	r1, r3, #1
 800a2c6:	6679      	str	r1, [r7, #100]	; 0x64
 800a2c8:	3230      	adds	r2, #48	; 0x30
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	3368      	adds	r3, #104	; 0x68
 800a2ce:	f107 0110 	add.w	r1, r7, #16
 800a2d2:	440b      	add	r3, r1
 800a2d4:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800a2d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2da:	3301      	adds	r3, #1
 800a2dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d9bc      	bls.n	800a25e <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800a2ea:	7f3b      	ldrb	r3, [r7, #28]
 800a2ec:	2be5      	cmp	r3, #229	; 0xe5
 800a2ee:	d104      	bne.n	800a2fa <_fx_directory_entry_write+0x3b2>
 800a2f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800a2f6:	238f      	movs	r3, #143	; 0x8f
 800a2f8:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	667b      	str	r3, [r7, #100]	; 0x64
 800a2fe:	e01d      	b.n	800a33c <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800a300:	f107 021c 	add.w	r2, r7, #28
 800a304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a306:	4413      	add	r3, r2
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800a30e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a312:	2b60      	cmp	r3, #96	; 0x60
 800a314:	d908      	bls.n	800a328 <_fx_directory_entry_write+0x3e0>
 800a316:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a31a:	2b7a      	cmp	r3, #122	; 0x7a
 800a31c:	d804      	bhi.n	800a328 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a31e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a322:	3b20      	subs	r3, #32
 800a324:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800a328:	f107 021c 	add.w	r2, r7, #28
 800a32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a32e:	4413      	add	r3, r2
 800a330:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a334:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a338:	3301      	adds	r3, #1
 800a33a:	667b      	str	r3, [r7, #100]	; 0x64
 800a33c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a33e:	2b0a      	cmp	r3, #10
 800a340:	d9de      	bls.n	800a300 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	791b      	ldrb	r3, [r3, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 8095 	beq.w	800a476 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a34c:	2300      	movs	r3, #0
 800a34e:	667b      	str	r3, [r7, #100]	; 0x64
 800a350:	e008      	b.n	800a364 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800a352:	f107 021c 	add.w	r2, r7, #28
 800a356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a358:	4413      	add	r3, r2
 800a35a:	2220      	movs	r2, #32
 800a35c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a35e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a360:	3301      	adds	r3, #1
 800a362:	667b      	str	r3, [r7, #100]	; 0x64
 800a364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a366:	2b0a      	cmp	r3, #10
 800a368:	d9f3      	bls.n	800a352 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a36a:	2300      	movs	r3, #0
 800a36c:	667b      	str	r3, [r7, #100]	; 0x64
 800a36e:	2300      	movs	r3, #0
 800a370:	663b      	str	r3, [r7, #96]	; 0x60
 800a372:	e023      	b.n	800a3bc <_fx_directory_entry_write+0x474>
 800a374:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a37c:	4413      	add	r3, r2
 800a37e:	3304      	adds	r3, #4
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b2e      	cmp	r3, #46	; 0x2e
 800a384:	d01e      	beq.n	800a3c4 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a38a:	4413      	add	r3, r2
 800a38c:	3304      	adds	r3, #4
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d019      	beq.n	800a3c8 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a398:	4413      	add	r3, r2
 800a39a:	3304      	adds	r3, #4
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a3a2:	f107 021c 	add.w	r2, r7, #28
 800a3a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a3ae:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	667b      	str	r3, [r7, #100]	; 0x64
 800a3b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	663b      	str	r3, [r7, #96]	; 0x60
 800a3bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3be:	2b07      	cmp	r3, #7
 800a3c0:	d9da      	bls.n	800a378 <_fx_directory_entry_write+0x430>
 800a3c2:	e002      	b.n	800a3ca <_fx_directory_entry_write+0x482>
                    break;
 800a3c4:	bf00      	nop
 800a3c6:	e000      	b.n	800a3ca <_fx_directory_entry_write+0x482>
                    break;
 800a3c8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d025      	beq.n	800a424 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3da:	3301      	adds	r3, #1
 800a3dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a3de:	2308      	movs	r3, #8
 800a3e0:	663b      	str	r3, [r7, #96]	; 0x60
 800a3e2:	e01a      	b.n	800a41a <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e8:	4413      	add	r3, r2
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d017      	beq.n	800a422 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f6:	4413      	add	r3, r2
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800a400:	f107 021c 	add.w	r2, r7, #28
 800a404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a406:	4413      	add	r3, r2
 800a408:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a40c:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a40e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a410:	3301      	adds	r3, #1
 800a412:	667b      	str	r3, [r7, #100]	; 0x64
 800a414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a416:	3301      	adds	r3, #1
 800a418:	663b      	str	r3, [r7, #96]	; 0x60
 800a41a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a41c:	2b0a      	cmp	r3, #10
 800a41e:	d9e1      	bls.n	800a3e4 <_fx_directory_entry_write+0x49c>
 800a420:	e000      	b.n	800a424 <_fx_directory_entry_write+0x4dc>
                        break;
 800a422:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a424:	2300      	movs	r3, #0
 800a426:	663b      	str	r3, [r7, #96]	; 0x60
 800a428:	e01d      	b.n	800a466 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800a42a:	f107 021c 	add.w	r2, r7, #28
 800a42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a430:	4413      	add	r3, r2
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a438:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a43c:	2b60      	cmp	r3, #96	; 0x60
 800a43e:	d908      	bls.n	800a452 <_fx_directory_entry_write+0x50a>
 800a440:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a444:	2b7a      	cmp	r3, #122	; 0x7a
 800a446:	d804      	bhi.n	800a452 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a448:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a44c:	3b20      	subs	r3, #32
 800a44e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a452:	f107 021c 	add.w	r2, r7, #28
 800a456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a458:	4413      	add	r3, r2
 800a45a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a45e:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a462:	3301      	adds	r3, #1
 800a464:	663b      	str	r3, [r7, #96]	; 0x60
 800a466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a468:	2b0a      	cmp	r3, #10
 800a46a:	d9de      	bls.n	800a42a <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800a46c:	7f3b      	ldrb	r3, [r7, #28]
 800a46e:	2be5      	cmp	r3, #229	; 0xe5
 800a470:	d101      	bne.n	800a476 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800a472:	238f      	movs	r3, #143	; 0x8f
 800a474:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a476:	2300      	movs	r3, #0
 800a478:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47c:	2300      	movs	r3, #0
 800a47e:	667b      	str	r3, [r7, #100]	; 0x64
 800a480:	e016      	b.n	800a4b0 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800a482:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a486:	01db      	lsls	r3, r3, #7
 800a488:	b25a      	sxtb	r2, r3
 800a48a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	b2db      	uxtb	r3, r3
 800a492:	b25b      	sxtb	r3, r3
 800a494:	4313      	orrs	r3, r2
 800a496:	b25b      	sxtb	r3, r3
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	f107 011c 	add.w	r1, r7, #28
 800a49e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a0:	440b      	add	r3, r1
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a4aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	667b      	str	r3, [r7, #100]	; 0x64
 800a4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b2:	2b0a      	cmp	r3, #10
 800a4b4:	d9e5      	bls.n	800a482 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800a4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4c2:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800a4c4:	e0f3      	b.n	800a6ae <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a4cc:	7f3b      	ldrb	r3, [r7, #28]
 800a4ce:	2be5      	cmp	r3, #229	; 0xe5
 800a4d0:	d102      	bne.n	800a4d8 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4d4:	22e5      	movs	r2, #229	; 0xe5
 800a4d6:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800a4d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4da:	330b      	adds	r3, #11
 800a4dc:	220f      	movs	r2, #15
 800a4de:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800a4e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800a4e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ea:	330d      	adds	r3, #13
 800a4ec:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a4f0:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800a4f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f4:	331a      	adds	r3, #26
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800a4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4fc:	331b      	adds	r3, #27
 800a4fe:	2200      	movs	r2, #0
 800a500:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a502:	2301      	movs	r3, #1
 800a504:	667b      	str	r3, [r7, #100]	; 0x64
 800a506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a508:	4613      	mov	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	3b0d      	subs	r3, #13
 800a514:	663b      	str	r3, [r7, #96]	; 0x60
 800a516:	e03e      	b.n	800a596 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800a518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a51a:	2b0b      	cmp	r3, #11
 800a51c:	d037      	beq.n	800a58e <_fx_directory_entry_write+0x646>
 800a51e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a520:	2b1a      	cmp	r3, #26
 800a522:	d034      	beq.n	800a58e <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800a524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a526:	2b0d      	cmp	r3, #13
 800a528:	d102      	bne.n	800a530 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800a52a:	230c      	movs	r3, #12
 800a52c:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800a52e:	e02f      	b.n	800a590 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800a530:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00d      	beq.n	800a554 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800a538:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a53a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a53c:	4413      	add	r3, r2
 800a53e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a542:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800a544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a546:	3301      	adds	r3, #1
 800a548:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a54a:	4413      	add	r3, r2
 800a54c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	e00e      	b.n	800a572 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a55a:	441a      	add	r2, r3
 800a55c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a55e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a560:	440b      	add	r3, r1
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800a566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a568:	3301      	adds	r3, #1
 800a56a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a56c:	4413      	add	r3, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a578:	4413      	add	r3, r2
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800a580:	23ff      	movs	r3, #255	; 0xff
 800a582:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800a586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a588:	3301      	adds	r3, #1
 800a58a:	663b      	str	r3, [r7, #96]	; 0x60
 800a58c:	e000      	b.n	800a590 <_fx_directory_entry_write+0x648>
                    continue;
 800a58e:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a592:	3302      	adds	r3, #2
 800a594:	667b      	str	r3, [r7, #100]	; 0x64
 800a596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a598:	2b1f      	cmp	r3, #31
 800a59a:	d9bd      	bls.n	800a518 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800a59c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a59e:	3320      	adds	r3, #32
 800a5a0:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a4:	3320      	adds	r3, #32
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d376      	bcc.n	800a6a0 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	60bb      	str	r3, [r7, #8]
 800a5b8:	60fa      	str	r2, [r7, #12]
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	9302      	str	r3, [sp, #8]
 800a5be:	2301      	movs	r3, #1
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5ca:	6978      	ldr	r0, [r7, #20]
 800a5cc:	f006 fbea 	bl	8010da4 <_fx_utility_logical_sector_write>
 800a5d0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	e2eb      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d335      	bcc.n	800a652 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d206      	bcs.n	800a600 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5fe:	e032      	b.n	800a666 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a600:	f107 0318 	add.w	r3, r7, #24
 800a604:	461a      	mov	r2, r3
 800a606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a608:	6978      	ldr	r0, [r7, #20]
 800a60a:	f004 fd29 	bl	800f060 <_fx_utility_FAT_entry_read>
 800a60e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	e2cc      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2b01      	cmp	r3, #1
 800a622:	d907      	bls.n	800a634 <_fx_directory_entry_write+0x6ec>
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a62a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a630:	429a      	cmp	r2, r3
 800a632:	d301      	bcc.n	800a638 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a634:	2308      	movs	r3, #8
 800a636:	e2bd      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a644:	6979      	ldr	r1, [r7, #20]
 800a646:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a648:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a64c:	4413      	add	r3, r2
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a650:	e009      	b.n	800a666 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800a652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a654:	3301      	adds	r3, #1
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a65e:	429a      	cmp	r2, r3
 800a660:	d301      	bcc.n	800a666 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a662:	2308      	movs	r3, #8
 800a664:	e2a6      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a668:	2200      	movs	r2, #0
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a672:	2203      	movs	r2, #3
 800a674:	9202      	str	r2, [sp, #8]
 800a676:	2201      	movs	r2, #1
 800a678:	9201      	str	r2, [sp, #4]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a680:	6978      	ldr	r0, [r7, #20]
 800a682:	f006 f8fb 	bl	801087c <_fx_utility_logical_sector_read>
 800a686:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	e290      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800a69c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a69e:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800a6a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800a6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6ac:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800a6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f47f af08 	bne.w	800a4c6 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	791b      	ldrb	r3, [r3, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d116      	bne.n	800a6ec <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a6be:	2300      	movs	r3, #0
 800a6c0:	667b      	str	r3, [r7, #100]	; 0x64
 800a6c2:	e00f      	b.n	800a6e4 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800a6c4:	f107 021c 	add.w	r2, r7, #28
 800a6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ca:	4413      	add	r3, r2
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800a6d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	677a      	str	r2, [r7, #116]	; 0x74
 800a6d8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a6dc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a6de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	667b      	str	r3, [r7, #100]	; 0x64
 800a6e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e6:	2b0a      	cmp	r3, #10
 800a6e8:	d9ec      	bls.n	800a6c4 <_fx_directory_entry_write+0x77c>
 800a6ea:	e1a5      	b.n	800aa38 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a6f0:	e007      	b.n	800a702 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800a6f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f6:	4413      	add	r3, r2
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a6fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6fe:	3301      	adds	r3, #1
 800a700:	667b      	str	r3, [r7, #100]	; 0x64
 800a702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a704:	2b0a      	cmp	r3, #10
 800a706:	d9f4      	bls.n	800a6f2 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a708:	2300      	movs	r3, #0
 800a70a:	667b      	str	r3, [r7, #100]	; 0x64
 800a70c:	2300      	movs	r3, #0
 800a70e:	663b      	str	r3, [r7, #96]	; 0x60
 800a710:	e01c      	b.n	800a74c <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a716:	4413      	add	r3, r2
 800a718:	3304      	adds	r3, #4
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b2e      	cmp	r3, #46	; 0x2e
 800a71e:	d019      	beq.n	800a754 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a724:	4413      	add	r3, r2
 800a726:	3304      	adds	r3, #4
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d014      	beq.n	800a758 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a72e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a732:	4413      	add	r3, r2
 800a734:	6939      	ldr	r1, [r7, #16]
 800a736:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a738:	440a      	add	r2, r1
 800a73a:	3204      	adds	r2, #4
 800a73c:	7812      	ldrb	r2, [r2, #0]
 800a73e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a742:	3301      	adds	r3, #1
 800a744:	667b      	str	r3, [r7, #100]	; 0x64
 800a746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a748:	3301      	adds	r3, #1
 800a74a:	663b      	str	r3, [r7, #96]	; 0x60
 800a74c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a74e:	2b07      	cmp	r3, #7
 800a750:	d9df      	bls.n	800a712 <_fx_directory_entry_write+0x7ca>
 800a752:	e002      	b.n	800a75a <_fx_directory_entry_write+0x812>
                    break;
 800a754:	bf00      	nop
 800a756:	e000      	b.n	800a75a <_fx_directory_entry_write+0x812>
                    break;
 800a758:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a75e:	4413      	add	r3, r2
 800a760:	3304      	adds	r3, #4
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d020      	beq.n	800a7aa <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a76a:	3301      	adds	r3, #1
 800a76c:	667b      	str	r3, [r7, #100]	; 0x64
 800a76e:	2308      	movs	r3, #8
 800a770:	663b      	str	r3, [r7, #96]	; 0x60
 800a772:	e015      	b.n	800a7a0 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a778:	4413      	add	r3, r2
 800a77a:	3304      	adds	r3, #4
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d012      	beq.n	800a7a8 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a782:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a786:	4413      	add	r3, r2
 800a788:	6939      	ldr	r1, [r7, #16]
 800a78a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a78c:	440a      	add	r2, r1
 800a78e:	3204      	adds	r2, #4
 800a790:	7812      	ldrb	r2, [r2, #0]
 800a792:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a796:	3301      	adds	r3, #1
 800a798:	667b      	str	r3, [r7, #100]	; 0x64
 800a79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a79c:	3301      	adds	r3, #1
 800a79e:	663b      	str	r3, [r7, #96]	; 0x60
 800a7a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7a2:	2b0a      	cmp	r3, #10
 800a7a4:	d9e6      	bls.n	800a774 <_fx_directory_entry_write+0x82c>
 800a7a6:	e000      	b.n	800a7aa <_fx_directory_entry_write+0x862>
                        break;
 800a7a8:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a7aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7ac:	330b      	adds	r3, #11
 800a7ae:	677b      	str	r3, [r7, #116]	; 0x74
 800a7b0:	e142      	b.n	800aa38 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 80a1 	beq.w	800a8fe <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	f040 8096 	bne.w	800a8fe <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a7d6:	e08c      	b.n	800a8f2 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2be5      	cmp	r3, #229	; 0xe5
 800a7e0:	d102      	bne.n	800a7e8 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a7e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7e4:	22e5      	movs	r2, #229	; 0xe5
 800a7e6:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800a7e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7ea:	3320      	adds	r3, #32
 800a7ec:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f0:	3320      	adds	r3, #32
 800a7f2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d376      	bcc.n	800a8ec <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a800:	2200      	movs	r2, #0
 800a802:	4698      	mov	r8, r3
 800a804:	4691      	mov	r9, r2
 800a806:	2303      	movs	r3, #3
 800a808:	9302      	str	r3, [sp, #8]
 800a80a:	2301      	movs	r3, #1
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	4642      	mov	r2, r8
 800a814:	464b      	mov	r3, r9
 800a816:	6978      	ldr	r0, [r7, #20]
 800a818:	f006 fac4 	bl	8010da4 <_fx_utility_logical_sector_write>
 800a81c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800a824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a826:	e1c5      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a82c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a82e:	429a      	cmp	r2, r3
 800a830:	d335      	bcc.n	800a89e <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a836:	3b01      	subs	r3, #1
 800a838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d206      	bcs.n	800a84c <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800a83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a840:	3301      	adds	r3, #1
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	3301      	adds	r3, #1
 800a848:	63bb      	str	r3, [r7, #56]	; 0x38
 800a84a:	e032      	b.n	800a8b2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a84c:	f107 0318 	add.w	r3, r7, #24
 800a850:	461a      	mov	r2, r3
 800a852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a854:	6978      	ldr	r0, [r7, #20]
 800a856:	f004 fc03 	bl	800f060 <_fx_utility_FAT_entry_read>
 800a85a:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a864:	e1a6      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d907      	bls.n	800a880 <_fx_directory_entry_write+0x938>
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a876:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d301      	bcc.n	800a884 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800a880:	2308      	movs	r3, #8
 800a882:	e197      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800a884:	2300      	movs	r3, #0
 800a886:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a890:	6979      	ldr	r1, [r7, #20]
 800a892:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a894:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a898:	4413      	add	r3, r2
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a89c:	e009      	b.n	800a8b2 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800a89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d301      	bcc.n	800a8b2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800a8ae:	2308      	movs	r3, #8
 800a8b0:	e180      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	469a      	mov	sl, r3
 800a8b8:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a8be:	2203      	movs	r2, #3
 800a8c0:	9202      	str	r2, [sp, #8]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	9201      	str	r2, [sp, #4]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4652      	mov	r2, sl
 800a8ca:	465b      	mov	r3, fp
 800a8cc:	6978      	ldr	r0, [r7, #20]
 800a8ce:	f005 ffd5 	bl	801087c <_fx_utility_logical_sector_read>
 800a8d2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	e16a      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800a8e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8ea:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a8ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	663b      	str	r3, [r7, #96]	; 0x60
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	f4ff af6d 	bcc.w	800a7d8 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8fe:	2300      	movs	r3, #0
 800a900:	663b      	str	r3, [r7, #96]	; 0x60
 800a902:	e007      	b.n	800a914 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800a904:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a908:	4413      	add	r3, r2
 800a90a:	2220      	movs	r2, #32
 800a90c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a90e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a910:	3301      	adds	r3, #1
 800a912:	663b      	str	r3, [r7, #96]	; 0x60
 800a914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a916:	2b0a      	cmp	r3, #10
 800a918:	d9f4      	bls.n	800a904 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	667b      	str	r3, [r7, #100]	; 0x64
 800a91e:	e007      	b.n	800a930 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800a920:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a924:	4413      	add	r3, r2
 800a926:	222e      	movs	r2, #46	; 0x2e
 800a928:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a92a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a92c:	3301      	adds	r3, #1
 800a92e:	667b      	str	r3, [r7, #100]	; 0x64
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a936:	4413      	add	r3, r2
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	2b2e      	cmp	r3, #46	; 0x2e
 800a93c:	d0f0      	beq.n	800a920 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a944:	4413      	add	r3, r2
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d039      	beq.n	800a9c0 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a94c:	2300      	movs	r3, #0
 800a94e:	667b      	str	r3, [r7, #100]	; 0x64
 800a950:	2300      	movs	r3, #0
 800a952:	663b      	str	r3, [r7, #96]	; 0x60
 800a954:	e02d      	b.n	800a9b2 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a95c:	4413      	add	r3, r2
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b2e      	cmp	r3, #46	; 0x2e
 800a962:	d02a      	beq.n	800a9ba <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a96a:	4413      	add	r3, r2
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d025      	beq.n	800a9be <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a978:	4413      	add	r3, r2
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a980:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a984:	2b60      	cmp	r3, #96	; 0x60
 800a986:	d908      	bls.n	800a99a <_fx_directory_entry_write+0xa52>
 800a988:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a98c:	2b7a      	cmp	r3, #122	; 0x7a
 800a98e:	d804      	bhi.n	800a99a <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a990:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a994:	3b20      	subs	r3, #32
 800a996:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a99a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a99e:	4413      	add	r3, r2
 800a9a0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a9a4:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a9a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a9b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	d9ce      	bls.n	800a956 <_fx_directory_entry_write+0xa0e>
 800a9b8:	e002      	b.n	800a9c0 <_fx_directory_entry_write+0xa78>
                    break;
 800a9ba:	bf00      	nop
 800a9bc:	e000      	b.n	800a9c0 <_fx_directory_entry_write+0xa78>
                    break;
 800a9be:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9c6:	4413      	add	r3, r2
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d031      	beq.n	800aa32 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a9ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	667b      	str	r3, [r7, #100]	; 0x64
 800a9d4:	2308      	movs	r3, #8
 800a9d6:	663b      	str	r3, [r7, #96]	; 0x60
 800a9d8:	e026      	b.n	800aa28 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e0:	4413      	add	r3, r2
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d023      	beq.n	800aa30 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ee:	4413      	add	r3, r2
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a9f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9fa:	2b60      	cmp	r3, #96	; 0x60
 800a9fc:	d908      	bls.n	800aa10 <_fx_directory_entry_write+0xac8>
 800a9fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa02:	2b7a      	cmp	r3, #122	; 0x7a
 800aa04:	d804      	bhi.n	800aa10 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800aa06:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa0a:	3b20      	subs	r3, #32
 800aa0c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800aa10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aa12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa14:	4413      	add	r3, r2
 800aa16:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aa1a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800aa1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa1e:	3301      	adds	r3, #1
 800aa20:	667b      	str	r3, [r7, #100]	; 0x64
 800aa22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa24:	3301      	adds	r3, #1
 800aa26:	663b      	str	r3, [r7, #96]	; 0x60
 800aa28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa2a:	2b0a      	cmp	r3, #10
 800aa2c:	d9d5      	bls.n	800a9da <_fx_directory_entry_write+0xa92>
 800aa2e:	e000      	b.n	800aa32 <_fx_directory_entry_write+0xaea>
                    break;
 800aa30:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800aa32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa34:	330b      	adds	r3, #11
 800aa36:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800aa38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	677a      	str	r2, [r7, #116]	; 0x74
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	7f12      	ldrb	r2, [r2, #28]
 800aa42:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800aa44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	677a      	str	r2, [r7, #116]	; 0x74
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	7f52      	ldrb	r2, [r2, #29]
 800aa4e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800aa50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	677a      	str	r2, [r7, #116]	; 0x74
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	7f92      	ldrb	r2, [r2, #30]
 800aa5a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa64:	f004 faa9 	bl	800efba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa6a:	3302      	adds	r3, #2
 800aa6c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	4619      	mov	r1, r3
 800aa74:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa76:	f004 faa0 	bl	800efba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa7c:	3302      	adds	r3, #2
 800aa7e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa84:	4619      	mov	r1, r3
 800aa86:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa88:	f004 fa97 	bl	800efba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa8e:	3302      	adds	r3, #2
 800aa90:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d008      	beq.n	800aaac <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9e:	0c1b      	lsrs	r3, r3, #16
 800aaa0:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800aaa2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aaa4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aaa6:	f004 fa88 	bl	800efba <_fx_utility_16_unsigned_write>
 800aaaa:	e003      	b.n	800aab4 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800aaac:	2100      	movs	r1, #0
 800aaae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aab0:	f004 fa83 	bl	800efba <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aab6:	3302      	adds	r3, #2
 800aab8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabe:	4619      	mov	r1, r3
 800aac0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aac2:	f004 fa7a 	bl	800efba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aac8:	3302      	adds	r3, #2
 800aaca:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad0:	4619      	mov	r1, r3
 800aad2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aad4:	f004 fa71 	bl	800efba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aada:	3302      	adds	r3, #2
 800aadc:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae2:	4619      	mov	r1, r3
 800aae4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aae6:	f004 fa68 	bl	800efba <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aaea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaec:	3302      	adds	r3, #2
 800aaee:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aafc:	f004 fa8f 	bl	800f01e <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800ab00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab02:	2200      	movs	r2, #0
 800ab04:	461c      	mov	r4, r3
 800ab06:	4615      	mov	r5, r2
 800ab08:	2303      	movs	r3, #3
 800ab0a:	9302      	str	r3, [sp, #8]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	4622      	mov	r2, r4
 800ab16:	462b      	mov	r3, r5
 800ab18:	6978      	ldr	r0, [r7, #20]
 800ab1a:	f006 f943 	bl	8010da4 <_fx_utility_logical_sector_write>
 800ab1e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	e044      	b.n	800abb4 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d03e      	beq.n	800abb2 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800ab40:	4299      	cmp	r1, r3
 800ab42:	bf08      	it	eq
 800ab44:	4290      	cmpeq	r0, r2
 800ab46:	d134      	bne.n	800abb2 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d12d      	bne.n	800abb2 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ab66:	6979      	ldr	r1, [r7, #20]
 800ab68:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	7f1a      	ldrb	r2, [r3, #28]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	7f5a      	ldrb	r2, [r3, #29]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	7f9a      	ldrb	r2, [r3, #30]
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	6a1a      	ldr	r2, [r3, #32]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3778      	adds	r7, #120	; 0x78
 800abb8:	46bd      	mov	sp, r7
 800abba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abbe:	bf00      	nop

0800abc0 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800abc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abc4:	b0a8      	sub	sp, #160	; 0xa0
 800abc6:	af04      	add	r7, sp, #16
 800abc8:	6278      	str	r0, [r7, #36]	; 0x24
 800abca:	6239      	str	r1, [r7, #32]
 800abcc:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	67bb      	str	r3, [r7, #120]	; 0x78
 800abe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abe2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	2200      	movs	r2, #0
 800abe8:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b2e      	cmp	r3, #46	; 0x2e
 800abf2:	d108      	bne.n	800ac06 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3301      	adds	r3, #1
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b2e      	cmp	r3, #46	; 0x2e
 800abfe:	d102      	bne.n	800ac06 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800ac00:	230c      	movs	r3, #12
 800ac02:	f000 bc17 	b.w	800b434 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800ac06:	2300      	movs	r3, #0
 800ac08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac12:	e13d      	b.n	800ae90 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac1c:	4413      	add	r3, r2
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d908      	bls.n	800ac36 <_fx_directory_free_search+0x76>
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac2c:	4413      	add	r3, r2
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b5a      	cmp	r3, #90	; 0x5a
 800ac32:	f240 8121 	bls.w	800ae78 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac3e:	4413      	add	r3, r2
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b2f      	cmp	r3, #47	; 0x2f
 800ac44:	d908      	bls.n	800ac58 <_fx_directory_free_search+0x98>
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac4e:	4413      	add	r3, r2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b39      	cmp	r3, #57	; 0x39
 800ac54:	f240 8112 	bls.w	800ae7c <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b60      	cmp	r3, #96	; 0x60
 800ac66:	d90b      	bls.n	800ac80 <_fx_directory_free_search+0xc0>
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac70:	4413      	add	r3, r2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b7a      	cmp	r3, #122	; 0x7a
 800ac76:	d803      	bhi.n	800ac80 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	615a      	str	r2, [r3, #20]
 800ac7e:	e102      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac88:	4413      	add	r3, r2
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b20      	cmp	r3, #32
 800ac8e:	d103      	bne.n	800ac98 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	2201      	movs	r2, #1
 800ac94:	615a      	str	r2, [r3, #20]
 800ac96:	e0f6      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aca0:	4413      	add	r3, r2
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b2e      	cmp	r3, #46	; 0x2e
 800aca6:	d114      	bne.n	800acd2 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800aca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10c      	bne.n	800acca <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800acb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800acb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 80e2 	bne.w	800ae86 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	2201      	movs	r2, #1
 800acc6:	615a      	str	r2, [r3, #20]
 800acc8:	e0dd      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	2201      	movs	r2, #1
 800acce:	615a      	str	r2, [r3, #20]
 800acd0:	e0d9      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acda:	4413      	add	r3, r2
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2be5      	cmp	r3, #229	; 0xe5
 800ace0:	d103      	bne.n	800acea <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	2201      	movs	r2, #1
 800ace6:	615a      	str	r2, [r3, #20]
 800ace8:	e0cd      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acf2:	4413      	add	r3, r2
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	b25b      	sxtb	r3, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f2c0 80c1 	blt.w	800ae80 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad06:	4413      	add	r3, r2
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b7e      	cmp	r3, #126	; 0x7e
 800ad0c:	f000 80ba 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad18:	4413      	add	r3, r2
 800ad1a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800ad1c:	2b2d      	cmp	r3, #45	; 0x2d
 800ad1e:	f000 80b1 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad2a:	4413      	add	r3, r2
 800ad2c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800ad2e:	2b5f      	cmp	r3, #95	; 0x5f
 800ad30:	f000 80a8 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad3c:	4413      	add	r3, r2
 800ad3e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800ad40:	2b7d      	cmp	r3, #125	; 0x7d
 800ad42:	f000 809f 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad4e:	4413      	add	r3, r2
 800ad50:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800ad52:	2b7b      	cmp	r3, #123	; 0x7b
 800ad54:	f000 8096 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad60:	4413      	add	r3, r2
 800ad62:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800ad64:	2b28      	cmp	r3, #40	; 0x28
 800ad66:	f000 808d 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad72:	4413      	add	r3, r2
 800ad74:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800ad76:	2b29      	cmp	r3, #41	; 0x29
 800ad78:	f000 8084 	beq.w	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad84:	4413      	add	r3, r2
 800ad86:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800ad88:	2b60      	cmp	r3, #96	; 0x60
 800ad8a:	d07b      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad94:	4413      	add	r3, r2
 800ad96:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800ad98:	2b27      	cmp	r3, #39	; 0x27
 800ad9a:	d073      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ada4:	4413      	add	r3, r2
 800ada6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800ada8:	2b21      	cmp	r3, #33	; 0x21
 800adaa:	d06b      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb4:	4413      	add	r3, r2
 800adb6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800adb8:	2b23      	cmp	r3, #35	; 0x23
 800adba:	d063      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800adc8:	2b24      	cmp	r3, #36	; 0x24
 800adca:	d05b      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800add4:	4413      	add	r3, r2
 800add6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800add8:	2b26      	cmp	r3, #38	; 0x26
 800adda:	d053      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ade4:	4413      	add	r3, r2
 800ade6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d04b      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf4:	4413      	add	r3, r2
 800adf6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800adf8:	2b5e      	cmp	r3, #94	; 0x5e
 800adfa:	d043      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae04:	4413      	add	r3, r2
 800ae06:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800ae08:	2b25      	cmp	r3, #37	; 0x25
 800ae0a:	d03b      	beq.n	800ae84 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae14:	4413      	add	r3, r2
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b2b      	cmp	r3, #43	; 0x2b
 800ae1a:	d027      	beq.n	800ae6c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae24:	4413      	add	r3, r2
 800ae26:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800ae28:	2b2c      	cmp	r3, #44	; 0x2c
 800ae2a:	d01f      	beq.n	800ae6c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800ae38:	2b3b      	cmp	r3, #59	; 0x3b
 800ae3a:	d017      	beq.n	800ae6c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae44:	4413      	add	r3, r2
 800ae46:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ae48:	2b3d      	cmp	r3, #61	; 0x3d
 800ae4a:	d00f      	beq.n	800ae6c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae54:	4413      	add	r3, r2
 800ae56:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ae58:	2b5b      	cmp	r3, #91	; 0x5b
 800ae5a:	d007      	beq.n	800ae6c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae64:	4413      	add	r3, r2
 800ae66:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ae68:	2b5d      	cmp	r3, #93	; 0x5d
 800ae6a:	d103      	bne.n	800ae74 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	615a      	str	r2, [r3, #20]
 800ae72:	e008      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800ae74:	230c      	movs	r3, #12
 800ae76:	e2dd      	b.n	800b434 <_fx_directory_free_search+0x874>
            continue;
 800ae78:	bf00      	nop
 800ae7a:	e004      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
            continue;
 800ae7c:	bf00      	nop
 800ae7e:	e002      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
            continue;
 800ae80:	bf00      	nop
 800ae82:	e000      	b.n	800ae86 <_fx_directory_free_search+0x2c6>
            continue;
 800ae84:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800ae86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae98:	4413      	add	r3, r2
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f47f aeb9 	bne.w	800ac14 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800aea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d009      	beq.n	800aebe <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800aeaa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aeae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d902      	bls.n	800aebe <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2201      	movs	r2, #1
 800aebc:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800aebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aec2:	2b0c      	cmp	r3, #12
 800aec4:	d818      	bhi.n	800aef8 <_fx_directory_free_search+0x338>
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d114      	bne.n	800aef8 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800aece:	2301      	movs	r3, #1
 800aed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800aed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aed8:	2b08      	cmp	r3, #8
 800aeda:	d806      	bhi.n	800aeea <_fx_directory_free_search+0x32a>
 800aedc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b08      	cmp	r3, #8
 800aee8:	d928      	bls.n	800af3c <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	2201      	movs	r2, #1
 800aeee:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800aef0:	2302      	movs	r3, #2
 800aef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800aef6:	e021      	b.n	800af3c <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800aef8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800aefc:	4b95      	ldr	r3, [pc, #596]	; (800b154 <_fx_directory_free_search+0x594>)
 800aefe:	fba3 2301 	umull	r2, r3, r3, r1
 800af02:	089a      	lsrs	r2, r3, #2
 800af04:	4613      	mov	r3, r2
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	1aca      	subs	r2, r1, r3
 800af10:	2a00      	cmp	r2, #0
 800af12:	d109      	bne.n	800af28 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800af14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af18:	4a8e      	ldr	r2, [pc, #568]	; (800b154 <_fx_directory_free_search+0x594>)
 800af1a:	fba2 2303 	umull	r2, r3, r2, r3
 800af1e:	089b      	lsrs	r3, r3, #2
 800af20:	3301      	adds	r3, #1
 800af22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af26:	e00a      	b.n	800af3e <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800af28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af2c:	4a89      	ldr	r2, [pc, #548]	; (800b154 <_fx_directory_free_search+0x594>)
 800af2e:	fba2 2303 	umull	r2, r3, r2, r3
 800af32:	089b      	lsrs	r3, r3, #2
 800af34:	3302      	adds	r3, #2
 800af36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af3a:	e000      	b.n	800af3e <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800af3c:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00c      	beq.n	800af62 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800af4e:	4613      	mov	r3, r2
 800af50:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800af56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af58:	2200      	movs	r2, #0
 800af5a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800af5c:	2302      	movs	r3, #2
 800af5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af60:	e006      	b.n	800af70 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af66:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800af6c:	2300      	movs	r3, #0
 800af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800af70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af72:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800af74:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af7e:	f7fe fc5d 	bl	800983c <_fx_directory_entry_read>
 800af82:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800af84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800af8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8c:	e252      	b.n	800b434 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2be5      	cmp	r3, #229	; 0xe5
 800af96:	d103      	bne.n	800afa0 <_fx_directory_free_search+0x3e0>
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	791b      	ldrb	r3, [r3, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d16b      	bne.n	800b082 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800afaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d91a      	bls.n	800afe8 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d115      	bne.n	800afe8 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	2200      	movs	r2, #0
 800afc0:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	23e5      	movs	r3, #229	; 0xe5
 800afc8:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	2300      	movs	r3, #0
 800afd2:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800afd4:	69f9      	ldr	r1, [r7, #28]
 800afd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afd8:	f7fe ffb6 	bl	8009f48 <_fx_directory_entry_write>
 800afdc:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800afde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800afe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe6:	e225      	b.n	800b434 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800afe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afec:	429a      	cmp	r2, r3
 800afee:	d109      	bne.n	800b004 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800affa:	4613      	mov	r3, r2
 800affc:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b002:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800b004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	3301      	adds	r3, #1
 800b00c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b010:	429a      	cmp	r2, r3
 800b012:	d838      	bhi.n	800b086 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800b014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b016:	2200      	movs	r2, #0
 800b018:	461c      	mov	r4, r3
 800b01a:	4615      	mov	r5, r2
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b026:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	2200      	movs	r2, #0
 800b02c:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	2200      	movs	r2, #0
 800b032:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b034:	f3ef 8310 	mrs	r3, PRIMASK
 800b038:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800b03c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b03e:	b672      	cpsid	i
#endif
    return(int_posture);
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800b042:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800b044:	4b44      	ldr	r3, [pc, #272]	; (800b158 <_fx_directory_free_search+0x598>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800b04c:	4b43      	ldr	r3, [pc, #268]	; (800b15c <_fx_directory_free_search+0x59c>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800b054:	4b41      	ldr	r3, [pc, #260]	; (800b15c <_fx_directory_free_search+0x59c>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	629a      	str	r2, [r3, #40]	; 0x28
 800b05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b062:	f383 8810 	msr	PRIMASK, r3
}
 800b066:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800b068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d103      	bne.n	800b078 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	2200      	movs	r2, #0
 800b074:	615a      	str	r2, [r3, #20]
 800b076:	e002      	b.n	800b07e <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	2201      	movs	r2, #1
 800b07c:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800b07e:	2300      	movs	r3, #0
 800b080:	e1d8      	b.n	800b434 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800b082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b084:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	3301      	adds	r3, #1
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b090:	429a      	cmp	r2, r3
 800b092:	f200 81c9 	bhi.w	800b428 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a0:	4413      	add	r3, r2
 800b0a2:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ac:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b4:	4413      	add	r3, r2
 800b0b6:	1e5a      	subs	r2, r3, #1
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800b0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d104      	bne.n	800b0d2 <_fx_directory_free_search+0x512>
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 81ab 	beq.w	800b428 <_fx_directory_free_search+0x868>
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	f200 81a5 	bhi.w	800b428 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0f2:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800b0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800b0f8:	e10b      	b.n	800b312 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800b0fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800b100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800b106:	230a      	movs	r3, #10
 800b108:	e194      	b.n	800b434 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800b10a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b10e:	461a      	mov	r2, r3
 800b110:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b114:	f003 ffa4 	bl	800f060 <_fx_utility_FAT_entry_read>
 800b118:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800b11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b122:	e187      	b.n	800b434 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800b124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b126:	3b01      	subs	r3, #1
 800b128:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d117      	bne.n	800b160 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800b130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b144:	3302      	adds	r3, #2
 800b146:	429a      	cmp	r2, r3
 800b148:	d316      	bcc.n	800b178 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	2202      	movs	r2, #2
 800b14e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800b152:	e011      	b.n	800b178 <_fx_directory_free_search+0x5b8>
 800b154:	4ec4ec4f 	.word	0x4ec4ec4f
 800b158:	240035d0 	.word	0x240035d0
 800b15c:	240035cc 	.word	0x240035cc
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800b160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b162:	3301      	adds	r3, #1
 800b164:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	3302      	adds	r3, #2
 800b16c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b16e:	429a      	cmp	r2, r3
 800b170:	d3c6      	bcc.n	800b100 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800b172:	2302      	movs	r3, #2
 800b174:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800b176:	e7c3      	b.n	800b100 <_fx_directory_free_search+0x540>
                            break;
 800b178:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b17e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b180:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b186:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b18a:	440b      	add	r3, r1
 800b18c:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b192:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b196:	2200      	movs	r2, #0
 800b198:	613b      	str	r3, [r7, #16]
 800b19a:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	9302      	str	r3, [sp, #8]
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	9200      	str	r2, [sp, #0]
 800b1aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b1ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1b0:	f005 fb64 	bl	801087c <_fx_utility_logical_sector_read>
 800b1b4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800b1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1be:	e139      	b.n	800b434 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b1ce:	e00d      	b.n	800b1ec <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800b1d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800b1d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1dc:	3304      	adds	r3, #4
 800b1de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800b1e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d3eb      	bcc.n	800b1d0 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	60bb      	str	r3, [r7, #8]
 800b1fe:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b204:	2303      	movs	r3, #3
 800b206:	9302      	str	r3, [sp, #8]
 800b208:	2301      	movs	r3, #1
 800b20a:	9301      	str	r3, [sp, #4]
 800b20c:	9200      	str	r2, [sp, #0]
 800b20e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b214:	f005 fdc6 	bl	8010da4 <_fx_utility_logical_sector_write>
 800b218:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800b21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800b220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b222:	e107      	b.n	800b434 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800b224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b226:	2b01      	cmp	r3, #1
 800b228:	d95a      	bls.n	800b2e0 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800b22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22c:	3301      	adds	r3, #1
 800b22e:	2200      	movs	r2, #0
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b236:	3b01      	subs	r3, #1
 800b238:	2200      	movs	r2, #0
 800b23a:	4698      	mov	r8, r3
 800b23c:	4691      	mov	r9, r2
 800b23e:	2301      	movs	r3, #1
 800b240:	9302      	str	r3, [sp, #8]
 800b242:	e9cd 8900 	strd	r8, r9, [sp]
 800b246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b24a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b24c:	f005 f900 	bl	8010450 <_fx_utility_logical_sector_flush>
 800b250:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800b258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25a:	e0eb      	b.n	800b434 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800b25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b25e:	3b01      	subs	r3, #1
 800b260:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b262:	e03a      	b.n	800b2da <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	2201      	movs	r2, #1
 800b276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	2290      	movs	r2, #144	; 0x90
 800b27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800b28c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b290:	441a      	add	r2, r3
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	2201      	movs	r2, #1
 800b29c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b2b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b8:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d2:	e0af      	b.n	800b434 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800b2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1c1      	bne.n	800b264 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800b2e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800b2e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2e8:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800b2ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800b2f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b2f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b2f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2f6:	f004 f8dc 	bl	800f4b2 <_fx_utility_FAT_entry_write>
 800b2fa:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800b2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b304:	e096      	b.n	800b434 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800b306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b308:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b310:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800b312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b314:	2b00      	cmp	r3, #0
 800b316:	f47f aef0 	bne.w	800b0fa <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b320:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800b324:	461a      	mov	r2, r3
 800b326:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b32a:	f004 f8c2 	bl	800f4b2 <_fx_utility_FAT_entry_write>
 800b32e:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800b330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800b336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b338:	e07c      	b.n	800b434 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800b33a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800b340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b344:	673b      	str	r3, [r7, #112]	; 0x70
 800b346:	e002      	b.n	800b34e <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b34c:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800b34e:	2300      	movs	r3, #0
 800b350:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800b352:	2300      	movs	r3, #0
 800b354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b358:	e024      	b.n	800b3a4 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800b35a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b35e:	461a      	mov	r2, r3
 800b360:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b364:	f003 fe7c 	bl	800f060 <_fx_utility_FAT_entry_read>
 800b368:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800b36a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b36e:	3301      	adds	r3, #1
 800b370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800b37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37c:	e05a      	b.n	800b434 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800b37e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b380:	2b01      	cmp	r3, #1
 800b382:	d909      	bls.n	800b398 <_fx_directory_free_search+0x7d8>
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b388:	429a      	cmp	r2, r3
 800b38a:	d005      	beq.n	800b398 <_fx_directory_free_search+0x7d8>
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b390:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b394:	429a      	cmp	r2, r3
 800b396:	d901      	bls.n	800b39c <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b398:	2303      	movs	r3, #3
 800b39a:	e04b      	b.n	800b434 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800b39c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b39e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b3aa:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b3ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d3d2      	bcc.n	800b35a <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b3b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ba:	1ad2      	subs	r2, r2, r3
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c6:	fb03 f202 	mul.w	r2, r3, r2
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ce:	fb02 f303 	mul.w	r3, r2, r3
 800b3d2:	095b      	lsrs	r3, r3, #5
 800b3d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3d6:	4413      	add	r3, r2
 800b3d8:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2be5      	cmp	r3, #229	; 0xe5
 800b3e2:	d103      	bne.n	800b3ec <_fx_directory_free_search+0x82c>
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	791b      	ldrb	r3, [r3, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800b3ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ee:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800b3f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	4693      	mov	fp, r2
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b402:	2b00      	cmp	r3, #0
 800b404:	d005      	beq.n	800b412 <_fx_directory_free_search+0x852>
 800b406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d102      	bne.n	800b412 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b410:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800b412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b414:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b418:	f004 f84b 	bl	800f4b2 <_fx_utility_FAT_entry_write>
 800b41c:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800b41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800b424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b426:	e005      	b.n	800b434 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b42c:	429a      	cmp	r2, r3
 800b42e:	f63f ada1 	bhi.w	800af74 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800b432:	230a      	movs	r3, #10
}
 800b434:	4618      	mov	r0, r3
 800b436:	3790      	adds	r7, #144	; 0x90
 800b438:	46bd      	mov	sp, r7
 800b43a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b43e:	bf00      	nop

0800b440 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b5c      	cmp	r3, #92	; 0x5c
 800b456:	d003      	beq.n	800b460 <_fx_directory_name_extract+0x20>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b2f      	cmp	r3, #47	; 0x2f
 800b45e:	d106      	bne.n	800b46e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3301      	adds	r3, #1
 800b464:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800b466:	e002      	b.n	800b46e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3301      	adds	r3, #1
 800b46c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b20      	cmp	r3, #32
 800b474:	d0f8      	beq.n	800b468 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b47a:	e015      	b.n	800b4a8 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b5c      	cmp	r3, #92	; 0x5c
 800b482:	d017      	beq.n	800b4b4 <_fx_directory_name_extract+0x74>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	2b2f      	cmp	r3, #47	; 0x2f
 800b48a:	d013      	beq.n	800b4b4 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2bff      	cmp	r3, #255	; 0xff
 800b490:	d00f      	beq.n	800b4b2 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	440a      	add	r2, r1
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1e5      	bne.n	800b47c <_fx_directory_name_extract+0x3c>
 800b4b0:	e000      	b.n	800b4b4 <_fx_directory_name_extract+0x74>
            break;
 800b4b2:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800b4ca:	e007      	b.n	800b4dc <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	d0f1      	beq.n	800b4cc <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800b4f4:	687b      	ldr	r3, [r7, #4]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
	...

0800b504 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800b504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b508:	b0c0      	sub	sp, #256	; 0x100
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b50e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b510:	627a      	str	r2, [r7, #36]	; 0x24
 800b512:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b536:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800b53a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	2300      	movs	r3, #0
 800b54a:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b5c      	cmp	r3, #92	; 0x5c
 800b552:	d003      	beq.n	800b55c <_fx_directory_search+0x58>
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b2f      	cmp	r3, #47	; 0x2f
 800b55a:	d103      	bne.n	800b564 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800b55c:	2300      	movs	r3, #0
 800b55e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b562:	e044      	b.n	800b5ee <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800b564:	4bab      	ldr	r3, [pc, #684]	; (800b814 <_fx_directory_search+0x310>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d022      	beq.n	800b5b6 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800b570:	4ba8      	ldr	r3, [pc, #672]	; (800b814 <_fx_directory_search+0x310>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d016      	beq.n	800b5ae <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800b580:	4ba4      	ldr	r3, [pc, #656]	; (800b814 <_fx_directory_search+0x310>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b588:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b58c:	4619      	mov	r1, r3
 800b58e:	2370      	movs	r3, #112	; 0x70
 800b590:	461a      	mov	r2, r3
 800b592:	f008 ff15 	bl	80143c0 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800b596:	4b9f      	ldr	r3, [pc, #636]	; (800b814 <_fx_directory_search+0x310>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	3370      	adds	r3, #112	; 0x70
 800b5a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800b5a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5ac:	e01f      	b.n	800b5ee <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5b4:	e01b      	b.n	800b5ee <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d012      	beq.n	800b5e8 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b5c8:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800b5cc:	2370      	movs	r3, #112	; 0x70
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	f008 fef6 	bl	80143c0 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800b5da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800b5de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5e6:	e002      	b.n	800b5ee <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800b5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f0:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 81b9 	beq.w	800b96c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b5c      	cmp	r3, #92	; 0x5c
 800b606:	d02d      	beq.n	800b664 <_fx_directory_search+0x160>
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b2f      	cmp	r3, #47	; 0x2f
 800b60e:	d14c      	bne.n	800b6aa <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b610:	e028      	b.n	800b664 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800b612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b618:	4413      	add	r3, r2
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800b620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b626:	4413      	add	r3, r2
 800b628:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800b632:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b636:	2b5c      	cmp	r3, #92	; 0x5c
 800b638:	d102      	bne.n	800b640 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800b63a:	232f      	movs	r3, #47	; 0x2f
 800b63c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800b640:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b644:	2b5c      	cmp	r3, #92	; 0x5c
 800b646:	d102      	bne.n	800b64e <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800b648:	232f      	movs	r3, #47	; 0x2f
 800b64a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800b64e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b652:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b656:	429a      	cmp	r2, r3
 800b658:	d110      	bne.n	800b67c <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800b65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65e:	3301      	adds	r3, #1
 800b660:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b668:	2bfe      	cmp	r3, #254	; 0xfe
 800b66a:	d808      	bhi.n	800b67e <_fx_directory_search+0x17a>
 800b66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b672:	4413      	add	r3, r2
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1cb      	bne.n	800b612 <_fx_directory_search+0x10e>
 800b67a:	e000      	b.n	800b67e <_fx_directory_search+0x17a>
                    break;
 800b67c:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b684:	4413      	add	r3, r2
 800b686:	7819      	ldrb	r1, [r3, #0]
 800b688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68e:	4413      	add	r3, r2
 800b690:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	4299      	cmp	r1, r3
 800b698:	d003      	beq.n	800b6a2 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b6a0:	e0cf      	b.n	800b842 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b6a8:	e0cb      	b.n	800b842 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800b6b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d043      	beq.n	800b740 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b6b8:	e029      	b.n	800b70e <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800b6ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800b6cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d4:	4413      	add	r3, r2
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b6dc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b6e0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6e2:	d102      	bne.n	800b6ea <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800b6e4:	232f      	movs	r3, #47	; 0x2f
 800b6e6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b6ea:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b6ee:	2b5c      	cmp	r3, #92	; 0x5c
 800b6f0:	d102      	bne.n	800b6f8 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800b6f2:	232f      	movs	r3, #47	; 0x2f
 800b6f4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b6f8:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b6fc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b700:	429a      	cmp	r2, r3
 800b702:	d111      	bne.n	800b728 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b708:	3301      	adds	r3, #1
 800b70a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b712:	2bfe      	cmp	r3, #254	; 0xfe
 800b714:	d809      	bhi.n	800b72a <_fx_directory_search+0x226>
 800b716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b71e:	4413      	add	r3, r2
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1c9      	bne.n	800b6ba <_fx_directory_search+0x1b6>
 800b726:	e000      	b.n	800b72a <_fx_directory_search+0x226>
                        break;
 800b728:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800b72a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b732:	4413      	add	r3, r2
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800b740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b744:	2b00      	cmp	r3, #0
 800b746:	d07c      	beq.n	800b842 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74e:	4413      	add	r3, r2
 800b750:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b5c      	cmp	r3, #92	; 0x5c
 800b758:	d00c      	beq.n	800b774 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800b75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b760:	4413      	add	r3, r2
 800b762:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b766:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b768:	2b2f      	cmp	r3, #47	; 0x2f
 800b76a:	d003      	beq.n	800b774 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b772:	e004      	b.n	800b77e <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800b774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b778:	3301      	adds	r3, #1
 800b77a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800b77e:	2300      	movs	r3, #0
 800b780:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b784:	e02d      	b.n	800b7e2 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800b786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b788:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b78c:	4413      	add	r3, r2
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800b794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b7a6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b7aa:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ac:	d102      	bne.n	800b7b4 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800b7ae:	232f      	movs	r3, #47	; 0x2f
 800b7b0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b7b4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b7b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ba:	d102      	bne.n	800b7c2 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800b7bc:	232f      	movs	r3, #47	; 0x2f
 800b7be:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b7c2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b7c6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d119      	bne.n	800b802 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800b7d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7dc:	3301      	adds	r3, #1
 800b7de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e6:	2bfe      	cmp	r3, #254	; 0xfe
 800b7e8:	d80c      	bhi.n	800b804 <_fx_directory_search+0x300>
 800b7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7f0:	4413      	add	r3, r2
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d005      	beq.n	800b804 <_fx_directory_search+0x300>
 800b7f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1c2      	bne.n	800b786 <_fx_directory_search+0x282>
 800b800:	e000      	b.n	800b804 <_fx_directory_search+0x300>
                        break;
 800b802:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800b804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b808:	2bff      	cmp	r3, #255	; 0xff
 800b80a:	d905      	bls.n	800b818 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800b80c:	2300      	movs	r3, #0
 800b80e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b812:	e016      	b.n	800b842 <_fx_directory_search+0x33e>
 800b814:	2400364c 	.word	0x2400364c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800b818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d010      	beq.n	800b842 <_fx_directory_search+0x33e>
 800b820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b826:	4413      	add	r3, r2
 800b828:	7819      	ldrb	r1, [r3, #0]
 800b82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b830:	4413      	add	r3, r2
 800b832:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4299      	cmp	r1, r3
 800b83a:	d002      	beq.n	800b842 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800b83c:	2300      	movs	r3, #0
 800b83e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800b842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 8090 	beq.w	800b96c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800b854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	4610      	mov	r0, r2
 800b85a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800b85e:	2270      	movs	r2, #112	; 0x70
 800b860:	4619      	mov	r1, r3
 800b862:	f008 fdad 	bl	80143c0 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b86c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b86e:	2300      	movs	r3, #0
 800b870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b874:	e01d      	b.n	800b8b2 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800b876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b87a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b87e:	4413      	add	r3, r2
 800b880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b882:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b886:	440a      	add	r2, r1
 800b888:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800b88c:	7812      	ldrb	r2, [r2, #0]
 800b88e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800b890:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b898:	4413      	add	r3, r2
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d103      	bne.n	800b8a8 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800b8a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8a4:	2bfe      	cmp	r3, #254	; 0xfe
 800b8a6:	d909      	bls.n	800b8bc <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b8a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8b6:	2bff      	cmp	r3, #255	; 0xff
 800b8b8:	d9dd      	bls.n	800b876 <_fx_directory_search+0x372>
 800b8ba:	e000      	b.n	800b8be <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800b8bc:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d041      	beq.n	800b948 <_fx_directory_search+0x444>
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d03c      	beq.n	800b948 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800b8d6:	6a3a      	ldr	r2, [r7, #32]
 800b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b8e0:	2270      	movs	r2, #112	; 0x70
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f008 fd6c 	bl	80143c0 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8ee:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800b8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b900:	e01c      	b.n	800b93c <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b902:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b90a:	441a      	add	r2, r3
 800b90c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b914:	440b      	add	r3, r1
 800b916:	7812      	ldrb	r2, [r2, #0]
 800b918:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800b91a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b91e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b922:	4413      	add	r3, r2
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d103      	bne.n	800b932 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b92a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b92e:	2bfe      	cmp	r3, #254	; 0xfe
 800b930:	d909      	bls.n	800b946 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b936:	3301      	adds	r3, #1
 800b938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b940:	2bff      	cmp	r3, #255	; 0xff
 800b942:	d9de      	bls.n	800b902 <_fx_directory_search+0x3fe>
 800b944:	e000      	b.n	800b948 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800b946:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800b948:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d004      	beq.n	800b95a <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800b950:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b958:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b964:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800b968:	2300      	movs	r3, #0
 800b96a:	e2ff      	b.n	800bf6c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800b96c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b96e:	2300      	movs	r3, #0
 800b970:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800b974:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800b97c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800b984:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b98a:	f7ff fd59 	bl	800b440 <_fx_directory_name_extract>
 800b98e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800b990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 80be 	beq.w	800bb16 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b99a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b99e:	2300      	movs	r3, #0
 800b9a0:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800b9a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b9b2:	e02b      	b.n	800ba0c <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800b9b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b9be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b9c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ca:	f003 fb49 	bl	800f060 <_fx_utility_FAT_entry_read>
 800b9ce:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800b9d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800b9da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9de:	e2c5      	b.n	800bf6c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800b9e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d90b      	bls.n	800ba00 <_fx_directory_search+0x4fc>
 800b9e8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b9ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d005      	beq.n	800ba00 <_fx_directory_search+0x4fc>
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d201      	bcs.n	800ba04 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800ba00:	2303      	movs	r3, #3
 800ba02:	e2b3      	b.n	800bf6c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800ba04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ba12:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ba16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d3ca      	bcc.n	800b9b4 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	2200      	movs	r2, #0
 800ba24:	469a      	mov	sl, r3
 800ba26:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800ba28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ba36:	4603      	mov	r3, r0
 800ba38:	fb03 f20b 	mul.w	r2, r3, fp
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	fb0a f303 	mul.w	r3, sl, r3
 800ba42:	4413      	add	r3, r2
 800ba44:	4602      	mov	r2, r0
 800ba46:	fbaa 4502 	umull	r4, r5, sl, r2
 800ba4a:	442b      	add	r3, r5
 800ba4c:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800ba4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba52:	2200      	movs	r2, #0
 800ba54:	60bb      	str	r3, [r7, #8]
 800ba56:	60fa      	str	r2, [r7, #12]
 800ba58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	fb03 f205 	mul.w	r2, r3, r5
 800ba62:	460b      	mov	r3, r1
 800ba64:	fb04 f303 	mul.w	r3, r4, r3
 800ba68:	4413      	add	r3, r2
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	fba4 8902 	umull	r8, r9, r4, r2
 800ba70:	444b      	add	r3, r9
 800ba72:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba74:	f04f 0200 	mov.w	r2, #0
 800ba78:	f04f 0300 	mov.w	r3, #0
 800ba7c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800ba80:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800ba84:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800ba88:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800ba8c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800ba90:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ba94:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d046      	beq.n	800bb2c <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800baa6:	6a3a      	ldr	r2, [r7, #32]
 800baa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baac:	4610      	mov	r0, r2
 800baae:	4619      	mov	r1, r3
 800bab0:	2370      	movs	r3, #112	; 0x70
 800bab2:	461a      	mov	r2, r3
 800bab4:	f008 fc84 	bl	80143c0 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800bab8:	6a3a      	ldr	r2, [r7, #32]
 800baba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800babe:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800bac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800baca:	2300      	movs	r3, #0
 800bacc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bad0:	e01c      	b.n	800bb0c <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800bad2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bada:	18d1      	adds	r1, r2, r3
 800badc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bae4:	441a      	add	r2, r3
 800bae6:	780b      	ldrb	r3, [r1, #0]
 800bae8:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800baea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800baee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baf2:	4413      	add	r3, r2
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d103      	bne.n	800bb02 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800bafa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bafe:	2bfe      	cmp	r3, #254	; 0xfe
 800bb00:	d913      	bls.n	800bb2a <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bb02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb06:	3301      	adds	r3, #1
 800bb08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb10:	2bff      	cmp	r3, #255	; 0xff
 800bb12:	d9de      	bls.n	800bad2 <_fx_directory_search+0x5ce>
 800bb14:	e00a      	b.n	800bb2c <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb24:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800bb28:	e000      	b.n	800bb2c <_fx_directory_search+0x628>
                            break;
 800bb2a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800bb38:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800bb42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb44:	f7fd fe7a 	bl	800983c <_fx_directory_entry_read>
 800bb48:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800bb4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb50:	3301      	adds	r3, #1
 800bb52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800bb56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <_fx_directory_search+0x660>
            {
                return(status);
 800bb5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb62:	e203      	b.n	800bf6c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 80c6 	beq.w	800bcfc <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	7f1b      	ldrb	r3, [r3, #28]
 800bb74:	f003 0308 	and.w	r3, r3, #8
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f040 80a9 	bne.w	800bcd0 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2be5      	cmp	r3, #229	; 0xe5
 800bb86:	d104      	bne.n	800bb92 <_fx_directory_search+0x68e>
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	791b      	ldrb	r3, [r3, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 80a1 	beq.w	800bcd4 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800bb92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800bba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800bbac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800bbb6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bbba:	2b60      	cmp	r3, #96	; 0x60
 800bbbc:	d908      	bls.n	800bbd0 <_fx_directory_search+0x6cc>
 800bbbe:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bbc2:	2b7a      	cmp	r3, #122	; 0x7a
 800bbc4:	d804      	bhi.n	800bbd0 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800bbc6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bbca:	3b20      	subs	r3, #32
 800bbcc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800bbd0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbd4:	2b60      	cmp	r3, #96	; 0x60
 800bbd6:	d908      	bls.n	800bbea <_fx_directory_search+0x6e6>
 800bbd8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbdc:	2b7a      	cmp	r3, #122	; 0x7a
 800bbde:	d804      	bhi.n	800bbea <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800bbe0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbe4:	3b20      	subs	r3, #32
 800bbe6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800bbea:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bbee:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d10f      	bne.n	800bc16 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800bbf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800bc00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc04:	3301      	adds	r3, #1
 800bc06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800bc0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1c6      	bne.n	800bba2 <_fx_directory_search+0x69e>
 800bc14:	e000      	b.n	800bc18 <_fx_directory_search+0x714>
                    break;
 800bc16:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800bc18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <_fx_directory_search+0x736>
 800bc22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc26:	781a      	ldrb	r2, [r3, #0]
 800bc28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d103      	bne.n	800bc3a <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800bc32:	2301      	movs	r3, #1
 800bc34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc38:	e04d      	b.n	800bcd6 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	791b      	ldrb	r3, [r3, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d049      	beq.n	800bcd6 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800bc42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800bc52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800bc5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800bc66:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc6a:	2b60      	cmp	r3, #96	; 0x60
 800bc6c:	d908      	bls.n	800bc80 <_fx_directory_search+0x77c>
 800bc6e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc72:	2b7a      	cmp	r3, #122	; 0x7a
 800bc74:	d804      	bhi.n	800bc80 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800bc76:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc7a:	3b20      	subs	r3, #32
 800bc7c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800bc80:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bc84:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d10f      	bne.n	800bcac <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800bc8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc90:	3301      	adds	r3, #1
 800bc92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800bc96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800bca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1d3      	bne.n	800bc52 <_fx_directory_search+0x74e>
 800bcaa:	e000      	b.n	800bcae <_fx_directory_search+0x7aa>
                        break;
 800bcac:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800bcae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10e      	bne.n	800bcd6 <_fx_directory_search+0x7d2>
 800bcb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcbc:	781a      	ldrb	r2, [r3, #0]
 800bcbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d106      	bne.n	800bcd6 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bcce:	e002      	b.n	800bcd6 <_fx_directory_search+0x7d2>
                continue;
 800bcd0:	bf00      	nop
 800bcd2:	e000      	b.n	800bcd6 <_fx_directory_search+0x7d2>
                continue;
 800bcd4:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800bcd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bcda:	2200      	movs	r2, #0
 800bcdc:	61bb      	str	r3, [r7, #24]
 800bcde:	61fa      	str	r2, [r7, #28]
 800bce0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800bce4:	69b9      	ldr	r1, [r7, #24]
 800bce6:	4291      	cmp	r1, r2
 800bce8:	69f9      	ldr	r1, [r7, #28]
 800bcea:	eb71 0303 	sbcs.w	r3, r1, r3
 800bcee:	d206      	bcs.n	800bcfe <_fx_directory_search+0x7fa>
 800bcf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f43f af1f 	beq.w	800bb38 <_fx_directory_search+0x634>
 800bcfa:	e000      	b.n	800bcfe <_fx_directory_search+0x7fa>
                break;
 800bcfc:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800bcfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800bd06:	2304      	movs	r3, #4
 800bd08:	e130      	b.n	800bf6c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0c:	7f1b      	ldrb	r3, [r3, #28]
 800bd0e:	f003 0310 	and.w	r3, r3, #16
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d04f      	beq.n	800bdb6 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	2370      	movs	r3, #112	; 0x70
 800bd20:	461a      	mov	r2, r3
 800bd22:	f008 fb4d 	bl	80143c0 <memcpy>
            search_dir_ptr =  &search_dir;
 800bd26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800bd2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bd32:	2300      	movs	r3, #0
 800bd34:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800bd36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d13f      	bne.n	800bdc0 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800bd40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	2300      	movs	r3, #0
 800bd48:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d02e      	beq.n	800bdae <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800bd58:	6a3a      	ldr	r2, [r7, #32]
 800bd5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4619      	mov	r1, r3
 800bd62:	2370      	movs	r3, #112	; 0x70
 800bd64:	461a      	mov	r2, r3
 800bd66:	f008 fb2b 	bl	80143c0 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800bd6a:	6a3a      	ldr	r2, [r7, #32]
 800bd6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bd70:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800bd72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd82:	e010      	b.n	800bda6 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800bd84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd8c:	18d1      	adds	r1, r2, r3
 800bd8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd96:	441a      	add	r2, r3
 800bd98:	780b      	ldrb	r3, [r1, #0]
 800bd9a:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bd9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bda0:	3301      	adds	r3, #1
 800bda2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bda6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdaa:	2bff      	cmp	r3, #255	; 0xff
 800bdac:	d9ea      	bls.n	800bd84 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdb4:	e004      	b.n	800bdc0 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	e0d5      	b.n	800bf6c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f47f add6 	bne.w	800b974 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800bdce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	2b5c      	cmp	r3, #92	; 0x5c
 800bdd6:	d028      	beq.n	800be2a <_fx_directory_search+0x926>
 800bdd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b2f      	cmp	r3, #47	; 0x2f
 800bde0:	d023      	beq.n	800be2a <_fx_directory_search+0x926>
 800bde2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d01f      	beq.n	800be2a <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bdea:	e012      	b.n	800be12 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800bdec:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf4:	4413      	add	r3, r2
 800bdf6:	7819      	ldrb	r1, [r3, #0]
 800bdf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be04:	460a      	mov	r2, r1
 800be06:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800be08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be0c:	3301      	adds	r3, #1
 800be0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800be12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be16:	2bfe      	cmp	r3, #254	; 0xfe
 800be18:	d807      	bhi.n	800be2a <_fx_directory_search+0x926>
 800be1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be22:	4413      	add	r3, r2
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e0      	bne.n	800bdec <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800be2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b5c      	cmp	r3, #92	; 0x5c
 800be32:	d012      	beq.n	800be5a <_fx_directory_search+0x956>
 800be34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b2f      	cmp	r3, #47	; 0x2f
 800be3c:	d00d      	beq.n	800be5a <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800be3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be42:	2bfe      	cmp	r3, #254	; 0xfe
 800be44:	d809      	bhi.n	800be5a <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800be46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800be50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be52:	4413      	add	r3, r2
 800be54:	222f      	movs	r2, #47	; 0x2f
 800be56:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800be60:	e017      	b.n	800be92 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800be62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800be66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be6a:	4413      	add	r3, r2
 800be6c:	7819      	ldrb	r1, [r3, #0]
 800be6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be74:	4413      	add	r3, r2
 800be76:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be7a:	460a      	mov	r2, r1
 800be7c:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800be7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be82:	3301      	adds	r3, #1
 800be84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800be88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be8c:	3301      	adds	r3, #1
 800be8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800be92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be96:	2bff      	cmp	r3, #255	; 0xff
 800be98:	d807      	bhi.n	800beaa <_fx_directory_search+0x9a6>
 800be9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800be9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bea2:	4413      	add	r3, r2
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1db      	bne.n	800be62 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800beaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beae:	2bff      	cmp	r3, #255	; 0xff
 800beb0:	d808      	bhi.n	800bec4 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800beb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb8:	4413      	add	r3, r2
 800beba:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	e003      	b.n	800becc <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800becc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00e      	beq.n	800bef2 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800beda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bede:	4611      	mov	r1, r2
 800bee0:	2270      	movs	r2, #112	; 0x70
 800bee2:	4618      	mov	r0, r3
 800bee4:	f008 fa6c 	bl	80143c0 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800bee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beea:	2201      	movs	r2, #1
 800beec:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800bef0:	e003      	b.n	800befa <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800bef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef4:	2200      	movs	r2, #0
 800bef6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800befe:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800bf02:	4611      	mov	r1, r2
 800bf04:	2270      	movs	r2, #112	; 0x70
 800bf06:	4618      	mov	r0, r3
 800bf08:	f008 fa5a 	bl	80143c0 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0e:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf1e:	e01e      	b.n	800bf5e <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf28:	4413      	add	r3, r2
 800bf2a:	7819      	ldrb	r1, [r3, #0]
 800bf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800bf38:	460a      	mov	r2, r1
 800bf3a:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf44:	4413      	add	r3, r2
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d103      	bne.n	800bf54 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800bf4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf50:	2bfe      	cmp	r3, #254	; 0xfe
 800bf52:	d909      	bls.n	800bf68 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf58:	3301      	adds	r3, #1
 800bf5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf62:	2bff      	cmp	r3, #255	; 0xff
 800bf64:	d9dc      	bls.n	800bf20 <_fx_directory_search+0xa1c>
 800bf66:	e000      	b.n	800bf6a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800bf68:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf72:	46bd      	mov	sp, r7
 800bf74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bf78 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a49      	ldr	r2, [pc, #292]	; (800c0ac <_fx_file_close+0x134>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d001      	beq.n	800bf8e <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800bf8a:	2307      	movs	r3, #7
 800bf8c:	e08a      	b.n	800c0a4 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf92:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a42      	ldr	r2, [pc, #264]	; (800c0b0 <_fx_file_close+0x138>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d001      	beq.n	800bfb0 <_fx_file_close+0x38>
 800bfac:	2311      	movs	r3, #17
 800bfae:	e079      	b.n	800c0a4 <_fx_file_close+0x12c>
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bfb6:	f04f 31ff 	mov.w	r1, #4294967295
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f005 ff8c 	bl	8011ed8 <_tx_mutex_get>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <_fx_file_close+0x52>
 800bfc6:	2311      	movs	r3, #17
 800bfc8:	e06c      	b.n	800c0a4 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d104      	bne.n	800bfde <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800bfdc:	e014      	b.n	800c008 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bfe6:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bff0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d104      	bne.n	800c008 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c00e:	1e5a      	subs	r2, r3, #1
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a26      	ldr	r2, [pc, #152]	; (800c0b4 <_fx_file_close+0x13c>)
 800c01a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d138      	bne.n	800c096 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d034      	beq.n	800c096 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c02c:	f3ef 8310 	mrs	r3, PRIMASK
 800c030:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c032:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c034:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c036:	b672      	cpsid	i
    return(int_posture);
 800c038:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800c03a:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c03c:	4b1e      	ldr	r3, [pc, #120]	; (800c0b8 <_fx_file_close+0x140>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c046:	4b1d      	ldr	r3, [pc, #116]	; (800c0bc <_fx_file_close+0x144>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800c050:	4b1a      	ldr	r3, [pc, #104]	; (800c0bc <_fx_file_close+0x144>)
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f383 8810 	msr	PRIMASK, r3
}
 800c064:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800c06c:	6879      	ldr	r1, [r7, #4]
 800c06e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3368      	adds	r3, #104	; 0x68
 800c076:	4619      	mov	r1, r3
 800c078:	69f8      	ldr	r0, [r7, #28]
 800c07a:	f7fd ff65 	bl	8009f48 <_fx_directory_entry_write>
 800c07e:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d007      	beq.n	800c096 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c08c:	4618      	mov	r0, r3
 800c08e:	f006 f99b 	bl	80123c8 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	e006      	b.n	800c0a4 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c09c:	4618      	mov	r0, r3
 800c09e:	f006 f993 	bl	80123c8 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800c0a2:	2300      	movs	r3, #0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3720      	adds	r7, #32
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	46494c45 	.word	0x46494c45
 800c0b0:	4d454449 	.word	0x4d454449
 800c0b4:	46494c43 	.word	0x46494c43
 800c0b8:	240035d0 	.word	0x240035d0
 800c0bc:	240035cc 	.word	0x240035cc

0800c0c0 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b0c5      	sub	sp, #276	; 0x114
 800c0c4:	af02      	add	r7, sp, #8
 800c0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0ce:	6018      	str	r0, [r3, #0]
 800c0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0d8:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800c0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800c0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c10c:	e020      	b.n	800c150 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800c10e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b5c      	cmp	r3, #92	; 0x5c
 800c116:	d004      	beq.n	800c122 <_fx_file_create+0x62>
 800c118:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b2f      	cmp	r3, #47	; 0x2f
 800c120:	d103      	bne.n	800c12a <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800c122:	2300      	movs	r3, #0
 800c124:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c128:	e00d      	b.n	800c146 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800c12a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b20      	cmp	r3, #32
 800c132:	d103      	bne.n	800c13c <_fx_file_create+0x7c>
 800c134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d004      	beq.n	800c146 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800c13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c140:	3301      	adds	r3, #1
 800c142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800c146:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c14a:	3301      	adds	r3, #1
 800c14c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c150:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1d9      	bne.n	800c10e <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <_fx_file_create+0xaa>
 800c162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c166:	2bff      	cmp	r3, #255	; 0xff
 800c168:	d901      	bls.n	800c16e <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800c16a:	230c      	movs	r3, #12
 800c16c:	e10a      	b.n	800c384 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800c16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c17c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c180:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800c182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c190:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800c194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c19c:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800c1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a74      	ldr	r2, [pc, #464]	; (800c390 <_fx_file_create+0x2d0>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d001      	beq.n	800c1c6 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c1c2:	2311      	movs	r3, #17
 800c1c4:	e0de      	b.n	800c384 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a6f      	ldr	r2, [pc, #444]	; (800c390 <_fx_file_create+0x2d0>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d001      	beq.n	800c1dc <_fx_file_create+0x11c>
 800c1d8:	2311      	movs	r3, #17
 800c1da:	e0d3      	b.n	800c384 <_fx_file_create+0x2c4>
 800c1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c1ea:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f005 fe72 	bl	8011ed8 <_tx_mutex_get>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <_fx_file_create+0x13e>
 800c1fa:	2311      	movs	r3, #17
 800c1fc:	e0c2      	b.n	800c384 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800c1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00b      	beq.n	800c228 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c21e:	4618      	mov	r0, r3
 800c220:	f006 f8d2 	bl	80123c8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800c224:	2323      	movs	r3, #35	; 0x23
 800c226:	e0ad      	b.n	800c384 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800c228:	f107 0408 	add.w	r4, r7, #8
 800c22c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c234:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800c238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800c240:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	4623      	mov	r3, r4
 800c248:	6809      	ldr	r1, [r1, #0]
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	f7ff f95a 	bl	800b504 <_fx_directory_search>
 800c250:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800c254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10b      	bne.n	800c274 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c26a:	4618      	mov	r0, r3
 800c26c:	f006 f8ac 	bl	80123c8 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800c270:	230b      	movs	r3, #11
 800c272:	e087      	b.n	800c384 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800c274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c278:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff f8df 	bl	800b440 <_fx_directory_name_extract>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c296:	4618      	mov	r0, r3
 800c298:	f006 f896 	bl	80123c8 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800c29c:	230d      	movs	r3, #13
 800c29e:	e071      	b.n	800c384 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800c2a0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c2a4:	f107 0108 	add.w	r1, r7, #8
 800c2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f7fe fc85 	bl	800abc0 <_fx_directory_free_search>
 800c2b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00c      	beq.n	800c2dc <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f006 f879 	bl	80123c8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c2d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2da:	e053      	b.n	800c384 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800c2dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff f8ab 	bl	800b440 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800c2f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800c2f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2fa:	b672      	cpsid	i
    return(int_posture);
 800c2fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800c300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c304:	4b23      	ldr	r3, [pc, #140]	; (800c394 <_fx_file_create+0x2d4>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c30c:	4b22      	ldr	r3, [pc, #136]	; (800c398 <_fx_file_create+0x2d8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c314:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c318:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c320:	f383 8810 	msr	PRIMASK, r3
}
 800c324:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800c326:	2320      	movs	r3, #32
 800c328:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	f04f 0300 	mov.w	r3, #0
 800c334:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800c33e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b2e      	cmp	r3, #46	; 0x2e
 800c344:	d106      	bne.n	800c354 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800c346:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800c34a:	f043 0302 	orr.w	r3, r3, #2
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800c354:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c35c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c360:	4611      	mov	r1, r2
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	f7fd fdf0 	bl	8009f48 <_fx_directory_entry_write>
 800c368:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800c36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c37a:	4618      	mov	r0, r3
 800c37c:	f006 f824 	bl	80123c8 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800c380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800c384:	4618      	mov	r0, r3
 800c386:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd90      	pop	{r4, r7, pc}
 800c38e:	bf00      	nop
 800c390:	4d454449 	.word	0x4d454449
 800c394:	240035d0 	.word	0x240035d0
 800c398:	240035cc 	.word	0x240035cc

0800c39c <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800c39c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3a0:	b0c2      	sub	sp, #264	; 0x108
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c3a8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800c3b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	4bcf      	ldr	r3, [pc, #828]	; (800c6f8 <_fx_file_extended_seek+0x35c>)
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d001      	beq.n	800c3c2 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800c3be:	2307      	movs	r3, #7
 800c3c0:	e2b4      	b.n	800c92c <_fx_file_extended_seek+0x590>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c3c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800c3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c3de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	4bc3      	ldr	r3, [pc, #780]	; (800c6fc <_fx_file_extended_seek+0x360>)
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d001      	beq.n	800c3f8 <_fx_file_extended_seek+0x5c>
 800c3f4:	2311      	movs	r3, #17
 800c3f6:	e299      	b.n	800c92c <_fx_file_extended_seek+0x590>
 800c3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3fc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c400:	f04f 31ff 	mov.w	r1, #4294967295
 800c404:	4618      	mov	r0, r3
 800c406:	f005 fd67 	bl	8011ed8 <_tx_mutex_get>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <_fx_file_extended_seek+0x78>
 800c410:	2311      	movs	r3, #17
 800c412:	e28b      	b.n	800c92c <_fx_file_extended_seek+0x590>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800c414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c418:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c41c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c420:	428b      	cmp	r3, r1
 800c422:	bf08      	it	eq
 800c424:	4282      	cmpeq	r2, r0
 800c426:	d108      	bne.n	800c43a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c42c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c430:	4618      	mov	r0, r3
 800c432:	f005 ffc9 	bl	80123c8 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800c436:	2300      	movs	r3, #0
 800c438:	e278      	b.n	800c92c <_fx_file_extended_seek+0x590>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c43e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800c440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c446:	fb02 f303 	mul.w	r3, r2, r3
 800c44a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800c44e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d108      	bne.n	800c468 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c45a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c45e:	4618      	mov	r0, r3
 800c460:	f005 ffb2 	bl	80123c8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800c464:	2302      	movs	r3, #2
 800c466:	e261      	b.n	800c92c <_fx_file_extended_seek+0x590>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800c468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c46c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c470:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c474:	4290      	cmp	r0, r2
 800c476:	eb71 0303 	sbcs.w	r3, r1, r3
 800c47a:	d205      	bcs.n	800c488 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800c47c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c480:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c484:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800c488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	2200      	movs	r2, #0
 800c490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c498:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c49c:	2200      	movs	r2, #0
 800c49e:	469a      	mov	sl, r3
 800c4a0:	4693      	mov	fp, r2
 800c4a2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	fb0a f203 	mul.w	r2, sl, r3
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	fb03 f30b 	mul.w	r3, r3, fp
 800c4b2:	4413      	add	r3, r2
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	fba2 450a 	umull	r4, r5, r2, sl
 800c4ba:	442b      	add	r3, r5
 800c4bc:	461d      	mov	r5, r3
 800c4be:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c4c2:	42a2      	cmp	r2, r4
 800c4c4:	41ab      	sbcs	r3, r5
 800c4c6:	f0c0 8155 	bcc.w	800c774 <_fx_file_extended_seek+0x3d8>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800c4ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4d6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c4da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c4e8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800c4f2:	4652      	mov	r2, sl
 800c4f4:	fb02 f203 	mul.w	r2, r2, r3
 800c4f8:	465b      	mov	r3, fp
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	fb01 f303 	mul.w	r3, r1, r3
 800c500:	4413      	add	r3, r2
 800c502:	4622      	mov	r2, r4
 800c504:	4651      	mov	r1, sl
 800c506:	fba2 8901 	umull	r8, r9, r2, r1
 800c50a:	444b      	add	r3, r9
 800c50c:	4699      	mov	r9, r3
 800c50e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c512:	4590      	cmp	r8, r2
 800c514:	eb79 0303 	sbcs.w	r3, r9, r3
 800c518:	d225      	bcs.n	800c566 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800c51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800c524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c52a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c52e:	fb02 f303 	mul.w	r3, r2, r3
 800c532:	2200      	movs	r2, #0
 800c534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800c53c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c540:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c544:	4621      	mov	r1, r4
 800c546:	1a51      	subs	r1, r2, r1
 800c548:	6139      	str	r1, [r7, #16]
 800c54a:	4629      	mov	r1, r5
 800c54c:	eb63 0301 	sbc.w	r3, r3, r1
 800c550:	617b      	str	r3, [r7, #20]
 800c552:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c556:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800c55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c564:	e0b7      	b.n	800c6d6 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c56a:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800c56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c570:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c572:	4413      	add	r3, r2
 800c574:	3b01      	subs	r3, #1
 800c576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800c57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	1e5a      	subs	r2, r3, #1
 800c582:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c586:	fb02 f303 	mul.w	r3, r2, r3
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c590:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800c594:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c598:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c59c:	4621      	mov	r1, r4
 800c59e:	1a51      	subs	r1, r2, r1
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	eb63 0301 	sbc.w	r3, r3, r1
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c5ae:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800c5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c5be:	e08a      	b.n	800c6d6 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800c5c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800c5ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c5d4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c5d8:	f002 fd42 	bl	800f060 <_fx_utility_FAT_entry_read>
 800c5dc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800c5e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d009      	beq.n	800c5fc <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f005 fee9 	bl	80123c8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800c5f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5fa:	e197      	b.n	800c92c <_fx_file_extended_seek+0x590>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c600:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800c60c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c610:	2200      	movs	r2, #0
 800c612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c616:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c61a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c61e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800c622:	4621      	mov	r1, r4
 800c624:	4291      	cmp	r1, r2
 800c626:	4629      	mov	r1, r5
 800c628:	eb71 0303 	sbcs.w	r3, r1, r3
 800c62c:	d216      	bcs.n	800c65c <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800c62e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c632:	2200      	movs	r2, #0
 800c634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c638:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c63c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c640:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c644:	4621      	mov	r1, r4
 800c646:	1a51      	subs	r1, r2, r1
 800c648:	6039      	str	r1, [r7, #0]
 800c64a:	4629      	mov	r1, r5
 800c64c:	eb63 0301 	sbc.w	r3, r3, r1
 800c650:	607b      	str	r3, [r7, #4]
 800c652:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c656:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800c65a:	e03c      	b.n	800c6d6 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800c65c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c660:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c664:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800c666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c66a:	1e5a      	subs	r2, r3, #1
 800c66c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c670:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800c672:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c676:	2200      	movs	r2, #0
 800c678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c67c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c680:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c684:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c688:	4621      	mov	r1, r4
 800c68a:	4628      	mov	r0, r5
 800c68c:	4283      	cmp	r3, r0
 800c68e:	bf08      	it	eq
 800c690:	428a      	cmpeq	r2, r1
 800c692:	d135      	bne.n	800c700 <_fx_file_extended_seek+0x364>
 800c694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d931      	bls.n	800c700 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c6a4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d227      	bcs.n	800c700 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800c6b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6b8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800c6ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6c6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800c6c8:	f04f 0200 	mov.w	r2, #0
 800c6cc:	f04f 0300 	mov.w	r3, #0
 800c6d0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800c6d4:	e014      	b.n	800c700 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d911      	bls.n	800c702 <_fx_file_extended_seek+0x366>
 800c6de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c6e6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	f4ff af66 	bcc.w	800c5c0 <_fx_file_extended_seek+0x224>
 800c6f4:	e005      	b.n	800c702 <_fx_file_extended_seek+0x366>
 800c6f6:	bf00      	nop
 800c6f8:	46494c45 	.word	0x46494c45
 800c6fc:	4d454449 	.word	0x4d454449
                    break;
 800c700:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800c702:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c706:	2200      	movs	r2, #0
 800c708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c70c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c710:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c714:	2200      	movs	r2, #0
 800c716:	67bb      	str	r3, [r7, #120]	; 0x78
 800c718:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c71a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c71e:	462b      	mov	r3, r5
 800c720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c724:	4642      	mov	r2, r8
 800c726:	fb02 f203 	mul.w	r2, r2, r3
 800c72a:	464b      	mov	r3, r9
 800c72c:	4621      	mov	r1, r4
 800c72e:	fb01 f303 	mul.w	r3, r1, r3
 800c732:	4413      	add	r3, r2
 800c734:	4622      	mov	r2, r4
 800c736:	4641      	mov	r1, r8
 800c738:	fba2 1201 	umull	r1, r2, r2, r1
 800c73c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c740:	460a      	mov	r2, r1
 800c742:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800c746:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c74a:	4413      	add	r3, r2
 800c74c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c750:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c754:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800c758:	4621      	mov	r1, r4
 800c75a:	4291      	cmp	r1, r2
 800c75c:	4629      	mov	r1, r5
 800c75e:	4199      	sbcs	r1, r3
 800c760:	d22f      	bcs.n	800c7c2 <_fx_file_extended_seek+0x426>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800c762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c766:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c76a:	4618      	mov	r0, r3
 800c76c:	f005 fe2c 	bl	80123c8 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800c770:	2308      	movs	r3, #8
 800c772:	e0db      	b.n	800c92c <_fx_file_extended_seek+0x590>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800c774:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c778:	2200      	movs	r2, #0
 800c77a:	673b      	str	r3, [r7, #112]	; 0x70
 800c77c:	677a      	str	r2, [r7, #116]	; 0x74
 800c77e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c782:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c786:	f7f3 fec7 	bl	8000518 <__aeabi_uldivmod>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c792:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800c794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c798:	695a      	ldr	r2, [r3, #20]
 800c79a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a0:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800c7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7a6:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800c7a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c7b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c7b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c7ba:	f7f3 fead 	bl	8000518 <__aeabi_uldivmod>
 800c7be:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800c7c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	663b      	str	r3, [r7, #96]	; 0x60
 800c7ca:	667a      	str	r2, [r7, #100]	; 0x64
 800c7cc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c7d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	4283      	cmp	r3, r0
 800c7da:	bf08      	it	eq
 800c7dc:	428a      	cmpeq	r2, r1
 800c7de:	d151      	bne.n	800c884 <_fx_file_extended_seek+0x4e8>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c7e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7ec:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c7ee:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c7f2:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7f4:	fb01 f303 	mul.w	r3, r1, r3
 800c7f8:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c7fa:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c7fe:	1e51      	subs	r1, r2, #1
 800c800:	65b9      	str	r1, [r7, #88]	; 0x58
 800c802:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c806:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80e:	2200      	movs	r2, #0
 800c810:	653b      	str	r3, [r7, #80]	; 0x50
 800c812:	657a      	str	r2, [r7, #84]	; 0x54
 800c814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c818:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c81c:	f7f3 fe7c 	bl	8000518 <__aeabi_uldivmod>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c824:	4613      	mov	r3, r2
 800c826:	4423      	add	r3, r4
 800c828:	2200      	movs	r2, #0
 800c82a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c82c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c82e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c832:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c836:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c83a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c83e:	1e51      	subs	r1, r2, #1
 800c840:	6439      	str	r1, [r7, #64]	; 0x40
 800c842:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c846:	647b      	str	r3, [r7, #68]	; 0x44
 800c848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	2200      	movs	r2, #0
 800c850:	63bb      	str	r3, [r7, #56]	; 0x38
 800c852:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c858:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c85c:	f7f3 fe5c 	bl	8000518 <__aeabi_uldivmod>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c868:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c86a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c86e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c872:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800c876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c87a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c880:	631a      	str	r2, [r3, #48]	; 0x30
 800c882:	e04b      	b.n	800c91c <_fx_file_extended_seek+0x580>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c88a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c88e:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c890:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c892:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c896:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c898:	fb01 f303 	mul.w	r3, r1, r3
 800c89c:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c8a8:	637a      	str	r2, [r7, #52]	; 0x34
 800c8aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c8ae:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c8b2:	f7f3 fe31 	bl	8000518 <__aeabi_uldivmod>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	4423      	add	r3, r4
 800c8be:	2200      	movs	r2, #0
 800c8c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c8cc:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	627a      	str	r2, [r7, #36]	; 0x24
 800c8dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8e0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c8e4:	f7f3 fe18 	bl	8000518 <__aeabi_uldivmod>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8f0:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c8f2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c8f6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c8fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c904:	2200      	movs	r2, #0
 800c906:	61bb      	str	r3, [r7, #24]
 800c908:	61fa      	str	r2, [r7, #28]
 800c90a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c90e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c912:	f7f3 fe01 	bl	8000518 <__aeabi_uldivmod>
 800c916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c91a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c920:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c924:	4618      	mov	r0, r3
 800c926:	f005 fd4f 	bl	80123c8 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c932:	46bd      	mov	sp, r7
 800c934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c938 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800c938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c93c:	b0e8      	sub	sp, #416	; 0x1a0
 800c93e:	af02      	add	r7, sp, #8
 800c940:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800c944:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800c948:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800c94c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c956:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	4bd9      	ldr	r3, [pc, #868]	; (800ccc4 <_fx_file_open+0x38c>)
 800c95e:	429a      	cmp	r2, r3
 800c960:	d002      	beq.n	800c968 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c962:	2311      	movs	r3, #17
 800c964:	f000 bcc4 	b.w	800d2f0 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800c968:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c96c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c976:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800c97a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c97e:	2300      	movs	r3, #0
 800c980:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800c984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d006      	beq.n	800c99c <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800c98e:	4bce      	ldr	r3, [pc, #824]	; (800ccc8 <_fx_file_open+0x390>)
 800c990:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c994:	2318      	movs	r3, #24
 800c996:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800c99a:	e006      	b.n	800c9aa <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800c99c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800c9a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c9a4:	2318      	movs	r3, #24
 800c9a6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800c9aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d106      	bne.n	800c9c0 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800c9be:	e002      	b.n	800c9c6 <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c9c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	4bbd      	ldr	r3, [pc, #756]	; (800ccc4 <_fx_file_open+0x38c>)
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d002      	beq.n	800c9d8 <_fx_file_open+0xa0>
 800c9d2:	2311      	movs	r3, #17
 800c9d4:	f000 bc8c 	b.w	800d2f0 <_fx_file_open+0x9b8>
 800c9d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c9e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f005 fa77 	bl	8011ed8 <_tx_mutex_get>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <_fx_file_open+0xbe>
 800c9f0:	2311      	movs	r3, #17
 800c9f2:	f000 bc7d 	b.w	800d2f0 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800c9f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9fa:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800c9fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca02:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800ca04:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800ca0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ca16:	2300      	movs	r3, #0
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800ca20:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800ca24:	f7fe fd6e 	bl	800b504 <_fx_directory_search>
 800ca28:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800ca2c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00a      	beq.n	800ca4a <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ca34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca38:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f005 fcc3 	bl	80123c8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800ca42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ca46:	f000 bc53 	b.w	800d2f0 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800ca4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca4e:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800ca52:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800ca56:	4013      	ands	r3, r2
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d009      	beq.n	800ca72 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ca5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca66:	4618      	mov	r0, r3
 800ca68:	f005 fcae 	bl	80123c8 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800ca6c:	2305      	movs	r3, #5
 800ca6e:	f000 bc3f 	b.w	800d2f0 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800ca72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d160      	bne.n	800cb3c <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800ca7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d009      	beq.n	800ca9a <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ca86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca8a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f005 fc9a 	bl	80123c8 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800ca94:	2323      	movs	r3, #35	; 0x23
 800ca96:	f000 bc2b 	b.w	800d2f0 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800ca9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800caa2:	f003 0301 	and.w	r3, r3, #1
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d009      	beq.n	800cabe <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800caaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caae:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cab2:	4618      	mov	r0, r3
 800cab4:	f005 fc88 	bl	80123c8 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800cab8:	2306      	movs	r3, #6
 800caba:	f000 bc19 	b.w	800d2f0 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800cabe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cac2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cac6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800caca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cace:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cad2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800cad6:	e02d      	b.n	800cb34 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800cad8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cadc:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800cae0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cae4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800cae8:	4299      	cmp	r1, r3
 800caea:	bf08      	it	eq
 800caec:	4290      	cmpeq	r0, r2
 800caee:	d117      	bne.n	800cb20 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800caf0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800caf4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800caf8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cafc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d10d      	bne.n	800cb20 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800cb04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cb08:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d108      	bne.n	800cb20 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800cb0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb12:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb16:	4618      	mov	r0, r3
 800cb18:	f005 fc56 	bl	80123c8 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800cb1c:	2306      	movs	r3, #6
 800cb1e:	e3e7      	b.n	800d2f0 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800cb20:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cb24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800cb2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800cb34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1cd      	bne.n	800cad8 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800cb3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800cb48:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb4c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800cb50:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800cb5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb60:	fb02 f303 	mul.w	r3, r2, r3
 800cb64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800cb68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800cb70:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d108      	bne.n	800cb8a <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cb78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb7c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb80:	4618      	mov	r0, r3
 800cb82:	f005 fc21 	bl	80123c8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800cb86:	2302      	movs	r3, #2
 800cb88:	e3b2      	b.n	800d2f0 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800cb96:	2301      	movs	r3, #1
 800cb98:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800cb9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cba0:	2301      	movs	r3, #1
 800cba2:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800cba4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 8103 	beq.w	800cdb4 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800cbae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800cbb8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800cbbc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cbc0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	eb11 0a02 	adds.w	sl, r1, r2
 800cbca:	4629      	mov	r1, r5
 800cbcc:	eb41 0b03 	adc.w	fp, r1, r3
 800cbd0:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800cbd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800cbd8:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800cbdc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cbe0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cbea:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800cbee:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800cbf2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800cbf6:	f7f3 fc8f 	bl	8000518 <__aeabi_uldivmod>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4619      	mov	r1, r3
 800cc02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cc06:	2200      	movs	r2, #0
 800cc08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc0c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800cc10:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800cc14:	4623      	mov	r3, r4
 800cc16:	fb03 f201 	mul.w	r2, r3, r1
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	fb00 f303 	mul.w	r3, r0, r3
 800cc20:	4413      	add	r3, r2
 800cc22:	4622      	mov	r2, r4
 800cc24:	fba0 8902 	umull	r8, r9, r0, r2
 800cc28:	444b      	add	r3, r9
 800cc2a:	4699      	mov	r9, r3
 800cc2c:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800cc30:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800cc34:	e12f      	b.n	800ce96 <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800cc36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800cc40:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800cc44:	461a      	mov	r2, r3
 800cc46:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800cc4a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800cc4e:	f002 fa07 	bl	800f060 <_fx_utility_FAT_entry_read>
 800cc52:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800cc56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d009      	beq.n	800cc72 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cc5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc66:	4618      	mov	r0, r3
 800cc68:	f005 fbae 	bl	80123c8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800cc6c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc70:	e33e      	b.n	800d2f0 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800cc72:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800cc76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d006      	beq.n	800cc8c <_fx_file_open+0x354>
 800cc7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc84:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d908      	bls.n	800cc9e <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cc8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc90:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc94:	4618      	mov	r0, r3
 800cc96:	f005 fb97 	bl	80123c8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e328      	b.n	800d2f0 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800cc9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d10f      	bne.n	800cccc <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800ccac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00e      	beq.n	800ccd2 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800ccb4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ccc0:	619a      	str	r2, [r3, #24]
 800ccc2:	e006      	b.n	800ccd2 <_fx_file_open+0x39a>
 800ccc4:	4d454449 	.word	0x4d454449
 800ccc8:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800ccd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ccd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800ccda:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ccde:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800cce2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cce6:	2200      	movs	r2, #0
 800cce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ccec:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800ccf0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ccf4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800ccf8:	4641      	mov	r1, r8
 800ccfa:	4291      	cmp	r1, r2
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	eb71 0303 	sbcs.w	r3, r1, r3
 800cd02:	d216      	bcs.n	800cd32 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800cd04:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cd0e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800cd12:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cd16:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800cd1a:	4641      	mov	r1, r8
 800cd1c:	1a51      	subs	r1, r2, r1
 800cd1e:	6039      	str	r1, [r7, #0]
 800cd20:	4649      	mov	r1, r9
 800cd22:	eb63 0301 	sbc.w	r3, r3, r1
 800cd26:	607b      	str	r3, [r7, #4]
 800cd28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd2c:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800cd30:	e040      	b.n	800cdb4 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800cd32:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd36:	6a1b      	ldr	r3, [r3, #32]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d13b      	bne.n	800cdb4 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800cd3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cd40:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800cd44:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800cd46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cd4a:	1e5a      	subs	r2, r3, #1
 800cd4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd50:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800cd52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cd56:	2200      	movs	r2, #0
 800cd58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd5c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cd60:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cd64:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800cd68:	4641      	mov	r1, r8
 800cd6a:	4648      	mov	r0, r9
 800cd6c:	4283      	cmp	r3, r0
 800cd6e:	bf08      	it	eq
 800cd70:	428a      	cmpeq	r2, r1
 800cd72:	d11f      	bne.n	800cdb4 <_fx_file_open+0x47c>
 800cd74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d91b      	bls.n	800cdb4 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cd7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd84:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cd88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d211      	bcs.n	800cdb4 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800cd90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cd94:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd98:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800cd9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cda6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800cda8:	f04f 0200 	mov.w	r2, #0
 800cdac:	f04f 0300 	mov.w	r3, #0
 800cdb0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cdb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d90a      	bls.n	800cdd2 <_fx_file_open+0x49a>
 800cdbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cdc4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cdc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	f4ff af32 	bcc.w	800cc36 <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cdd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cdde:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800cde2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cde6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cde8:	2200      	movs	r2, #0
 800cdea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cdf2:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800cdf6:	464b      	mov	r3, r9
 800cdf8:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800cdfc:	4652      	mov	r2, sl
 800cdfe:	fb02 f203 	mul.w	r2, r2, r3
 800ce02:	465b      	mov	r3, fp
 800ce04:	4641      	mov	r1, r8
 800ce06:	fb01 f303 	mul.w	r3, r1, r3
 800ce0a:	4413      	add	r3, r2
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	4651      	mov	r1, sl
 800ce10:	fba2 4501 	umull	r4, r5, r2, r1
 800ce14:	442b      	add	r3, r5
 800ce16:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800ce18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce22:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800ce26:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	fb03 f205 	mul.w	r2, r3, r5
 800ce30:	460b      	mov	r3, r1
 800ce32:	fb04 f303 	mul.w	r3, r4, r3
 800ce36:	4413      	add	r3, r2
 800ce38:	4602      	mov	r2, r0
 800ce3a:	fba4 1202 	umull	r1, r2, r4, r2
 800ce3e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800ce42:	460a      	mov	r2, r1
 800ce44:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800ce48:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ce52:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800ce56:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800ce5a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800ce5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce62:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800ce66:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800ce6a:	4282      	cmp	r2, r0
 800ce6c:	418b      	sbcs	r3, r1
 800ce6e:	d309      	bcc.n	800ce84 <_fx_file_open+0x54c>
 800ce70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00e      	beq.n	800ce96 <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800ce78:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ce7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d908      	bls.n	800ce96 <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800ce84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce88:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f005 fa9b 	bl	80123c8 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800ce92:	2308      	movs	r3, #8
 800ce94:	e22c      	b.n	800d2f0 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800ce96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce9a:	4baa      	ldr	r3, [pc, #680]	; (800d144 <_fx_file_open+0x80c>)
 800ce9c:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800ce9e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cea2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800cea6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceaa:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800ceac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ceb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ceb4:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800ceb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ceba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cebe:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800cec0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cec4:	2300      	movs	r3, #0
 800cec6:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800cec8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cecc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ced0:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800ced2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ced6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ceda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cede:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800cee0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cee4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800cee8:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800ceea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceee:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800cef2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cef6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800cefa:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cefe:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800cf02:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800cf06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800cf10:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d163      	bne.n	800cfe0 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800cf18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf1c:	695a      	ldr	r2, [r3, #20]
 800cf1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf22:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800cf24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf28:	2200      	movs	r2, #0
 800cf2a:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf38:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cf3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	3b02      	subs	r3, #2
 800cf44:	2200      	movs	r2, #0
 800cf46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800cf4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf54:	2200      	movs	r2, #0
 800cf56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf5a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cf5e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800cf62:	462b      	mov	r3, r5
 800cf64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf68:	4642      	mov	r2, r8
 800cf6a:	fb02 f203 	mul.w	r2, r2, r3
 800cf6e:	464b      	mov	r3, r9
 800cf70:	4621      	mov	r1, r4
 800cf72:	fb01 f303 	mul.w	r3, r1, r3
 800cf76:	4413      	add	r3, r2
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4641      	mov	r1, r8
 800cf7c:	fba2 1201 	umull	r1, r2, r2, r1
 800cf80:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800cf84:	460a      	mov	r2, r1
 800cf86:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800cf8a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cf8e:	4413      	add	r3, r2
 800cf90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf94:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cf98:	4623      	mov	r3, r4
 800cf9a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	189b      	adds	r3, r3, r2
 800cfa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	eb42 0303 	adc.w	r3, r2, r3
 800cfae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cfba:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800cfbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800cfc6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfca:	2200      	movs	r2, #0
 800cfcc:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800cfce:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cfd2:	f04f 0200 	mov.w	r2, #0
 800cfd6:	f04f 0300 	mov.w	r3, #0
 800cfda:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800cfde:	e140      	b.n	800d262 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800cfe0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfea:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cfee:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cff2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800cff6:	4621      	mov	r1, r4
 800cff8:	4628      	mov	r0, r5
 800cffa:	4283      	cmp	r3, r0
 800cffc:	bf08      	it	eq
 800cffe:	428a      	cmpeq	r2, r1
 800d000:	f040 80a2 	bne.w	800d148 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d010:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d014:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d020:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d024:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d028:	460b      	mov	r3, r1
 800d02a:	3b02      	subs	r3, #2
 800d02c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d030:	4613      	mov	r3, r2
 800d032:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d03a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d040:	2200      	movs	r2, #0
 800d042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d046:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d04a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d04e:	462b      	mov	r3, r5
 800d050:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d054:	4642      	mov	r2, r8
 800d056:	fb02 f203 	mul.w	r2, r2, r3
 800d05a:	464b      	mov	r3, r9
 800d05c:	4621      	mov	r1, r4
 800d05e:	fb01 f303 	mul.w	r3, r1, r3
 800d062:	4413      	add	r3, r2
 800d064:	4622      	mov	r2, r4
 800d066:	4641      	mov	r1, r8
 800d068:	fba2 1201 	umull	r1, r2, r2, r1
 800d06c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d070:	460a      	mov	r2, r1
 800d072:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800d076:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d07a:	4413      	add	r3, r2
 800d07c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d080:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d084:	4623      	mov	r3, r4
 800d086:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d08a:	4602      	mov	r2, r0
 800d08c:	189b      	adds	r3, r3, r2
 800d08e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d092:	460b      	mov	r3, r1
 800d094:	462a      	mov	r2, r5
 800d096:	eb42 0303 	adc.w	r3, r2, r3
 800d09a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d09e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d0a2:	1e51      	subs	r1, r2, #1
 800d0a4:	67b9      	str	r1, [r7, #120]	; 0x78
 800d0a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d0aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	673b      	str	r3, [r7, #112]	; 0x70
 800d0b6:	677a      	str	r2, [r7, #116]	; 0x74
 800d0b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d0bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d0c0:	f7f3 fa2a 	bl	8000518 <__aeabi_uldivmod>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	66ba      	str	r2, [r7, #104]	; 0x68
 800d0cc:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d0ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d0d2:	4623      	mov	r3, r4
 800d0d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d0d8:	4602      	mov	r2, r0
 800d0da:	189b      	adds	r3, r3, r2
 800d0dc:	663b      	str	r3, [r7, #96]	; 0x60
 800d0de:	460b      	mov	r3, r1
 800d0e0:	462a      	mov	r2, r5
 800d0e2:	eb42 0303 	adc.w	r3, r2, r3
 800d0e6:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d0f0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d0f4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d0f8:	1e51      	subs	r1, r2, #1
 800d0fa:	65b9      	str	r1, [r7, #88]	; 0x58
 800d0fc:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d100:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d102:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d108:	2200      	movs	r2, #0
 800d10a:	653b      	str	r3, [r7, #80]	; 0x50
 800d10c:	657a      	str	r2, [r7, #84]	; 0x54
 800d10e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d112:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d116:	f7f3 f9ff 	bl	8000518 <__aeabi_uldivmod>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d122:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d124:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d128:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d12c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d130:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d13a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d13e:	631a      	str	r2, [r3, #48]	; 0x30
 800d140:	e08f      	b.n	800d262 <_fx_file_open+0x92a>
 800d142:	bf00      	nop
 800d144:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d148:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d14e:	2200      	movs	r2, #0
 800d150:	64bb      	str	r3, [r7, #72]	; 0x48
 800d152:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d154:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	2200      	movs	r2, #0
 800d15c:	643b      	str	r3, [r7, #64]	; 0x40
 800d15e:	647a      	str	r2, [r7, #68]	; 0x44
 800d160:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d164:	460b      	mov	r3, r1
 800d166:	3b02      	subs	r3, #2
 800d168:	63bb      	str	r3, [r7, #56]	; 0x38
 800d16a:	4613      	mov	r3, r2
 800d16c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d170:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d178:	2200      	movs	r2, #0
 800d17a:	633b      	str	r3, [r7, #48]	; 0x30
 800d17c:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d17e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d182:	462b      	mov	r3, r5
 800d184:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d188:	4642      	mov	r2, r8
 800d18a:	fb02 f203 	mul.w	r2, r2, r3
 800d18e:	464b      	mov	r3, r9
 800d190:	4621      	mov	r1, r4
 800d192:	fb01 f303 	mul.w	r3, r1, r3
 800d196:	4413      	add	r3, r2
 800d198:	4622      	mov	r2, r4
 800d19a:	4641      	mov	r1, r8
 800d19c:	fba2 1201 	umull	r1, r2, r2, r1
 800d1a0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d1a4:	460a      	mov	r2, r1
 800d1a6:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d1aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d1b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d1be:	4602      	mov	r2, r0
 800d1c0:	189b      	adds	r3, r3, r2
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	462a      	mov	r2, r5
 800d1c8:	eb42 0303 	adc.w	r3, r2, r3
 800d1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d1ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	623b      	str	r3, [r7, #32]
 800d1d8:	627a      	str	r2, [r7, #36]	; 0x24
 800d1da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1de:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d1e2:	f7f3 f999 	bl	8000518 <__aeabi_uldivmod>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	61ba      	str	r2, [r7, #24]
 800d1ee:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d1f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d1f4:	4623      	mov	r3, r4
 800d1f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	460b      	mov	r3, r1
 800d202:	462a      	mov	r2, r5
 800d204:	eb42 0303 	adc.w	r3, r2, r3
 800d208:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d20a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d20e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d212:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d216:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21c:	2200      	movs	r2, #0
 800d21e:	60bb      	str	r3, [r7, #8]
 800d220:	60fa      	str	r2, [r7, #12]
 800d222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d226:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d22a:	f7f3 f975 	bl	8000518 <__aeabi_uldivmod>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d238:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d23c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d240:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d244:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800d248:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d24c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d250:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d252:	fbb3 f1f2 	udiv	r1, r3, r2
 800d256:	fb01 f202 	mul.w	r2, r1, r2
 800d25a:	1a9a      	subs	r2, r3, r2
 800d25c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d260:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800d262:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d266:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d01f      	beq.n	800d2ae <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800d26e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d272:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d278:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800d27c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d280:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d284:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d288:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800d28a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d28e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d292:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800d294:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d298:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800d29c:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800d29e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2a2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d2a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2aa:	65da      	str	r2, [r3, #92]	; 0x5c
 800d2ac:	e00f      	b.n	800d2ce <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800d2ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d2b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800d2ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d2c2:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800d2c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d2cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800d2ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2dc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800d2e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2e4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f005 f86d 	bl	80123c8 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d2fc <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800d2fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d300:	b0aa      	sub	sp, #168	; 0xa8
 800d302:	af04      	add	r7, sp, #16
 800d304:	66f8      	str	r0, [r7, #108]	; 0x6c
 800d306:	66b9      	str	r1, [r7, #104]	; 0x68
 800d308:	667a      	str	r2, [r7, #100]	; 0x64
 800d30a:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	4b9d      	ldr	r3, [pc, #628]	; (800d588 <_fx_file_read+0x28c>)
 800d312:	429a      	cmp	r2, r3
 800d314:	d001      	beq.n	800d31a <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d316:	2307      	movs	r3, #7
 800d318:	e28d      	b.n	800d836 <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d31e:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800d320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d322:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d326:	1c5a      	adds	r2, r3, #1
 800d328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d32a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d332:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d334:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	4b94      	ldr	r3, [pc, #592]	; (800d58c <_fx_file_read+0x290>)
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d001      	beq.n	800d342 <_fx_file_read+0x46>
 800d33e:	2311      	movs	r3, #17
 800d340:	e279      	b.n	800d836 <_fx_file_read+0x53a>
 800d342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d344:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d348:	f04f 31ff 	mov.w	r1, #4294967295
 800d34c:	4618      	mov	r0, r3
 800d34e:	f004 fdc3 	bl	8011ed8 <_tx_mutex_get>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d001      	beq.n	800d35c <_fx_file_read+0x60>
 800d358:	2311      	movs	r3, #17
 800d35a:	e26c      	b.n	800d836 <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800d35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d35e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800d362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d364:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800d368:	4290      	cmp	r0, r2
 800d36a:	eb71 0303 	sbcs.w	r3, r1, r3
 800d36e:	d30a      	bcc.n	800d386 <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d372:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d376:	4618      	mov	r0, r3
 800d378:	f005 f826 	bl	80123c8 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800d37c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800d382:	2309      	movs	r3, #9
 800d384:	e257      	b.n	800d836 <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800d386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800d38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d38e:	2200      	movs	r2, #0
 800d390:	4698      	mov	r8, r3
 800d392:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800d394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d396:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800d39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d39c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d3a0:	1a84      	subs	r4, r0, r2
 800d3a2:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800d3a6:	4544      	cmp	r4, r8
 800d3a8:	eb75 0309 	sbcs.w	r3, r5, r9
 800d3ac:	d209      	bcs.n	800d3c2 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800d3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d3bc:	4613      	mov	r3, r2
 800d3be:	1acb      	subs	r3, r1, r3
 800d3c0:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800d3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800d3c8:	e20a      	b.n	800d7e0 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d105      	bne.n	800d3de <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800d3d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d3d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d24d      	bcs.n	800d47a <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d3e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3e6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d3e8:	2304      	movs	r3, #4
 800d3ea:	9302      	str	r3, [sp, #8]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	9301      	str	r3, [sp, #4]
 800d3f0:	9200      	str	r2, [sp, #0]
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d3f8:	f003 fa40 	bl	801087c <_fx_utility_logical_sector_read>
 800d3fc:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800d3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d400:	2b00      	cmp	r3, #0
 800d402:	d007      	beq.n	800d414 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d406:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d40a:	4618      	mov	r0, r3
 800d40c:	f004 ffdc 	bl	80123c8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800d410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d412:	e210      	b.n	800d836 <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800d418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800d422:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d903      	bls.n	800d436 <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800d42e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d438:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800d43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d43e:	4413      	add	r3, r2
 800d440:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d444:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d448:	4618      	mov	r0, r3
 800d44a:	f003 fe13 	bl	8011074 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800d44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d456:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800d458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d45a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800d45c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800d46a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d46e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d472:	4413      	add	r3, r2
 800d474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d478:	e108      	b.n	800d68c <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800d47a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d47c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d47e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d482:	fbb3 f3f2 	udiv	r3, r3, r2
 800d486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800d48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d496:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d498:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d49a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d4a6:	e033      	b.n	800d510 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800d4a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d4b2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d4b4:	f001 fdd4 	bl	800f060 <_fx_utility_FAT_entry_read>
 800d4b8:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d4ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <_fx_file_read+0x1da>
 800d4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d907      	bls.n	800d4d6 <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d4c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d4cc:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d4d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d20c      	bcs.n	800d4f0 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d4d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f004 ff73 	bl	80123c8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d4e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <_fx_file_read+0x1f0>
                        {
                            return(status);
 800d4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4ea:	e1a4      	b.n	800d836 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d4ec:	2308      	movs	r3, #8
 800d4ee:	e1a2      	b.n	800d836 <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800d4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d110      	bne.n	800d51e <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800d4fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d50a:	4413      	add	r3, r2
 800d50c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d510:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d518:	429a      	cmp	r2, r3
 800d51a:	d3c5      	bcc.n	800d4a8 <_fx_file_read+0x1ac>
 800d51c:	e000      	b.n	800d520 <_fx_file_read+0x224>
                        break;
 800d51e:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800d520:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d528:	429a      	cmp	r2, r3
 800d52a:	d203      	bcs.n	800d534 <_fx_file_read+0x238>
            {
                sectors = i;
 800d52c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800d534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d129      	bne.n	800d590 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d53c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d53e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d544:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d546:	2304      	movs	r3, #4
 800d548:	9302      	str	r3, [sp, #8]
 800d54a:	2301      	movs	r3, #1
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	9200      	str	r2, [sp, #0]
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d556:	f003 f991 	bl	801087c <_fx_utility_logical_sector_read>
 800d55a:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d007      	beq.n	800d572 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d562:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d564:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d568:	4618      	mov	r0, r3
 800d56a:	f004 ff2d 	bl	80123c8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d56e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d570:	e161      	b.n	800d836 <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800d572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d574:	6898      	ldr	r0, [r3, #8]
 800d576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57a:	461a      	mov	r2, r3
 800d57c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d580:	f003 fd78 	bl	8011074 <_fx_utility_memory_copy>
 800d584:	e02f      	b.n	800d5e6 <_fx_file_read+0x2ea>
 800d586:	bf00      	nop
 800d588:	46494c45 	.word	0x46494c45
 800d58c:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800d590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d592:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800d596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d598:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d59c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800d5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800d5a6:	2304      	movs	r3, #4
 800d5a8:	9302      	str	r3, [sp, #8]
 800d5aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d5bc:	f003 f95e 	bl	801087c <_fx_utility_logical_sector_read>
 800d5c0:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800d5c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d5d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d007      	beq.n	800d5e6 <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d5d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f004 fef3 	bl	80123c8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d5e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5e4:	e127      	b.n	800d836 <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800d5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800d5ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5f6:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800d5f8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	18c3      	adds	r3, r0, r3
 800d600:	653b      	str	r3, [r7, #80]	; 0x50
 800d602:	462b      	mov	r3, r5
 800d604:	eb41 0303 	adc.w	r3, r1, r3
 800d608:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800d60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d610:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d616:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d61c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d620:	4413      	add	r3, r2
 800d622:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800d624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d628:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d62c:	18ca      	adds	r2, r1, r3
 800d62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d630:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800d632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d63a:	4413      	add	r3, r2
 800d63c:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800d63e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d642:	fbb1 f3f2 	udiv	r3, r1, r2
 800d646:	fb02 f303 	mul.w	r3, r2, r3
 800d64a:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800d64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d64e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800d650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800d654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d656:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800d658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d65a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d65e:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d668:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800d66c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d670:	1a9b      	subs	r3, r3, r2
 800d672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d67a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d67e:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800d682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d686:	4413      	add	r3, r2
 800d688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800d68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800d690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800d694:	429a      	cmp	r2, r3
 800d696:	f0c0 80a3 	bcc.w	800d7e0 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d69a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d11a      	bne.n	800d6d8 <_fx_file_read+0x3dc>
 800d6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d6a8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	64b9      	str	r1, [r7, #72]	; 0x48
 800d6ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d6b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	1851      	adds	r1, r2, r1
 800d6b8:	6439      	str	r1, [r7, #64]	; 0x40
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	414b      	adcs	r3, r1
 800d6be:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800d6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d6c6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4291      	cmp	r1, r2
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	eb71 0303 	sbcs.w	r3, r1, r3
 800d6d4:	f080 808a 	bcs.w	800d7ec <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800d6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800d6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800d6e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d368      	bcc.n	800d7c0 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800d6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f0:	6a19      	ldr	r1, [r3, #32]
 800d6f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d6fa:	f001 fcb1 	bl	800f060 <_fx_utility_FAT_entry_read>
 800d6fe:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10a      	bne.n	800d71c <_fx_file_read+0x420>
 800d706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d907      	bls.n	800d71c <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d70c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d70e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d712:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d718:	429a      	cmp	r2, r3
 800d71a:	d20c      	bcs.n	800d736 <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d71c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d71e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d722:	4618      	mov	r0, r3
 800d724:	f004 fe50 	bl	80123c8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <_fx_file_read+0x436>
                        {
                            return(status);
 800d72e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d730:	e081      	b.n	800d836 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d732:	2308      	movs	r3, #8
 800d734:	e07f      	b.n	800d836 <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800d736:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d73a:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800d73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	1c5a      	adds	r2, r3, #1
 800d742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d744:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d74a:	2200      	movs	r2, #0
 800d74c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d74e:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d752:	2200      	movs	r2, #0
 800d754:	633b      	str	r3, [r7, #48]	; 0x30
 800d756:	637a      	str	r2, [r7, #52]	; 0x34
 800d758:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d75c:	460b      	mov	r3, r1
 800d75e:	3b02      	subs	r3, #2
 800d760:	62bb      	str	r3, [r7, #40]	; 0x28
 800d762:	4613      	mov	r3, r2
 800d764:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d768:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d76a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76e:	2200      	movs	r2, #0
 800d770:	623b      	str	r3, [r7, #32]
 800d772:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d774:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d778:	462b      	mov	r3, r5
 800d77a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d77e:	4642      	mov	r2, r8
 800d780:	fb02 f203 	mul.w	r2, r2, r3
 800d784:	464b      	mov	r3, r9
 800d786:	4621      	mov	r1, r4
 800d788:	fb01 f303 	mul.w	r3, r1, r3
 800d78c:	4413      	add	r3, r2
 800d78e:	4622      	mov	r2, r4
 800d790:	4641      	mov	r1, r8
 800d792:	fba2 ab01 	umull	sl, fp, r2, r1
 800d796:	445b      	add	r3, fp
 800d798:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d79a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d79e:	460b      	mov	r3, r1
 800d7a0:	eb13 030a 	adds.w	r3, r3, sl
 800d7a4:	61bb      	str	r3, [r7, #24]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	eb43 030b 	adc.w	r3, r3, fp
 800d7ac:	61fb      	str	r3, [r7, #28]
 800d7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d7b4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800d7b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	6393      	str	r3, [r2, #56]	; 0x38
 800d7be:	e00c      	b.n	800d7da <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800d7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d7c6:	1c51      	adds	r1, r2, #1
 800d7c8:	6139      	str	r1, [r7, #16]
 800d7ca:	f143 0300 	adc.w	r3, r3, #0
 800d7ce:	617b      	str	r3, [r7, #20]
 800d7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d7d6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800d7da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7dc:	2300      	movs	r3, #0
 800d7de:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800d7e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f47f adf0 	bne.w	800d3ca <_fx_file_read+0xce>
 800d7ea:	e000      	b.n	800d7ee <_fx_file_read+0x4f2>
                break;
 800d7ec:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800d7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d7f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d800:	4621      	mov	r1, r4
 800d802:	1851      	adds	r1, r2, r1
 800d804:	6039      	str	r1, [r7, #0]
 800d806:	4629      	mov	r1, r5
 800d808:	eb43 0101 	adc.w	r1, r3, r1
 800d80c:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800d80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d810:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d814:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800d818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d81a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d81c:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800d81e:	4b08      	ldr	r3, [pc, #32]	; (800d840 <_fx_file_read+0x544>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800d828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d82a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d82e:	4618      	mov	r0, r3
 800d830:	f004 fdca 	bl	80123c8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3798      	adds	r7, #152	; 0x98
 800d83a:	46bd      	mov	sp, r7
 800d83c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d840:	240035cc 	.word	0x240035cc

0800d844 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	2000      	movs	r0, #0
 800d852:	460a      	mov	r2, r1
 800d854:	4603      	mov	r3, r0
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7fe fda0 	bl	800c39c <_fx_file_extended_seek>
 800d85c:	4603      	mov	r3, r0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
	...

0800d868 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a3f      	ldr	r2, [pc, #252]	; (800d980 <_fx_media_abort+0x118>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d001      	beq.n	800d88c <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800d888:	2311      	movs	r3, #17
 800d88a:	e074      	b.n	800d976 <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a3b      	ldr	r2, [pc, #236]	; (800d980 <_fx_media_abort+0x118>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d001      	beq.n	800d89a <_fx_media_abort+0x32>
 800d896:	2311      	movs	r3, #17
 800d898:	e06d      	b.n	800d976 <_fx_media_abort+0x10e>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d8a0:	f04f 31ff 	mov.w	r1, #4294967295
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f004 fb17 	bl	8011ed8 <_tx_mutex_get>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <_fx_media_abort+0x4c>
 800d8b0:	2311      	movs	r3, #17
 800d8b2:	e060      	b.n	800d976 <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8ba:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d8c2:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800d8c4:	e008      	b.n	800d8d8 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	4a2e      	ldr	r2, [pc, #184]	; (800d984 <_fx_media_abort+0x11c>)
 800d8ca:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d0:	61bb      	str	r3, [r7, #24]
        open_count--;
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1f3      	bne.n	800d8c6 <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2203      	movs	r2, #3
 800d8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2290      	movs	r2, #144	; 0x90
 800d8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d8fc:	613b      	str	r3, [r7, #16]
    return(posture);
 800d8fe:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d900:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d902:	b672      	cpsid	i
    return(int_posture);
 800d904:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800d906:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800d908:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <_fx_media_abort+0x120>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d103      	bne.n	800d918 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800d910:	4b1e      	ldr	r3, [pc, #120]	; (800d98c <_fx_media_abort+0x124>)
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	e019      	b.n	800d94c <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800d924:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800d934:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800d938:	4b14      	ldr	r3, [pc, #80]	; (800d98c <_fx_media_abort+0x124>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d104      	bne.n	800d94c <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d948:	4a10      	ldr	r2, [pc, #64]	; (800d98c <_fx_media_abort+0x124>)
 800d94a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800d94c:	4b0e      	ldr	r3, [pc, #56]	; (800d988 <_fx_media_abort+0x120>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3b01      	subs	r3, #1
 800d952:	4a0d      	ldr	r2, [pc, #52]	; (800d988 <_fx_media_abort+0x120>)
 800d954:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4a0d      	ldr	r2, [pc, #52]	; (800d990 <_fx_media_abort+0x128>)
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	f383 8810 	msr	PRIMASK, r3
}
 800d966:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d96e:	4618      	mov	r0, r3
 800d970:	f004 fa08 	bl	8011d84 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3720      	adds	r7, #32
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	4d454449 	.word	0x4d454449
 800d984:	46494c41 	.word	0x46494c41
 800d988:	240035c8 	.word	0x240035c8
 800d98c:	240035c4 	.word	0x240035c4
 800d990:	4d454441 	.word	0x4d454441

0800d994 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800d994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9a4:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	330b      	adds	r3, #11
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f001 faf2 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800d9be:	2302      	movs	r3, #2
 800d9c0:	e08c      	b.n	800dadc <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3318      	adds	r3, #24
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f001 fae4 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	331a      	adds	r3, #26
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f001 fadc 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3313      	adds	r3, #19
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f001 fad4 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	4698      	mov	r8, r3
 800d9f2:	4691      	mov	r9, r2
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800da00:	4313      	orrs	r3, r2
 800da02:	d10b      	bne.n	800da1c <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3320      	adds	r3, #32
 800da08:	4618      	mov	r0, r3
 800da0a:	f001 faeb 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800da0e:	4603      	mov	r3, r0
 800da10:	2200      	movs	r2, #0
 800da12:	461c      	mov	r4, r3
 800da14:	4615      	mov	r5, r2
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800da22:	4313      	orrs	r3, r2
 800da24:	d101      	bne.n	800da2a <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800da26:	2302      	movs	r3, #2
 800da28:	e058      	b.n	800dadc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	330e      	adds	r3, #14
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 fab0 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800da34:	4602      	mov	r2, r0
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800da42:	2302      	movs	r3, #2
 800da44:	e04a      	b.n	800dadc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	330d      	adds	r3, #13
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800da5a:	2302      	movs	r3, #2
 800da5c:	e03e      	b.n	800dadc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3316      	adds	r3, #22
 800da62:	4618      	mov	r0, r3
 800da64:	f001 fa96 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800da68:	4602      	mov	r2, r0
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da72:	2b00      	cmp	r3, #0
 800da74:	d107      	bne.n	800da86 <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	3324      	adds	r3, #36	; 0x24
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 fab2 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800da80:	4602      	mov	r2, r0
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800da8e:	2302      	movs	r3, #2
 800da90:	e024      	b.n	800dadc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	3310      	adds	r3, #16
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	461a      	mov	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800daa6:	2301      	movs	r3, #1
 800daa8:	e018      	b.n	800dadc <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	331c      	adds	r3, #28
 800daae:	4618      	mov	r0, r3
 800dab0:	f001 fa98 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800dab4:	4602      	mov	r2, r0
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3311      	adds	r3, #17
 800dabe:	4618      	mov	r0, r3
 800dac0:	f001 fa68 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800dac4:	4602      	mov	r2, r0
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	332c      	adds	r3, #44	; 0x2c
 800dace:	4618      	mov	r0, r3
 800dad0:	f001 fa88 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800dad4:	4602      	mov	r2, r0
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800dae8 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b092      	sub	sp, #72	; 0x48
 800daec:	af04      	add	r7, sp, #16
 800daee:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4aa6      	ldr	r2, [pc, #664]	; (800dd90 <_fx_media_close+0x2a8>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d001      	beq.n	800dafe <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800dafa:	2311      	movs	r3, #17
 800dafc:	e1c2      	b.n	800de84 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4aa3      	ldr	r2, [pc, #652]	; (800dd90 <_fx_media_close+0x2a8>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d001      	beq.n	800db0c <_fx_media_close+0x24>
 800db08:	2311      	movs	r3, #17
 800db0a:	e1bb      	b.n	800de84 <_fx_media_close+0x39c>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db12:	f04f 31ff 	mov.w	r1, #4294967295
 800db16:	4618      	mov	r0, r3
 800db18:	f004 f9de 	bl	8011ed8 <_tx_mutex_get>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <_fx_media_close+0x3e>
 800db22:	2311      	movs	r3, #17
 800db24:	e1ae      	b.n	800de84 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db2c:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800db34:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800db36:	e046      	b.n	800dbc6 <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d139      	bne.n	800dbb4 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800db44:	2b00      	cmp	r3, #0
 800db46:	d035      	beq.n	800dbb4 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db48:	f3ef 8310 	mrs	r3, PRIMASK
 800db4c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800db4e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800db50:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db52:	b672      	cpsid	i
    return(int_posture);
 800db54:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800db56:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800db58:	4b8e      	ldr	r3, [pc, #568]	; (800dd94 <_fx_media_close+0x2ac>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800db62:	4b8d      	ldr	r3, [pc, #564]	; (800dd98 <_fx_media_close+0x2b0>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	f383 8810 	msr	PRIMASK, r3
}
 800db76:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800db78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800db7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db80:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	3368      	adds	r3, #104	; 0x68
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7fc f9dc 	bl	8009f48 <_fx_directory_entry_write>
 800db90:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800db92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00a      	beq.n	800dbae <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db9e:	4618      	mov	r0, r3
 800dba0:	f004 fc12 	bl	80123c8 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7ff fe5f 	bl	800d868 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800dbaa:	2390      	movs	r3, #144	; 0x90
 800dbac:	e16a      	b.n	800de84 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	4a79      	ldr	r2, [pc, #484]	; (800dd9c <_fx_media_close+0x2b4>)
 800dbb8:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbbe:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800dbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800dbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1b5      	bne.n	800db38 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 fd64 	bl	800f69a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f002 f8b2 	bl	800fd3c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dbde:	2100      	movs	r1, #0
 800dbe0:	9102      	str	r1, [sp, #8]
 800dbe2:	e9cd 2300 	strd	r2, r3, [sp]
 800dbe6:	f04f 0201 	mov.w	r2, #1
 800dbea:	f04f 0300 	mov.w	r3, #0
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f002 fc2e 	bl	8010450 <_fx_utility_logical_sector_flush>
 800dbf4:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00a      	beq.n	800dc12 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc02:	4618      	mov	r0, r3
 800dc04:	f004 fbe0 	bl	80123c8 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff fe2d 	bl	800d868 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800dc0e:	2390      	movs	r3, #144	; 0x90
 800dc10:	e138      	b.n	800de84 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 80ca 	beq.w	800ddb0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800dc24:	429a      	cmp	r2, r3
 800dc26:	f000 80c3 	beq.w	800ddb0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f040 80bd 	bne.w	800ddb0 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	69db      	ldr	r3, [r3, #28]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	69d9      	ldr	r1, [r3, #28]
 800dc42:	f04f 32ff 	mov.w	r2, #4294967295
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	2200      	movs	r2, #0
 800dc54:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2290      	movs	r2, #144	; 0x90
 800dc62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2203      	movs	r2, #3
 800dc84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f004 fb89 	bl	80123c8 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff fdd6 	bl	800d868 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800dcbc:	2390      	movs	r3, #144	; 0x90
 800dcbe:	e0e1      	b.n	800de84 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcc6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800dcc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcca:	f001 f98b 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800dcce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	4a33      	ldr	r2, [pc, #204]	; (800dda0 <_fx_media_close+0x2b8>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d16b      	bne.n	800ddb0 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dcde:	4618      	mov	r0, r3
 800dce0:	f001 f980 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800dce4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	4a2e      	ldr	r2, [pc, #184]	; (800dda4 <_fx_media_close+0x2bc>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d160      	bne.n	800ddb0 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	f001 f98f 	bl	800f01e <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4610      	mov	r0, r2
 800dd10:	f001 f985 	bl	800f01e <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2290      	movs	r2, #144	; 0x90
 800dd20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2203      	movs	r2, #3
 800dd42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d017      	beq.n	800dda8 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f004 fb22 	bl	80123c8 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff fd6f 	bl	800d868 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800dd8a:	2390      	movs	r3, #144	; 0x90
 800dd8c:	e07a      	b.n	800de84 <_fx_media_close+0x39c>
 800dd8e:	bf00      	nop
 800dd90:	4d454449 	.word	0x4d454449
 800dd94:	240035d0 	.word	0x240035d0
 800dd98:	240035cc 	.word	0x240035cc
 800dd9c:	46494c43 	.word	0x46494c43
 800dda0:	41615252 	.word	0x41615252
 800dda4:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2290      	movs	r2, #144	; 0x90
 800ddca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2208      	movs	r2, #8
 800dddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2290      	movs	r2, #144	; 0x90
 800dde4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ddf6:	613b      	str	r3, [r7, #16]
    return(posture);
 800ddf8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ddfa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddfc:	b672      	cpsid	i
    return(int_posture);
 800ddfe:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800de00:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800de02:	4b22      	ldr	r3, [pc, #136]	; (800de8c <_fx_media_close+0x3a4>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d103      	bne.n	800de12 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800de0a:	4b21      	ldr	r3, [pc, #132]	; (800de90 <_fx_media_close+0x3a8>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	e019      	b.n	800de46 <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800de1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800de2e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800de32:	4b17      	ldr	r3, [pc, #92]	; (800de90 <_fx_media_close+0x3a8>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d104      	bne.n	800de46 <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800de42:	4a13      	ldr	r2, [pc, #76]	; (800de90 <_fx_media_close+0x3a8>)
 800de44:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800de46:	4b11      	ldr	r3, [pc, #68]	; (800de8c <_fx_media_close+0x3a4>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	3b01      	subs	r3, #1
 800de4c:	4a0f      	ldr	r2, [pc, #60]	; (800de8c <_fx_media_close+0x3a4>)
 800de4e:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a10      	ldr	r2, [pc, #64]	; (800de94 <_fx_media_close+0x3ac>)
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	6a3b      	ldr	r3, [r7, #32]
 800de58:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	f383 8810 	msr	PRIMASK, r3
}
 800de60:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de68:	4618      	mov	r0, r3
 800de6a:	f003 ff8b 	bl	8011d84 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de74:	2b00      	cmp	r3, #0
 800de76:	d004      	beq.n	800de82 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3738      	adds	r7, #56	; 0x38
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	240035c8 	.word	0x240035c8
 800de90:	240035c4 	.word	0x240035c4
 800de94:	4d454443 	.word	0x4d454443

0800de98 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800de98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de9c:	b09a      	sub	sp, #104	; 0x68
 800de9e:	af04      	add	r7, sp, #16
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	607a      	str	r2, [r7, #4]
 800dea6:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800dea8:	4bba      	ldr	r3, [pc, #744]	; (800e194 <_fx_media_open+0x2fc>)
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	4bba      	ldr	r3, [pc, #744]	; (800e198 <_fx_media_open+0x300>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	431a      	orrs	r2, r3
 800deb2:	4bba      	ldr	r3, [pc, #744]	; (800e19c <_fx_media_open+0x304>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800debc:	4bb8      	ldr	r3, [pc, #736]	; (800e1a0 <_fx_media_open+0x308>)
 800debe:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d102      	bne.n	800deca <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800dec4:	2322      	movs	r3, #34	; 0x22
 800dec6:	f000 bd53 	b.w	800e970 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dedc:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dee2:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800deea:	461a      	mov	r2, r3
 800deec:	2300      	movs	r3, #0
 800deee:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800def8:	2200      	movs	r2, #0
 800defa:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800defe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df00:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2200      	movs	r2, #0
 800e046:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2204      	movs	r2, #4
 800e0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2290      	movs	r2, #144	; 0x90
 800e0ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800e126:	2390      	movs	r3, #144	; 0x90
 800e128:	f000 bc22 	b.w	800e970 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2205      	movs	r2, #5
 800e13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2290      	movs	r2, #144	; 0x90
 800e146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e14e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2201      	movs	r2, #1
 800e156:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d016      	beq.n	800e1a4 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2208      	movs	r2, #8
 800e17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2290      	movs	r2, #144	; 0x90
 800e182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800e190:	2301      	movs	r3, #1
 800e192:	e3ed      	b.n	800e970 <_fx_media_open+0xad8>
 800e194:	240035dc 	.word	0x240035dc
 800e198:	240035e0 	.word	0x240035e0
 800e19c:	240035e4 	.word	0x240035e4
 800e1a0:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7ff fbf5 	bl	800d994 <_fx_media_boot_info_extract>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00e      	beq.n	800e1ce <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2208      	movs	r2, #8
 800e1b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2290      	movs	r2, #144	; 0x90
 800e1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e3d0      	b.n	800e970 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1d4:	3330      	adds	r3, #48	; 0x30
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 fedc 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800e1dc:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d20e      	bcs.n	800e206 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2208      	movs	r2, #8
 800e1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2290      	movs	r2, #144	; 0x90
 800e1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800e202:	2321      	movs	r3, #33	; 0x21
 800e204:	e3b4      	b.n	800e970 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e20a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e20c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e21c:	d903      	bls.n	800e226 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e224:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800e232:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800e234:	e01c      	b.n	800e270 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800e236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e23a:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800e23c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	f04f 33ff 	mov.w	r3, #4294967295
 800e246:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800e24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e24c:	2200      	movs	r2, #0
 800e24e:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800e250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e252:	2200      	movs	r2, #0
 800e254:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800e256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e258:	f103 0218 	add.w	r2, r3, #24
 800e25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e25e:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800e260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e262:	3318      	adds	r3, #24
 800e264:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e26a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e26c:	4413      	add	r3, r2
 800e26e:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800e270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e272:	1e5a      	subs	r2, r3, #1
 800e274:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1dd      	bne.n	800e236 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800e27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e27c:	3b18      	subs	r3, #24
 800e27e:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800e280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e282:	2200      	movs	r2, #0
 800e284:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800e286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e288:	1e5a      	subs	r2, r3, #1
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	695b      	ldr	r3, [r3, #20]
 800e2a8:	2b0f      	cmp	r3, #15
 800e2aa:	d91a      	bls.n	800e2e2 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	695a      	ldr	r2, [r3, #20]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6959      	ldr	r1, [r3, #20]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d10c      	bne.n	800e2e2 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	089b      	lsrs	r3, r3, #2
 800e2d4:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800e2dc:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800e2e0:	e002      	b.n	800e2e8 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2ec:	e023      	b.n	800e336 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800e2ee:	68f9      	ldr	r1, [r7, #12]
 800e2f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	005b      	lsls	r3, r3, #1
 800e2f6:	4413      	add	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	440b      	add	r3, r1
 800e2fc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800e304:	68f9      	ldr	r1, [r7, #12]
 800e306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e308:	4613      	mov	r3, r2
 800e30a:	005b      	lsls	r3, r3, #1
 800e30c:	4413      	add	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	440b      	add	r3, r1
 800e312:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800e31a:	68f9      	ldr	r1, [r7, #12]
 800e31c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e31e:	4613      	mov	r3, r2
 800e320:	005b      	lsls	r3, r3, #1
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800e32c:	2200      	movs	r2, #0
 800e32e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800e330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e332:	3301      	adds	r3, #1
 800e334:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e338:	2b0f      	cmp	r3, #15
 800e33a:	d9d8      	bls.n	800e2ee <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800e33c:	2300      	movs	r3, #0
 800e33e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e340:	e009      	b.n	800e356 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e346:	4413      	add	r3, r2
 800e348:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e34c:	2200      	movs	r2, #0
 800e34e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800e350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e352:	3301      	adds	r3, #1
 800e354:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e358:	2b7f      	cmp	r3, #127	; 0x7f
 800e35a:	d9f2      	bls.n	800e342 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800e364:	68f9      	ldr	r1, [r7, #12]
 800e366:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800e368:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800e36c:	441a      	add	r2, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e376:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800e37c:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800e37e:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800e384:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800e394:	441a      	add	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e3a0:	68f9      	ldr	r1, [r7, #12]
 800e3a2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	4605      	mov	r5, r0
 800e3aa:	ebb2 0804 	subs.w	r8, r2, r4
 800e3ae:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	469a      	mov	sl, r3
 800e3ba:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800e3bc:	4652      	mov	r2, sl
 800e3be:	465b      	mov	r3, fp
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	f7f2 f8a8 	bl	8000518 <__aeabi_uldivmod>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d819      	bhi.n	800e410 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800e3fa:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e404:	461a      	mov	r2, r3
 800e406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e40a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800e40e:	e037      	b.n	800e480 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e414:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800e418:	4293      	cmp	r3, r2
 800e41a:	d819      	bhi.n	800e450 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e434:	461a      	mov	r2, r3
 800e436:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800e43a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e444:	461a      	mov	r2, r3
 800e446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e44a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800e44e:	e017      	b.n	800e480 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2201      	movs	r2, #1
 800e45a:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e460:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e468:	461a      	mov	r2, r3
 800e46a:	4b95      	ldr	r3, [pc, #596]	; (800e6c0 <_fx_media_open+0x828>)
 800e46c:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e476:	461a      	mov	r2, r3
 800e478:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e47c:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e484:	2b01      	cmp	r3, #1
 800e486:	d15f      	bne.n	800e548 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d801      	bhi.n	800e494 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800e490:	2302      	movs	r3, #2
 800e492:	e26d      	b.n	800e970 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e49c:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800e49e:	68f9      	ldr	r1, [r7, #12]
 800e4a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800e4a2:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800e4a6:	441a      	add	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4b4:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800e4b6:	f107 0310 	add.w	r3, r7, #16
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f000 fdce 	bl	800f060 <_fx_utility_FAT_entry_read>
 800e4c4:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800e4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00e      	beq.n	800e4f0 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2290      	movs	r2, #144	; 0x90
 800e4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	e23f      	b.n	800e970 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d004      	beq.n	800e502 <_fx_media_open+0x66a>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d90e      	bls.n	800e520 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2208      	movs	r2, #8
 800e506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2290      	movs	r2, #144	; 0x90
 800e50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800e51c:	2303      	movs	r3, #3
 800e51e:	e227      	b.n	800e970 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	4a68      	ldr	r2, [pc, #416]	; (800e6c4 <_fx_media_open+0x82c>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d802      	bhi.n	800e52e <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800e52c:	e7c3      	b.n	800e4b6 <_fx_media_open+0x61e>
                break;
 800e52e:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e536:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800e53e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800e542:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2200      	movs	r2, #0
 800e552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 808e 	beq.w	800e67c <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	69db      	ldr	r3, [r3, #28]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	69d9      	ldr	r1, [r3, #28]
 800e56c:	f04f 32ff 	mov.w	r2, #4294967295
 800e570:	f04f 33ff 	mov.w	r3, #4294967295
 800e574:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	69db      	ldr	r3, [r3, #28]
 800e57c:	2200      	movs	r2, #0
 800e57e:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2290      	movs	r2, #144	; 0x90
 800e58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e594:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2203      	movs	r2, #3
 800e5ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d150      	bne.n	800e676 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5da:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800e5dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5de:	f000 fd01 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800e5e2:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e6:	4a38      	ldr	r2, [pc, #224]	; (800e6c8 <_fx_media_open+0x830>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d140      	bne.n	800e66e <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800e5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fcf6 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800e5f8:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	4a33      	ldr	r2, [pc, #204]	; (800e6cc <_fx_media_open+0x834>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d131      	bne.n	800e666 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800e602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e604:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e608:	4618      	mov	r0, r3
 800e60a:	f000 fceb 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800e60e:	4602      	mov	r2, r0
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800e61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e622:	4618      	mov	r0, r3
 800e624:	f000 fcde 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800e628:	4602      	mov	r2, r0
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e638:	429a      	cmp	r2, r3
 800e63a:	d80c      	bhi.n	800e656 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e646:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800e648:	429a      	cmp	r2, r3
 800e64a:	d804      	bhi.n	800e656 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800e652:	2b01      	cmp	r3, #1
 800e654:	d812      	bhi.n	800e67c <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800e664:	e00a      	b.n	800e67c <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	669a      	str	r2, [r3, #104]	; 0x68
 800e66c:	e006      	b.n	800e67c <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	669a      	str	r2, [r3, #104]	; 0x68
 800e674:	e002      	b.n	800e67c <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e680:	2b00      	cmp	r3, #0
 800e682:	d040      	beq.n	800e706 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800e684:	2302      	movs	r3, #2
 800e686:	657b      	str	r3, [r7, #84]	; 0x54
 800e688:	e036      	b.n	800e6f8 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800e68a:	f107 0310 	add.w	r3, r7, #16
 800e68e:	461a      	mov	r2, r3
 800e690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f000 fce4 	bl	800f060 <_fx_utility_FAT_entry_read>
 800e698:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d017      	beq.n	800e6d0 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2208      	movs	r2, #8
 800e6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2290      	movs	r2, #144	; 0x90
 800e6ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e158      	b.n	800e970 <_fx_media_open+0xad8>
 800e6be:	bf00      	nop
 800e6c0:	0ffffff0 	.word	0x0ffffff0
 800e6c4:	0fffffef 	.word	0x0fffffef
 800e6c8:	41615252 	.word	0x41615252
 800e6cc:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10d      	bne.n	800e6f2 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d103      	bne.n	800e6f2 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800e6f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e700:	429a      	cmp	r2, r3
 800e702:	d3c2      	bcc.n	800e68a <_fx_media_open+0x7f2>
 800e704:	e0b4      	b.n	800e870 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f040 80b0 	bne.w	800e870 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e716:	2101      	movs	r1, #1
 800e718:	9102      	str	r1, [sp, #8]
 800e71a:	e9cd 2300 	strd	r2, r3, [sp]
 800e71e:	f04f 0201 	mov.w	r2, #1
 800e722:	f04f 0300 	mov.w	r3, #0
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f001 fe92 	bl	8010450 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e730:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800e732:	2300      	movs	r3, #0
 800e734:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800e736:	2300      	movs	r3, #0
 800e738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e73a:	e093      	b.n	800e864 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e742:	4413      	add	r3, r2
 800e744:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e756:	429a      	cmp	r2, r3
 800e758:	d902      	bls.n	800e760 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	695b      	ldr	r3, [r3, #20]
 800e75e:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2290      	movs	r2, #144	; 0x90
 800e76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	689a      	ldr	r2, [r3, #8]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e77e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e786:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2202      	movs	r2, #2
 800e78e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00e      	beq.n	800e7c4 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2208      	movs	r2, #8
 800e7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2290      	movs	r2, #144	; 0x90
 800e7b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	e0d5      	b.n	800e970 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ca:	fb02 f303 	mul.w	r3, r2, r3
 800e7ce:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7d4:	e03d      	b.n	800e852 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d009      	beq.n	800e7f2 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	689a      	ldr	r2, [r3, #8]
 800e7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7e4:	4413      	add	r3, r2
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800e7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7f0:	e011      	b.n	800e816 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	689a      	ldr	r2, [r3, #8]
 800e7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7f8:	4413      	add	r3, r2
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	689a      	ldr	r2, [r3, #8]
 800e802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e804:	3301      	adds	r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800e80c:	430b      	orrs	r3, r1
 800e80e:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800e810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e812:	3302      	adds	r3, #2
 800e814:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10d      	bne.n	800e838 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d103      	bne.n	800e838 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800e838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e83a:	3301      	adds	r3, #1
 800e83c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e842:	3302      	adds	r3, #2
 800e844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e846:	429a      	cmp	r2, r3
 800e848:	d303      	bcc.n	800e852 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e84e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800e850:	e003      	b.n	800e85a <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800e852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	429a      	cmp	r2, r3
 800e858:	d3bd      	bcc.n	800e7d6 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	695b      	ldr	r3, [r3, #20]
 800e85e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e860:	4413      	add	r3, r2
 800e862:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e86a:	429a      	cmp	r2, r3
 800e86c:	f4ff af66 	bcc.w	800e73c <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2202      	movs	r2, #2
 800e87e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	4928      	ldr	r1, [pc, #160]	; (800e97c <_fx_media_open+0xae4>)
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f003 f9f8 	bl	8011cd0 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8e4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e8e6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e8e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8ea:	b672      	cpsid	i
    return(int_posture);
 800e8ec:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800e8ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	4a23      	ldr	r2, [pc, #140]	; (800e980 <_fx_media_open+0xae8>)
 800e8f4:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800e8f6:	4b23      	ldr	r3, [pc, #140]	; (800e984 <_fx_media_open+0xaec>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d017      	beq.n	800e92e <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800e8fe:	4b21      	ldr	r3, [pc, #132]	; (800e984 <_fx_media_open+0xaec>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e906:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800e908:	4b1e      	ldr	r3, [pc, #120]	; (800e984 <_fx_media_open+0xaec>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6a3a      	ldr	r2, [r7, #32]
 800e91e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800e922:	4b18      	ldr	r3, [pc, #96]	; (800e984 <_fx_media_open+0xaec>)
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800e92c:	e00a      	b.n	800e944 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800e92e:	4a15      	ldr	r2, [pc, #84]	; (800e984 <_fx_media_open+0xaec>)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800e944:	4b10      	ldr	r3, [pc, #64]	; (800e988 <_fx_media_open+0xaf0>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3301      	adds	r3, #1
 800e94a:	4a0f      	ldr	r2, [pc, #60]	; (800e988 <_fx_media_open+0xaf0>)
 800e94c:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	4798      	blx	r3
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	f383 8810 	msr	PRIMASK, r3
}
 800e96c:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3758      	adds	r7, #88	; 0x58
 800e974:	46bd      	mov	sp, r7
 800e976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e97a:	bf00      	nop
 800e97c:	08014488 	.word	0x08014488
 800e980:	4d454449 	.word	0x4d454449
 800e984:	240035c4 	.word	0x240035c4
 800e988:	240035c8 	.word	0x240035c8

0800e98c <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800e98c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e990:	b090      	sub	sp, #64	; 0x40
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	607a      	str	r2, [r7, #4]
 800e99a:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800e9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	2be9      	cmp	r3, #233	; 0xe9
 800e9aa:	d008      	beq.n	800e9be <_fx_partition_offset_calculate+0x32>
 800e9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	2beb      	cmp	r3, #235	; 0xeb
 800e9b2:	d17d      	bne.n	800eab0 <_fx_partition_offset_calculate+0x124>
 800e9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b6:	3302      	adds	r3, #2
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	2b90      	cmp	r3, #144	; 0x90
 800e9bc:	d178      	bne.n	800eab0 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800e9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c0:	3316      	adds	r3, #22
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d118      	bne.n	800e9fa <_fx_partition_offset_calculate+0x6e>
 800e9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ca:	3317      	adds	r3, #23
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d113      	bne.n	800e9fa <_fx_partition_offset_calculate+0x6e>
 800e9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d4:	3324      	adds	r3, #36	; 0x24
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10e      	bne.n	800e9fa <_fx_partition_offset_calculate+0x6e>
 800e9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9de:	3325      	adds	r3, #37	; 0x25
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <_fx_partition_offset_calculate+0x6e>
 800e9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e8:	3326      	adds	r3, #38	; 0x26
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d104      	bne.n	800e9fa <_fx_partition_offset_calculate+0x6e>
 800e9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f2:	3327      	adds	r3, #39	; 0x27
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d05a      	beq.n	800eab0 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800e9fa:	f04f 0200 	mov.w	r2, #0
 800e9fe:	f04f 0300 	mov.w	r3, #0
 800ea02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800ea06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea08:	3313      	adds	r3, #19
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d104      	bne.n	800ea1a <_fx_partition_offset_calculate+0x8e>
 800ea10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea12:	3314      	adds	r3, #20
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00d      	beq.n	800ea36 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	3314      	adds	r3, #20
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea24:	3213      	adds	r2, #19
 800ea26:	7812      	ldrb	r2, [r2, #0]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	4698      	mov	r8, r3
 800ea2e:	4691      	mov	r9, r2
 800ea30:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ea34:	e02a      	b.n	800ea8c <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800ea36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea38:	3320      	adds	r3, #32
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10e      	bne.n	800ea5e <_fx_partition_offset_calculate+0xd2>
 800ea40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea42:	3321      	adds	r3, #33	; 0x21
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <_fx_partition_offset_calculate+0xd2>
 800ea4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea4c:	3322      	adds	r3, #34	; 0x22
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d104      	bne.n	800ea5e <_fx_partition_offset_calculate+0xd2>
 800ea54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea56:	3323      	adds	r3, #35	; 0x23
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d016      	beq.n	800ea8c <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800ea5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea60:	3323      	adds	r3, #35	; 0x23
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800ea66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea68:	3322      	adds	r3, #34	; 0x22
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800ea6e:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800ea70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea72:	3321      	adds	r3, #33	; 0x21
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800ea78:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800ea7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea7c:	3220      	adds	r2, #32
 800ea7e:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800ea80:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800ea82:	2200      	movs	r2, #0
 800ea84:	461c      	mov	r4, r3
 800ea86:	4615      	mov	r5, r2
 800ea88:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800ea8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ea90:	4313      	orrs	r3, r2
 800ea92:	d00d      	beq.n	800eab0 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d002      	beq.n	800eaa0 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800eaa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800eaac:	2300      	movs	r3, #0
 800eaae:	e032      	b.n	800eb16 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800eab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	2b55      	cmp	r3, #85	; 0x55
 800eaba:	d105      	bne.n	800eac8 <_fx_partition_offset_calculate+0x13c>
 800eabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eabe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2baa      	cmp	r3, #170	; 0xaa
 800eac6:	d001      	beq.n	800eacc <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800eac8:	2304      	movs	r3, #4
 800eaca:	e024      	b.n	800eb16 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800eacc:	f107 0110 	add.w	r1, r7, #16
 800ead0:	f107 0014 	add.w	r0, r7, #20
 800ead4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead6:	2200      	movs	r2, #0
 800ead8:	f000 f822 	bl	800eb20 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d301      	bcc.n	800eae8 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800eae4:	2304      	movs	r3, #4
 800eae6:	e016      	b.n	800eb16 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d007      	beq.n	800eafe <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	00db      	lsls	r3, r3, #3
 800eaf2:	3340      	adds	r3, #64	; 0x40
 800eaf4:	443b      	add	r3, r7
 800eaf6:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	3340      	adds	r3, #64	; 0x40
 800eb0a:	443b      	add	r3, r7
 800eb0c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3740      	adds	r7, #64	; 0x40
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800eb20 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b089      	sub	sp, #36	; 0x24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
 800eb2c:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800eb32:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800eb36:	61fb      	str	r3, [r7, #28]
 800eb38:	e06f      	b.n	800ec1a <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	4413      	add	r3, r2
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10e      	bne.n	800eb66 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	4413      	add	r3, r2
 800eb52:	2200      	movs	r2, #0
 800eb54:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	4413      	add	r3, r2
 800eb60:	2200      	movs	r2, #0
 800eb62:	605a      	str	r2, [r3, #4]
 800eb64:	e051      	b.n	800ec0a <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	3308      	adds	r3, #8
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	3309      	adds	r3, #9
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	4413      	add	r3, r2
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	021b      	lsls	r3, r3, #8
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	330a      	adds	r3, #10
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	041b      	lsls	r3, r3, #16
 800eb90:	697a      	ldr	r2, [r7, #20]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	330b      	adds	r3, #11
 800eb9a:	683a      	ldr	r2, [r7, #0]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	061b      	lsls	r3, r3, #24
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	6979      	ldr	r1, [r7, #20]
 800ebb4:	69ba      	ldr	r2, [r7, #24]
 800ebb6:	440a      	add	r2, r1
 800ebb8:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	330c      	adds	r3, #12
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	330d      	adds	r3, #13
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	4413      	add	r3, r2
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	021b      	lsls	r3, r3, #8
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	330e      	adds	r3, #14
 800ebdc:	683a      	ldr	r2, [r7, #0]
 800ebde:	4413      	add	r3, r2
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	041b      	lsls	r3, r3, #16
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	330f      	adds	r3, #15
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	061b      	lsls	r3, r3, #24
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	00db      	lsls	r3, r3, #3
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	4413      	add	r3, r2
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	3310      	adds	r3, #16
 800ec18:	61fb      	str	r3, [r7, #28]
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800ec20:	d98b      	bls.n	800eb3a <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3724      	adds	r7, #36	; 0x24
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800ec36:	4b27      	ldr	r3, [pc, #156]	; (800ecd4 <_fx_system_initialize+0xa4>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800ec3c:	4b26      	ldr	r3, [pc, #152]	; (800ecd8 <_fx_system_initialize+0xa8>)
 800ec3e:	2200      	movs	r2, #0
 800ec40:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800ec42:	4b26      	ldr	r3, [pc, #152]	; (800ecdc <_fx_system_initialize+0xac>)
 800ec44:	f644 2221 	movw	r2, #18977	; 0x4a21
 800ec48:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800ec4a:	4b25      	ldr	r3, [pc, #148]	; (800ece0 <_fx_system_initialize+0xb0>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800ec50:	4b24      	ldr	r3, [pc, #144]	; (800ece4 <_fx_system_initialize+0xb4>)
 800ec52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec56:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800ec58:	4b23      	ldr	r3, [pc, #140]	; (800ece8 <_fx_system_initialize+0xb8>)
 800ec5a:	2210      	movs	r2, #16
 800ec5c:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800ec5e:	2301      	movs	r3, #1
 800ec60:	9302      	str	r3, [sp, #8]
 800ec62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec66:	9301      	str	r3, [sp, #4]
 800ec68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	4b1f      	ldr	r3, [pc, #124]	; (800ecec <_fx_system_initialize+0xbc>)
 800ec70:	4a1f      	ldr	r2, [pc, #124]	; (800ecf0 <_fx_system_initialize+0xc0>)
 800ec72:	4920      	ldr	r1, [pc, #128]	; (800ecf4 <_fx_system_initialize+0xc4>)
 800ec74:	4820      	ldr	r0, [pc, #128]	; (800ecf8 <_fx_system_initialize+0xc8>)
 800ec76:	f004 fda3 	bl	80137c0 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800ec7a:	4b20      	ldr	r3, [pc, #128]	; (800ecfc <_fx_system_initialize+0xcc>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec82:	4a1e      	ldr	r2, [pc, #120]	; (800ecfc <_fx_system_initialize+0xcc>)
 800ec84:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800ec86:	4b1d      	ldr	r3, [pc, #116]	; (800ecfc <_fx_system_initialize+0xcc>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec8e:	4a1b      	ldr	r2, [pc, #108]	; (800ecfc <_fx_system_initialize+0xcc>)
 800ec90:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800ec92:	4b1b      	ldr	r3, [pc, #108]	; (800ed00 <_fx_system_initialize+0xd0>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ec9a:	4a19      	ldr	r2, [pc, #100]	; (800ed00 <_fx_system_initialize+0xd0>)
 800ec9c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800ec9e:	4b18      	ldr	r3, [pc, #96]	; (800ed00 <_fx_system_initialize+0xd0>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eca6:	4a16      	ldr	r2, [pc, #88]	; (800ed00 <_fx_system_initialize+0xd0>)
 800eca8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800ecaa:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <_fx_system_initialize+0xd0>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f043 0310 	orr.w	r3, r3, #16
 800ecb2:	4a13      	ldr	r2, [pc, #76]	; (800ed00 <_fx_system_initialize+0xd0>)
 800ecb4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800ecb6:	4b13      	ldr	r3, [pc, #76]	; (800ed04 <_fx_system_initialize+0xd4>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800ecbe:	4a11      	ldr	r2, [pc, #68]	; (800ed04 <_fx_system_initialize+0xd4>)
 800ecc0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800ecc2:	4b10      	ldr	r3, [pc, #64]	; (800ed04 <_fx_system_initialize+0xd4>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800ecca:	4a0e      	ldr	r2, [pc, #56]	; (800ed04 <_fx_system_initialize+0xd4>)
 800eccc:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800ecce:	bf00      	nop
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	240035c4 	.word	0x240035c4
 800ecd8:	240035c8 	.word	0x240035c8
 800ecdc:	240035cc 	.word	0x240035cc
 800ece0:	240035d0 	.word	0x240035d0
 800ece4:	240035d4 	.word	0x240035d4
 800ece8:	240035d8 	.word	0x240035d8
 800ecec:	46585359 	.word	0x46585359
 800ecf0:	0800ed09 	.word	0x0800ed09
 800ecf4:	0801449c 	.word	0x0801449c
 800ecf8:	240035e8 	.word	0x240035e8
 800ecfc:	240035dc 	.word	0x240035dc
 800ed00:	240035e0 	.word	0x240035e0
 800ed04:	240035e4 	.word	0x240035e4

0800ed08 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b089      	sub	sp, #36	; 0x24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a9c      	ldr	r2, [pc, #624]	; (800ef84 <_fx_system_timer_entry+0x27c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	f040 8130 	bne.w	800ef7a <_fx_system_timer_entry+0x272>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800ed1a:	4b9b      	ldr	r3, [pc, #620]	; (800ef88 <_fx_system_timer_entry+0x280>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f003 031f 	and.w	r3, r3, #31
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800ed26:	4b98      	ldr	r3, [pc, #608]	; (800ef88 <_fx_system_timer_entry+0x280>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	095b      	lsrs	r3, r3, #5
 800ed2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed30:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800ed32:	4b95      	ldr	r3, [pc, #596]	; (800ef88 <_fx_system_timer_entry+0x280>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	0adb      	lsrs	r3, r3, #11
 800ed38:	f003 031f 	and.w	r3, r3, #31
 800ed3c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800ed3e:	4b93      	ldr	r3, [pc, #588]	; (800ef8c <_fx_system_timer_entry+0x284>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f003 031f 	and.w	r3, r3, #31
 800ed46:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800ed48:	4b90      	ldr	r3, [pc, #576]	; (800ef8c <_fx_system_timer_entry+0x284>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	095b      	lsrs	r3, r3, #5
 800ed4e:	f003 030f 	and.w	r3, r3, #15
 800ed52:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800ed54:	4b8d      	ldr	r3, [pc, #564]	; (800ef8c <_fx_system_timer_entry+0x284>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	0a5b      	lsrs	r3, r3, #9
 800ed5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed5e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800ed62:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	330a      	adds	r3, #10
 800ed68:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	2b3b      	cmp	r3, #59	; 0x3b
 800ed6e:	f240 80eb 	bls.w	800ef48 <_fx_system_timer_entry+0x240>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	4a86      	ldr	r2, [pc, #536]	; (800ef90 <_fx_system_timer_entry+0x288>)
 800ed76:	fba2 2303 	umull	r2, r3, r2, r3
 800ed7a:	095b      	lsrs	r3, r3, #5
 800ed7c:	69ba      	ldr	r2, [r7, #24]
 800ed7e:	4413      	add	r3, r2
 800ed80:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800ed82:	69fa      	ldr	r2, [r7, #28]
 800ed84:	4b82      	ldr	r3, [pc, #520]	; (800ef90 <_fx_system_timer_entry+0x288>)
 800ed86:	fba3 1302 	umull	r1, r3, r3, r2
 800ed8a:	0959      	lsrs	r1, r3, #5
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	011b      	lsls	r3, r3, #4
 800ed90:	1a5b      	subs	r3, r3, r1
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	2b3b      	cmp	r3, #59	; 0x3b
 800ed9c:	f240 80d4 	bls.w	800ef48 <_fx_system_timer_entry+0x240>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	4a7b      	ldr	r2, [pc, #492]	; (800ef90 <_fx_system_timer_entry+0x288>)
 800eda4:	fba2 2303 	umull	r2, r3, r2, r3
 800eda8:	095b      	lsrs	r3, r3, #5
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	4413      	add	r3, r2
 800edae:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800edb0:	69ba      	ldr	r2, [r7, #24]
 800edb2:	4b77      	ldr	r3, [pc, #476]	; (800ef90 <_fx_system_timer_entry+0x288>)
 800edb4:	fba3 1302 	umull	r1, r3, r3, r2
 800edb8:	0959      	lsrs	r1, r3, #5
 800edba:	460b      	mov	r3, r1
 800edbc:	011b      	lsls	r3, r3, #4
 800edbe:	1a5b      	subs	r3, r3, r1
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b17      	cmp	r3, #23
 800edca:	f240 80bd 	bls.w	800ef48 <_fx_system_timer_entry+0x240>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800edce:	2300      	movs	r3, #0
 800edd0:	617b      	str	r3, [r7, #20]
                    day++;
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	3301      	adds	r3, #1
 800edd6:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	3b01      	subs	r3, #1
 800eddc:	2b0b      	cmp	r3, #11
 800edde:	f200 80c9 	bhi.w	800ef74 <_fx_system_timer_entry+0x26c>
 800ede2:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <_fx_system_timer_entry+0xe0>)
 800ede4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede8:	0800ee19 	.word	0x0800ee19
 800edec:	0800ee2b 	.word	0x0800ee2b
 800edf0:	0800ee59 	.word	0x0800ee59
 800edf4:	0800ee6b 	.word	0x0800ee6b
 800edf8:	0800ee7d 	.word	0x0800ee7d
 800edfc:	0800ee8f 	.word	0x0800ee8f
 800ee00:	0800eea1 	.word	0x0800eea1
 800ee04:	0800eeb3 	.word	0x0800eeb3
 800ee08:	0800eec5 	.word	0x0800eec5
 800ee0c:	0800eed7 	.word	0x0800eed7
 800ee10:	0800eee9 	.word	0x0800eee9
 800ee14:	0800eefb 	.word	0x0800eefb

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	2b1f      	cmp	r3, #31
 800ee1c:	d97d      	bls.n	800ef1a <_fx_system_timer_entry+0x212>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	613b      	str	r3, [r7, #16]
                            month++;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	3301      	adds	r3, #1
 800ee26:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ee28:	e077      	b.n	800ef1a <_fx_system_timer_entry+0x212>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	f003 0303 	and.w	r3, r3, #3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d108      	bne.n	800ee46 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	2b1d      	cmp	r3, #29
 800ee38:	d971      	bls.n	800ef1e <_fx_system_timer_entry+0x216>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	613b      	str	r3, [r7, #16]
                                month++;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	3301      	adds	r3, #1
 800ee42:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800ee44:	e06b      	b.n	800ef1e <_fx_system_timer_entry+0x216>
                            if (day > 28)
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	2b1c      	cmp	r3, #28
 800ee4a:	d968      	bls.n	800ef1e <_fx_system_timer_entry+0x216>
                                day = 1;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	613b      	str	r3, [r7, #16]
                                month++;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3301      	adds	r3, #1
 800ee54:	60fb      	str	r3, [r7, #12]
                        break;
 800ee56:	e062      	b.n	800ef1e <_fx_system_timer_entry+0x216>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b1f      	cmp	r3, #31
 800ee5c:	d961      	bls.n	800ef22 <_fx_system_timer_entry+0x21a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	613b      	str	r3, [r7, #16]
                            month++;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ee68:	e05b      	b.n	800ef22 <_fx_system_timer_entry+0x21a>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	2b1e      	cmp	r3, #30
 800ee6e:	d95a      	bls.n	800ef26 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ee70:	2301      	movs	r3, #1
 800ee72:	613b      	str	r3, [r7, #16]
                            month++;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3301      	adds	r3, #1
 800ee78:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ee7a:	e054      	b.n	800ef26 <_fx_system_timer_entry+0x21e>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	2b1f      	cmp	r3, #31
 800ee80:	d953      	bls.n	800ef2a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ee82:	2301      	movs	r3, #1
 800ee84:	613b      	str	r3, [r7, #16]
                            month++;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ee8c:	e04d      	b.n	800ef2a <_fx_system_timer_entry+0x222>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	2b1e      	cmp	r3, #30
 800ee92:	d94c      	bls.n	800ef2e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ee94:	2301      	movs	r3, #1
 800ee96:	613b      	str	r3, [r7, #16]
                            month++;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ee9e:	e046      	b.n	800ef2e <_fx_system_timer_entry+0x226>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	2b1f      	cmp	r3, #31
 800eea4:	d945      	bls.n	800ef32 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800eea6:	2301      	movs	r3, #1
 800eea8:	613b      	str	r3, [r7, #16]
                            month++;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3301      	adds	r3, #1
 800eeae:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800eeb0:	e03f      	b.n	800ef32 <_fx_system_timer_entry+0x22a>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	2b1f      	cmp	r3, #31
 800eeb6:	d93e      	bls.n	800ef36 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	613b      	str	r3, [r7, #16]
                            month++;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	3301      	adds	r3, #1
 800eec0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800eec2:	e038      	b.n	800ef36 <_fx_system_timer_entry+0x22e>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	2b1e      	cmp	r3, #30
 800eec8:	d937      	bls.n	800ef3a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800eeca:	2301      	movs	r3, #1
 800eecc:	613b      	str	r3, [r7, #16]
                            month++;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	3301      	adds	r3, #1
 800eed2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800eed4:	e031      	b.n	800ef3a <_fx_system_timer_entry+0x232>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	2b1f      	cmp	r3, #31
 800eeda:	d930      	bls.n	800ef3e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800eedc:	2301      	movs	r3, #1
 800eede:	613b      	str	r3, [r7, #16]
                            month++;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800eee6:	e02a      	b.n	800ef3e <_fx_system_timer_entry+0x236>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	2b1e      	cmp	r3, #30
 800eeec:	d929      	bls.n	800ef42 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800eeee:	2301      	movs	r3, #1
 800eef0:	613b      	str	r3, [r7, #16]
                            month++;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3301      	adds	r3, #1
 800eef6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800eef8:	e023      	b.n	800ef42 <_fx_system_timer_entry+0x23a>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	2b1f      	cmp	r3, #31
 800eefe:	d922      	bls.n	800ef46 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ef00:	2301      	movs	r3, #1
 800ef02:	613b      	str	r3, [r7, #16]
                            month = 1;
 800ef04:	2301      	movs	r3, #1
 800ef06:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f640 023b 	movw	r2, #2107	; 0x83b
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d82f      	bhi.n	800ef78 <_fx_system_timer_entry+0x270>
                            {
                                return;
                            }
                        }
                        break;
 800ef18:	e015      	b.n	800ef46 <_fx_system_timer_entry+0x23e>
                        break;
 800ef1a:	bf00      	nop
 800ef1c:	e014      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef1e:	bf00      	nop
 800ef20:	e012      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef22:	bf00      	nop
 800ef24:	e010      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef26:	bf00      	nop
 800ef28:	e00e      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef2a:	bf00      	nop
 800ef2c:	e00c      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef2e:	bf00      	nop
 800ef30:	e00a      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef32:	bf00      	nop
 800ef34:	e008      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef36:	bf00      	nop
 800ef38:	e006      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef3a:	bf00      	nop
 800ef3c:	e004      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef3e:	bf00      	nop
 800ef40:	e002      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef42:	bf00      	nop
 800ef44:	e000      	b.n	800ef48 <_fx_system_timer_entry+0x240>
                        break;
 800ef46:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800ef4e:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800ef54:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800ef5a:	4a0c      	ldr	r2, [pc, #48]	; (800ef8c <_fx_system_timer_entry+0x284>)
 800ef5c:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800ef66:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	085b      	lsrs	r3, r3, #1
 800ef6c:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800ef6e:	4a06      	ldr	r2, [pc, #24]	; (800ef88 <_fx_system_timer_entry+0x280>)
 800ef70:	6013      	str	r3, [r2, #0]
 800ef72:	e002      	b.n	800ef7a <_fx_system_timer_entry+0x272>
                        return;             /* Skip updating date/time!  */
 800ef74:	bf00      	nop
 800ef76:	e000      	b.n	800ef7a <_fx_system_timer_entry+0x272>
                                return;
 800ef78:	bf00      	nop
    }
}
 800ef7a:	3724      	adds	r7, #36	; 0x24
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	46585359 	.word	0x46585359
 800ef88:	240035d0 	.word	0x240035d0
 800ef8c:	240035cc 	.word	0x240035cc
 800ef90:	88888889 	.word	0x88888889

0800ef94 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800efa8:	4313      	orrs	r3, r2
 800efaa:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800efac:	68fb      	ldr	r3, [r7, #12]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr

0800efba <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800efba:	b480      	push	{r7}
 800efbc:	b083      	sub	sp, #12
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
 800efc2:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	0a1a      	lsrs	r2, r3, #8
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3301      	adds	r3, #1
 800efd4:	b2d2      	uxtb	r2, r2
 800efd6:	701a      	strb	r2, [r3, #0]
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	3303      	adds	r3, #3
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3302      	adds	r3, #2
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800effc:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	3301      	adds	r3, #1
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800f006:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f00c:	4313      	orrs	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800f010:	68fb      	ldr	r3, [r7, #12]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr

0800f01e <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800f01e:	b480      	push	{r7}
 800f020:	b083      	sub	sp, #12
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	0a1a      	lsrs	r2, r3, #8
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3301      	adds	r3, #1
 800f038:	b2d2      	uxtb	r2, r2
 800f03a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	0c1a      	lsrs	r2, r3, #16
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	3302      	adds	r3, #2
 800f044:	b2d2      	uxtb	r2, r2
 800f046:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	0e1a      	lsrs	r2, r3, #24
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3303      	adds	r3, #3
 800f050:	b2d2      	uxtb	r2, r2
 800f052:	701a      	strb	r2, [r3, #0]
}
 800f054:	bf00      	nop
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800f060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f064:	b098      	sub	sp, #96	; 0x60
 800f066:	af04      	add	r7, sp, #16
 800f068:	61f8      	str	r0, [r7, #28]
 800f06a:	61b9      	str	r1, [r7, #24]
 800f06c:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	f003 0303 	and.w	r3, r3, #3
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800f094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f096:	4613      	mov	r3, r2
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	4413      	add	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f0a2:	69fa      	ldr	r2, [r7, #28]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800f0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	69ba      	ldr	r2, [r7, #24]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d105      	bne.n	800f0be <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800f0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	e1f4      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800f0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0c0:	330c      	adds	r3, #12
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	69ba      	ldr	r2, [r7, #24]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d11d      	bne.n	800f106 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800f0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0cc:	330c      	adds	r3, #12
 800f0ce:	685a      	ldr	r2, [r3, #4]
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f0d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0da:	ca07      	ldmia	r2, {r0, r1, r2}
 800f0dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800f0e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e4:	4614      	mov	r4, r2
 800f0e6:	330c      	adds	r3, #12
 800f0e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f0ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f2:	330c      	adds	r3, #12
 800f0f4:	461c      	mov	r4, r3
 800f0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f0fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f102:	2300      	movs	r3, #0
 800f104:	e1d0      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800f106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f108:	3318      	adds	r3, #24
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d127      	bne.n	800f162 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800f112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f114:	3318      	adds	r3, #24
 800f116:	685a      	ldr	r2, [r3, #4]
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f11c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f122:	ca07      	ldmia	r2, {r0, r1, r2}
 800f124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800f128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f12c:	4614      	mov	r4, r2
 800f12e:	3318      	adds	r3, #24
 800f130:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13a:	f103 0218 	add.w	r2, r3, #24
 800f13e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f140:	4614      	mov	r4, r2
 800f142:	330c      	adds	r3, #12
 800f144:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f14e:	330c      	adds	r3, #12
 800f150:	461c      	mov	r4, r3
 800f152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f15a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f15e:	2300      	movs	r3, #0
 800f160:	e1a2      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800f162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f164:	3324      	adds	r3, #36	; 0x24
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d131      	bne.n	800f1d2 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800f16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f170:	3324      	adds	r3, #36	; 0x24
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f17a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f17e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f180:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800f184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f188:	4614      	mov	r4, r2
 800f18a:	3324      	adds	r3, #36	; 0x24
 800f18c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800f194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f196:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f19c:	4614      	mov	r4, r2
 800f19e:	3318      	adds	r3, #24
 800f1a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1aa:	f103 0218 	add.w	r2, r3, #24
 800f1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b0:	4614      	mov	r4, r2
 800f1b2:	330c      	adds	r3, #12
 800f1b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1be:	330c      	adds	r3, #12
 800f1c0:	461c      	mov	r4, r3
 800f1c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	e16a      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 800f1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d4:	1cda      	adds	r2, r3, #3
 800f1d6:	69f9      	ldr	r1, [r7, #28]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	005b      	lsls	r3, r3, #1
 800f1dc:	4413      	add	r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	440b      	add	r3, r1
 800f1e2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d008      	beq.n	800f1fe <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800f1ec:	69f8      	ldr	r0, [r7, #28]
 800f1ee:	f000 fa54 	bl	800f69a <_fx_utility_FAT_flush>
 800f1f2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 800f1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d001      	beq.n	800f1fe <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 800f1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fc:	e154      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f204:	1e5a      	subs	r2, r3, #1
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f21e:	2b00      	cmp	r3, #0
 800f220:	f000 80a7 	beq.w	800f372 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	005a      	lsls	r2, r3, #1
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	4413      	add	r3, r2
 800f22c:	085b      	lsrs	r3, r3, #1
 800f22e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f236:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f23e:	4413      	add	r3, r2
 800f240:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f244:	2200      	movs	r2, #0
 800f246:	60bb      	str	r3, [r7, #8]
 800f248:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f24e:	2202      	movs	r2, #2
 800f250:	9202      	str	r2, [sp, #8]
 800f252:	2201      	movs	r2, #1
 800f254:	9201      	str	r2, [sp, #4]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f25c:	69f8      	ldr	r0, [r7, #28]
 800f25e:	f001 fb0d 	bl	801087c <_fx_utility_logical_sector_read>
 800f262:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800f264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 800f26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26c:	e11c      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f274:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800f276:	69fa      	ldr	r2, [r7, #28]
 800f278:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f27a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800f27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	689a      	ldr	r2, [r3, #8]
 800f288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28a:	4413      	add	r3, r2
 800f28c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	2b00      	cmp	r3, #0
 800f296:	d030      	beq.n	800f2fa <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 800f298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	091b      	lsrs	r3, r3, #4
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 800f2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d11b      	bne.n	800f2ec <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800f2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2bc:	2200      	movs	r2, #0
 800f2be:	603b      	str	r3, [r7, #0]
 800f2c0:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	9202      	str	r2, [sp, #8]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	9201      	str	r2, [sp, #4]
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2d4:	69f8      	ldr	r0, [r7, #28]
 800f2d6:	f001 fad1 	bl	801087c <_fx_utility_logical_sector_read>
 800f2da:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 800f2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e4:	e0e0      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800f2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	011b      	lsls	r3, r3, #4
 800f2f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2f8:	e02f      	b.n	800f35a <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 800f2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 800f300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f302:	3301      	adds	r3, #1
 800f304:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30a:	3b01      	subs	r3, #1
 800f30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f30e:	429a      	cmp	r2, r3
 800f310:	d11b      	bne.n	800f34a <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f314:	3301      	adds	r3, #1
 800f316:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f31a:	2200      	movs	r2, #0
 800f31c:	469a      	mov	sl, r3
 800f31e:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f324:	2202      	movs	r2, #2
 800f326:	9202      	str	r2, [sp, #8]
 800f328:	2201      	movs	r2, #1
 800f32a:	9201      	str	r2, [sp, #4]
 800f32c:	9300      	str	r3, [sp, #0]
 800f32e:	4652      	mov	r2, sl
 800f330:	465b      	mov	r3, fp
 800f332:	69f8      	ldr	r0, [r7, #28]
 800f334:	f001 faa2 	bl	801087c <_fx_utility_logical_sector_read>
 800f338:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 800f340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f342:	e0b1      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 800f34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	021b      	lsls	r3, r3, #8
 800f350:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f356:	4313      	orrs	r3, r2
 800f358:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 800f35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f35c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800f360:	d303      	bcc.n	800f36a <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 800f362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f364:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800f368:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f36e:	601a      	str	r2, [r3, #0]
 800f370:	e078      	b.n	800f464 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f376:	2b00      	cmp	r3, #0
 800f378:	d139      	bne.n	800f3ee <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	005b      	lsls	r3, r3, #1
 800f37e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f386:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f38e:	4413      	add	r3, r2
 800f390:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f394:	2200      	movs	r2, #0
 800f396:	4698      	mov	r8, r3
 800f398:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f39e:	2202      	movs	r2, #2
 800f3a0:	9202      	str	r2, [sp, #8]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	9201      	str	r2, [sp, #4]
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	464b      	mov	r3, r9
 800f3ac:	69f8      	ldr	r0, [r7, #28]
 800f3ae:	f001 fa65 	bl	801087c <_fx_utility_logical_sector_read>
 800f3b2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800f3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 800f3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3bc:	e074      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3c4:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800f3c6:	69fa      	ldr	r2, [r7, #28]
 800f3c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f3ca:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800f3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	689a      	ldr	r2, [r3, #8]
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	4413      	add	r3, r2
 800f3dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 800f3de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f3e0:	f7ff fdd8 	bl	800ef94 <_fx_utility_16_unsigned_read>
 800f3e4:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3ea:	601a      	str	r2, [r3, #0]
 800f3ec:	e03a      	b.n	800f464 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3fa:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f402:	4413      	add	r3, r2
 800f404:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f410:	fb01 f202 	mul.w	r2, r1, r2
 800f414:	1a9b      	subs	r3, r3, r2
 800f416:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41a:	2200      	movs	r2, #0
 800f41c:	461c      	mov	r4, r3
 800f41e:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f424:	2202      	movs	r2, #2
 800f426:	9202      	str	r2, [sp, #8]
 800f428:	2201      	movs	r2, #1
 800f42a:	9201      	str	r2, [sp, #4]
 800f42c:	9300      	str	r3, [sp, #0]
 800f42e:	4622      	mov	r2, r4
 800f430:	462b      	mov	r3, r5
 800f432:	69f8      	ldr	r0, [r7, #28]
 800f434:	f001 fa22 	bl	801087c <_fx_utility_logical_sector_read>
 800f438:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800f43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 800f440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f442:	e031      	b.n	800f4a8 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	689a      	ldr	r2, [r3, #8]
 800f448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44a:	4413      	add	r3, r2
 800f44c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 800f44e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f450:	f7ff fdc8 	bl	800efe4 <_fx_utility_32_unsigned_read>
 800f454:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f45c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f462:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800f464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f466:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f46c:	4614      	mov	r4, r2
 800f46e:	3318      	adds	r3, #24
 800f470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f47a:	f103 0218 	add.w	r2, r3, #24
 800f47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f480:	4614      	mov	r4, r2
 800f482:	330c      	adds	r3, #12
 800f484:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800f48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f48e:	330c      	adds	r3, #12
 800f490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f492:	ca07      	ldmia	r2, {r0, r1, r2}
 800f494:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800f498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f49a:	69ba      	ldr	r2, [r7, #24]
 800f49c:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4a4:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3750      	adds	r7, #80	; 0x50
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f4b2 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 800f4b2:	b590      	push	{r4, r7, lr}
 800f4b4:	b089      	sub	sp, #36	; 0x24
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	60f8      	str	r0, [r7, #12]
 800f4ba:	60b9      	str	r1, [r7, #8]
 800f4bc:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800f4c4:	1c5a      	adds	r2, r3, #1
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800f4d2:	1c5a      	adds	r2, r3, #1
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	f003 0303 	and.w	r3, r3, #3
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	4413      	add	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	61fb      	str	r3, [r7, #28]
 800f4fc:	e051      	b.n	800f5a2 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 800f4fe:	69fa      	ldr	r2, [r7, #28]
 800f500:	4613      	mov	r3, r2
 800f502:	005b      	lsls	r3, r3, #1
 800f504:	4413      	add	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	461a      	mov	r2, r3
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	4413      	add	r3, r2
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	429a      	cmp	r2, r3
 800f514:	d142      	bne.n	800f59c <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 800f516:	69fa      	ldr	r2, [r7, #28]
 800f518:	4613      	mov	r3, r2
 800f51a:	005b      	lsls	r3, r3, #1
 800f51c:	4413      	add	r3, r2
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	461a      	mov	r2, r3
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	4413      	add	r3, r2
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 800f52a:	69fa      	ldr	r2, [r7, #28]
 800f52c:	4613      	mov	r3, r2
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	4413      	add	r3, r2
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	461a      	mov	r2, r3
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	4413      	add	r3, r2
 800f53a:	2201      	movs	r2, #1
 800f53c:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f544:	2b00      	cmp	r3, #0
 800f546:	d027      	beq.n	800f598 <_fx_utility_FAT_entry_write+0xe6>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d124      	bne.n	800f598 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800f554:	1c5a      	adds	r2, r3, #1
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2206      	movs	r2, #6
 800f560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2290      	movs	r2, #144	; 0x90
 800f568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	3b02      	subs	r3, #2
 800f574:	68f9      	ldr	r1, [r7, #12]
 800f576:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f578:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800f57c:	441a      	add	r2, r3
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 800f598:	2300      	movs	r3, #0
 800f59a:	e07a      	b.n	800f692 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	61fb      	str	r3, [r7, #28]
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	d9aa      	bls.n	800f4fe <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800f5ae:	1e5a      	subs	r2, r3, #1
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	1cda      	adds	r2, r3, #3
 800f5c8:	68f9      	ldr	r1, [r7, #12]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	4413      	add	r3, r2
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	440b      	add	r3, r1
 800f5d4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d108      	bne.n	800f5f0 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f000 f85b 	bl	800f69a <_fx_utility_FAT_flush>
 800f5e4:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d001      	beq.n	800f5f0 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	e050      	b.n	800f692 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	3318      	adds	r3, #24
 800f5fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	f103 0218 	add.w	r2, r3, #24
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	4614      	mov	r4, r2
 800f60e:	330c      	adds	r3, #12
 800f610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	330c      	adds	r3, #12
 800f61c:	697a      	ldr	r2, [r7, #20]
 800f61e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f620:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2201      	movs	r2, #1
 800f628:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d027      	beq.n	800f690 <_fx_utility_FAT_entry_write+0x1de>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d124      	bne.n	800f690 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2206      	movs	r2, #6
 800f658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2290      	movs	r2, #144	; 0x90
 800f660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	3b02      	subs	r3, #2
 800f66c:	68f9      	ldr	r1, [r7, #12]
 800f66e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f670:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800f674:	441a      	add	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3724      	adds	r7, #36	; 0x24
 800f696:	46bd      	mov	sp, r7
 800f698:	bd90      	pop	{r4, r7, pc}

0800f69a <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 800f69a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f69e:	b09a      	sub	sp, #104	; 0x68
 800f6a0:	af04      	add	r7, sp, #16
 800f6a2:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6b6:	e337      	b.n	800fd28 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 800f6b8:	69f9      	ldr	r1, [r7, #28]
 800f6ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6bc:	4613      	mov	r3, r2
 800f6be:	005b      	lsls	r3, r3, #1
 800f6c0:	4413      	add	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	440b      	add	r3, r1
 800f6c6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f000 8325 	beq.w	800fd1c <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 800f6d2:	69f9      	ldr	r1, [r7, #28]
 800f6d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	440b      	add	r3, r1
 800f6e0:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f000 816c 	beq.w	800f9ca <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800f6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f4:	005a      	lsls	r2, r3, #1
 800f6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f8:	4413      	add	r3, r2
 800f6fa:	085b      	lsrs	r3, r3, #1
 800f6fc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f704:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f70c:	4413      	add	r3, r2
 800f70e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 800f710:	f04f 33ff 	mov.w	r3, #4294967295
 800f714:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f718:	2200      	movs	r2, #0
 800f71a:	461c      	mov	r4, r3
 800f71c:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f722:	2302      	movs	r3, #2
 800f724:	9302      	str	r3, [sp, #8]
 800f726:	2301      	movs	r3, #1
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	9200      	str	r2, [sp, #0]
 800f72c:	4622      	mov	r2, r4
 800f72e:	462b      	mov	r3, r5
 800f730:	69f8      	ldr	r0, [r7, #28]
 800f732:	f001 f8a3 	bl	801087c <_fx_utility_logical_sector_read>
 800f736:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 800f73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f740:	e2f7      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 800f742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f748:	d037      	beq.n	800f7ba <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 800f750:	69f9      	ldr	r1, [r7, #28]
 800f752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f754:	4613      	mov	r3, r2
 800f756:	005b      	lsls	r3, r3, #1
 800f758:	4413      	add	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	440b      	add	r3, r1
 800f75e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800f766:	69f9      	ldr	r1, [r7, #28]
 800f768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f76a:	4613      	mov	r3, r2
 800f76c:	005b      	lsls	r3, r3, #1
 800f76e:	4413      	add	r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	440b      	add	r3, r1
 800f774:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800f77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	2b00      	cmp	r3, #0
 800f784:	d005      	beq.n	800f792 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800f786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f788:	091b      	lsrs	r3, r3, #4
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f78e:	7013      	strb	r3, [r2, #0]
 800f790:	e010      	b.n	800f7b4 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800f792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f79a:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a2:	0a1b      	lsrs	r3, r3, #8
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	f003 030f 	and.w	r3, r3, #15
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7b2:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 800f7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800f7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7bc:	653b      	str	r3, [r7, #80]	; 0x50
 800f7be:	e0a0      	b.n	800f902 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 800f7c0:	69f9      	ldr	r1, [r7, #28]
 800f7c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 808a 	beq.w	800f8ee <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800f7da:	69f9      	ldr	r1, [r7, #28]
 800f7dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7de:	4613      	mov	r3, r2
 800f7e0:	005b      	lsls	r3, r3, #1
 800f7e2:	4413      	add	r3, r2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	440b      	add	r3, r1
 800f7e8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800f7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f2:	005a      	lsls	r2, r3, #1
 800f7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f6:	4413      	add	r3, r2
 800f7f8:	085b      	lsrs	r3, r3, #1
 800f7fa:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f802:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f80a:	4413      	add	r3, r2
 800f80c:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 800f80e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f812:	429a      	cmp	r2, r3
 800f814:	d16d      	bne.n	800f8f2 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800f816:	69f9      	ldr	r1, [r7, #28]
 800f818:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f81a:	4613      	mov	r3, r2
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	4413      	add	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	440b      	add	r3, r1
 800f824:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f832:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f838:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 800f83c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f846:	3b01      	subs	r3, #1
 800f848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d101      	bne.n	800f852 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 800f84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f850:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	689a      	ldr	r2, [r3, #8]
 800f856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f858:	4413      	add	r3, r2
 800f85a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800f85c:	69f9      	ldr	r1, [r7, #28]
 800f85e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f860:	4613      	mov	r3, r2
 800f862:	005b      	lsls	r3, r3, #1
 800f864:	4413      	add	r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	440b      	add	r3, r1
 800f86a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f86e:	2200      	movs	r2, #0
 800f870:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800f872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f874:	f003 0301 	and.w	r3, r3, #1
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d01b      	beq.n	800f8b4 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 800f87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f003 030f 	and.w	r3, r3, #15
 800f884:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	011b      	lsls	r3, r3, #4
 800f890:	b2db      	uxtb	r3, r3
 800f892:	4313      	orrs	r3, r2
 800f894:	b2db      	uxtb	r3, r3
 800f896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f898:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800f89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f89c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d029      	beq.n	800f8f6 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	091b      	lsrs	r3, r3, #4
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8b0:	7013      	strb	r3, [r2, #0]
 800f8b2:	e023      	b.n	800f8fc <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 800f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8ba:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d01a      	beq.n	800f8fa <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800f8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8d2:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8da:	0a1b      	lsrs	r3, r3, #8
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	f003 030f 	and.w	r3, r3, #15
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8ea:	7013      	strb	r3, [r2, #0]
 800f8ec:	e006      	b.n	800f8fc <_fx_utility_FAT_flush+0x262>
                        continue;
 800f8ee:	bf00      	nop
 800f8f0:	e004      	b.n	800f8fc <_fx_utility_FAT_flush+0x262>
                        continue;
 800f8f2:	bf00      	nop
 800f8f4:	e002      	b.n	800f8fc <_fx_utility_FAT_flush+0x262>
                            continue;
 800f8f6:	bf00      	nop
 800f8f8:	e000      	b.n	800f8fc <_fx_utility_FAT_flush+0x262>
                            continue;
 800f8fa:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800f8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8fe:	3301      	adds	r3, #1
 800f900:	653b      	str	r3, [r7, #80]	; 0x50
 800f902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f904:	2b0f      	cmp	r3, #15
 800f906:	f67f af5b 	bls.w	800f7c0 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800f90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f90c:	2200      	movs	r2, #0
 800f90e:	4698      	mov	r8, r3
 800f910:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800f916:	2302      	movs	r3, #2
 800f918:	9302      	str	r3, [sp, #8]
 800f91a:	2301      	movs	r3, #1
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	9200      	str	r2, [sp, #0]
 800f920:	4642      	mov	r2, r8
 800f922:	464b      	mov	r3, r9
 800f924:	69f8      	ldr	r0, [r7, #28]
 800f926:	f001 fa3d 	bl	8010da4 <_fx_utility_logical_sector_write>
 800f92a:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 800f932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f934:	e1fd      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f93a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d105      	bne.n	800f94e <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f946:	0a9b      	lsrs	r3, r3, #10
 800f948:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800f94c:	e006      	b.n	800f95c <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f952:	0a9b      	lsrs	r3, r3, #10
 800f954:	b2db      	uxtb	r3, r3
 800f956:	3301      	adds	r3, #1
 800f958:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 800f95c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f960:	2b00      	cmp	r3, #0
 800f962:	d101      	bne.n	800f968 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 800f964:	2302      	movs	r3, #2
 800f966:	e1e4      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f96c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f96e:	1ad2      	subs	r2, r2, r3
 800f970:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f974:	fbb2 f3f3 	udiv	r3, r2, r3
 800f978:	08db      	lsrs	r3, r3, #3
 800f97a:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800f97c:	69fa      	ldr	r2, [r7, #28]
 800f97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f980:	4413      	add	r3, r2
 800f982:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f98e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f990:	1a9a      	subs	r2, r3, r2
 800f992:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f996:	fbb2 f3f3 	udiv	r3, r2, r3
 800f99a:	f003 0207 	and.w	r2, r3, #7
 800f99e:	2301      	movs	r3, #1
 800f9a0:	4093      	lsls	r3, r2
 800f9a2:	b25b      	sxtb	r3, r3
 800f9a4:	430b      	orrs	r3, r1
 800f9a6:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800f9a8:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800f9aa:	69fa      	ldr	r2, [r7, #28]
 800f9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 800f9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9be:	f000 81af 	beq.w	800fd20 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 800f9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f9c8:	e6a5      	b.n	800f716 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f040 80d2 	bne.w	800fb78 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 800f9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9e0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f9e8:	4413      	add	r3, r2
 800f9ea:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	469a      	mov	sl, r3
 800f9f2:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f9f8:	2302      	movs	r3, #2
 800f9fa:	9302      	str	r3, [sp, #8]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	9200      	str	r2, [sp, #0]
 800fa02:	4652      	mov	r2, sl
 800fa04:	465b      	mov	r3, fp
 800fa06:	69f8      	ldr	r0, [r7, #28]
 800fa08:	f000 ff38 	bl	801087c <_fx_utility_logical_sector_read>
 800fa0c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800fa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	e18c      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fa18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa1a:	653b      	str	r3, [r7, #80]	; 0x50
 800fa1c:	e057      	b.n	800face <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800fa1e:	69f9      	ldr	r1, [r7, #28]
 800fa20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa22:	4613      	mov	r3, r2
 800fa24:	005b      	lsls	r3, r3, #1
 800fa26:	4413      	add	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	440b      	add	r3, r1
 800fa2c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d045      	beq.n	800fac2 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800fa36:	69f9      	ldr	r1, [r7, #28]
 800fa38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	4413      	add	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	440b      	add	r3, r1
 800fa44:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 800fa4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa4e:	005b      	lsls	r3, r3, #1
 800fa50:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa58:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fa60:	4413      	add	r3, r2
 800fa62:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800fa64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d12c      	bne.n	800fac6 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa72:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fa78:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800fa7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	689a      	ldr	r2, [r3, #8]
 800fa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa88:	4413      	add	r3, r2
 800fa8a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800fa8c:	69f9      	ldr	r1, [r7, #28]
 800fa8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa90:	4613      	mov	r3, r2
 800fa92:	005b      	lsls	r3, r3, #1
 800fa94:	4413      	add	r3, r2
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	440b      	add	r3, r1
 800fa9a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 800faa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faa6:	f7ff fa88 	bl	800efba <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800faaa:	69f9      	ldr	r1, [r7, #28]
 800faac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800faae:	4613      	mov	r3, r2
 800fab0:	005b      	lsls	r3, r3, #1
 800fab2:	4413      	add	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	440b      	add	r3, r1
 800fab8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fabc:	2200      	movs	r2, #0
 800fabe:	601a      	str	r2, [r3, #0]
 800fac0:	e002      	b.n	800fac8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800fac2:	bf00      	nop
 800fac4:	e000      	b.n	800fac8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800fac6:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faca:	3301      	adds	r3, #1
 800facc:	653b      	str	r3, [r7, #80]	; 0x50
 800face:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fad0:	2b0f      	cmp	r3, #15
 800fad2:	d9a4      	bls.n	800fa1e <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad6:	2200      	movs	r2, #0
 800fad8:	613b      	str	r3, [r7, #16]
 800fada:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fae0:	2302      	movs	r3, #2
 800fae2:	9302      	str	r3, [sp, #8]
 800fae4:	2301      	movs	r3, #1
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	9200      	str	r2, [sp, #0]
 800faea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800faee:	69f8      	ldr	r0, [r7, #28]
 800faf0:	f001 f958 	bl	8010da4 <_fx_utility_logical_sector_write>
 800faf4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800faf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 800fafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafe:	e118      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d105      	bne.n	800fb18 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb10:	0a9b      	lsrs	r3, r3, #10
 800fb12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fb16:	e006      	b.n	800fb26 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb1c:	0a9b      	lsrs	r3, r3, #10
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	3301      	adds	r3, #1
 800fb22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb2c:	1ad2      	subs	r2, r2, r3
 800fb2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fb32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb36:	08db      	lsrs	r3, r3, #3
 800fb38:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800fb3a:	69fa      	ldr	r2, [r7, #28]
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	4413      	add	r3, r2
 800fb40:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb4e:	1a9a      	subs	r2, r3, r2
 800fb50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fb54:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb58:	f003 0207 	and.w	r2, r3, #7
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	4093      	lsls	r3, r2
 800fb60:	b25b      	sxtb	r3, r3
 800fb62:	430b      	orrs	r3, r1
 800fb64:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800fb66:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800fb68:	69fa      	ldr	r2, [r7, #28]
 800fb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6c:	4413      	add	r3, r2
 800fb6e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800fb72:	460b      	mov	r3, r1
 800fb74:	7013      	strb	r3, [r2, #0]
 800fb76:	e0d4      	b.n	800fd22 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 800fb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb84:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fb8c:	4413      	add	r3, r2
 800fb8e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fb90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb92:	2200      	movs	r2, #0
 800fb94:	60bb      	str	r3, [r7, #8]
 800fb96:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fb9c:	2302      	movs	r3, #2
 800fb9e:	9302      	str	r3, [sp, #8]
 800fba0:	2301      	movs	r3, #1
 800fba2:	9301      	str	r3, [sp, #4]
 800fba4:	9200      	str	r2, [sp, #0]
 800fba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fbaa:	69f8      	ldr	r0, [r7, #28]
 800fbac:	f000 fe66 	bl	801087c <_fx_utility_logical_sector_read>
 800fbb0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 800fbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbba:	e0ba      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbe:	653b      	str	r3, [r7, #80]	; 0x50
 800fbc0:	e057      	b.n	800fc72 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800fbc2:	69f9      	ldr	r1, [r7, #28]
 800fbc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	4413      	add	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d045      	beq.n	800fc66 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800fbda:	69f9      	ldr	r1, [r7, #28]
 800fbdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbde:	4613      	mov	r3, r2
 800fbe0:	005b      	lsls	r3, r3, #1
 800fbe2:	4413      	add	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	440b      	add	r3, r1
 800fbe8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 800fbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbfc:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fc04:	4413      	add	r3, r2
 800fc06:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800fc08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d12c      	bne.n	800fc6a <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc16:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fc1c:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800fc20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	689a      	ldr	r2, [r3, #8]
 800fc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2c:	4413      	add	r3, r2
 800fc2e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800fc30:	69f9      	ldr	r1, [r7, #28]
 800fc32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc34:	4613      	mov	r3, r2
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	4413      	add	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	440b      	add	r3, r1
 800fc3e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 800fc46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc4a:	f7ff f9e8 	bl	800f01e <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800fc4e:	69f9      	ldr	r1, [r7, #28]
 800fc50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc52:	4613      	mov	r3, r2
 800fc54:	005b      	lsls	r3, r3, #1
 800fc56:	4413      	add	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	440b      	add	r3, r1
 800fc5c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]
 800fc64:	e002      	b.n	800fc6c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 800fc66:	bf00      	nop
 800fc68:	e000      	b.n	800fc6c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 800fc6a:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc6e:	3301      	adds	r3, #1
 800fc70:	653b      	str	r3, [r7, #80]	; 0x50
 800fc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc74:	2b0f      	cmp	r3, #15
 800fc76:	d9a4      	bls.n	800fbc2 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fc78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	603b      	str	r3, [r7, #0]
 800fc7e:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fc84:	2302      	movs	r3, #2
 800fc86:	9302      	str	r3, [sp, #8]
 800fc88:	2301      	movs	r3, #1
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	9200      	str	r2, [sp, #0]
 800fc8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc92:	69f8      	ldr	r0, [r7, #28]
 800fc94:	f001 f886 	bl	8010da4 <_fx_utility_logical_sector_write>
 800fc98:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800fc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 800fca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca2:	e046      	b.n	800fd32 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d105      	bne.n	800fcbc <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb4:	0a9b      	lsrs	r3, r3, #10
 800fcb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fcba:	e006      	b.n	800fcca <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcc0:	0a9b      	lsrs	r3, r3, #10
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcd0:	1ad2      	subs	r2, r2, r3
 800fcd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fcd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcda:	08db      	lsrs	r3, r3, #3
 800fcdc:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce2:	4413      	add	r3, r2
 800fce4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcf2:	1a9a      	subs	r2, r3, r2
 800fcf4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fcf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcfc:	f003 0207 	and.w	r2, r3, #7
 800fd00:	2301      	movs	r3, #1
 800fd02:	4093      	lsls	r3, r2
 800fd04:	b25b      	sxtb	r3, r3
 800fd06:	430b      	orrs	r3, r1
 800fd08:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800fd0a:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd10:	4413      	add	r3, r2
 800fd12:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800fd16:	460b      	mov	r3, r1
 800fd18:	7013      	strb	r3, [r2, #0]
 800fd1a:	e002      	b.n	800fd22 <_fx_utility_FAT_flush+0x688>
            continue;
 800fd1c:	bf00      	nop
 800fd1e:	e000      	b.n	800fd22 <_fx_utility_FAT_flush+0x688>
                    break;
 800fd20:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800fd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd24:	3301      	adds	r3, #1
 800fd26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd2a:	2b0f      	cmp	r3, #15
 800fd2c:	f67f acc4 	bls.w	800f6b8 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3758      	adds	r7, #88	; 0x58
 800fd36:	46bd      	mov	sp, r7
 800fd38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fd3c <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 800fd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd40:	b092      	sub	sp, #72	; 0x48
 800fd42:	af04      	add	r7, sp, #16
 800fd44:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d105      	bne.n	800fd5e <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd56:	0a9b      	lsrs	r3, r3, #10
 800fd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd5c:	e006      	b.n	800fd6c <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd62:	0a9b      	lsrs	r3, r3, #10
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	3301      	adds	r3, #1
 800fd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd70:	e089      	b.n	800fe86 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 800fd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd74:	08db      	lsrs	r3, r3, #3
 800fd76:	69fa      	ldr	r2, [r7, #28]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 800fd7e:	461a      	mov	r2, r3
 800fd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	fa42 f303 	asr.w	r3, r2, r3
 800fd8a:	f003 0301 	and.w	r3, r3, #1
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d075      	beq.n	800fe7e <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 800fd92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd98:	fb03 f202 	mul.w	r2, r3, r2
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fda0:	4413      	add	r3, r2
 800fda2:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 800fda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fda8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdaa:	4413      	add	r3, r2
 800fdac:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdb6:	4413      	add	r3, r2
 800fdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d95a      	bls.n	800fe74 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdc6:	4413      	add	r3, r2
 800fdc8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 800fdca:	e053      	b.n	800fe74 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdce:	2200      	movs	r2, #0
 800fdd0:	613b      	str	r3, [r7, #16]
 800fdd2:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fdd8:	2302      	movs	r3, #2
 800fdda:	9302      	str	r3, [sp, #8]
 800fddc:	2301      	movs	r3, #1
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	9200      	str	r2, [sp, #0]
 800fde2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fde6:	69f8      	ldr	r0, [r7, #28]
 800fde8:	f000 fd48 	bl	801087c <_fx_utility_logical_sector_read>
 800fdec:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d001      	beq.n	800fdf8 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 800fdf4:	6a3b      	ldr	r3, [r7, #32]
 800fdf6:	e05c      	b.n	800feb2 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 800fe00:	e032      	b.n	800fe68 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 800fe02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe04:	2200      	movs	r2, #0
 800fe06:	60bb      	str	r3, [r7, #8]
 800fe08:	60fa      	str	r2, [r7, #12]
 800fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4698      	mov	r8, r3
 800fe10:	4691      	mov	r9, r2
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe16:	2200      	movs	r2, #0
 800fe18:	469a      	mov	sl, r3
 800fe1a:	4693      	mov	fp, r2
 800fe1c:	fb0a f209 	mul.w	r2, sl, r9
 800fe20:	fb08 f30b 	mul.w	r3, r8, fp
 800fe24:	4413      	add	r3, r2
 800fe26:	fba8 450a 	umull	r4, r5, r8, sl
 800fe2a:	442b      	add	r3, r5
 800fe2c:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 800fe2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe32:	460b      	mov	r3, r1
 800fe34:	191b      	adds	r3, r3, r4
 800fe36:	603b      	str	r3, [r7, #0]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	416b      	adcs	r3, r5
 800fe3c:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 800fe42:	2302      	movs	r3, #2
 800fe44:	9302      	str	r3, [sp, #8]
 800fe46:	2301      	movs	r3, #1
 800fe48:	9301      	str	r3, [sp, #4]
 800fe4a:	9200      	str	r2, [sp, #0]
 800fe4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe50:	69f8      	ldr	r0, [r7, #28]
 800fe52:	f000 ffa7 	bl	8010da4 <_fx_utility_logical_sector_write>
 800fe56:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fe58:	6a3b      	ldr	r3, [r7, #32]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d001      	beq.n	800fe62 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	e027      	b.n	800feb2 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	3b01      	subs	r3, #1
 800fe66:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 800fe68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1c9      	bne.n	800fe02 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 800fe6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe70:	3301      	adds	r3, #1
 800fe72:	637b      	str	r3, [r7, #52]	; 0x34
 800fe74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d3a7      	bcc.n	800fdcc <_fx_utility_FAT_map_flush+0x90>
 800fe7c:	e000      	b.n	800fe80 <_fx_utility_FAT_map_flush+0x144>
            continue;
 800fe7e:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800fe80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe82:	3301      	adds	r3, #1
 800fe84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe8c:	f4ff af71 	bcc.w	800fd72 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800fe90:	2300      	movs	r3, #0
 800fe92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe94:	e009      	b.n	800feaa <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800fe96:	69fa      	ldr	r2, [r7, #28]
 800fe98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9a:	4413      	add	r3, r2
 800fe9c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800fea0:	2200      	movs	r2, #0
 800fea2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea6:	3301      	adds	r3, #1
 800fea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feac:	2b7f      	cmp	r3, #127	; 0x7f
 800feae:	d9f2      	bls.n	800fe96 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3738      	adds	r7, #56	; 0x38
 800feb6:	46bd      	mov	sp, r7
 800feb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800febc <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 800febc:	b480      	push	{r7}
 800febe:	b08f      	sub	sp, #60	; 0x3c
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	f000 8275 	beq.w	80103bc <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 800fed2:	683a      	ldr	r2, [r7, #0]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800feda:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800fede:	4013      	ands	r3, r2
 800fee0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6a1a      	ldr	r2, [r3, #32]
 800fee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee8:	f003 031f 	and.w	r3, r3, #31
 800feec:	2101      	movs	r1, #1
 800feee:	fa01 f303 	lsl.w	r3, r1, r3
 800fef2:	431a      	orrs	r2, r3
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800fefe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff00:	4613      	mov	r3, r2
 800ff02:	005b      	lsls	r3, r3, #1
 800ff04:	4413      	add	r3, r2
 800ff06:	00db      	lsls	r3, r3, #3
 800ff08:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	4413      	add	r3, r2
 800ff10:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800ff12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff14:	7c5b      	ldrb	r3, [r3, #17]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d015      	beq.n	800ff46 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 800ff1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ff20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff24:	4299      	cmp	r1, r3
 800ff26:	bf08      	it	eq
 800ff28:	4290      	cmpeq	r0, r2
 800ff2a:	d10c      	bne.n	800ff46 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800ff2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ff3a:	1c5a      	adds	r2, r3, #1
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800ff42:	2300      	movs	r3, #0
 800ff44:	e27e      	b.n	8010444 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 800ff46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff48:	3318      	adds	r3, #24
 800ff4a:	7c5b      	ldrb	r3, [r3, #17]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d060      	beq.n	8010012 <_fx_utility_logical_sector_cache_entry_read+0x156>
 800ff50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff52:	3318      	adds	r3, #24
 800ff54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ff58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff5c:	4299      	cmp	r1, r3
 800ff5e:	bf08      	it	eq
 800ff60:	4290      	cmpeq	r0, r2
 800ff62:	d156      	bne.n	8010012 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800ff64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff66:	3318      	adds	r3, #24
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ff74:	1c5a      	adds	r2, r3, #1
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800ff82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ff88:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800ff8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8e:	7c1b      	ldrb	r3, [r3, #16]
 800ff90:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800ff94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff96:	7c5b      	ldrb	r3, [r3, #17]
 800ff98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800ff9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff9e:	7c9b      	ldrb	r3, [r3, #18]
 800ffa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	3318      	adds	r3, #24
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffac:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 800ffae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb0:	3318      	adds	r3, #24
 800ffb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ffb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ffb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800ffbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffbe:	3318      	adds	r3, #24
 800ffc0:	7c1a      	ldrb	r2, [r3, #16]
 800ffc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc4:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 800ffc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc8:	3318      	adds	r3, #24
 800ffca:	7c5a      	ldrb	r2, [r3, #17]
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffce:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 800ffd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd2:	3318      	adds	r3, #24
 800ffd4:	7c9a      	ldrb	r2, [r3, #18]
 800ffd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd8:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800ffda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffdc:	3318      	adds	r3, #24
 800ffde:	693a      	ldr	r2, [r7, #16]
 800ffe0:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800ffe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe4:	f103 0118 	add.w	r1, r3, #24
 800ffe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ffec:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800fff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff2:	3318      	adds	r3, #24
 800fff4:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fff8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800fffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fffc:	3318      	adds	r3, #24
 800fffe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010002:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010006:	3318      	adds	r3, #24
 8010008:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801000c:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801000e:	2300      	movs	r3, #0
 8010010:	e218      	b.n	8010444 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8010012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010014:	3330      	adds	r3, #48	; 0x30
 8010016:	7c5b      	ldrb	r3, [r3, #17]
 8010018:	2b00      	cmp	r3, #0
 801001a:	f000 8086 	beq.w	801012a <_fx_utility_logical_sector_cache_entry_read+0x26e>
 801001e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010020:	3330      	adds	r3, #48	; 0x30
 8010022:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010026:	e9d7 0100 	ldrd	r0, r1, [r7]
 801002a:	4299      	cmp	r1, r3
 801002c:	bf08      	it	eq
 801002e:	4290      	cmpeq	r0, r2
 8010030:	d17b      	bne.n	801012a <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010034:	3330      	adds	r3, #48	; 0x30
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801004a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010056:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801005a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005c:	7c1b      	ldrb	r3, [r3, #16]
 801005e:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010064:	7c5b      	ldrb	r3, [r3, #17]
 8010066:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801006a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801006c:	7c9b      	ldrb	r3, [r3, #18]
 801006e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010074:	3330      	adds	r3, #48	; 0x30
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007a:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 801007c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007e:	3330      	adds	r3, #48	; 0x30
 8010080:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010084:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010086:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	3330      	adds	r3, #48	; 0x30
 801008e:	7c1a      	ldrb	r2, [r3, #16]
 8010090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010092:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8010094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010096:	3330      	adds	r3, #48	; 0x30
 8010098:	7c5a      	ldrb	r2, [r3, #17]
 801009a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009c:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 801009e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a0:	3330      	adds	r3, #48	; 0x30
 80100a2:	7c9a      	ldrb	r2, [r3, #18]
 80100a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a6:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80100a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100aa:	f103 0218 	add.w	r2, r3, #24
 80100ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b0:	3330      	adds	r3, #48	; 0x30
 80100b2:	6812      	ldr	r2, [r2, #0]
 80100b4:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80100b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b8:	3318      	adds	r3, #24
 80100ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100bc:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80100c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80100c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80100c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ca:	f103 0218 	add.w	r2, r3, #24
 80100ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d0:	3330      	adds	r3, #48	; 0x30
 80100d2:	7c12      	ldrb	r2, [r2, #16]
 80100d4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80100d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d8:	f103 0218 	add.w	r2, r3, #24
 80100dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100de:	3330      	adds	r3, #48	; 0x30
 80100e0:	7c52      	ldrb	r2, [r2, #17]
 80100e2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80100e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e6:	f103 0218 	add.w	r2, r3, #24
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	3330      	adds	r3, #48	; 0x30
 80100ee:	7c92      	ldrb	r2, [r2, #18]
 80100f0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	3318      	adds	r3, #24
 80100f6:	693a      	ldr	r2, [r7, #16]
 80100f8:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80100fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fc:	f103 0118 	add.w	r1, r3, #24
 8010100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010104:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801010a:	3318      	adds	r3, #24
 801010c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010110:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010114:	3318      	adds	r3, #24
 8010116:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801011a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801011c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011e:	3318      	adds	r3, #24
 8010120:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010124:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010126:	2300      	movs	r3, #0
 8010128:	e18c      	b.n	8010444 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 801012a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012c:	3348      	adds	r3, #72	; 0x48
 801012e:	7c5b      	ldrb	r3, [r3, #17]
 8010130:	2b00      	cmp	r3, #0
 8010132:	f000 80ac 	beq.w	801028e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8010136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010138:	3348      	adds	r3, #72	; 0x48
 801013a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801013e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010142:	4299      	cmp	r1, r3
 8010144:	bf08      	it	eq
 8010146:	4290      	cmpeq	r0, r2
 8010148:	f040 80a1 	bne.w	801028e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801014c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014e:	3348      	adds	r3, #72	; 0x48
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801015c:	1c5a      	adds	r2, r3, #1
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801016a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801016c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010170:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010176:	7c1b      	ldrb	r3, [r3, #16]
 8010178:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801017c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017e:	7c5b      	ldrb	r3, [r3, #17]
 8010180:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010186:	7c9b      	ldrb	r3, [r3, #18]
 8010188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801018c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018e:	3348      	adds	r3, #72	; 0x48
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010194:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8010196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010198:	3348      	adds	r3, #72	; 0x48
 801019a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801019e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80101a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a6:	3348      	adds	r3, #72	; 0x48
 80101a8:	7c1a      	ldrb	r2, [r3, #16]
 80101aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ac:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 80101ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b0:	3348      	adds	r3, #72	; 0x48
 80101b2:	7c5a      	ldrb	r2, [r3, #17]
 80101b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b6:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 80101b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ba:	3348      	adds	r3, #72	; 0x48
 80101bc:	7c9a      	ldrb	r2, [r3, #18]
 80101be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80101c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ca:	3348      	adds	r3, #72	; 0x48
 80101cc:	6812      	ldr	r2, [r2, #0]
 80101ce:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80101d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101d2:	3330      	adds	r3, #48	; 0x30
 80101d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101d6:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80101da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80101de:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80101e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ea:	3348      	adds	r3, #72	; 0x48
 80101ec:	7c12      	ldrb	r2, [r2, #16]
 80101ee:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 80101f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f8:	3348      	adds	r3, #72	; 0x48
 80101fa:	7c52      	ldrb	r2, [r2, #17]
 80101fc:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 80101fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010200:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010206:	3348      	adds	r3, #72	; 0x48
 8010208:	7c92      	ldrb	r2, [r2, #18]
 801020a:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801020c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020e:	f103 0218 	add.w	r2, r3, #24
 8010212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010214:	3330      	adds	r3, #48	; 0x30
 8010216:	6812      	ldr	r2, [r2, #0]
 8010218:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801021a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021c:	3318      	adds	r3, #24
 801021e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010220:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010224:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010228:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801022c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022e:	f103 0218 	add.w	r2, r3, #24
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	3330      	adds	r3, #48	; 0x30
 8010236:	7c12      	ldrb	r2, [r2, #16]
 8010238:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801023a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801023c:	f103 0218 	add.w	r2, r3, #24
 8010240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010242:	3330      	adds	r3, #48	; 0x30
 8010244:	7c52      	ldrb	r2, [r2, #17]
 8010246:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801024a:	f103 0218 	add.w	r2, r3, #24
 801024e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010250:	3330      	adds	r3, #48	; 0x30
 8010252:	7c92      	ldrb	r2, [r2, #18]
 8010254:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010258:	3318      	adds	r3, #24
 801025a:	693a      	ldr	r2, [r7, #16]
 801025c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010260:	f103 0118 	add.w	r1, r3, #24
 8010264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010268:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801026c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801026e:	3318      	adds	r3, #24
 8010270:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010274:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010278:	3318      	adds	r3, #24
 801027a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801027e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010282:	3318      	adds	r3, #24
 8010284:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010288:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801028a:	2300      	movs	r3, #0
 801028c:	e0da      	b.n	8010444 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801028e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010290:	3348      	adds	r3, #72	; 0x48
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 8010296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010298:	3348      	adds	r3, #72	; 0x48
 801029a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801029e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80102a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a4:	3348      	adds	r3, #72	; 0x48
 80102a6:	7c1b      	ldrb	r3, [r3, #16]
 80102a8:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 80102ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ae:	3348      	adds	r3, #72	; 0x48
 80102b0:	7c5b      	ldrb	r3, [r3, #17]
 80102b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 80102b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b8:	3348      	adds	r3, #72	; 0x48
 80102ba:	7c9b      	ldrb	r3, [r3, #18]
 80102bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80102c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c8:	3348      	adds	r3, #72	; 0x48
 80102ca:	6812      	ldr	r2, [r2, #0]
 80102cc:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80102ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d0:	3330      	adds	r3, #48	; 0x30
 80102d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102d4:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80102d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80102dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80102e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e8:	3348      	adds	r3, #72	; 0x48
 80102ea:	7c12      	ldrb	r2, [r2, #16]
 80102ec:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 80102ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f6:	3348      	adds	r3, #72	; 0x48
 80102f8:	7c52      	ldrb	r2, [r2, #17]
 80102fa:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 80102fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010304:	3348      	adds	r3, #72	; 0x48
 8010306:	7c92      	ldrb	r2, [r2, #18]
 8010308:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801030a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801030c:	f103 0218 	add.w	r2, r3, #24
 8010310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010312:	3330      	adds	r3, #48	; 0x30
 8010314:	6812      	ldr	r2, [r2, #0]
 8010316:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031a:	3318      	adds	r3, #24
 801031c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801031e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010322:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010326:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801032a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032c:	f103 0218 	add.w	r2, r3, #24
 8010330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010332:	3330      	adds	r3, #48	; 0x30
 8010334:	7c12      	ldrb	r2, [r2, #16]
 8010336:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033a:	f103 0218 	add.w	r2, r3, #24
 801033e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010340:	3330      	adds	r3, #48	; 0x30
 8010342:	7c52      	ldrb	r2, [r2, #17]
 8010344:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010348:	f103 0218 	add.w	r2, r3, #24
 801034c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034e:	3330      	adds	r3, #48	; 0x30
 8010350:	7c92      	ldrb	r2, [r2, #18]
 8010352:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8010354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010356:	3318      	adds	r3, #24
 8010358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801035a:	6812      	ldr	r2, [r2, #0]
 801035c:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 801035e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010360:	f103 0118 	add.w	r1, r3, #24
 8010364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010366:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801036a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 801036e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010370:	3318      	adds	r3, #24
 8010372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010374:	7c12      	ldrb	r2, [r2, #16]
 8010376:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8010378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037a:	3318      	adds	r3, #24
 801037c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801037e:	7c52      	ldrb	r2, [r2, #17]
 8010380:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8010382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010384:	3318      	adds	r3, #24
 8010386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010388:	7c92      	ldrb	r2, [r2, #18]
 801038a:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010390:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8010392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010396:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010398:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 801039c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80103a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a2:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 80103a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80103a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103aa:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 80103ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80103b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b2:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 80103b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b6:	2200      	movs	r2, #0
 80103b8:	601a      	str	r2, [r3, #0]
 80103ba:	e042      	b.n	8010442 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	695b      	ldr	r3, [r3, #20]
 80103c0:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	69db      	ldr	r3, [r3, #28]
 80103c6:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 80103c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ca:	2200      	movs	r2, #0
 80103cc:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 80103ce:	e033      	b.n	8010438 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80103d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d2:	7c5b      	ldrb	r3, [r3, #17]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d025      	beq.n	8010424 <_fx_utility_logical_sector_cache_entry_read+0x568>
 80103d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80103de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80103e2:	4299      	cmp	r1, r3
 80103e4:	bf08      	it	eq
 80103e6:	4290      	cmpeq	r0, r2
 80103e8:	d11c      	bne.n	8010424 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80103ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 80103f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00b      	beq.n	8010412 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 80103fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103fc:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 80103fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010400:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8010402:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010410:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010418:	1c5a      	adds	r2, r3, #1
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8010420:	2300      	movs	r3, #0
 8010422:	e00f      	b.n	8010444 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8010424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010426:	695b      	ldr	r3, [r3, #20]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d005      	beq.n	8010438 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 801042c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801042e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010430:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	695b      	ldr	r3, [r3, #20]
 8010436:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8010438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043a:	1e5a      	subs	r2, r3, #1
 801043c:	633a      	str	r2, [r7, #48]	; 0x30
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1c6      	bne.n	80103d0 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8010444:	4618      	mov	r0, r3
 8010446:	373c      	adds	r7, #60	; 0x3c
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8010450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010454:	b094      	sub	sp, #80	; 0x50
 8010456:	af00      	add	r7, sp, #0
 8010458:	61f8      	str	r0, [r7, #28]
 801045a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 801045e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010462:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010466:	1884      	adds	r4, r0, r2
 8010468:	eb41 0503 	adc.w	r5, r1, r3
 801046c:	1e63      	subs	r3, r4, #1
 801046e:	60bb      	str	r3, [r7, #8]
 8010470:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010474:	60fb      	str	r3, [r7, #12]
 8010476:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801047a:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010482:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	2b00      	cmp	r3, #0
 801048a:	f040 80b4 	bne.w	80105f6 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	695b      	ldr	r3, [r3, #20]
 8010492:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	69db      	ldr	r3, [r3, #28]
 8010498:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801049a:	e09f      	b.n	80105dc <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <_fx_utility_logical_sector_flush+0x5a>
 80104a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f000 81de 	beq.w	8010866 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 80104aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80104ae:	4313      	orrs	r3, r2
 80104b0:	f000 81db 	beq.w	801086a <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 80104b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b6:	7c5b      	ldrb	r3, [r3, #17]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f000 808c 	beq.w	80105d6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80104be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 80104c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80104c8:	4290      	cmp	r0, r2
 80104ca:	eb71 0303 	sbcs.w	r3, r1, r3
 80104ce:	f0c0 8082 	bcc.w	80105d6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 80104d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80104d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80104dc:	4290      	cmp	r0, r2
 80104de:	eb71 0303 	sbcs.w	r3, r1, r3
 80104e2:	d378      	bcc.n	80105d6 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 80104e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104e6:	7c1b      	ldrb	r3, [r3, #16]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d04d      	beq.n	8010588 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d148      	bne.n	8010588 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80104fc:	1c5a      	adds	r2, r3, #1
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	2201      	movs	r2, #1
 8010508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2290      	movs	r2, #144	; 0x90
 8010510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801051e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010520:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	2201      	movs	r2, #1
 801052e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010534:	7c9b      	ldrb	r3, [r3, #18]
 8010536:	461a      	mov	r2, r3
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801053e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010540:	7c9b      	ldrb	r3, [r3, #18]
 8010542:	2b04      	cmp	r3, #4
 8010544:	d003      	beq.n	801054e <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	2201      	movs	r2, #1
 801054a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010554:	69f8      	ldr	r0, [r7, #28]
 8010556:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	2200      	movs	r2, #0
 801055c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010570:	e17f      	b.n	8010872 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010574:	2200      	movs	r2, #0
 8010576:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057c:	1e5a      	subs	r2, r3, #1
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8010582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010584:	3b01      	subs	r3, #1
 8010586:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 8010588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801058a:	2b00      	cmp	r3, #0
 801058c:	d018      	beq.n	80105c0 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801058e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010590:	2200      	movs	r2, #0
 8010592:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010594:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010596:	f04f 32ff 	mov.w	r2, #4294967295
 801059a:	f04f 33ff 	mov.w	r3, #4294967295
 801059e:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 80105a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a4:	7c1b      	ldrb	r3, [r3, #16]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00a      	beq.n	80105c0 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80105aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ac:	2200      	movs	r2, #0
 80105ae:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b4:	1e5a      	subs	r2, r3, #1
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 80105ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105bc:	3b01      	subs	r3, #1
 80105be:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 80105c0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80105c4:	1e51      	subs	r1, r2, #1
 80105c6:	6039      	str	r1, [r7, #0]
 80105c8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80105cc:	607b      	str	r3, [r7, #4]
 80105ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80105d2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80105d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d8:	695b      	ldr	r3, [r3, #20]
 80105da:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80105dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105de:	1e5a      	subs	r2, r3, #1
 80105e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 8144 	beq.w	8010870 <_fx_utility_logical_sector_flush+0x420>
 80105e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80105ee:	4313      	orrs	r3, r2
 80105f0:	f47f af54 	bne.w	801049c <_fx_utility_logical_sector_flush+0x4c>
 80105f4:	e13c      	b.n	8010870 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	695b      	ldr	r3, [r3, #20]
 80105fa:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 80105fc:	2300      	movs	r3, #0
 80105fe:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	6a1b      	ldr	r3, [r3, #32]
 8010604:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8010606:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801060a:	2a20      	cmp	r2, #32
 801060c:	f173 0300 	sbcs.w	r3, r3, #0
 8010610:	d202      	bcs.n	8010618 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 8010612:	2301      	movs	r3, #1
 8010614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010616:	e121      	b.n	801085c <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8010618:	2300      	movs	r3, #0
 801061a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 801061c:	e11e      	b.n	801085c <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	2b00      	cmp	r3, #0
 8010622:	d103      	bne.n	801062c <_fx_utility_logical_sector_flush+0x1dc>
 8010624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010626:	2b00      	cmp	r3, #0
 8010628:	f000 8121 	beq.w	801086e <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 801062c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010630:	4313      	orrs	r3, r2
 8010632:	f000 811d 	beq.w	8010870 <_fx_utility_logical_sector_flush+0x420>
 8010636:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801063a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801063e:	4290      	cmp	r0, r2
 8010640:	eb71 0303 	sbcs.w	r3, r1, r3
 8010644:	f0c0 8114 	bcc.w	8010870 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 8010648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801064a:	2b00      	cmp	r3, #0
 801064c:	d015      	beq.n	801067a <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801064e:	693a      	ldr	r2, [r7, #16]
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010656:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801065a:	4013      	ands	r3, r2
 801065c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 801065e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010660:	f003 031f 	and.w	r3, r3, #31
 8010664:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8010666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	63bb      	str	r3, [r7, #56]	; 0x38
 801066c:	e00d      	b.n	801068a <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	085b      	lsrs	r3, r3, #1
 8010672:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 8010674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010676:	3301      	adds	r3, #1
 8010678:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 801067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	d0f4      	beq.n	801066e <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8010684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 801068a:	2300      	movs	r3, #0
 801068c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801068e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010690:	4613      	mov	r3, r2
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	4413      	add	r3, r2
 8010696:	00db      	lsls	r3, r3, #3
 8010698:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801069c:	69fa      	ldr	r2, [r7, #28]
 801069e:	4413      	add	r3, r2
 80106a0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 80106a2:	2300      	movs	r3, #0
 80106a4:	647b      	str	r3, [r7, #68]	; 0x44
 80106a6:	e0a7      	b.n	80107f8 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80106a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106aa:	7c5b      	ldrb	r3, [r3, #17]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f000 8089 	beq.w	80107c4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80106b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80106b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80106bc:	4290      	cmp	r0, r2
 80106be:	eb71 0303 	sbcs.w	r3, r1, r3
 80106c2:	d37f      	bcc.n	80107c4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 80106c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 80106ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80106ce:	4290      	cmp	r0, r2
 80106d0:	eb71 0303 	sbcs.w	r3, r1, r3
 80106d4:	d376      	bcc.n	80107c4 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80106d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d8:	7c1b      	ldrb	r3, [r3, #16]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d04d      	beq.n	801077a <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d148      	bne.n	801077a <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	2201      	movs	r2, #1
 80106fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	2290      	movs	r2, #144	; 0x90
 8010702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010712:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	2201      	movs	r2, #1
 8010720:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010726:	7c9b      	ldrb	r3, [r3, #18]
 8010728:	461a      	mov	r2, r3
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010732:	7c9b      	ldrb	r3, [r3, #18]
 8010734:	2b04      	cmp	r3, #4
 8010736:	d003      	beq.n	8010740 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	2201      	movs	r2, #1
 801073c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010746:	69f8      	ldr	r0, [r7, #28]
 8010748:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	2200      	movs	r2, #0
 801074e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d003      	beq.n	8010764 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010762:	e086      	b.n	8010872 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010766:	2200      	movs	r2, #0
 8010768:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076e:	1e5a      	subs	r2, r3, #1
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8010774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010776:	3b01      	subs	r3, #1
 8010778:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 801077a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801077c:	2b00      	cmp	r3, #0
 801077e:	d018      	beq.n	80107b2 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010782:	2200      	movs	r2, #0
 8010784:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010786:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010788:	f04f 32ff 	mov.w	r2, #4294967295
 801078c:	f04f 33ff 	mov.w	r3, #4294967295
 8010790:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010796:	7c1b      	ldrb	r3, [r3, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00a      	beq.n	80107b2 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801079c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079e:	2200      	movs	r2, #0
 80107a0:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a6:	1e5a      	subs	r2, r3, #1
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	3b01      	subs	r3, #1
 80107b0:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 80107b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80107b6:	f112 38ff 	adds.w	r8, r2, #4294967295
 80107ba:	f143 39ff 	adc.w	r9, r3, #4294967295
 80107be:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 80107c2:	e006      	b.n	80107d2 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 80107c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c6:	7c5b      	ldrb	r3, [r3, #17]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	3301      	adds	r3, #1
 80107d0:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80107d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d102      	bne.n	80107de <_fx_utility_logical_sector_flush+0x38e>
 80107d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d011      	beq.n	8010802 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80107de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80107e2:	4313      	orrs	r3, r2
 80107e4:	d102      	bne.n	80107ec <_fx_utility_logical_sector_flush+0x39c>
 80107e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d00c      	beq.n	8010806 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 80107ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ee:	3318      	adds	r3, #24
 80107f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 80107f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107f4:	3301      	adds	r3, #1
 80107f6:	647b      	str	r3, [r7, #68]	; 0x44
 80107f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	f67f af54 	bls.w	80106a8 <_fx_utility_logical_sector_flush+0x258>
 8010800:	e002      	b.n	8010808 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8010802:	bf00      	nop
 8010804:	e000      	b.n	8010808 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8010806:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8010808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080a:	3380      	adds	r3, #128	; 0x80
 801080c:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 801080e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010812:	429a      	cmp	r2, r3
 8010814:	f4ff af3b 	bcc.w	801068e <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8010818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00c      	beq.n	8010838 <_fx_utility_logical_sector_flush+0x3e8>
 801081e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010820:	2b00      	cmp	r3, #0
 8010822:	d109      	bne.n	8010838 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	6a1a      	ldr	r2, [r3, #32]
 8010828:	2101      	movs	r1, #1
 801082a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801082c:	fa01 f303 	lsl.w	r3, r1, r3
 8010830:	43db      	mvns	r3, r3
 8010832:	401a      	ands	r2, r3
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8010838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801083a:	2b00      	cmp	r3, #0
 801083c:	d008      	beq.n	8010850 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801083e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010842:	f112 0a01 	adds.w	sl, r2, #1
 8010846:	f143 0b00 	adc.w	fp, r3, #0
 801084a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801084e:	e005      	b.n	801085c <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	085b      	lsrs	r3, r3, #1
 8010854:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 8010856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010858:	3301      	adds	r3, #1
 801085a:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 801085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085e:	2b00      	cmp	r3, #0
 8010860:	f47f aedd 	bne.w	801061e <_fx_utility_logical_sector_flush+0x1ce>
 8010864:	e004      	b.n	8010870 <_fx_utility_logical_sector_flush+0x420>
                break;
 8010866:	bf00      	nop
 8010868:	e002      	b.n	8010870 <_fx_utility_logical_sector_flush+0x420>
                break;
 801086a:	bf00      	nop
 801086c:	e000      	b.n	8010870 <_fx_utility_logical_sector_flush+0x420>
                break;
 801086e:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8010870:	2300      	movs	r3, #0
}
 8010872:	4618      	mov	r0, r3
 8010874:	3750      	adds	r7, #80	; 0x50
 8010876:	46bd      	mov	sp, r7
 8010878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801087c <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 801087c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010880:	b09c      	sub	sp, #112	; 0x70
 8010882:	af04      	add	r7, sp, #16
 8010884:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010886:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 801088a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801088e:	2b02      	cmp	r3, #2
 8010890:	d106      	bne.n	80108a0 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8010892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010894:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010898:	1c5a      	adds	r2, r3, #1
 801089a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801089c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 80108a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108a2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80108a6:	1c5a      	adds	r2, r3, #1
 80108a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108aa:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80108ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108b0:	689a      	ldr	r2, [r3, #8]
 80108b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108b6:	4293      	cmp	r3, r2
 80108b8:	f0c0 80d9 	bcc.w	8010a6e <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 80108bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108be:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80108c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108c4:	4293      	cmp	r3, r2
 80108c6:	f200 80d2 	bhi.w	8010a6e <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 80108ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80108d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80108d6:	f7ff faf1 	bl	800febc <_fx_utility_logical_sector_cache_entry_read>
 80108da:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 80108dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 80108e2:	2300      	movs	r3, #0
 80108e4:	e259      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 80108e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80108ec:	1c5a      	adds	r2, r3, #1
 80108ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 80108f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108f6:	7c5b      	ldrb	r3, [r3, #17]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d049      	beq.n	8010990 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 80108fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108fe:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8010900:	2b00      	cmp	r3, #0
 8010902:	d045      	beq.n	8010990 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8010904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010906:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801090a:	1c5a      	adds	r2, r3, #1
 801090c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801090e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010914:	2201      	movs	r2, #1
 8010916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801091a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801091c:	2290      	movs	r2, #144	; 0x90
 801091e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801092c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801092e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8010938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801093a:	2201      	movs	r2, #1
 801093c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010942:	7c9b      	ldrb	r3, [r3, #18]
 8010944:	461a      	mov	r2, r3
 8010946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010948:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801094c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801094e:	7c9b      	ldrb	r3, [r3, #18]
 8010950:	2b04      	cmp	r3, #4
 8010952:	d003      	beq.n	801095c <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010956:	2201      	movs	r2, #1
 8010958:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801095c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801095e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010962:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010964:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010968:	2200      	movs	r2, #0
 801096a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 801096e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010974:	2b00      	cmp	r3, #0
 8010976:	d003      	beq.n	8010980 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8010978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801097a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801097e:	e20c      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010982:	2200      	movs	r2, #0
 8010984:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8010986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098a:	1e5a      	subs	r2, r3, #1
 801098c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801098e:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8010990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010992:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010996:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801099a:	4290      	cmp	r0, r2
 801099c:	eb71 0303 	sbcs.w	r3, r1, r3
 80109a0:	d301      	bcc.n	80109a6 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 80109a2:	2389      	movs	r3, #137	; 0x89
 80109a4:	e1f9      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80109a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80109ac:	1c5a      	adds	r2, r3, #1
 80109ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80109b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b6:	2200      	movs	r2, #0
 80109b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80109bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109be:	2290      	movs	r2, #144	; 0x90
 80109c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80109c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80109ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 80109d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109d8:	2201      	movs	r2, #1
 80109da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80109de:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80109e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 80109e8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80109ec:	2b04      	cmp	r3, #4
 80109ee:	d103      	bne.n	80109f8 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80109f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109f2:	2201      	movs	r2, #1
 80109f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80109f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80109fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010a00:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8010a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a04:	2200      	movs	r2, #0
 8010a06:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8010a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d11a      	bne.n	8010a4a <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8010a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010a1a:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8010a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a20:	2201      	movs	r2, #1
 8010a22:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8010a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a26:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8010a2a:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8010a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d015      	beq.n	8010a5e <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8010a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8010a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a36:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8010a38:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8010a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a3c:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 8010a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a40:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8010a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a46:	61da      	str	r2, [r3, #28]
 8010a48:	e009      	b.n	8010a5e <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010a50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a52:	f04f 32ff 	mov.w	r2, #4294967295
 8010a56:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a64:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8010a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a6c:	e195      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8010a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a72:	2200      	movs	r2, #0
 8010a74:	469a      	mov	sl, r3
 8010a76:	4693      	mov	fp, r2
 8010a78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010a7c:	eb1a 0402 	adds.w	r4, sl, r2
 8010a80:	eb4b 0503 	adc.w	r5, fp, r3
 8010a84:	f114 38ff 	adds.w	r8, r4, #4294967295
 8010a88:	f145 39ff 	adc.w	r9, r5, #4294967295
 8010a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010a92:	2300      	movs	r3, #0
 8010a94:	63ba      	str	r2, [r7, #56]	; 0x38
 8010a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4543      	cmp	r3, r8
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	eb73 0309 	sbcs.w	r3, r3, r9
 8010aa6:	d22c      	bcs.n	8010b02 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8010aa8:	2389      	movs	r3, #137	; 0x89
 8010aaa:	e176      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8010aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ab6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010ab8:	f7ff fa00 	bl	800febc <_fx_utility_logical_sector_cache_entry_read>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d124      	bne.n	8010b0c <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 8010ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac4:	6898      	ldr	r0, [r3, #8]
 8010ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aca:	461a      	mov	r2, r3
 8010acc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010ad0:	f000 fad0 	bl	8011074 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8010ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010adc:	4413      	add	r3, r2
 8010ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8010ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ae6:	1c51      	adds	r1, r2, #1
 8010ae8:	61b9      	str	r1, [r7, #24]
 8010aea:	f143 0300 	adc.w	r3, r3, #0
 8010aee:	61fb      	str	r3, [r7, #28]
 8010af0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010af4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8010af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010afc:	3b01      	subs	r3, #1
 8010afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8010b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d1d0      	bne.n	8010aac <_fx_utility_logical_sector_read+0x230>
 8010b0a:	e000      	b.n	8010b0e <_fx_utility_logical_sector_read+0x292>
                break;
 8010b0c:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8010b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b12:	2200      	movs	r2, #0
 8010b14:	633b      	str	r3, [r7, #48]	; 0x30
 8010b16:	637a      	str	r2, [r7, #52]	; 0x34
 8010b18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010b1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010b20:	4621      	mov	r1, r4
 8010b22:	1889      	adds	r1, r1, r2
 8010b24:	62b9      	str	r1, [r7, #40]	; 0x28
 8010b26:	4629      	mov	r1, r5
 8010b28:	eb43 0101 	adc.w	r1, r3, r1
 8010b2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010b2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010b32:	460b      	mov	r3, r1
 8010b34:	3b01      	subs	r3, #1
 8010b36:	613b      	str	r3, [r7, #16]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010b44:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8010b48:	e02b      	b.n	8010ba2 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8010b4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010b54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010b56:	f7ff f9b1 	bl	800febc <_fx_utility_logical_sector_cache_entry_read>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d125      	bne.n	8010bac <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8010b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b62:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8010b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010b6e:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8010b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010b76:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8010b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	f000 fa79 	bl	8011074 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8010b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010b86:	1e51      	subs	r1, r2, #1
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010b8e:	60fb      	str	r3, [r7, #12]
 8010b90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010b94:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8010b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8010ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1cf      	bne.n	8010b4a <_fx_utility_logical_sector_read+0x2ce>
 8010baa:	e000      	b.n	8010bae <_fx_utility_logical_sector_read+0x332>
                break;
 8010bac:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 8010bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d101      	bne.n	8010bba <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e0ef      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8010bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	623b      	str	r3, [r7, #32]
 8010bc2:	627a      	str	r2, [r7, #36]	; 0x24
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	9302      	str	r3, [sp, #8]
 8010bc8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010bcc:	e9cd 3400 	strd	r3, r4, [sp]
 8010bd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010bd4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010bd6:	f7ff fc3b 	bl	8010450 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8010bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bdc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8010be0:	1c5a      	adds	r2, r3, #1
 8010be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8010be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bea:	2200      	movs	r2, #0
 8010bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bf2:	2290      	movs	r2, #144	; 0x90
 8010bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8010bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8010c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8010c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8010c14:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8010c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8010c1e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010c22:	2b04      	cmp	r3, #4
 8010c24:	d103      	bne.n	8010c2e <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8010c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c28:	2201      	movs	r2, #1
 8010c2a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010c34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010c36:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8010c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8010c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f040 80a4 	bne.w	8010d94 <_fx_utility_logical_sector_read+0x518>
 8010c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c4e:	695b      	ldr	r3, [r3, #20]
 8010c50:	089b      	lsrs	r3, r3, #2
 8010c52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c56:	429a      	cmp	r2, r3
 8010c58:	f080 809c 	bcs.w	8010d94 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8010c5c:	e095      	b.n	8010d8a <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8010c5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010c68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010c6a:	f7ff f927 	bl	800febc <_fx_utility_logical_sector_cache_entry_read>
 8010c6e:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8010c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8010c76:	2300      	movs	r3, #0
 8010c78:	e08f      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8010c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c7c:	7c5b      	ldrb	r3, [r3, #17]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d049      	beq.n	8010d16 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8010c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c84:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d045      	beq.n	8010d16 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 8010c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c8c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010c90:	1c5a      	adds	r2, r3, #1
 8010c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c94:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ca2:	2290      	movs	r2, #144	; 0x90
 8010ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 8010cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cc8:	7c9b      	ldrb	r3, [r3, #18]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cd4:	7c9b      	ldrb	r3, [r3, #18]
 8010cd6:	2b04      	cmp	r3, #4
 8010cd8:	d003      	beq.n	8010ce2 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cdc:	2201      	movs	r2, #1
 8010cde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ce4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010ce8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010cea:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8010cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d003      	beq.n	8010d06 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 8010cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d04:	e049      	b.n	8010d9a <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d08:	2200      	movs	r2, #0
 8010d0a:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8010d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	1e5a      	subs	r2, r3, #1
 8010d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d14:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8010d16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010d1c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8010d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d22:	2201      	movs	r2, #1
 8010d24:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8010d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d28:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8010d2c:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8010d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d00a      	beq.n	8010d4a <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8010d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8010d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d38:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8010d3a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8010d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d3e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8010d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d42:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8010d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d48:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8010d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d4c:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 8010d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8010d52:	461a      	mov	r2, r3
 8010d54:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010d58:	f000 f98c 	bl	8011074 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8010d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d64:	4413      	add	r3, r2
 8010d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8010d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010d6e:	1c51      	adds	r1, r2, #1
 8010d70:	6039      	str	r1, [r7, #0]
 8010d72:	f143 0300 	adc.w	r3, r3, #0
 8010d76:	607b      	str	r3, [r7, #4]
 8010d78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010d7c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8010d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d84:	3b01      	subs	r3, #1
 8010d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 8010d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f47f af65 	bne.w	8010c5e <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8010d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3760      	adds	r7, #96	; 0x60
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010da4 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8010da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010da8:	b096      	sub	sp, #88	; 0x58
 8010daa:	af04      	add	r7, sp, #16
 8010dac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010dae:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 8010db2:	2300      	movs	r3, #0
 8010db4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8010db8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d106      	bne.n	8010dce <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8010dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dca:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8010dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8010dd4:	1c5a      	adds	r2, r3, #1
 8010dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8010ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dde:	689a      	ldr	r2, [r3, #8]
 8010de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010de2:	4293      	cmp	r3, r2
 8010de4:	f0c0 80d8 	bcc.w	8010f98 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8010de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dea:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8010dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010dee:	4293      	cmp	r3, r2
 8010df0:	f200 80d2 	bhi.w	8010f98 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 8010df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d030      	beq.n	8010e5e <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8010dfc:	6a3a      	ldr	r2, [r7, #32]
 8010dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010e04:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8010e08:	4013      	ands	r3, r2
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8010e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e10:	4613      	mov	r3, r2
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	4413      	add	r3, r2
 8010e16:	00db      	lsls	r3, r3, #3
 8010e18:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8010e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e1e:	4413      	add	r3, r2
 8010e20:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8010e22:	2300      	movs	r3, #0
 8010e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e26:	e016      	b.n	8010e56 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8010e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e2a:	7c5b      	ldrb	r3, [r3, #17]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00c      	beq.n	8010e4a <_fx_utility_logical_sector_write+0xa6>
 8010e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e32:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010e36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010e3a:	4299      	cmp	r1, r3
 8010e3c:	bf08      	it	eq
 8010e3e:	4290      	cmpeq	r0, r2
 8010e40:	d103      	bne.n	8010e4a <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8010e42:	2301      	movs	r3, #1
 8010e44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8010e48:	e02d      	b.n	8010ea6 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8010e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e52:	3318      	adds	r3, #24
 8010e54:	647b      	str	r3, [r7, #68]	; 0x44
 8010e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e58:	2b03      	cmp	r3, #3
 8010e5a:	d9e5      	bls.n	8010e28 <_fx_utility_logical_sector_write+0x84>
 8010e5c:	e023      	b.n	8010ea6 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e60:	695b      	ldr	r3, [r3, #20]
 8010e62:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	69db      	ldr	r3, [r3, #28]
 8010e68:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8010e6a:	e017      	b.n	8010e9c <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8010e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e6e:	7c5b      	ldrb	r3, [r3, #17]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00c      	beq.n	8010e8e <_fx_utility_logical_sector_write+0xea>
 8010e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010e7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010e7e:	4299      	cmp	r1, r3
 8010e80:	bf08      	it	eq
 8010e82:	4290      	cmpeq	r0, r2
 8010e84:	d103      	bne.n	8010e8e <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8010e86:	2301      	movs	r3, #1
 8010e88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8010e8c:	e00b      	b.n	8010ea6 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 8010e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e90:	695b      	ldr	r3, [r3, #20]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d002      	beq.n	8010e9c <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8010e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 8010e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9e:	1e5a      	subs	r2, r3, #1
 8010ea0:	643a      	str	r2, [r7, #64]	; 0x40
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1e2      	bne.n	8010e6c <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8010ea6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00d      	beq.n	8010eca <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 8010eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010eb0:	7c1b      	ldrb	r3, [r3, #16]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d107      	bne.n	8010ec6 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8010eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8010ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e0cf      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8010eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	d004      	beq.n	8010edc <_fx_utility_logical_sector_write+0x138>
 8010ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010ed6:	1c51      	adds	r1, r2, #1
 8010ed8:	430b      	orrs	r3, r1
 8010eda:	d101      	bne.n	8010ee0 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 8010edc:	2389      	movs	r3, #137	; 0x89
 8010ede:	e0c4      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8010ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	61bb      	str	r3, [r7, #24]
 8010ee6:	61fa      	str	r2, [r7, #28]
 8010ee8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010eec:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8010ef0:	4621      	mov	r1, r4
 8010ef2:	1889      	adds	r1, r1, r2
 8010ef4:	6139      	str	r1, [r7, #16]
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	eb43 0101 	adc.w	r1, r3, r1
 8010efc:	6179      	str	r1, [r7, #20]
 8010efe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010f02:	460b      	mov	r3, r1
 8010f04:	f113 3aff 	adds.w	sl, r3, #4294967295
 8010f08:	4613      	mov	r3, r2
 8010f0a:	f143 3bff 	adc.w	fp, r3, #4294967295
 8010f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010f14:	4592      	cmp	sl, r2
 8010f16:	eb7b 0303 	sbcs.w	r3, fp, r3
 8010f1a:	d301      	bcc.n	8010f20 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 8010f1c:	2389      	movs	r3, #137	; 0x89
 8010f1e:	e0a4      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8010f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f22:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010f26:	1c5a      	adds	r2, r3, #1
 8010f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f30:	2201      	movs	r2, #1
 8010f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	2290      	movs	r2, #144	; 0x90
 8010f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8010f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8010f46:	6a3a      	ldr	r2, [r7, #32]
 8010f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010f52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8010f56:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8010f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8010f60:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8010f64:	2b04      	cmp	r3, #4
 8010f66:	d003      	beq.n	8010f70 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f78:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 8010f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d003      	beq.n	8010f94 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f92:	e06a      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 8010f94:	2300      	movs	r3, #0
 8010f96:	e068      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8010f98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	d004      	beq.n	8010faa <_fx_utility_logical_sector_write+0x206>
 8010fa0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010fa4:	1c51      	adds	r1, r2, #1
 8010fa6:	430b      	orrs	r3, r1
 8010fa8:	d101      	bne.n	8010fae <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 8010faa:	2389      	movs	r3, #137	; 0x89
 8010fac:	e05d      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8010fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	60bb      	str	r3, [r7, #8]
 8010fb4:	60fa      	str	r2, [r7, #12]
 8010fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010fba:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8010fbe:	4651      	mov	r1, sl
 8010fc0:	eb11 0802 	adds.w	r8, r1, r2
 8010fc4:	4659      	mov	r1, fp
 8010fc6:	eb41 0903 	adc.w	r9, r1, r3
 8010fca:	f118 34ff 	adds.w	r4, r8, #4294967295
 8010fce:	f149 35ff 	adc.w	r5, r9, #4294967295
 8010fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010fd8:	4294      	cmp	r4, r2
 8010fda:	eb75 0303 	sbcs.w	r3, r5, r3
 8010fde:	d301      	bcc.n	8010fe4 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8010fe0:	2389      	movs	r3, #137	; 0x89
 8010fe2:	e042      	b.n	801106a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8010fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	603b      	str	r3, [r7, #0]
 8010fea:	607a      	str	r2, [r7, #4]
 8010fec:	2301      	movs	r3, #1
 8010fee:	9302      	str	r3, [sp, #8]
 8010ff0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010ff4:	e9cd 3400 	strd	r3, r4, [sp]
 8010ff8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ffe:	f7ff fa27 	bl	8010450 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8011002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011004:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011008:	1c5a      	adds	r2, r3, #1
 801100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011012:	2201      	movs	r2, #1
 8011014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	2290      	movs	r2, #144	; 0x90
 801101c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011022:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011028:	6a3a      	ldr	r2, [r7, #32]
 801102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011034:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011038:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011042:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011046:	2b04      	cmp	r3, #4
 8011048:	d003      	beq.n	8011052 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104c:	2201      	movs	r2, #1
 801104e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011054:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801105a:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105e:	2200      	movs	r2, #0
 8011060:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 801106a:	4618      	mov	r0, r3
 801106c:	3748      	adds	r7, #72	; 0x48
 801106e:	46bd      	mov	sp, r7
 8011070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011074 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	68f9      	ldr	r1, [r7, #12]
 8011084:	68b8      	ldr	r0, [r7, #8]
 8011086:	f003 f99b 	bl	80143c0 <memcpy>
}
 801108a:	bf00      	nop
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d101      	bne.n	80110a6 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 80110a2:	2318      	movs	r3, #24
 80110a4:	e018      	b.n	80110d8 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110a6:	f3ef 8305 	mrs	r3, IPSR
 80110aa:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80110ac:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80110ae:	4b0c      	ldr	r3, [pc, #48]	; (80110e0 <_fxe_file_close+0x4c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d108      	bne.n	80110ca <_fxe_file_close+0x36>
 80110b8:	4b0a      	ldr	r3, [pc, #40]	; (80110e4 <_fxe_file_close+0x50>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d004      	beq.n	80110ca <_fxe_file_close+0x36>
 80110c0:	4b08      	ldr	r3, [pc, #32]	; (80110e4 <_fxe_file_close+0x50>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a08      	ldr	r2, [pc, #32]	; (80110e8 <_fxe_file_close+0x54>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d101      	bne.n	80110ce <_fxe_file_close+0x3a>
 80110ca:	2320      	movs	r3, #32
 80110cc:	e004      	b.n	80110d8 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7fa ff52 	bl	800bf78 <_fx_file_close>
 80110d4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 80110d6:	68fb      	ldr	r3, [r7, #12]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	2400006c 	.word	0x2400006c
 80110e4:	2400364c 	.word	0x2400364c
 80110e8:	24003794 	.word	0x24003794

080110ec <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d101      	bne.n	8011100 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 80110fc:	2318      	movs	r3, #24
 80110fe:	e019      	b.n	8011134 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011100:	f3ef 8305 	mrs	r3, IPSR
 8011104:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011106:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011108:	4b0c      	ldr	r3, [pc, #48]	; (801113c <_fxe_file_create+0x50>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4313      	orrs	r3, r2
 801110e:	2b00      	cmp	r3, #0
 8011110:	d108      	bne.n	8011124 <_fxe_file_create+0x38>
 8011112:	4b0b      	ldr	r3, [pc, #44]	; (8011140 <_fxe_file_create+0x54>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d004      	beq.n	8011124 <_fxe_file_create+0x38>
 801111a:	4b09      	ldr	r3, [pc, #36]	; (8011140 <_fxe_file_create+0x54>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4a09      	ldr	r2, [pc, #36]	; (8011144 <_fxe_file_create+0x58>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d101      	bne.n	8011128 <_fxe_file_create+0x3c>
 8011124:	2320      	movs	r3, #32
 8011126:	e005      	b.n	8011134 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8011128:	6839      	ldr	r1, [r7, #0]
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f7fa ffc8 	bl	800c0c0 <_fx_file_create>
 8011130:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8011132:	68fb      	ldr	r3, [r7, #12]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	2400006c 	.word	0x2400006c
 8011140:	2400364c 	.word	0x2400364c
 8011144:	24003794 	.word	0x24003794

08011148 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b088      	sub	sp, #32
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
 8011154:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d00b      	beq.n	8011174 <_fxe_file_open+0x2c>
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a36      	ldr	r2, [pc, #216]	; (801123c <_fxe_file_open+0xf4>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d106      	bne.n	8011174 <_fxe_file_open+0x2c>
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d003      	beq.n	8011174 <_fxe_file_open+0x2c>
 801116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8011172:	d001      	beq.n	8011178 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8011174:	2318      	movs	r3, #24
 8011176:	e05d      	b.n	8011234 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d007      	beq.n	801118e <_fxe_file_open+0x46>
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b02      	cmp	r3, #2
 8011182:	d004      	beq.n	801118e <_fxe_file_open+0x46>
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	2b01      	cmp	r3, #1
 8011188:	d001      	beq.n	801118e <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 801118a:	2306      	movs	r3, #6
 801118c:	e052      	b.n	8011234 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801118e:	f3ef 8305 	mrs	r3, IPSR
 8011192:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011194:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011196:	4b2a      	ldr	r3, [pc, #168]	; (8011240 <_fxe_file_open+0xf8>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4313      	orrs	r3, r2
 801119c:	2b00      	cmp	r3, #0
 801119e:	d108      	bne.n	80111b2 <_fxe_file_open+0x6a>
 80111a0:	4b28      	ldr	r3, [pc, #160]	; (8011244 <_fxe_file_open+0xfc>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d004      	beq.n	80111b2 <_fxe_file_open+0x6a>
 80111a8:	4b26      	ldr	r3, [pc, #152]	; (8011244 <_fxe_file_open+0xfc>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4a26      	ldr	r2, [pc, #152]	; (8011248 <_fxe_file_open+0x100>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d101      	bne.n	80111b6 <_fxe_file_open+0x6e>
 80111b2:	2320      	movs	r3, #32
 80111b4:	e03e      	b.n	8011234 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4a20      	ldr	r2, [pc, #128]	; (801123c <_fxe_file_open+0xf4>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d001      	beq.n	80111c4 <_fxe_file_open+0x7c>
 80111c0:	2311      	movs	r3, #17
 80111c2:	e037      	b.n	8011234 <_fxe_file_open+0xec>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80111ca:	f04f 31ff 	mov.w	r1, #4294967295
 80111ce:	4618      	mov	r0, r3
 80111d0:	f000 fe82 	bl	8011ed8 <_tx_mutex_get>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d001      	beq.n	80111de <_fxe_file_open+0x96>
 80111da:	2311      	movs	r3, #17
 80111dc:	e02a      	b.n	8011234 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80111e4:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80111ec:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 80111ee:	e00e      	b.n	801120e <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d107      	bne.n	8011208 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80111fe:	4618      	mov	r0, r3
 8011200:	f001 f8e2 	bl	80123c8 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8011204:	2318      	movs	r3, #24
 8011206:	e015      	b.n	8011234 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801120c:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	1e5a      	subs	r2, r3, #1
 8011212:	61ba      	str	r2, [r7, #24]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d1eb      	bne.n	80111f0 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801121e:	4618      	mov	r0, r3
 8011220:	f001 f8d2 	bl	80123c8 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	68b9      	ldr	r1, [r7, #8]
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	f7fb fb84 	bl	800c938 <_fx_file_open>
 8011230:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8011232:	697b      	ldr	r3, [r7, #20]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3720      	adds	r7, #32
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	4d454449 	.word	0x4d454449
 8011240:	2400006c 	.word	0x2400006c
 8011244:	2400364c 	.word	0x2400364c
 8011248:	24003794 	.word	0x24003794

0801124c <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
 8011258:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d005      	beq.n	801126c <_fxe_file_read+0x20>
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d002      	beq.n	801126c <_fxe_file_read+0x20>
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 801126c:	2318      	movs	r3, #24
 801126e:	e01b      	b.n	80112a8 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011270:	f3ef 8305 	mrs	r3, IPSR
 8011274:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011276:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011278:	4b0d      	ldr	r3, [pc, #52]	; (80112b0 <_fxe_file_read+0x64>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4313      	orrs	r3, r2
 801127e:	2b00      	cmp	r3, #0
 8011280:	d108      	bne.n	8011294 <_fxe_file_read+0x48>
 8011282:	4b0c      	ldr	r3, [pc, #48]	; (80112b4 <_fxe_file_read+0x68>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d004      	beq.n	8011294 <_fxe_file_read+0x48>
 801128a:	4b0a      	ldr	r3, [pc, #40]	; (80112b4 <_fxe_file_read+0x68>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	4a0a      	ldr	r2, [pc, #40]	; (80112b8 <_fxe_file_read+0x6c>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d101      	bne.n	8011298 <_fxe_file_read+0x4c>
 8011294:	2320      	movs	r3, #32
 8011296:	e007      	b.n	80112a8 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	68b9      	ldr	r1, [r7, #8]
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f7fc f82c 	bl	800d2fc <_fx_file_read>
 80112a4:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 80112a6:	697b      	ldr	r3, [r7, #20]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3718      	adds	r7, #24
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	2400006c 	.word	0x2400006c
 80112b4:	2400364c 	.word	0x2400364c
 80112b8:	24003794 	.word	0x24003794

080112bc <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d101      	bne.n	80112d0 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 80112cc:	2318      	movs	r3, #24
 80112ce:	e019      	b.n	8011304 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80112d0:	f3ef 8305 	mrs	r3, IPSR
 80112d4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80112d6:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80112d8:	4b0c      	ldr	r3, [pc, #48]	; (801130c <_fxe_file_seek+0x50>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	4313      	orrs	r3, r2
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d108      	bne.n	80112f4 <_fxe_file_seek+0x38>
 80112e2:	4b0b      	ldr	r3, [pc, #44]	; (8011310 <_fxe_file_seek+0x54>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d004      	beq.n	80112f4 <_fxe_file_seek+0x38>
 80112ea:	4b09      	ldr	r3, [pc, #36]	; (8011310 <_fxe_file_seek+0x54>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a09      	ldr	r2, [pc, #36]	; (8011314 <_fxe_file_seek+0x58>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d101      	bne.n	80112f8 <_fxe_file_seek+0x3c>
 80112f4:	2320      	movs	r3, #32
 80112f6:	e005      	b.n	8011304 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 80112f8:	6839      	ldr	r1, [r7, #0]
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f7fc faa2 	bl	800d844 <_fx_file_seek>
 8011300:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8011302:	68fb      	ldr	r3, [r7, #12]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	2400006c 	.word	0x2400006c
 8011310:	2400364c 	.word	0x2400364c
 8011314:	24003794 	.word	0x24003794

08011318 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d101      	bne.n	801132a <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 8011326:	2318      	movs	r3, #24
 8011328:	e018      	b.n	801135c <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801132a:	f3ef 8305 	mrs	r3, IPSR
 801132e:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011330:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011332:	4b0c      	ldr	r3, [pc, #48]	; (8011364 <_fxe_media_close+0x4c>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4313      	orrs	r3, r2
 8011338:	2b00      	cmp	r3, #0
 801133a:	d108      	bne.n	801134e <_fxe_media_close+0x36>
 801133c:	4b0a      	ldr	r3, [pc, #40]	; (8011368 <_fxe_media_close+0x50>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d004      	beq.n	801134e <_fxe_media_close+0x36>
 8011344:	4b08      	ldr	r3, [pc, #32]	; (8011368 <_fxe_media_close+0x50>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4a08      	ldr	r2, [pc, #32]	; (801136c <_fxe_media_close+0x54>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d101      	bne.n	8011352 <_fxe_media_close+0x3a>
 801134e:	2320      	movs	r3, #32
 8011350:	e004      	b.n	801135c <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7fc fbc8 	bl	800dae8 <_fx_media_close>
 8011358:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801135a:	68fb      	ldr	r3, [r7, #12]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	2400006c 	.word	0x2400006c
 8011368:	2400364c 	.word	0x2400364c
 801136c:	24003794 	.word	0x24003794

08011370 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b08e      	sub	sp, #56	; 0x38
 8011374:	af02      	add	r7, sp, #8
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	607a      	str	r2, [r7, #4]
 801137c:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d00a      	beq.n	801139a <_fxe_media_open+0x2a>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d007      	beq.n	801139a <_fxe_media_open+0x2a>
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	2b00      	cmp	r3, #0
 801138e:	d004      	beq.n	801139a <_fxe_media_open+0x2a>
 8011390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011392:	f242 42b8 	movw	r2, #9400	; 0x24b8
 8011396:	4293      	cmp	r3, r2
 8011398:	d001      	beq.n	801139e <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 801139a:	2318      	movs	r3, #24
 801139c:	e071      	b.n	8011482 <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801139e:	f3ef 8305 	mrs	r3, IPSR
 80113a2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80113a4:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80113a6:	4b39      	ldr	r3, [pc, #228]	; (801148c <_fxe_media_open+0x11c>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	4313      	orrs	r3, r2
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d108      	bne.n	80113c2 <_fxe_media_open+0x52>
 80113b0:	4b37      	ldr	r3, [pc, #220]	; (8011490 <_fxe_media_open+0x120>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d004      	beq.n	80113c2 <_fxe_media_open+0x52>
 80113b8:	4b35      	ldr	r3, [pc, #212]	; (8011490 <_fxe_media_open+0x120>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4a35      	ldr	r2, [pc, #212]	; (8011494 <_fxe_media_open+0x124>)
 80113be:	4293      	cmp	r3, r2
 80113c0:	d101      	bne.n	80113c6 <_fxe_media_open+0x56>
 80113c2:	2320      	movs	r3, #32
 80113c4:	e05d      	b.n	8011482 <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 80113c6:	4b34      	ldr	r3, [pc, #208]	; (8011498 <_fxe_media_open+0x128>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 80113cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ce:	425b      	negs	r3, r3
 80113d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113d2:	4013      	ands	r3, r2
 80113d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d004      	beq.n	80113e6 <_fxe_media_open+0x76>
 80113dc:	4b2e      	ldr	r3, [pc, #184]	; (8011498 <_fxe_media_open+0x128>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d001      	beq.n	80113ea <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 80113e6:	2302      	movs	r3, #2
 80113e8:	e04b      	b.n	8011482 <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 80113ea:	4b2c      	ldr	r3, [pc, #176]	; (801149c <_fxe_media_open+0x12c>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 80113f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f2:	425b      	negs	r3, r3
 80113f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113f6:	4013      	ands	r3, r2
 80113f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d004      	beq.n	801140a <_fxe_media_open+0x9a>
 8011400:	4b26      	ldr	r3, [pc, #152]	; (801149c <_fxe_media_open+0x12c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011406:	429a      	cmp	r2, r3
 8011408:	d001      	beq.n	801140e <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801140a:	2302      	movs	r3, #2
 801140c:	e039      	b.n	8011482 <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 801140e:	f001 fd3f 	bl	8012e90 <_tx_thread_identify>
 8011412:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8011414:	f107 0314 	add.w	r3, r7, #20
 8011418:	461a      	mov	r2, r3
 801141a:	2100      	movs	r1, #0
 801141c:	6a38      	ldr	r0, [r7, #32]
 801141e:	f001 fd91 	bl	8012f44 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8011422:	4b1f      	ldr	r3, [pc, #124]	; (80114a0 <_fxe_media_open+0x130>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8011428:	4b1e      	ldr	r3, [pc, #120]	; (80114a4 <_fxe_media_open+0x134>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 801142e:	e010      	b.n	8011452 <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011434:	429a      	cmp	r2, r3
 8011436:	d108      	bne.n	801144a <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	f107 0214 	add.w	r2, r7, #20
 801143e:	4619      	mov	r1, r3
 8011440:	6a38      	ldr	r0, [r7, #32]
 8011442:	f001 fd7f 	bl	8012f44 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 8011446:	2318      	movs	r3, #24
 8011448:	e01b      	b.n	8011482 <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 801144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8011450:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 8011452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011454:	1e5a      	subs	r2, r3, #1
 8011456:	62ba      	str	r2, [r7, #40]	; 0x28
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1e9      	bne.n	8011430 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	f107 0214 	add.w	r2, r7, #20
 8011462:	4619      	mov	r1, r3
 8011464:	6a38      	ldr	r0, [r7, #32]
 8011466:	f001 fd6d 	bl	8012f44 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 801146a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801146c:	9301      	str	r3, [sp, #4]
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	68b9      	ldr	r1, [r7, #8]
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f7fc fd0d 	bl	800de98 <_fx_media_open>
 801147e:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 8011480:	69fb      	ldr	r3, [r7, #28]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3730      	adds	r7, #48	; 0x30
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	2400006c 	.word	0x2400006c
 8011490:	2400364c 	.word	0x2400364c
 8011494:	24003794 	.word	0x24003794
 8011498:	240035d4 	.word	0x240035d4
 801149c:	240035d8 	.word	0x240035d8
 80114a0:	240035c4 	.word	0x240035c4
 80114a4:	240035c8 	.word	0x240035c8

080114a8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b096      	sub	sp, #88	; 0x58
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	60b9      	str	r1, [r7, #8]
 80114b2:	607a      	str	r2, [r7, #4]
 80114b4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	3303      	adds	r3, #3
 80114ba:	f023 0303 	bic.w	r3, r3, #3
 80114be:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80114c0:	f3ef 8310 	mrs	r3, PRIMASK
 80114c4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80114c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80114c8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80114ca:	b672      	cpsid	i
    return(int_posture);
 80114cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80114ce:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80114d0:	4b55      	ldr	r3, [pc, #340]	; (8011628 <_tx_byte_allocate+0x180>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80114d6:	2300      	movs	r3, #0
 80114d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114de:	621a      	str	r2, [r3, #32]
 80114e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114e2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	f383 8810 	msr	PRIMASK, r3
}
 80114ea:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f000 f9b2 	bl	8011858 <_tx_byte_pool_search>
 80114f4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80114f6:	f3ef 8310 	mrs	r3, PRIMASK
 80114fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80114fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80114fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011500:	b672      	cpsid	i
    return(int_posture);
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011504:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8011506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 801150c:	2301      	movs	r3, #1
 801150e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011510:	e006      	b.n	8011520 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011518:	429a      	cmp	r2, r3
 801151a:	d101      	bne.n	8011520 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 801151c:	2301      	movs	r3, #1
 801151e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8011520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011522:	2b00      	cmp	r3, #0
 8011524:	d0d9      	beq.n	80114da <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801152a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 801152c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801152e:	2b00      	cmp	r3, #0
 8011530:	d008      	beq.n	8011544 <_tx_byte_allocate+0x9c>
 8011532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011534:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	f383 8810 	msr	PRIMASK, r3
}
 801153c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801153e:	2300      	movs	r3, #0
 8011540:	653b      	str	r3, [r7, #80]	; 0x50
 8011542:	e06c      	b.n	801161e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d061      	beq.n	801160e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801154a:	4b38      	ldr	r3, [pc, #224]	; (801162c <_tx_byte_allocate+0x184>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d007      	beq.n	8011562 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8011552:	2310      	movs	r3, #16
 8011554:	653b      	str	r3, [r7, #80]	; 0x50
 8011556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011558:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	f383 8810 	msr	PRIMASK, r3
}
 8011560:	e05d      	b.n	801161e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8011562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011564:	4a32      	ldr	r2, [pc, #200]	; (8011630 <_tx_byte_allocate+0x188>)
 8011566:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8011568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 801156e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8011574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801157a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801157c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011580:	1c5a      	adds	r2, r3, #1
 8011582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011584:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801158c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801159a:	2b00      	cmp	r3, #0
 801159c:	d109      	bne.n	80115b2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115a2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80115a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115a8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80115aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115ae:	675a      	str	r2, [r3, #116]	; 0x74
 80115b0:	e011      	b.n	80115d6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80115b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115bc:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80115be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115c2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80115c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115c8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80115ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115ce:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80115d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115d4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80115d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115d8:	2209      	movs	r2, #9
 80115da:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80115dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115de:	2201      	movs	r2, #1
 80115e0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80115e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115e4:	683a      	ldr	r2, [r7, #0]
 80115e6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80115e8:	4b10      	ldr	r3, [pc, #64]	; (801162c <_tx_byte_allocate+0x184>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	3301      	adds	r3, #1
 80115ee:	4a0f      	ldr	r2, [pc, #60]	; (801162c <_tx_byte_allocate+0x184>)
 80115f0:	6013      	str	r3, [r2, #0]
 80115f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115f4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	f383 8810 	msr	PRIMASK, r3
}
 80115fc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80115fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011600:	f001 ff1a 	bl	8013438 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801160a:	653b      	str	r3, [r7, #80]	; 0x50
 801160c:	e007      	b.n	801161e <_tx_byte_allocate+0x176>
 801160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011610:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	f383 8810 	msr	PRIMASK, r3
}
 8011618:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801161a:	2310      	movs	r3, #16
 801161c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 801161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011620:	4618      	mov	r0, r3
 8011622:	3758      	adds	r7, #88	; 0x58
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	2400364c 	.word	0x2400364c
 801162c:	240036e4 	.word	0x240036e4
 8011630:	08011635 	.word	0x08011635

08011634 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b08e      	sub	sp, #56	; 0x38
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801163e:	f3ef 8310 	mrs	r3, PRIMASK
 8011642:	623b      	str	r3, [r7, #32]
    return(posture);
 8011644:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011646:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011648:	b672      	cpsid	i
    return(int_posture);
 801164a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 801164c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011652:	4a33      	ldr	r2, [pc, #204]	; (8011720 <_tx_byte_pool_cleanup+0xec>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d158      	bne.n	801170a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	429a      	cmp	r2, r3
 8011662:	d152      	bne.n	801170a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011668:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 801166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166c:	2b00      	cmp	r3, #0
 801166e:	d04c      	beq.n	801170a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8011670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a2b      	ldr	r2, [pc, #172]	; (8011724 <_tx_byte_pool_cleanup+0xf0>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d147      	bne.n	801170a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801167e:	2b00      	cmp	r3, #0
 8011680:	d043      	beq.n	801170a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8011688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801168c:	1e5a      	subs	r2, r3, #1
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8011692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011696:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	2b00      	cmp	r3, #0
 801169c:	d103      	bne.n	80116a6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	2200      	movs	r2, #0
 80116a2:	625a      	str	r2, [r3, #36]	; 0x24
 80116a4:	e013      	b.n	80116ce <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116aa:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116b0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116b6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80116b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116bc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80116be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d102      	bne.n	80116ce <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80116c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116cc:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d2:	2b09      	cmp	r3, #9
 80116d4:	d119      	bne.n	801170a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2210      	movs	r2, #16
 80116da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80116de:	4b12      	ldr	r3, [pc, #72]	; (8011728 <_tx_byte_pool_cleanup+0xf4>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	3301      	adds	r3, #1
 80116e4:	4a10      	ldr	r2, [pc, #64]	; (8011728 <_tx_byte_pool_cleanup+0xf4>)
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	f383 8810 	msr	PRIMASK, r3
}
 80116f2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f001 fd9f 	bl	8013238 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116fa:	f3ef 8310 	mrs	r3, PRIMASK
 80116fe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011700:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011702:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011704:	b672      	cpsid	i
    return(int_posture);
 8011706:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011708:	637b      	str	r3, [r7, #52]	; 0x34
 801170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801170c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f383 8810 	msr	PRIMASK, r3
}
 8011714:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011716:	bf00      	nop
 8011718:	3738      	adds	r7, #56	; 0x38
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	08011635 	.word	0x08011635
 8011724:	42595445 	.word	0x42595445
 8011728:	240036e4 	.word	0x240036e4

0801172c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08e      	sub	sp, #56	; 0x38
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801173a:	2234      	movs	r2, #52	; 0x34
 801173c:	2100      	movs	r1, #0
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f002 fe12 	bl	8014368 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	f023 0303 	bic.w	r3, r3, #3
 801174a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	68ba      	ldr	r2, [r7, #8]
 8011750:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	f1a3 0208 	sub.w	r2, r3, #8
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2202      	movs	r2, #2
 8011778:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801177e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	4413      	add	r3, r2
 8011784:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8011786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011788:	3b04      	subs	r3, #4
 801178a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011792:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8011794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011798:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 801179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801179c:	3b04      	subs	r3, #4
 801179e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80117a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80117a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80117b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117b6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80117bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117be:	3304      	adds	r3, #4
 80117c0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80117c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80117c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c8:	4a1f      	ldr	r2, [pc, #124]	; (8011848 <_tx_byte_pool_create+0x11c>)
 80117ca:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2200      	movs	r2, #0
 80117d0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117d2:	f3ef 8310 	mrs	r3, PRIMASK
 80117d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80117d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80117da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117dc:	b672      	cpsid	i
    return(int_posture);
 80117de:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80117e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	4a19      	ldr	r2, [pc, #100]	; (801184c <_tx_byte_pool_create+0x120>)
 80117e6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80117e8:	4b19      	ldr	r3, [pc, #100]	; (8011850 <_tx_byte_pool_create+0x124>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d109      	bne.n	8011804 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80117f0:	4a18      	ldr	r2, [pc, #96]	; (8011854 <_tx_byte_pool_create+0x128>)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	68fa      	ldr	r2, [r7, #12]
 8011800:	631a      	str	r2, [r3, #48]	; 0x30
 8011802:	e011      	b.n	8011828 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011804:	4b13      	ldr	r3, [pc, #76]	; (8011854 <_tx_byte_pool_create+0x128>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801180a:	6a3b      	ldr	r3, [r7, #32]
 801180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801180e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	69fa      	ldr	r2, [r7, #28]
 8011820:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6a3a      	ldr	r2, [r7, #32]
 8011826:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8011828:	4b09      	ldr	r3, [pc, #36]	; (8011850 <_tx_byte_pool_create+0x124>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3301      	adds	r3, #1
 801182e:	4a08      	ldr	r2, [pc, #32]	; (8011850 <_tx_byte_pool_create+0x124>)
 8011830:	6013      	str	r3, [r2, #0]
 8011832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011834:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	f383 8810 	msr	PRIMASK, r3
}
 801183c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801183e:	2300      	movs	r3, #0
}
 8011840:	4618      	mov	r0, r3
 8011842:	3738      	adds	r7, #56	; 0x38
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	ffffeeee 	.word	0xffffeeee
 801184c:	42595445 	.word	0x42595445
 8011850:	24003640 	.word	0x24003640
 8011854:	2400363c 	.word	0x2400363c

08011858 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8011858:	b480      	push	{r7}
 801185a:	b097      	sub	sp, #92	; 0x5c
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8011862:	2300      	movs	r3, #0
 8011864:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011866:	f3ef 8310 	mrs	r3, PRIMASK
 801186a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801186e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011870:	b672      	cpsid	i
    return(int_posture);
 8011872:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8011874:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	689a      	ldr	r2, [r3, #8]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	3b02      	subs	r3, #2
 8011880:	00db      	lsls	r3, r3, #3
 8011882:	4413      	add	r3, r2
 8011884:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801188a:	429a      	cmp	r2, r3
 801188c:	d308      	bcc.n	80118a0 <_tx_byte_pool_search+0x48>
 801188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011890:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	f383 8810 	msr	PRIMASK, r3
}
 8011898:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 801189a:	2300      	movs	r3, #0
 801189c:	653b      	str	r3, [r7, #80]	; 0x50
 801189e:	e0dd      	b.n	8011a5c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80118a0:	4b72      	ldr	r3, [pc, #456]	; (8011a6c <_tx_byte_pool_search+0x214>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118aa:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	695b      	ldr	r3, [r3, #20]
 80118b0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	3301      	adds	r3, #1
 80118b8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80118ba:	2300      	movs	r3, #0
 80118bc:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80118be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c0:	3304      	adds	r3, #4
 80118c2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80118c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80118c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a68      	ldr	r2, [pc, #416]	; (8011a70 <_tx_byte_pool_search+0x218>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d143      	bne.n	801195a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80118d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d104      	bne.n	80118e2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80118dc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80118de:	2301      	movs	r3, #1
 80118e0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80118e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e4:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80118e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80118ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80118f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118f6:	3b08      	subs	r3, #8
 80118f8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80118fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d257      	bcs.n	80119b2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8011902:	2300      	movs	r3, #0
 8011904:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8011906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011908:	3304      	adds	r3, #4
 801190a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801190c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a56      	ldr	r2, [pc, #344]	; (8011a70 <_tx_byte_pool_search+0x218>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d113      	bne.n	8011942 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011924:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	1e5a      	subs	r2, r3, #1
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	695b      	ldr	r3, [r3, #20]
 8011934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011936:	429a      	cmp	r2, r3
 8011938:	d114      	bne.n	8011964 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801193e:	615a      	str	r2, [r3, #20]
 8011940:	e010      	b.n	8011964 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011944:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8011946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801194c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801194e:	2b00      	cmp	r3, #0
 8011950:	d008      	beq.n	8011964 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8011952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011954:	3b01      	subs	r3, #1
 8011956:	64bb      	str	r3, [r7, #72]	; 0x48
 8011958:	e004      	b.n	8011964 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801195a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801195c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8011964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011966:	2b00      	cmp	r3, #0
 8011968:	d002      	beq.n	8011970 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801196a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801196c:	3b01      	subs	r3, #1
 801196e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011972:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	f383 8810 	msr	PRIMASK, r3
}
 801197a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801197c:	f3ef 8310 	mrs	r3, PRIMASK
 8011980:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011982:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011984:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011986:	b672      	cpsid	i
    return(int_posture);
 8011988:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801198a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6a1b      	ldr	r3, [r3, #32]
 8011990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011992:	429a      	cmp	r2, r3
 8011994:	d009      	beq.n	80119aa <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	695b      	ldr	r3, [r3, #20]
 801199a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	3301      	adds	r3, #1
 80119a2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80119a8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80119aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d186      	bne.n	80118be <_tx_byte_pool_search+0x66>
 80119b0:	e000      	b.n	80119b4 <_tx_byte_pool_search+0x15c>
                    break;
 80119b2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80119b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d048      	beq.n	8011a4c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80119ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	2b13      	cmp	r3, #19
 80119c2:	d91e      	bls.n	8011a02 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	3308      	adds	r3, #8
 80119c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119ca:	4413      	add	r3, r2
 80119cc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80119d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119d4:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80119d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119dc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80119de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e0:	3304      	adds	r3, #4
 80119e2:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80119e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e6:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80119e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ea:	4a21      	ldr	r2, [pc, #132]	; (8011a70 <_tx_byte_pool_search+0x218>)
 80119ec:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	1c5a      	adds	r2, r3, #1
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80119f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119fc:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a04:	3304      	adds	r3, #4
 8011a06:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8011a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	689a      	ldr	r2, [r3, #8]
 8011a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	f1a3 0208 	sub.w	r2, r3, #8
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	695b      	ldr	r3, [r3, #20]
 8011a26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d105      	bne.n	8011a38 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a2e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8011a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	615a      	str	r2, [r3, #20]
 8011a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f383 8810 	msr	PRIMASK, r3
}
 8011a42:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8011a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a46:	3308      	adds	r3, #8
 8011a48:	653b      	str	r3, [r7, #80]	; 0x50
 8011a4a:	e007      	b.n	8011a5c <_tx_byte_pool_search+0x204>
 8011a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	f383 8810 	msr	PRIMASK, r3
}
 8011a56:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8011a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	375c      	adds	r7, #92	; 0x5c
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	2400364c 	.word	0x2400364c
 8011a70:	ffffeeee 	.word	0xffffeeee

08011a74 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8011a78:	f001 fa28 	bl	8012ecc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8011a7c:	f001 ff26 	bl	80138cc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8011a80:	4b12      	ldr	r3, [pc, #72]	; (8011acc <_tx_initialize_high_level+0x58>)
 8011a82:	2200      	movs	r2, #0
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	4b12      	ldr	r3, [pc, #72]	; (8011ad0 <_tx_initialize_high_level+0x5c>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8011a8c:	4b11      	ldr	r3, [pc, #68]	; (8011ad4 <_tx_initialize_high_level+0x60>)
 8011a8e:	2200      	movs	r2, #0
 8011a90:	601a      	str	r2, [r3, #0]
 8011a92:	4b11      	ldr	r3, [pc, #68]	; (8011ad8 <_tx_initialize_high_level+0x64>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8011a98:	4b10      	ldr	r3, [pc, #64]	; (8011adc <_tx_initialize_high_level+0x68>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]
 8011a9e:	4b10      	ldr	r3, [pc, #64]	; (8011ae0 <_tx_initialize_high_level+0x6c>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8011aa4:	4b0f      	ldr	r3, [pc, #60]	; (8011ae4 <_tx_initialize_high_level+0x70>)
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	601a      	str	r2, [r3, #0]
 8011aaa:	4b0f      	ldr	r3, [pc, #60]	; (8011ae8 <_tx_initialize_high_level+0x74>)
 8011aac:	2200      	movs	r2, #0
 8011aae:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8011ab0:	4b0e      	ldr	r3, [pc, #56]	; (8011aec <_tx_initialize_high_level+0x78>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	601a      	str	r2, [r3, #0]
 8011ab6:	4b0e      	ldr	r3, [pc, #56]	; (8011af0 <_tx_initialize_high_level+0x7c>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8011abc:	4b0d      	ldr	r3, [pc, #52]	; (8011af4 <_tx_initialize_high_level+0x80>)
 8011abe:	2200      	movs	r2, #0
 8011ac0:	601a      	str	r2, [r3, #0]
 8011ac2:	4b0d      	ldr	r3, [pc, #52]	; (8011af8 <_tx_initialize_high_level+0x84>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	601a      	str	r2, [r3, #0]
#endif
}
 8011ac8:	bf00      	nop
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	24003614 	.word	0x24003614
 8011ad0:	24003618 	.word	0x24003618
 8011ad4:	2400361c 	.word	0x2400361c
 8011ad8:	24003620 	.word	0x24003620
 8011adc:	24003624 	.word	0x24003624
 8011ae0:	24003628 	.word	0x24003628
 8011ae4:	24003634 	.word	0x24003634
 8011ae8:	24003638 	.word	0x24003638
 8011aec:	2400363c 	.word	0x2400363c
 8011af0:	24003640 	.word	0x24003640
 8011af4:	2400362c 	.word	0x2400362c
 8011af8:	24003630 	.word	0x24003630

08011afc <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8011b00:	4b10      	ldr	r3, [pc, #64]	; (8011b44 <_tx_initialize_kernel_enter+0x48>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8011b08:	d00c      	beq.n	8011b24 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011b0a:	4b0e      	ldr	r3, [pc, #56]	; (8011b44 <_tx_initialize_kernel_enter+0x48>)
 8011b0c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011b10:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8011b12:	f7ee fbe5 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8011b16:	f7ff ffad 	bl	8011a74 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8011b1a:	4b0b      	ldr	r3, [pc, #44]	; (8011b48 <_tx_initialize_kernel_enter+0x4c>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	4a09      	ldr	r2, [pc, #36]	; (8011b48 <_tx_initialize_kernel_enter+0x4c>)
 8011b22:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011b24:	4b07      	ldr	r3, [pc, #28]	; (8011b44 <_tx_initialize_kernel_enter+0x48>)
 8011b26:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011b2a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8011b2c:	4b07      	ldr	r3, [pc, #28]	; (8011b4c <_tx_initialize_kernel_enter+0x50>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ee fe6f 	bl	8000814 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8011b36:	4b03      	ldr	r3, [pc, #12]	; (8011b44 <_tx_initialize_kernel_enter+0x48>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8011b3c:	f7ee fc10 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011b40:	bf00      	nop
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	2400006c 	.word	0x2400006c
 8011b48:	240036e4 	.word	0x240036e4
 8011b4c:	24003644 	.word	0x24003644

08011b50 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08e      	sub	sp, #56	; 0x38
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8011b5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8011b60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011b62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b64:	b672      	cpsid	i
    return(int_posture);
 8011b66:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8011b68:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b6e:	4a33      	ldr	r2, [pc, #204]	; (8011c3c <_tx_mutex_cleanup+0xec>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d158      	bne.n	8011c26 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011b7a:	683a      	ldr	r2, [r7, #0]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d152      	bne.n	8011c26 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b84:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8011b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d04c      	beq.n	8011c26 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8011b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a2b      	ldr	r2, [pc, #172]	; (8011c40 <_tx_mutex_cleanup+0xf0>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d147      	bne.n	8011c26 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8011b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b98:	69db      	ldr	r3, [r3, #28]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d043      	beq.n	8011c26 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba6:	69db      	ldr	r3, [r3, #28]
 8011ba8:	1e5a      	subs	r2, r3, #1
 8011baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bac:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb0:	69db      	ldr	r3, [r3, #28]
 8011bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d103      	bne.n	8011bc2 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	619a      	str	r2, [r3, #24]
 8011bc0:	e013      	b.n	8011bea <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bc6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bcc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bd2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bd8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8011bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d102      	bne.n	8011bea <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8011be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011be8:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bee:	2b0d      	cmp	r3, #13
 8011bf0:	d119      	bne.n	8011c26 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	221d      	movs	r2, #29
 8011bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011bfa:	4b12      	ldr	r3, [pc, #72]	; (8011c44 <_tx_mutex_cleanup+0xf4>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	4a10      	ldr	r2, [pc, #64]	; (8011c44 <_tx_mutex_cleanup+0xf4>)
 8011c02:	6013      	str	r3, [r2, #0]
 8011c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	f383 8810 	msr	PRIMASK, r3
}
 8011c0e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f001 fb11 	bl	8013238 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c16:	f3ef 8310 	mrs	r3, PRIMASK
 8011c1a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011c1c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011c1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c20:	b672      	cpsid	i
    return(int_posture);
 8011c22:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011c24:	637b      	str	r3, [r7, #52]	; 0x34
 8011c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c28:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f383 8810 	msr	PRIMASK, r3
}
 8011c30:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011c32:	bf00      	nop
 8011c34:	3738      	adds	r7, #56	; 0x38
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	08011b51 	.word	0x08011b51
 8011c40:	4d555445 	.word	0x4d555445
 8011c44:	240036e4 	.word	0x240036e4

08011c48 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b08a      	sub	sp, #40	; 0x28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c50:	f3ef 8310 	mrs	r3, PRIMASK
 8011c54:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011c56:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011c58:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c5a:	b672      	cpsid	i
    return(int_posture);
 8011c5c:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8011c5e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011c60:	4b1a      	ldr	r3, [pc, #104]	; (8011ccc <_tx_mutex_thread_release+0x84>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	3301      	adds	r3, #1
 8011c66:	4a19      	ldr	r2, [pc, #100]	; (8011ccc <_tx_mutex_thread_release+0x84>)
 8011c68:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011c70:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8011c72:	6a3b      	ldr	r3, [r7, #32]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d017      	beq.n	8011ca8 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011c78:	6a3b      	ldr	r3, [r7, #32]
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	609a      	str	r2, [r3, #8]
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f383 8810 	msr	PRIMASK, r3
}
 8011c88:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8011c8a:	6a38      	ldr	r0, [r7, #32]
 8011c8c:	f000 fb9c 	bl	80123c8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c90:	f3ef 8310 	mrs	r3, PRIMASK
 8011c94:	617b      	str	r3, [r7, #20]
    return(posture);
 8011c96:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011c98:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c9a:	b672      	cpsid	i
    return(int_posture);
 8011c9c:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8011c9e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011ca6:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1dd      	bne.n	8011c6a <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8011cae:	4b07      	ldr	r3, [pc, #28]	; (8011ccc <_tx_mutex_thread_release+0x84>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	4a05      	ldr	r2, [pc, #20]	; (8011ccc <_tx_mutex_thread_release+0x84>)
 8011cb6:	6013      	str	r3, [r2, #0]
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	f383 8810 	msr	PRIMASK, r3
}
 8011cc2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8011cc4:	bf00      	nop
 8011cc6:	3728      	adds	r7, #40	; 0x28
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	240036e4 	.word	0x240036e4

08011cd0 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08a      	sub	sp, #40	; 0x28
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8011cdc:	2234      	movs	r2, #52	; 0x34
 8011cde:	2100      	movs	r1, #0
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f002 fb41 	bl	8014368 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	68ba      	ldr	r2, [r7, #8]
 8011cea:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8011cf6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011cf8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011cfa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011cfc:	b672      	cpsid	i
    return(int_posture);
 8011cfe:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8011d00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	4a1a      	ldr	r2, [pc, #104]	; (8011d70 <_tx_mutex_create+0xa0>)
 8011d06:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8011d08:	4b1a      	ldr	r3, [pc, #104]	; (8011d74 <_tx_mutex_create+0xa4>)
 8011d0a:	4a1b      	ldr	r2, [pc, #108]	; (8011d78 <_tx_mutex_create+0xa8>)
 8011d0c:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8011d0e:	4b1b      	ldr	r3, [pc, #108]	; (8011d7c <_tx_mutex_create+0xac>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d109      	bne.n	8011d2a <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8011d16:	4a1a      	ldr	r2, [pc, #104]	; (8011d80 <_tx_mutex_create+0xb0>)
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	625a      	str	r2, [r3, #36]	; 0x24
 8011d28:	e011      	b.n	8011d4e <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8011d2a:	4b15      	ldr	r3, [pc, #84]	; (8011d80 <_tx_mutex_create+0xb0>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8011d30:	6a3b      	ldr	r3, [r7, #32]
 8011d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d34:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8011d36:	6a3b      	ldr	r3, [r7, #32]
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	68fa      	ldr	r2, [r7, #12]
 8011d40:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	69fa      	ldr	r2, [r7, #28]
 8011d46:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	6a3a      	ldr	r2, [r7, #32]
 8011d4c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8011d4e:	4b0b      	ldr	r3, [pc, #44]	; (8011d7c <_tx_mutex_create+0xac>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	3301      	adds	r3, #1
 8011d54:	4a09      	ldr	r2, [pc, #36]	; (8011d7c <_tx_mutex_create+0xac>)
 8011d56:	6013      	str	r3, [r2, #0]
 8011d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	f383 8810 	msr	PRIMASK, r3
}
 8011d62:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011d64:	2300      	movs	r3, #0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3728      	adds	r7, #40	; 0x28
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	4d555445 	.word	0x4d555445
 8011d74:	240036e8 	.word	0x240036e8
 8011d78:	08011c49 	.word	0x08011c49
 8011d7c:	24003630 	.word	0x24003630
 8011d80:	2400362c 	.word	0x2400362c

08011d84 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b096      	sub	sp, #88	; 0x58
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8011d90:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8011d94:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d96:	b672      	cpsid	i
    return(int_posture);
 8011d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8011d9a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8011da2:	4b4a      	ldr	r3, [pc, #296]	; (8011ecc <_tx_mutex_delete+0x148>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	3b01      	subs	r3, #1
 8011da8:	4a48      	ldr	r2, [pc, #288]	; (8011ecc <_tx_mutex_delete+0x148>)
 8011daa:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8011dac:	4b47      	ldr	r3, [pc, #284]	; (8011ecc <_tx_mutex_delete+0x148>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d103      	bne.n	8011dbc <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8011db4:	4b46      	ldr	r3, [pc, #280]	; (8011ed0 <_tx_mutex_delete+0x14c>)
 8011db6:	2200      	movs	r2, #0
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	e013      	b.n	8011de4 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a1b      	ldr	r3, [r3, #32]
 8011dc0:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc6:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8011dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dcc:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8011dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011dd2:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8011dd4:	4b3e      	ldr	r3, [pc, #248]	; (8011ed0 <_tx_mutex_delete+0x14c>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d102      	bne.n	8011de4 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8011dde:	4a3c      	ldr	r2, [pc, #240]	; (8011ed0 <_tx_mutex_delete+0x14c>)
 8011de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011de2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011de4:	4b3b      	ldr	r3, [pc, #236]	; (8011ed4 <_tx_mutex_delete+0x150>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	3301      	adds	r3, #1
 8011dea:	4a3a      	ldr	r2, [pc, #232]	; (8011ed4 <_tx_mutex_delete+0x150>)
 8011dec:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	699b      	ldr	r3, [r3, #24]
 8011df2:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	69db      	ldr	r3, [r3, #28]
 8011dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2200      	movs	r2, #0
 8011e04:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8011e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d013      	beq.n	8011e3a <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2201      	movs	r2, #1
 8011e16:	609a      	str	r2, [r3, #8]
 8011e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1e:	f383 8810 	msr	PRIMASK, r3
}
 8011e22:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 facf 	bl	80123c8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e2e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8011e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8011e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e34:	b672      	cpsid	i
    return(int_posture);
 8011e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8011e38:	657b      	str	r3, [r7, #84]	; 0x54
 8011e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e3c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e40:	f383 8810 	msr	PRIMASK, r3
}
 8011e44:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8011e46:	e024      	b.n	8011e92 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8011e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e4a:	3b01      	subs	r3, #1
 8011e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e52:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011e54:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011e56:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e58:	b672      	cpsid	i
    return(int_posture);
 8011e5a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8011e5c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e60:	2200      	movs	r2, #0
 8011e62:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8011e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e66:	2201      	movs	r2, #1
 8011e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8011e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8011e72:	4b18      	ldr	r3, [pc, #96]	; (8011ed4 <_tx_mutex_delete+0x150>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	3301      	adds	r3, #1
 8011e78:	4a16      	ldr	r2, [pc, #88]	; (8011ed4 <_tx_mutex_delete+0x150>)
 8011e7a:	6013      	str	r3, [r2, #0]
 8011e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e7e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e80:	6a3b      	ldr	r3, [r7, #32]
 8011e82:	f383 8810 	msr	PRIMASK, r3
}
 8011e86:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011e88:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011e8a:	f001 f9d5 	bl	8013238 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8011e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e90:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8011e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d1d7      	bne.n	8011e48 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e98:	f3ef 8310 	mrs	r3, PRIMASK
 8011e9c:	613b      	str	r3, [r7, #16]
    return(posture);
 8011e9e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8011ea0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ea2:	b672      	cpsid	i
    return(int_posture);
 8011ea4:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8011ea6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8011ea8:	4b0a      	ldr	r3, [pc, #40]	; (8011ed4 <_tx_mutex_delete+0x150>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	4a09      	ldr	r2, [pc, #36]	; (8011ed4 <_tx_mutex_delete+0x150>)
 8011eb0:	6013      	str	r3, [r2, #0]
 8011eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eb4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	f383 8810 	msr	PRIMASK, r3
}
 8011ebc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8011ebe:	f001 f981 	bl	80131c4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011ec2:	2300      	movs	r3, #0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3758      	adds	r7, #88	; 0x58
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	24003630 	.word	0x24003630
 8011ed0:	2400362c 	.word	0x2400362c
 8011ed4:	240036e4 	.word	0x240036e4

08011ed8 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b092      	sub	sp, #72	; 0x48
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ee6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011eea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011eec:	b672      	cpsid	i
    return(int_posture);
 8011eee:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8011ef0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011ef2:	4b7a      	ldr	r3, [pc, #488]	; (80120dc <_tx_mutex_get+0x204>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	689b      	ldr	r3, [r3, #8]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d144      	bne.n	8011f8a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2201      	movs	r2, #1
 8011f04:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f0a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8011f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d032      	beq.n	8011f78 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d106      	bne.n	8011f28 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2220      	movs	r2, #32
 8011f26:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8011f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00f      	beq.n	8011f56 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8011f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f3a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8011f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f4c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8011f54:	e009      	b.n	8011f6a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8011f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011f70:	1c5a      	adds	r2, r3, #1
 8011f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8011f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f7a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f7c:	69fb      	ldr	r3, [r7, #28]
 8011f7e:	f383 8810 	msr	PRIMASK, r3
}
 8011f82:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8011f84:	2300      	movs	r3, #0
 8011f86:	647b      	str	r3, [r7, #68]	; 0x44
 8011f88:	e0a2      	b.n	80120d0 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d10d      	bne.n	8011fb0 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	1c5a      	adds	r2, r3, #1
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	609a      	str	r2, [r3, #8]
 8011f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fa0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	f383 8810 	msr	PRIMASK, r3
}
 8011fa8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8011faa:	2300      	movs	r3, #0
 8011fac:	647b      	str	r3, [r7, #68]	; 0x44
 8011fae:	e08f      	b.n	80120d0 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	f000 8084 	beq.w	80120c0 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8011fb8:	4b49      	ldr	r3, [pc, #292]	; (80120e0 <_tx_mutex_get+0x208>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d008      	beq.n	8011fd2 <_tx_mutex_get+0xfa>
 8011fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	f383 8810 	msr	PRIMASK, r3
}
 8011fca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8011fcc:	231d      	movs	r3, #29
 8011fce:	647b      	str	r3, [r7, #68]	; 0x44
 8011fd0:	e07e      	b.n	80120d0 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8011fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fda:	4a42      	ldr	r2, [pc, #264]	; (80120e4 <_tx_mutex_get+0x20c>)
 8011fdc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8011fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	69db      	ldr	r3, [r3, #28]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d109      	bne.n	801200e <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ffe:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012004:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801200a:	675a      	str	r2, [r3, #116]	; 0x74
 801200c:	e011      	b.n	8012032 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	699b      	ldr	r3, [r3, #24]
 8012012:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012018:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801201e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012024:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801202a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012030:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	69db      	ldr	r3, [r3, #28]
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801203e:	220d      	movs	r2, #13
 8012040:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012044:	2201      	movs	r2, #1
 8012046:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801204a:	683a      	ldr	r2, [r7, #0]
 801204c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801204e:	4b24      	ldr	r3, [pc, #144]	; (80120e0 <_tx_mutex_get+0x208>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	3301      	adds	r3, #1
 8012054:	4a22      	ldr	r2, [pc, #136]	; (80120e0 <_tx_mutex_get+0x208>)
 8012056:	6013      	str	r3, [r2, #0]
 8012058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801205a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	f383 8810 	msr	PRIMASK, r3
}
 8012062:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	2b01      	cmp	r3, #1
 801206a:	d121      	bne.n	80120b0 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012074:	429a      	cmp	r2, r3
 8012076:	d903      	bls.n	8012080 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8012078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8012080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801208a:	429a      	cmp	r2, r3
 801208c:	d204      	bcs.n	8012098 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012094:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801209c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d905      	bls.n	80120b0 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80120a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a8:	4619      	mov	r1, r3
 80120aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80120ac:	f000 f8ce 	bl	801224c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80120b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80120b2:	f001 f9c1 	bl	8013438 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80120b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120bc:	647b      	str	r3, [r7, #68]	; 0x44
 80120be:	e007      	b.n	80120d0 <_tx_mutex_get+0x1f8>
 80120c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f383 8810 	msr	PRIMASK, r3
}
 80120ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80120cc:	231d      	movs	r3, #29
 80120ce:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80120d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3748      	adds	r7, #72	; 0x48
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	2400364c 	.word	0x2400364c
 80120e0:	240036e4 	.word	0x240036e4
 80120e4:	08011b51 	.word	0x08011b51

080120e8 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b092      	sub	sp, #72	; 0x48
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120f0:	f3ef 8310 	mrs	r3, PRIMASK
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80120f8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80120fa:	b672      	cpsid	i
    return(int_posture);
 80120fc:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80120fe:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	69db      	ldr	r3, [r3, #28]
 8012104:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8012106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012108:	2b01      	cmp	r3, #1
 801210a:	d805      	bhi.n	8012118 <_tx_mutex_prioritize+0x30>
 801210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801210e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	f383 8810 	msr	PRIMASK, r3
}
 8012116:	e092      	b.n	801223e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8012118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801211a:	2b02      	cmp	r3, #2
 801211c:	d114      	bne.n	8012148 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	699b      	ldr	r3, [r3, #24]
 8012122:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012128:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012132:	429a      	cmp	r2, r3
 8012134:	d202      	bcs.n	801213c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801213a:	619a      	str	r2, [r3, #24]
 801213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801213e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012140:	69bb      	ldr	r3, [r7, #24]
 8012142:	f383 8810 	msr	PRIMASK, r3
}
 8012146:	e07a      	b.n	801223e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	699b      	ldr	r3, [r3, #24]
 801214c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012150:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8012152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012156:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8012158:	4b3b      	ldr	r3, [pc, #236]	; (8012248 <_tx_mutex_prioritize+0x160>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3301      	adds	r3, #1
 801215e:	4a3a      	ldr	r2, [pc, #232]	; (8012248 <_tx_mutex_prioritize+0x160>)
 8012160:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8012162:	2300      	movs	r3, #0
 8012164:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8012166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801216e:	429a      	cmp	r2, r3
 8012170:	d201      	bcs.n	8012176 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8012172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012178:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f383 8810 	msr	PRIMASK, r3
}
 8012180:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012182:	f3ef 8310 	mrs	r3, PRIMASK
 8012186:	617b      	str	r3, [r7, #20]
    return(posture);
 8012188:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801218a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801218c:	b672      	cpsid	i
    return(int_posture);
 801218e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012190:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	699b      	ldr	r3, [r3, #24]
 8012196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012198:	429a      	cmp	r2, r3
 801219a:	d002      	beq.n	80121a2 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 801219c:	2301      	movs	r3, #1
 801219e:	633b      	str	r3, [r7, #48]	; 0x30
 80121a0:	e006      	b.n	80121b0 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	69db      	ldr	r3, [r3, #28]
 80121a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d001      	beq.n	80121b0 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80121ac:	2301      	movs	r3, #1
 80121ae:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80121b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d103      	bne.n	80121be <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80121b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121ba:	643b      	str	r3, [r7, #64]	; 0x40
 80121bc:	e00c      	b.n	80121d8 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	699b      	ldr	r3, [r3, #24]
 80121c2:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	69db      	ldr	r3, [r3, #28]
 80121c8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80121ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121cc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80121ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121d2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80121d4:	2300      	movs	r3, #0
 80121d6:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 80121d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80121da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121dc:	429a      	cmp	r2, r3
 80121de:	d1c2      	bne.n	8012166 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80121e0:	4b19      	ldr	r3, [pc, #100]	; (8012248 <_tx_mutex_prioritize+0x160>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	3b01      	subs	r3, #1
 80121e6:	4a18      	ldr	r2, [pc, #96]	; (8012248 <_tx_mutex_prioritize+0x160>)
 80121e8:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80121ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d01d      	beq.n	801222e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80121f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80121f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121fc:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80121fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012202:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8012204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012208:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 801220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801220e:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8012210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012214:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8012216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801221a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 801221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012220:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8012222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012226:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801222c:	619a      	str	r2, [r3, #24]
 801222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012230:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	f383 8810 	msr	PRIMASK, r3
}
 8012238:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801223a:	f000 ffc3 	bl	80131c4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801223e:	2300      	movs	r3, #0
#endif
}
 8012240:	4618      	mov	r0, r3
 8012242:	3748      	adds	r7, #72	; 0x48
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}
 8012248:	240036e4 	.word	0x240036e4

0801224c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b090      	sub	sp, #64	; 0x40
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012256:	f3ef 8310 	mrs	r3, PRIMASK
 801225a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801225e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012260:	b672      	cpsid	i
    return(int_posture);
 8012262:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012264:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801226a:	2b00      	cmp	r3, #0
 801226c:	d017      	beq.n	801229e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	683a      	ldr	r2, [r7, #0]
 8012272:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801227a:	683a      	ldr	r2, [r7, #0]
 801227c:	429a      	cmp	r2, r3
 801227e:	d905      	bls.n	801228c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	63da      	str	r2, [r3, #60]	; 0x3c
 801228a:	e002      	b.n	8012292 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	683a      	ldr	r2, [r7, #0]
 8012290:	63da      	str	r2, [r3, #60]	; 0x3c
 8012292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012294:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012298:	f383 8810 	msr	PRIMASK, r3
}
 801229c:	e089      	b.n	80123b2 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 801229e:	4b47      	ldr	r3, [pc, #284]	; (80123bc <_tx_mutex_priority_change+0x170>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80122aa:	4b45      	ldr	r3, [pc, #276]	; (80123c0 <_tx_mutex_priority_change+0x174>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	3302      	adds	r3, #2
 80122b0:	4a43      	ldr	r2, [pc, #268]	; (80123c0 <_tx_mutex_priority_change+0x174>)
 80122b2:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	220e      	movs	r2, #14
 80122b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2201      	movs	r2, #1
 80122be:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80122c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	f383 8810 	msr	PRIMASK, r3
}
 80122d0:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f001 f8b0 	bl	8013438 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122d8:	f3ef 8310 	mrs	r3, PRIMASK
 80122dc:	623b      	str	r3, [r7, #32]
    return(posture);
 80122de:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80122e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80122e2:	b672      	cpsid	i
    return(int_posture);
 80122e4:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80122e6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80122f4:	683a      	ldr	r2, [r7, #0]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d905      	bls.n	8012306 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	63da      	str	r2, [r3, #60]	; 0x3c
 8012304:	e002      	b.n	801230c <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	63da      	str	r2, [r3, #60]	; 0x3c
 801230c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801230e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f383 8810 	msr	PRIMASK, r3
}
 8012316:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f000 ff8d 	bl	8013238 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801231e:	f3ef 8310 	mrs	r3, PRIMASK
 8012322:	617b      	str	r3, [r7, #20]
    return(posture);
 8012324:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012326:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012328:	b672      	cpsid	i
    return(int_posture);
 801232a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 801232c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 801232e:	4b23      	ldr	r3, [pc, #140]	; (80123bc <_tx_mutex_priority_change+0x170>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012338:	429a      	cmp	r2, r3
 801233a:	d034      	beq.n	80123a6 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012340:	2b00      	cmp	r3, #0
 8012342:	d130      	bne.n	80123a6 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801234c:	429a      	cmp	r2, r3
 801234e:	d811      	bhi.n	8012374 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012354:	429a      	cmp	r2, r3
 8012356:	d126      	bne.n	80123a6 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8012358:	4a18      	ldr	r2, [pc, #96]	; (80123bc <_tx_mutex_priority_change+0x170>)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801235e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	429a      	cmp	r2, r3
 8012364:	d21f      	bcs.n	80123a6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236a:	4916      	ldr	r1, [pc, #88]	; (80123c4 <_tx_mutex_priority_change+0x178>)
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012372:	e018      	b.n	80123a6 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237c:	429a      	cmp	r2, r3
 801237e:	d212      	bcs.n	80123a6 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012388:	429a      	cmp	r2, r3
 801238a:	d80c      	bhi.n	80123a6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801238c:	4a0b      	ldr	r2, [pc, #44]	; (80123bc <_tx_mutex_priority_change+0x170>)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8012392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	429a      	cmp	r2, r3
 8012398:	d205      	bcs.n	80123a6 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801239e:	4909      	ldr	r1, [pc, #36]	; (80123c4 <_tx_mutex_priority_change+0x178>)
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80123a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	f383 8810 	msr	PRIMASK, r3
}
 80123b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80123b2:	bf00      	nop
 80123b4:	3740      	adds	r7, #64	; 0x40
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	24003650 	.word	0x24003650
 80123c0:	240036e4 	.word	0x240036e4
 80123c4:	24003664 	.word	0x24003664

080123c8 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b0a6      	sub	sp, #152	; 0x98
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80123d0:	2320      	movs	r3, #32
 80123d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123d6:	f3ef 8310 	mrs	r3, PRIMASK
 80123da:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 80123dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 80123de:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 80123e0:	b672      	cpsid	i
    return(int_posture);
 80123e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80123e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f000 81ff 	beq.w	80127f0 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80123f8:	4ba3      	ldr	r3, [pc, #652]	; (8012688 <_tx_mutex_put+0x2c0>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012404:	429a      	cmp	r2, r3
 8012406:	d00d      	beq.n	8012424 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8012408:	4ba0      	ldr	r3, [pc, #640]	; (801268c <_tx_mutex_put+0x2c4>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d109      	bne.n	8012424 <_tx_mutex_put+0x5c>
 8012410:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012414:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012418:	f383 8810 	msr	PRIMASK, r3
}
 801241c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 801241e:	231e      	movs	r3, #30
 8012420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8012424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012428:	2b20      	cmp	r3, #32
 801242a:	f040 81eb 	bne.w	8012804 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	689b      	ldr	r3, [r3, #8]
 8012432:	1e5a      	subs	r2, r3, #1
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d00a      	beq.n	8012456 <_tx_mutex_put+0x8e>
 8012440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012444:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012448:	f383 8810 	msr	PRIMASK, r3
}
 801244c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 801244e:	2300      	movs	r3, #0
 8012450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012454:	e1d6      	b.n	8012804 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8012456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10a      	bne.n	8012472 <_tx_mutex_put+0xaa>
 801245c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012460:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012464:	f383 8810 	msr	PRIMASK, r3
}
 8012468:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 801246a:	2300      	movs	r3, #0
 801246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012470:	e1c8      	b.n	8012804 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8012472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012474:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012478:	1e5a      	subs	r2, r3, #1
 801247a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801247c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8012480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012486:	2b00      	cmp	r3, #0
 8012488:	d104      	bne.n	8012494 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 801248a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801248c:	2200      	movs	r2, #0
 801248e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8012492:	e019      	b.n	80124c8 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124a0:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80124a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80124a8:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80124aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80124ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80124b0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80124b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80124b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d104      	bne.n	80124c8 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80124be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80124c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80124c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	699b      	ldr	r3, [r3, #24]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d110      	bne.n	80124f2 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	691b      	ldr	r3, [r3, #16]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10c      	bne.n	80124f2 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2200      	movs	r2, #0
 80124dc:	60da      	str	r2, [r3, #12]
 80124de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80124e2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124e6:	f383 8810 	msr	PRIMASK, r3
}
 80124ea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80124ec:	2300      	movs	r3, #0
 80124ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80124f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80124f6:	2b20      	cmp	r3, #32
 80124f8:	f040 8184 	bne.w	8012804 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 80124fc:	2300      	movs	r3, #0
 80124fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8012502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d155      	bne.n	80125c0 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012514:	4b5d      	ldr	r3, [pc, #372]	; (801268c <_tx_mutex_put+0x2c4>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	3301      	adds	r3, #1
 801251a:	4a5c      	ldr	r2, [pc, #368]	; (801268c <_tx_mutex_put+0x2c4>)
 801251c:	6013      	str	r3, [r2, #0]
 801251e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012522:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012526:	f383 8810 	msr	PRIMASK, r3
}
 801252a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 801252c:	2320      	movs	r3, #32
 801252e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 801253c:	e01f      	b.n	801257e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 801253e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012542:	691b      	ldr	r3, [r3, #16]
 8012544:	2b01      	cmp	r3, #1
 8012546:	d10b      	bne.n	8012560 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8012548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801254e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012552:	429a      	cmp	r2, r3
 8012554:	d904      	bls.n	8012560 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8012556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801255c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8012560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 801256a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801256c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012570:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012574:	429a      	cmp	r2, r3
 8012576:	d102      	bne.n	801257e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8012578:	2300      	movs	r3, #0
 801257a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 801257e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012582:	2b00      	cmp	r3, #0
 8012584:	d1db      	bne.n	801253e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012586:	f3ef 8310 	mrs	r3, PRIMASK
 801258a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801258c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801258e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012590:	b672      	cpsid	i
    return(int_posture);
 8012592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012598:	4b3c      	ldr	r3, [pc, #240]	; (801268c <_tx_mutex_put+0x2c4>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3b01      	subs	r3, #1
 801259e:	4a3b      	ldr	r2, [pc, #236]	; (801268c <_tx_mutex_put+0x2c4>)
 80125a0:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 80125a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80125a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80125a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 80125ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80125b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d203      	bcs.n	80125c0 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 80125b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80125bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	69db      	ldr	r3, [r3, #28]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d920      	bls.n	801260a <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	691b      	ldr	r3, [r3, #16]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d11c      	bne.n	801260a <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80125d0:	4b2e      	ldr	r3, [pc, #184]	; (801268c <_tx_mutex_put+0x2c4>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	3301      	adds	r3, #1
 80125d6:	4a2d      	ldr	r2, [pc, #180]	; (801268c <_tx_mutex_put+0x2c4>)
 80125d8:	6013      	str	r3, [r2, #0]
 80125da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80125de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e2:	f383 8810 	msr	PRIMASK, r3
}
 80125e6:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ff fd7d 	bl	80120e8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125ee:	f3ef 8310 	mrs	r3, PRIMASK
 80125f2:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80125f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80125f6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80125f8:	b672      	cpsid	i
    return(int_posture);
 80125fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80125fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8012600:	4b22      	ldr	r3, [pc, #136]	; (801268c <_tx_mutex_put+0x2c4>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	3b01      	subs	r3, #1
 8012606:	4a21      	ldr	r2, [pc, #132]	; (801268c <_tx_mutex_put+0x2c4>)
 8012608:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	699b      	ldr	r3, [r3, #24]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d13e      	bne.n	8012690 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012612:	4b1e      	ldr	r3, [pc, #120]	; (801268c <_tx_mutex_put+0x2c4>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	3301      	adds	r3, #1
 8012618:	4a1c      	ldr	r2, [pc, #112]	; (801268c <_tx_mutex_put+0x2c4>)
 801261a:	6013      	str	r3, [r2, #0]
 801261c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012620:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012624:	f383 8810 	msr	PRIMASK, r3
}
 8012628:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2220      	movs	r2, #32
 801262e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012636:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801263a:	429a      	cmp	r2, r3
 801263c:	d006      	beq.n	801264c <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012646:	4618      	mov	r0, r3
 8012648:	f7ff fe00 	bl	801224c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801264c:	f3ef 8310 	mrs	r3, PRIMASK
 8012650:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012654:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012656:	b672      	cpsid	i
    return(int_posture);
 8012658:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 801265a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 801265e:	4b0b      	ldr	r3, [pc, #44]	; (801268c <_tx_mutex_put+0x2c4>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	3b01      	subs	r3, #1
 8012664:	4a09      	ldr	r2, [pc, #36]	; (801268c <_tx_mutex_put+0x2c4>)
 8012666:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2200      	movs	r2, #0
 801266c:	60da      	str	r2, [r3, #12]
 801266e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012672:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012676:	f383 8810 	msr	PRIMASK, r3
}
 801267a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 801267c:	f000 fda2 	bl	80131c4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8012680:	2300      	movs	r3, #0
 8012682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012686:	e0bd      	b.n	8012804 <_tx_mutex_put+0x43c>
 8012688:	2400364c 	.word	0x2400364c
 801268c:	240036e4 	.word	0x240036e4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	699b      	ldr	r3, [r3, #24]
 8012694:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	691b      	ldr	r3, [r3, #16]
 801269a:	2b01      	cmp	r3, #1
 801269c:	d10a      	bne.n	80126b4 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80126a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2220      	movs	r2, #32
 80126b2:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 80126b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80126ba:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 80126bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d10a      	bne.n	80126d8 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80126c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	631a      	str	r2, [r3, #48]	; 0x30
 80126d6:	e016      	b.n	8012706 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80126d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80126de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80126e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80126e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e8:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80126ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80126f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80126fc:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012704:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8012706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012708:	1c5a      	adds	r2, r3, #1
 801270a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801270c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2201      	movs	r2, #1
 8012714:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801271a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	69db      	ldr	r3, [r3, #28]
 8012720:	1e5a      	subs	r2, r3, #1
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	69db      	ldr	r3, [r3, #28]
 801272a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 801272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801272e:	2b00      	cmp	r3, #0
 8012730:	d103      	bne.n	801273a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2200      	movs	r2, #0
 8012736:	619a      	str	r2, [r3, #24]
 8012738:	e00e      	b.n	8012758 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801273a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801273e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012744:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8012746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801274a:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801274c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801274e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012750:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8012752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012754:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012756:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801275a:	2200      	movs	r2, #0
 801275c:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801275e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012760:	2200      	movs	r2, #0
 8012762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012766:	4b2a      	ldr	r3, [pc, #168]	; (8012810 <_tx_mutex_put+0x448>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3301      	adds	r3, #1
 801276c:	4a28      	ldr	r2, [pc, #160]	; (8012810 <_tx_mutex_put+0x448>)
 801276e:	6013      	str	r3, [r2, #0]
 8012770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012774:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	f383 8810 	msr	PRIMASK, r3
}
 801277c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	691b      	ldr	r3, [r3, #16]
 8012782:	2b01      	cmp	r3, #1
 8012784:	d12d      	bne.n	80127e2 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	69db      	ldr	r3, [r3, #28]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d01c      	beq.n	80127c8 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff fcaa 	bl	80120e8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012794:	f3ef 8310 	mrs	r3, PRIMASK
 8012798:	61bb      	str	r3, [r7, #24]
    return(posture);
 801279a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801279c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801279e:	b672      	cpsid	i
    return(int_posture);
 80127a0:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 80127a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	699b      	ldr	r3, [r3, #24]
 80127aa:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 80127ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d003      	beq.n	80127ba <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 80127b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	629a      	str	r2, [r3, #40]	; 0x28
 80127ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80127be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	f383 8810 	msr	PRIMASK, r3
}
 80127c6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80127c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80127cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d005      	beq.n	80127e2 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80127d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80127da:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80127de:	f7ff fd35 	bl	801224c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80127e2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80127e4:	f000 fd28 	bl	8013238 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80127e8:	2300      	movs	r3, #0
 80127ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80127ee:	e009      	b.n	8012804 <_tx_mutex_put+0x43c>
 80127f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80127f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f383 8810 	msr	PRIMASK, r3
}
 80127fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80127fe:	231e      	movs	r3, #30
 8012800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8012804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8012808:	4618      	mov	r0, r3
 801280a:	3798      	adds	r7, #152	; 0x98
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	240036e4 	.word	0x240036e4

08012814 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b08e      	sub	sp, #56	; 0x38
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801281e:	f3ef 8310 	mrs	r3, PRIMASK
 8012822:	623b      	str	r3, [r7, #32]
    return(posture);
 8012824:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012826:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012828:	b672      	cpsid	i
    return(int_posture);
 801282a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 801282c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012832:	4a33      	ldr	r2, [pc, #204]	; (8012900 <_tx_semaphore_cleanup+0xec>)
 8012834:	4293      	cmp	r3, r2
 8012836:	d158      	bne.n	80128ea <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801283e:	683a      	ldr	r2, [r7, #0]
 8012840:	429a      	cmp	r2, r3
 8012842:	d152      	bne.n	80128ea <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012848:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284c:	2b00      	cmp	r3, #0
 801284e:	d04c      	beq.n	80128ea <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8012850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4a2b      	ldr	r2, [pc, #172]	; (8012904 <_tx_semaphore_cleanup+0xf0>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d147      	bne.n	80128ea <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285c:	691b      	ldr	r3, [r3, #16]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d043      	beq.n	80128ea <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8012868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286a:	691b      	ldr	r3, [r3, #16]
 801286c:	1e5a      	subs	r2, r3, #1
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012874:	691b      	ldr	r3, [r3, #16]
 8012876:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287a:	2b00      	cmp	r3, #0
 801287c:	d103      	bne.n	8012886 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	2200      	movs	r2, #0
 8012882:	60da      	str	r2, [r3, #12]
 8012884:	e013      	b.n	80128ae <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801288a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012890:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012896:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801289c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d102      	bne.n	80128ae <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128ac:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128b2:	2b06      	cmp	r3, #6
 80128b4:	d119      	bne.n	80128ea <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	220d      	movs	r2, #13
 80128ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80128be:	4b12      	ldr	r3, [pc, #72]	; (8012908 <_tx_semaphore_cleanup+0xf4>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	3301      	adds	r3, #1
 80128c4:	4a10      	ldr	r2, [pc, #64]	; (8012908 <_tx_semaphore_cleanup+0xf4>)
 80128c6:	6013      	str	r3, [r2, #0]
 80128c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	f383 8810 	msr	PRIMASK, r3
}
 80128d2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 fcaf 	bl	8013238 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128da:	f3ef 8310 	mrs	r3, PRIMASK
 80128de:	61bb      	str	r3, [r7, #24]
    return(posture);
 80128e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80128e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80128e4:	b672      	cpsid	i
    return(int_posture);
 80128e6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80128e8:	637b      	str	r3, [r7, #52]	; 0x34
 80128ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	f383 8810 	msr	PRIMASK, r3
}
 80128f4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80128f6:	bf00      	nop
 80128f8:	3738      	adds	r7, #56	; 0x38
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	08012815 	.word	0x08012815
 8012904:	53454d41 	.word	0x53454d41
 8012908:	240036e4 	.word	0x240036e4

0801290c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b08a      	sub	sp, #40	; 0x28
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8012918:	221c      	movs	r2, #28
 801291a:	2100      	movs	r1, #0
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f001 fd23 	bl	8014368 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	68ba      	ldr	r2, [r7, #8]
 8012926:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	687a      	ldr	r2, [r7, #4]
 801292c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801292e:	f3ef 8310 	mrs	r3, PRIMASK
 8012932:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012934:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012936:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012938:	b672      	cpsid	i
    return(int_posture);
 801293a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 801293c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	4a18      	ldr	r2, [pc, #96]	; (80129a4 <_tx_semaphore_create+0x98>)
 8012942:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8012944:	4b18      	ldr	r3, [pc, #96]	; (80129a8 <_tx_semaphore_create+0x9c>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d109      	bne.n	8012960 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801294c:	4a17      	ldr	r2, [pc, #92]	; (80129ac <_tx_semaphore_create+0xa0>)
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	68fa      	ldr	r2, [r7, #12]
 8012956:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	68fa      	ldr	r2, [r7, #12]
 801295c:	619a      	str	r2, [r3, #24]
 801295e:	e011      	b.n	8012984 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8012960:	4b12      	ldr	r3, [pc, #72]	; (80129ac <_tx_semaphore_create+0xa0>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	699b      	ldr	r3, [r3, #24]
 801296a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 801296c:	6a3b      	ldr	r3, [r7, #32]
 801296e:	68fa      	ldr	r2, [r7, #12]
 8012970:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	69fa      	ldr	r2, [r7, #28]
 801297c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	6a3a      	ldr	r2, [r7, #32]
 8012982:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8012984:	4b08      	ldr	r3, [pc, #32]	; (80129a8 <_tx_semaphore_create+0x9c>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	3301      	adds	r3, #1
 801298a:	4a07      	ldr	r2, [pc, #28]	; (80129a8 <_tx_semaphore_create+0x9c>)
 801298c:	6013      	str	r3, [r2, #0]
 801298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012990:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	f383 8810 	msr	PRIMASK, r3
}
 8012998:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	3728      	adds	r7, #40	; 0x28
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	53454d41 	.word	0x53454d41
 80129a8:	24003618 	.word	0x24003618
 80129ac:	24003614 	.word	0x24003614

080129b0 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b092      	sub	sp, #72	; 0x48
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80129b8:	f3ef 8310 	mrs	r3, PRIMASK
 80129bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80129c0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80129c2:	b672      	cpsid	i
    return(int_posture);
 80129c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80129c6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2200      	movs	r2, #0
 80129cc:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80129ce:	4b3d      	ldr	r3, [pc, #244]	; (8012ac4 <_tx_semaphore_delete+0x114>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	3b01      	subs	r3, #1
 80129d4:	4a3b      	ldr	r2, [pc, #236]	; (8012ac4 <_tx_semaphore_delete+0x114>)
 80129d6:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80129d8:	4b3a      	ldr	r3, [pc, #232]	; (8012ac4 <_tx_semaphore_delete+0x114>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d103      	bne.n	80129e8 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80129e0:	4b39      	ldr	r3, [pc, #228]	; (8012ac8 <_tx_semaphore_delete+0x118>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	601a      	str	r2, [r3, #0]
 80129e6:	e013      	b.n	8012a10 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	699b      	ldr	r3, [r3, #24]
 80129f2:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80129f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129f8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80129fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129fe:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8012a00:	4b31      	ldr	r3, [pc, #196]	; (8012ac8 <_tx_semaphore_delete+0x118>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d102      	bne.n	8012a10 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8012a0a:	4a2f      	ldr	r2, [pc, #188]	; (8012ac8 <_tx_semaphore_delete+0x118>)
 8012a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012a10:	4b2e      	ldr	r3, [pc, #184]	; (8012acc <_tx_semaphore_delete+0x11c>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	3301      	adds	r3, #1
 8012a16:	4a2d      	ldr	r2, [pc, #180]	; (8012acc <_tx_semaphore_delete+0x11c>)
 8012a18:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	691b      	ldr	r3, [r3, #16]
 8012a2a:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	611a      	str	r2, [r3, #16]
 8012a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a34:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a38:	f383 8810 	msr	PRIMASK, r3
}
 8012a3c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8012a3e:	e024      	b.n	8012a8a <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8012a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a42:	3b01      	subs	r3, #1
 8012a44:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a46:	f3ef 8310 	mrs	r3, PRIMASK
 8012a4a:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012a4c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012a4e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a50:	b672      	cpsid	i
    return(int_posture);
 8012a52:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8012a54:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a58:	2200      	movs	r2, #0
 8012a5a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8012a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a5e:	2201      	movs	r2, #1
 8012a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8012a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a68:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8012a6a:	4b18      	ldr	r3, [pc, #96]	; (8012acc <_tx_semaphore_delete+0x11c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	4a16      	ldr	r2, [pc, #88]	; (8012acc <_tx_semaphore_delete+0x11c>)
 8012a72:	6013      	str	r3, [r2, #0]
 8012a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a78:	6a3b      	ldr	r3, [r7, #32]
 8012a7a:	f383 8810 	msr	PRIMASK, r3
}
 8012a7e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012a80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012a82:	f000 fbd9 	bl	8013238 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8012a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a88:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8012a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1d7      	bne.n	8012a40 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a90:	f3ef 8310 	mrs	r3, PRIMASK
 8012a94:	613b      	str	r3, [r7, #16]
    return(posture);
 8012a96:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8012a98:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a9a:	b672      	cpsid	i
    return(int_posture);
 8012a9c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8012a9e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8012aa0:	4b0a      	ldr	r3, [pc, #40]	; (8012acc <_tx_semaphore_delete+0x11c>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	4a09      	ldr	r2, [pc, #36]	; (8012acc <_tx_semaphore_delete+0x11c>)
 8012aa8:	6013      	str	r3, [r2, #0]
 8012aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f383 8810 	msr	PRIMASK, r3
}
 8012ab4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8012ab6:	f000 fb85 	bl	80131c4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012aba:	2300      	movs	r3, #0
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3748      	adds	r7, #72	; 0x48
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	24003618 	.word	0x24003618
 8012ac8:	24003614 	.word	0x24003614
 8012acc:	240036e4 	.word	0x240036e4

08012ad0 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b08e      	sub	sp, #56	; 0x38
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8012ada:	2300      	movs	r3, #0
 8012adc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ade:	f3ef 8310 	mrs	r3, PRIMASK
 8012ae2:	623b      	str	r3, [r7, #32]
    return(posture);
 8012ae4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012ae6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ae8:	b672      	cpsid	i
    return(int_posture);
 8012aea:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8012aec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	689b      	ldr	r3, [r3, #8]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d00a      	beq.n	8012b0c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	1e5a      	subs	r2, r3, #1
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	609a      	str	r2, [r3, #8]
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	f383 8810 	msr	PRIMASK, r3
}
 8012b0a:	e068      	b.n	8012bde <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d05d      	beq.n	8012bce <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012b12:	4b35      	ldr	r3, [pc, #212]	; (8012be8 <_tx_semaphore_get+0x118>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d008      	beq.n	8012b2c <_tx_semaphore_get+0x5c>
 8012b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	f383 8810 	msr	PRIMASK, r3
}
 8012b24:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8012b26:	230d      	movs	r3, #13
 8012b28:	637b      	str	r3, [r7, #52]	; 0x34
 8012b2a:	e058      	b.n	8012bde <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012b2c:	4b2f      	ldr	r3, [pc, #188]	; (8012bec <_tx_semaphore_get+0x11c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8012b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b34:	4a2e      	ldr	r2, [pc, #184]	; (8012bf0 <_tx_semaphore_get+0x120>)
 8012b36:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8012b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3a:	687a      	ldr	r2, [r7, #4]
 8012b3c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8012b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012b44:	1c5a      	adds	r2, r3, #1
 8012b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d109      	bne.n	8012b68 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b58:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8012b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b5e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b64:	675a      	str	r2, [r3, #116]	; 0x74
 8012b66:	e011      	b.n	8012b8c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	68db      	ldr	r3, [r3, #12]
 8012b6c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b72:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b78:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b7e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b84:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b8a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	691b      	ldr	r3, [r3, #16]
 8012b90:	1c5a      	adds	r2, r3, #1
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8012b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b98:	2206      	movs	r2, #6
 8012b9a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba4:	683a      	ldr	r2, [r7, #0]
 8012ba6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012ba8:	4b0f      	ldr	r3, [pc, #60]	; (8012be8 <_tx_semaphore_get+0x118>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	3301      	adds	r3, #1
 8012bae:	4a0e      	ldr	r2, [pc, #56]	; (8012be8 <_tx_semaphore_get+0x118>)
 8012bb0:	6013      	str	r3, [r2, #0]
 8012bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	f383 8810 	msr	PRIMASK, r3
}
 8012bbc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bc0:	f000 fc3a 	bl	8013438 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bca:	637b      	str	r3, [r7, #52]	; 0x34
 8012bcc:	e007      	b.n	8012bde <_tx_semaphore_get+0x10e>
 8012bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	f383 8810 	msr	PRIMASK, r3
}
 8012bd8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8012bda:	230d      	movs	r3, #13
 8012bdc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8012bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3738      	adds	r7, #56	; 0x38
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	240036e4 	.word	0x240036e4
 8012bec:	2400364c 	.word	0x2400364c
 8012bf0:	08012815 	.word	0x08012815

08012bf4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b08c      	sub	sp, #48	; 0x30
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8012c00:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012c02:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012c04:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c06:	b672      	cpsid	i
    return(int_posture);
 8012c08:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8012c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	691b      	ldr	r3, [r3, #16]
 8012c10:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8012c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10a      	bne.n	8012c2e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	1c5a      	adds	r2, r3, #1
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	609a      	str	r2, [r3, #8]
 8012c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c24:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	f383 8810 	msr	PRIMASK, r3
}
 8012c2c:	e033      	b.n	8012c96 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8012c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c36:	3b01      	subs	r3, #1
 8012c38:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8012c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d103      	bne.n	8012c48 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2200      	movs	r2, #0
 8012c44:	60da      	str	r2, [r3, #12]
 8012c46:	e00e      	b.n	8012c66 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c4c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6a3a      	ldr	r2, [r7, #32]
 8012c52:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c58:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012c5a:	6a3b      	ldr	r3, [r7, #32]
 8012c5c:	69fa      	ldr	r2, [r7, #28]
 8012c5e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	6a3a      	ldr	r2, [r7, #32]
 8012c64:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c6a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	2200      	movs	r2, #0
 8012c70:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c74:	2200      	movs	r2, #0
 8012c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8012c7a:	4b09      	ldr	r3, [pc, #36]	; (8012ca0 <_tx_semaphore_put+0xac>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	4a07      	ldr	r2, [pc, #28]	; (8012ca0 <_tx_semaphore_put+0xac>)
 8012c82:	6013      	str	r3, [r2, #0]
 8012c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c86:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f383 8810 	msr	PRIMASK, r3
}
 8012c8e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c92:	f000 fad1 	bl	8013238 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8012c96:	2300      	movs	r3, #0
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3730      	adds	r7, #48	; 0x30
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	240036e4 	.word	0x240036e4

08012ca4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b092      	sub	sp, #72	; 0x48
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
 8012cb0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8012cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cb8:	21ef      	movs	r1, #239	; 0xef
 8012cba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012cbc:	f001 fb54 	bl	8014368 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8012cc0:	22b0      	movs	r2, #176	; 0xb0
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f001 fb4f 	bl	8014368 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	683a      	ldr	r2, [r7, #0]
 8012cda:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ce0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ce6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012cec:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012cf2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012cfa:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012d00:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	2220      	movs	r2, #32
 8012d06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8012d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8012d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d10:	3b01      	subs	r3, #1
 8012d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d14:	4413      	add	r3, r2
 8012d16:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d1c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8012d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d007      	beq.n	8012d36 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8012d34:	e006      	b.n	8012d44 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d3a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2203      	movs	r2, #3
 8012d48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	4a48      	ldr	r2, [pc, #288]	; (8012e70 <_tx_thread_create+0x1cc>)
 8012d4e:	655a      	str	r2, [r3, #84]	; 0x54
 8012d50:	68fa      	ldr	r2, [r7, #12]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8012d56:	4947      	ldr	r1, [pc, #284]	; (8012e74 <_tx_thread_create+0x1d0>)
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7ed fb61 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8012d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012d66:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d68:	b672      	cpsid	i
    return(int_posture);
 8012d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8012d6c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	4a41      	ldr	r2, [pc, #260]	; (8012e78 <_tx_thread_create+0x1d4>)
 8012d72:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8012d74:	4b41      	ldr	r3, [pc, #260]	; (8012e7c <_tx_thread_create+0x1d8>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d10b      	bne.n	8012d94 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8012d7c:	4a40      	ldr	r2, [pc, #256]	; (8012e80 <_tx_thread_create+0x1dc>)
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8012d92:	e016      	b.n	8012dc2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8012d94:	4b3a      	ldr	r3, [pc, #232]	; (8012e80 <_tx_thread_create+0x1dc>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8012d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012da0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8012da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	68fa      	ldr	r2, [r7, #12]
 8012dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8012dc2:	4b2e      	ldr	r3, [pc, #184]	; (8012e7c <_tx_thread_create+0x1d8>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	4a2c      	ldr	r2, [pc, #176]	; (8012e7c <_tx_thread_create+0x1d8>)
 8012dca:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012dcc:	4b2d      	ldr	r3, [pc, #180]	; (8012e84 <_tx_thread_create+0x1e0>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	4a2c      	ldr	r2, [pc, #176]	; (8012e84 <_tx_thread_create+0x1e0>)
 8012dd4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8012dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d129      	bne.n	8012e30 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012ddc:	f3ef 8305 	mrs	r3, IPSR
 8012de0:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8012de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8012de4:	4b28      	ldr	r3, [pc, #160]	; (8012e88 <_tx_thread_create+0x1e4>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4313      	orrs	r3, r2
 8012dea:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012dee:	d30d      	bcc.n	8012e0c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012df0:	4b26      	ldr	r3, [pc, #152]	; (8012e8c <_tx_thread_create+0x1e8>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8012df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d009      	beq.n	8012e10 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8012dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e00:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8012e0a:	e001      	b.n	8012e10 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e14:	6a3b      	ldr	r3, [r7, #32]
 8012e16:	f383 8810 	msr	PRIMASK, r3
}
 8012e1a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 fa0b 	bl	8013238 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d01e      	beq.n	8012e66 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8012e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8012e2e:	e01a      	b.n	8012e66 <_tx_thread_create+0x1c2>
 8012e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	f383 8810 	msr	PRIMASK, r3
}
 8012e3a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e40:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e42:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e46:	b672      	cpsid	i
    return(int_posture);
 8012e48:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8012e4a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8012e4c:	4b0d      	ldr	r3, [pc, #52]	; (8012e84 <_tx_thread_create+0x1e0>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	3b01      	subs	r3, #1
 8012e52:	4a0c      	ldr	r2, [pc, #48]	; (8012e84 <_tx_thread_create+0x1e0>)
 8012e54:	6013      	str	r3, [r2, #0]
 8012e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e58:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	f383 8810 	msr	PRIMASK, r3
}
 8012e60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012e62:	f000 f9af 	bl	80131c4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8012e66:	2300      	movs	r3, #0
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3748      	adds	r7, #72	; 0x48
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	0801370d 	.word	0x0801370d
 8012e74:	0801302d 	.word	0x0801302d
 8012e78:	54485244 	.word	0x54485244
 8012e7c:	24003658 	.word	0x24003658
 8012e80:	24003654 	.word	0x24003654
 8012e84:	240036e4 	.word	0x240036e4
 8012e88:	2400006c 	.word	0x2400006c
 8012e8c:	24003650 	.word	0x24003650

08012e90 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b087      	sub	sp, #28
 8012e94:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e96:	f3ef 8310 	mrs	r3, PRIMASK
 8012e9a:	60bb      	str	r3, [r7, #8]
    return(posture);
 8012e9c:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8012e9e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ea0:	b672      	cpsid	i
    return(int_posture);
 8012ea2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8012ea4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012ea6:	4b08      	ldr	r3, [pc, #32]	; (8012ec8 <_tx_thread_identify+0x38>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	613b      	str	r3, [r7, #16]
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f383 8810 	msr	PRIMASK, r3
}
 8012eb6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8012eb8:	693b      	ldr	r3, [r7, #16]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	371c      	adds	r7, #28
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop
 8012ec8:	2400364c 	.word	0x2400364c

08012ecc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8012ed0:	4b12      	ldr	r3, [pc, #72]	; (8012f1c <_tx_thread_initialize+0x50>)
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8012ed6:	4b12      	ldr	r3, [pc, #72]	; (8012f20 <_tx_thread_initialize+0x54>)
 8012ed8:	2200      	movs	r2, #0
 8012eda:	601a      	str	r2, [r3, #0]
 8012edc:	4b11      	ldr	r3, [pc, #68]	; (8012f24 <_tx_thread_initialize+0x58>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012ee2:	4b11      	ldr	r3, [pc, #68]	; (8012f28 <_tx_thread_initialize+0x5c>)
 8012ee4:	2220      	movs	r2, #32
 8012ee6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8012ee8:	2280      	movs	r2, #128	; 0x80
 8012eea:	2100      	movs	r1, #0
 8012eec:	480f      	ldr	r0, [pc, #60]	; (8012f2c <_tx_thread_initialize+0x60>)
 8012eee:	f001 fa3b 	bl	8014368 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8012ef2:	4b0f      	ldr	r3, [pc, #60]	; (8012f30 <_tx_thread_initialize+0x64>)
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8012ef8:	4b0e      	ldr	r3, [pc, #56]	; (8012f34 <_tx_thread_initialize+0x68>)
 8012efa:	2200      	movs	r2, #0
 8012efc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8012efe:	4b0e      	ldr	r3, [pc, #56]	; (8012f38 <_tx_thread_initialize+0x6c>)
 8012f00:	2200      	movs	r2, #0
 8012f02:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8012f04:	4b0d      	ldr	r3, [pc, #52]	; (8012f3c <_tx_thread_initialize+0x70>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8012f0a:	4b0d      	ldr	r3, [pc, #52]	; (8012f40 <_tx_thread_initialize+0x74>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8012f12:	4a0b      	ldr	r2, [pc, #44]	; (8012f40 <_tx_thread_initialize+0x74>)
 8012f14:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8012f16:	bf00      	nop
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	2400364c 	.word	0x2400364c
 8012f20:	24003650 	.word	0x24003650
 8012f24:	2400365c 	.word	0x2400365c
 8012f28:	24003660 	.word	0x24003660
 8012f2c:	24003664 	.word	0x24003664
 8012f30:	24003654 	.word	0x24003654
 8012f34:	24003658 	.word	0x24003658
 8012f38:	240036e4 	.word	0x240036e4
 8012f3c:	240036e8 	.word	0x240036e8
 8012f40:	240036ec 	.word	0x240036ec

08012f44 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b08c      	sub	sp, #48	; 0x30
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012f50:	2300      	movs	r3, #0
 8012f52:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d004      	beq.n	8012f6a <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d001      	beq.n	8012f6a <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8012f66:	2300      	movs	r3, #0
 8012f68:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8012f6e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012f72:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f74:	b672      	cpsid	i
    return(int_posture);
 8012f76:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012f78:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d902      	bls.n	8012f8c <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8012f86:	2318      	movs	r3, #24
 8012f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f8a:	e03e      	b.n	801300a <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	68ba      	ldr	r2, [r7, #8]
 8012f9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d203      	bcs.n	8012fb2 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	68ba      	ldr	r2, [r7, #8]
 8012fae:	63da      	str	r2, [r3, #60]	; 0x3c
 8012fb0:	e004      	b.n	8012fbc <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc0:	4b17      	ldr	r3, [pc, #92]	; (8013020 <_tx_thread_preemption_change+0xdc>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d920      	bls.n	801300a <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8012fc8:	4b15      	ldr	r3, [pc, #84]	; (8013020 <_tx_thread_preemption_change+0xdc>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	68ba      	ldr	r2, [r7, #8]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d91b      	bls.n	801300a <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8012fd2:	4b14      	ldr	r3, [pc, #80]	; (8013024 <_tx_thread_preemption_change+0xe0>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68fa      	ldr	r2, [r7, #12]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d116      	bne.n	801300a <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012fdc:	4b10      	ldr	r3, [pc, #64]	; (8013020 <_tx_thread_preemption_change+0xdc>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4a11      	ldr	r2, [pc, #68]	; (8013028 <_tx_thread_preemption_change+0xe4>)
 8012fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fe6:	4a0f      	ldr	r2, [pc, #60]	; (8013024 <_tx_thread_preemption_change+0xe0>)
 8012fe8:	6013      	str	r3, [r2, #0]
 8012fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	f383 8810 	msr	PRIMASK, r3
}
 8012ff4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8012ff6:	f000 f8e5 	bl	80131c4 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8012ffe:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013000:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013002:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013004:	b672      	cpsid	i
    return(int_posture);
 8013006:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8013008:	62fb      	str	r3, [r7, #44]	; 0x2c
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	f383 8810 	msr	PRIMASK, r3
}
 8013014:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8013016:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013018:	4618      	mov	r0, r3
 801301a:	3730      	adds	r7, #48	; 0x30
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	24003660 	.word	0x24003660
 8013024:	24003650 	.word	0x24003650
 8013028:	24003664 	.word	0x24003664

0801302c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b088      	sub	sp, #32
 8013030:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013032:	4b21      	ldr	r3, [pc, #132]	; (80130b8 <_tx_thread_shell_entry+0x8c>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013040:	4610      	mov	r0, r2
 8013042:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8013044:	4b1d      	ldr	r3, [pc, #116]	; (80130bc <_tx_thread_shell_entry+0x90>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d003      	beq.n	8013054 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801304c:	4b1b      	ldr	r3, [pc, #108]	; (80130bc <_tx_thread_shell_entry+0x90>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	69f8      	ldr	r0, [r7, #28]
 8013052:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013054:	f3ef 8310 	mrs	r3, PRIMASK
 8013058:	607b      	str	r3, [r7, #4]
    return(posture);
 801305a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801305c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801305e:	b672      	cpsid	i
    return(int_posture);
 8013060:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8013062:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	2201      	movs	r2, #1
 8013068:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	2201      	movs	r2, #1
 801306e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	2200      	movs	r2, #0
 8013074:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013076:	4b12      	ldr	r3, [pc, #72]	; (80130c0 <_tx_thread_shell_entry+0x94>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	3301      	adds	r3, #1
 801307c:	4a10      	ldr	r2, [pc, #64]	; (80130c0 <_tx_thread_shell_entry+0x94>)
 801307e:	6013      	str	r3, [r2, #0]
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	f383 8810 	msr	PRIMASK, r3
}
 801308a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801308c:	f3ef 8314 	mrs	r3, CONTROL
 8013090:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8013092:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8013094:	617b      	str	r3, [r7, #20]
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	f023 0304 	bic.w	r3, r3, #4
 801309c:	617b      	str	r3, [r7, #20]
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	f383 8814 	msr	CONTROL, r3
}
 80130a8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80130aa:	69f8      	ldr	r0, [r7, #28]
 80130ac:	f000 f9c4 	bl	8013438 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80130b0:	bf00      	nop
 80130b2:	3720      	adds	r7, #32
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	2400364c 	.word	0x2400364c
 80130bc:	240036e8 	.word	0x240036e8
 80130c0:	240036e4 	.word	0x240036e4

080130c4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b08e      	sub	sp, #56	; 0x38
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130cc:	f3ef 8310 	mrs	r3, PRIMASK
 80130d0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80130d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80130d4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80130d6:	b672      	cpsid	i
    return(int_posture);
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80130da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80130dc:	4b35      	ldr	r3, [pc, #212]	; (80131b4 <_tx_thread_sleep+0xf0>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80130e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d108      	bne.n	80130fa <_tx_thread_sleep+0x36>
 80130e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80130ec:	6a3b      	ldr	r3, [r7, #32]
 80130ee:	f383 8810 	msr	PRIMASK, r3
}
 80130f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80130f4:	2313      	movs	r3, #19
 80130f6:	637b      	str	r3, [r7, #52]	; 0x34
 80130f8:	e056      	b.n	80131a8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130fa:	f3ef 8305 	mrs	r3, IPSR
 80130fe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8013100:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013102:	4b2d      	ldr	r3, [pc, #180]	; (80131b8 <_tx_thread_sleep+0xf4>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4313      	orrs	r3, r2
 8013108:	2b00      	cmp	r3, #0
 801310a:	d008      	beq.n	801311e <_tx_thread_sleep+0x5a>
 801310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	f383 8810 	msr	PRIMASK, r3
}
 8013116:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013118:	2313      	movs	r3, #19
 801311a:	637b      	str	r3, [r7, #52]	; 0x34
 801311c:	e044      	b.n	80131a8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013120:	4a26      	ldr	r2, [pc, #152]	; (80131bc <_tx_thread_sleep+0xf8>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d108      	bne.n	8013138 <_tx_thread_sleep+0x74>
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	f383 8810 	msr	PRIMASK, r3
}
 8013130:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013132:	2313      	movs	r3, #19
 8013134:	637b      	str	r3, [r7, #52]	; 0x34
 8013136:	e037      	b.n	80131a8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d108      	bne.n	8013150 <_tx_thread_sleep+0x8c>
 801313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013140:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	f383 8810 	msr	PRIMASK, r3
}
 8013148:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801314a:	2300      	movs	r3, #0
 801314c:	637b      	str	r3, [r7, #52]	; 0x34
 801314e:	e02b      	b.n	80131a8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013150:	4b1b      	ldr	r3, [pc, #108]	; (80131c0 <_tx_thread_sleep+0xfc>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d008      	beq.n	801316a <_tx_thread_sleep+0xa6>
 8013158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f383 8810 	msr	PRIMASK, r3
}
 8013162:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8013164:	2313      	movs	r3, #19
 8013166:	637b      	str	r3, [r7, #52]	; 0x34
 8013168:	e01e      	b.n	80131a8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316c:	2204      	movs	r2, #4
 801316e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013172:	2201      	movs	r2, #1
 8013174:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013178:	2200      	movs	r2, #0
 801317a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013184:	4b0e      	ldr	r3, [pc, #56]	; (80131c0 <_tx_thread_sleep+0xfc>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	3301      	adds	r3, #1
 801318a:	4a0d      	ldr	r2, [pc, #52]	; (80131c0 <_tx_thread_sleep+0xfc>)
 801318c:	6013      	str	r3, [r2, #0]
 801318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013190:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	f383 8810 	msr	PRIMASK, r3
}
 8013198:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801319a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801319c:	f000 f94c 	bl	8013438 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80131a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80131a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3738      	adds	r7, #56	; 0x38
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	2400364c 	.word	0x2400364c
 80131b8:	2400006c 	.word	0x2400006c
 80131bc:	24003794 	.word	0x24003794
 80131c0:	240036e4 	.word	0x240036e4

080131c4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b089      	sub	sp, #36	; 0x24
 80131c8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80131ca:	4b17      	ldr	r3, [pc, #92]	; (8013228 <_tx_thread_system_preempt_check+0x64>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d121      	bne.n	801321a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80131d6:	4b15      	ldr	r3, [pc, #84]	; (801322c <_tx_thread_system_preempt_check+0x68>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80131dc:	4b14      	ldr	r3, [pc, #80]	; (8013230 <_tx_thread_system_preempt_check+0x6c>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80131e2:	69ba      	ldr	r2, [r7, #24]
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d017      	beq.n	801321a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80131ea:	4b12      	ldr	r3, [pc, #72]	; (8013234 <_tx_thread_system_preempt_check+0x70>)
 80131ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131f2:	f3ef 8305 	mrs	r3, IPSR
 80131f6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80131f8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d10c      	bne.n	8013218 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131fe:	f3ef 8310 	mrs	r3, PRIMASK
 8013202:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013204:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8013206:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013208:	b662      	cpsie	i
}
 801320a:	bf00      	nop
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f383 8810 	msr	PRIMASK, r3
}
 8013216:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8013218:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801321a:	bf00      	nop
 801321c:	3724      	adds	r7, #36	; 0x24
 801321e:	46bd      	mov	sp, r7
 8013220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013224:	4770      	bx	lr
 8013226:	bf00      	nop
 8013228:	240036e4 	.word	0x240036e4
 801322c:	2400364c 	.word	0x2400364c
 8013230:	24003650 	.word	0x24003650
 8013234:	e000ed04 	.word	0xe000ed04

08013238 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b096      	sub	sp, #88	; 0x58
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013240:	f3ef 8310 	mrs	r3, PRIMASK
 8013244:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8013246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8013248:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801324a:	b672      	cpsid	i
    return(int_posture);
 801324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801324e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013254:	2b00      	cmp	r3, #0
 8013256:	d005      	beq.n	8013264 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	334c      	adds	r3, #76	; 0x4c
 801325c:	4618      	mov	r0, r3
 801325e:	f000 fc13 	bl	8013a88 <_tx_timer_system_deactivate>
 8013262:	e002      	b.n	801326a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2200      	movs	r2, #0
 8013268:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801326a:	4b6c      	ldr	r3, [pc, #432]	; (801341c <_tx_thread_system_resume+0x1e4>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	3b01      	subs	r3, #1
 8013270:	4a6a      	ldr	r2, [pc, #424]	; (801341c <_tx_thread_system_resume+0x1e4>)
 8013272:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013278:	2b00      	cmp	r3, #0
 801327a:	f040 8083 	bne.w	8013384 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013282:	2b00      	cmp	r3, #0
 8013284:	f000 8097 	beq.w	80133b6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801328c:	2b00      	cmp	r3, #0
 801328e:	d172      	bne.n	8013376 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801329a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801329c:	4a60      	ldr	r2, [pc, #384]	; (8013420 <_tx_thread_system_resume+0x1e8>)
 801329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132a4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80132a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d154      	bne.n	8013356 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80132ac:	495c      	ldr	r1, [pc, #368]	; (8013420 <_tx_thread_system_resume+0x1e8>)
 80132ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80132c2:	2201      	movs	r2, #1
 80132c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132c6:	fa02 f303 	lsl.w	r3, r2, r3
 80132ca:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80132cc:	4b55      	ldr	r3, [pc, #340]	; (8013424 <_tx_thread_system_resume+0x1ec>)
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132d2:	4313      	orrs	r3, r2
 80132d4:	4a53      	ldr	r2, [pc, #332]	; (8013424 <_tx_thread_system_resume+0x1ec>)
 80132d6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80132d8:	4b53      	ldr	r3, [pc, #332]	; (8013428 <_tx_thread_system_resume+0x1f0>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132de:	429a      	cmp	r2, r3
 80132e0:	d269      	bcs.n	80133b6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80132e2:	4a51      	ldr	r2, [pc, #324]	; (8013428 <_tx_thread_system_resume+0x1f0>)
 80132e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132e6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80132e8:	4b50      	ldr	r3, [pc, #320]	; (801342c <_tx_thread_system_resume+0x1f4>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80132ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d103      	bne.n	80132fc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80132f4:	4a4d      	ldr	r2, [pc, #308]	; (801342c <_tx_thread_system_resume+0x1f4>)
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6013      	str	r3, [r2, #0]
 80132fa:	e05c      	b.n	80133b6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80132fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013300:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013302:	429a      	cmp	r2, r3
 8013304:	d257      	bcs.n	80133b6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8013306:	4a49      	ldr	r2, [pc, #292]	; (801342c <_tx_thread_system_resume+0x1f4>)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6013      	str	r3, [r2, #0]
 801330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	f383 8810 	msr	PRIMASK, r3
}
 8013316:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013318:	4b40      	ldr	r3, [pc, #256]	; (801341c <_tx_thread_system_resume+0x1e4>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013320:	2b00      	cmp	r3, #0
 8013322:	d174      	bne.n	801340e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013324:	4b42      	ldr	r3, [pc, #264]	; (8013430 <_tx_thread_system_resume+0x1f8>)
 8013326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801332a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801332c:	f3ef 8305 	mrs	r3, IPSR
 8013330:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8013332:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8013334:	2b00      	cmp	r3, #0
 8013336:	d10c      	bne.n	8013352 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013338:	f3ef 8310 	mrs	r3, PRIMASK
 801333c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8013340:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013342:	b662      	cpsie	i
}
 8013344:	bf00      	nop
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801334a:	69fb      	ldr	r3, [r7, #28]
 801334c:	f383 8810 	msr	PRIMASK, r3
}
 8013350:	bf00      	nop
}
 8013352:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8013354:	e05b      	b.n	801340e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8013356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801335a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8013362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801336c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013372:	621a      	str	r2, [r3, #32]
 8013374:	e01f      	b.n	80133b6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2203      	movs	r2, #3
 8013380:	631a      	str	r2, [r3, #48]	; 0x30
 8013382:	e018      	b.n	80133b6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013388:	2b01      	cmp	r3, #1
 801338a:	d014      	beq.n	80133b6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013390:	2b02      	cmp	r3, #2
 8013392:	d010      	beq.n	80133b6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013398:	2b00      	cmp	r3, #0
 801339a:	d106      	bne.n	80133aa <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2200      	movs	r2, #0
 80133a6:	631a      	str	r2, [r3, #48]	; 0x30
 80133a8:	e005      	b.n	80133b6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2200      	movs	r2, #0
 80133ae:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2203      	movs	r2, #3
 80133b4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80133b6:	4b1f      	ldr	r3, [pc, #124]	; (8013434 <_tx_thread_system_resume+0x1fc>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80133bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	f383 8810 	msr	PRIMASK, r3
}
 80133c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80133c8:	4b18      	ldr	r3, [pc, #96]	; (801342c <_tx_thread_system_resume+0x1f4>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d020      	beq.n	8013414 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80133d2:	4b12      	ldr	r3, [pc, #72]	; (801341c <_tx_thread_system_resume+0x1e4>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80133d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d11a      	bne.n	8013414 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80133de:	4b14      	ldr	r3, [pc, #80]	; (8013430 <_tx_thread_system_resume+0x1f8>)
 80133e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80133e6:	f3ef 8305 	mrs	r3, IPSR
 80133ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80133ec:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d10f      	bne.n	8013412 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133f2:	f3ef 8310 	mrs	r3, PRIMASK
 80133f6:	613b      	str	r3, [r7, #16]
    return(posture);
 80133f8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80133fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80133fc:	b662      	cpsie	i
}
 80133fe:	bf00      	nop
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	f383 8810 	msr	PRIMASK, r3
}
 801340a:	bf00      	nop
}
 801340c:	e001      	b.n	8013412 <_tx_thread_system_resume+0x1da>
                                return;
 801340e:	bf00      	nop
 8013410:	e000      	b.n	8013414 <_tx_thread_system_resume+0x1dc>
 8013412:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8013414:	3758      	adds	r7, #88	; 0x58
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	240036e4 	.word	0x240036e4
 8013420:	24003664 	.word	0x24003664
 8013424:	2400365c 	.word	0x2400365c
 8013428:	24003660 	.word	0x24003660
 801342c:	24003650 	.word	0x24003650
 8013430:	e000ed04 	.word	0xe000ed04
 8013434:	2400364c 	.word	0x2400364c

08013438 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b09e      	sub	sp, #120	; 0x78
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013440:	4b81      	ldr	r3, [pc, #516]	; (8013648 <_tx_thread_system_suspend+0x210>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013446:	f3ef 8310 	mrs	r3, PRIMASK
 801344a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801344c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801344e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8013450:	b672      	cpsid	i
    return(int_posture);
 8013452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013454:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801345a:	429a      	cmp	r2, r3
 801345c:	d112      	bne.n	8013484 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013462:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8013464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013466:	2b00      	cmp	r3, #0
 8013468:	d008      	beq.n	801347c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013470:	d004      	beq.n	801347c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	334c      	adds	r3, #76	; 0x4c
 8013476:	4618      	mov	r0, r3
 8013478:	f000 faa4 	bl	80139c4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	69db      	ldr	r3, [r3, #28]
 8013480:	4a72      	ldr	r2, [pc, #456]	; (801364c <_tx_thread_system_suspend+0x214>)
 8013482:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013484:	4b72      	ldr	r3, [pc, #456]	; (8013650 <_tx_thread_system_suspend+0x218>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	3b01      	subs	r3, #1
 801348a:	4a71      	ldr	r2, [pc, #452]	; (8013650 <_tx_thread_system_suspend+0x218>)
 801348c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013492:	2b01      	cmp	r3, #1
 8013494:	f040 80a6 	bne.w	80135e4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2200      	movs	r2, #0
 801349c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6a1b      	ldr	r3, [r3, #32]
 80134a8:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80134aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d015      	beq.n	80134de <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80134b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80134bc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80134be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80134c2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80134c4:	4a63      	ldr	r2, [pc, #396]	; (8013654 <_tx_thread_system_suspend+0x21c>)
 80134c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d157      	bne.n	8013582 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80134d2:	4960      	ldr	r1, [pc, #384]	; (8013654 <_tx_thread_system_suspend+0x21c>)
 80134d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80134d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80134dc:	e051      	b.n	8013582 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80134de:	4a5d      	ldr	r2, [pc, #372]	; (8013654 <_tx_thread_system_suspend+0x21c>)
 80134e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134e2:	2100      	movs	r1, #0
 80134e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80134e8:	2201      	movs	r2, #1
 80134ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134ec:	fa02 f303 	lsl.w	r3, r2, r3
 80134f0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80134f2:	4b59      	ldr	r3, [pc, #356]	; (8013658 <_tx_thread_system_suspend+0x220>)
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80134f8:	43db      	mvns	r3, r3
 80134fa:	4013      	ands	r3, r2
 80134fc:	4a56      	ldr	r2, [pc, #344]	; (8013658 <_tx_thread_system_suspend+0x220>)
 80134fe:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013500:	2300      	movs	r3, #0
 8013502:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8013504:	4b54      	ldr	r3, [pc, #336]	; (8013658 <_tx_thread_system_suspend+0x220>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801350a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801350c:	2b00      	cmp	r3, #0
 801350e:	d12b      	bne.n	8013568 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013510:	4b52      	ldr	r3, [pc, #328]	; (801365c <_tx_thread_system_suspend+0x224>)
 8013512:	2220      	movs	r2, #32
 8013514:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8013516:	4b52      	ldr	r3, [pc, #328]	; (8013660 <_tx_thread_system_suspend+0x228>)
 8013518:	2200      	movs	r2, #0
 801351a:	601a      	str	r2, [r3, #0]
 801351c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801351e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013522:	f383 8810 	msr	PRIMASK, r3
}
 8013526:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013528:	4b49      	ldr	r3, [pc, #292]	; (8013650 <_tx_thread_system_suspend+0x218>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801352e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013530:	2b00      	cmp	r3, #0
 8013532:	f040 8081 	bne.w	8013638 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013536:	4b4b      	ldr	r3, [pc, #300]	; (8013664 <_tx_thread_system_suspend+0x22c>)
 8013538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801353c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801353e:	f3ef 8305 	mrs	r3, IPSR
 8013542:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8013544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8013546:	2b00      	cmp	r3, #0
 8013548:	d10c      	bne.n	8013564 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801354a:	f3ef 8310 	mrs	r3, PRIMASK
 801354e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8013550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8013552:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013554:	b662      	cpsie	i
}
 8013556:	bf00      	nop
 8013558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355e:	f383 8810 	msr	PRIMASK, r3
}
 8013562:	bf00      	nop
}
 8013564:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8013566:	e067      	b.n	8013638 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8013568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801356a:	fa93 f3a3 	rbit	r3, r3
 801356e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013572:	fab3 f383 	clz	r3, r3
 8013576:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8013578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801357a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801357c:	4413      	add	r3, r2
 801357e:	4a37      	ldr	r2, [pc, #220]	; (801365c <_tx_thread_system_suspend+0x224>)
 8013580:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8013582:	4b37      	ldr	r3, [pc, #220]	; (8013660 <_tx_thread_system_suspend+0x228>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	429a      	cmp	r2, r3
 801358a:	d12b      	bne.n	80135e4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801358c:	4b33      	ldr	r3, [pc, #204]	; (801365c <_tx_thread_system_suspend+0x224>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4a30      	ldr	r2, [pc, #192]	; (8013654 <_tx_thread_system_suspend+0x21c>)
 8013592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013596:	4a32      	ldr	r2, [pc, #200]	; (8013660 <_tx_thread_system_suspend+0x228>)
 8013598:	6013      	str	r3, [r2, #0]
 801359a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801359c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	f383 8810 	msr	PRIMASK, r3
}
 80135a4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80135a6:	4b2a      	ldr	r3, [pc, #168]	; (8013650 <_tx_thread_system_suspend+0x218>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80135ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d144      	bne.n	801363c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80135b2:	4b2c      	ldr	r3, [pc, #176]	; (8013664 <_tx_thread_system_suspend+0x22c>)
 80135b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80135ba:	f3ef 8305 	mrs	r3, IPSR
 80135be:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80135c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d10c      	bne.n	80135e0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135c6:	f3ef 8310 	mrs	r3, PRIMASK
 80135ca:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80135cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80135ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80135d0:	b662      	cpsie	i
}
 80135d2:	bf00      	nop
 80135d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135d8:	6a3b      	ldr	r3, [r7, #32]
 80135da:	f383 8810 	msr	PRIMASK, r3
}
 80135de:	bf00      	nop
}
 80135e0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80135e2:	e02b      	b.n	801363c <_tx_thread_system_suspend+0x204>
 80135e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80135e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	f383 8810 	msr	PRIMASK, r3
}
 80135ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80135f0:	4b1b      	ldr	r3, [pc, #108]	; (8013660 <_tx_thread_system_suspend+0x228>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d022      	beq.n	8013640 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80135fa:	4b15      	ldr	r3, [pc, #84]	; (8013650 <_tx_thread_system_suspend+0x218>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8013600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013602:	2b00      	cmp	r3, #0
 8013604:	d11c      	bne.n	8013640 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013606:	4b17      	ldr	r3, [pc, #92]	; (8013664 <_tx_thread_system_suspend+0x22c>)
 8013608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801360c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801360e:	f3ef 8305 	mrs	r3, IPSR
 8013612:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013614:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8013616:	2b00      	cmp	r3, #0
 8013618:	d10c      	bne.n	8013634 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801361a:	f3ef 8310 	mrs	r3, PRIMASK
 801361e:	617b      	str	r3, [r7, #20]
    return(posture);
 8013620:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8013622:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013624:	b662      	cpsie	i
}
 8013626:	bf00      	nop
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f383 8810 	msr	PRIMASK, r3
}
 8013632:	bf00      	nop
}
 8013634:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8013636:	e003      	b.n	8013640 <_tx_thread_system_suspend+0x208>
                return;
 8013638:	bf00      	nop
 801363a:	e002      	b.n	8013642 <_tx_thread_system_suspend+0x20a>
            return;
 801363c:	bf00      	nop
 801363e:	e000      	b.n	8013642 <_tx_thread_system_suspend+0x20a>
    return;
 8013640:	bf00      	nop
}
 8013642:	3778      	adds	r7, #120	; 0x78
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}
 8013648:	2400364c 	.word	0x2400364c
 801364c:	24003c50 	.word	0x24003c50
 8013650:	240036e4 	.word	0x240036e4
 8013654:	24003664 	.word	0x24003664
 8013658:	2400365c 	.word	0x2400365c
 801365c:	24003660 	.word	0x24003660
 8013660:	24003650 	.word	0x24003650
 8013664:	e000ed04 	.word	0xe000ed04

08013668 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8013668:	b480      	push	{r7}
 801366a:	b087      	sub	sp, #28
 801366c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801366e:	4b21      	ldr	r3, [pc, #132]	; (80136f4 <_tx_thread_time_slice+0x8c>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013674:	f3ef 8310 	mrs	r3, PRIMASK
 8013678:	60fb      	str	r3, [r7, #12]
    return(posture);
 801367a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801367c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801367e:	b672      	cpsid	i
    return(int_posture);
 8013680:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8013682:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013684:	4b1c      	ldr	r3, [pc, #112]	; (80136f8 <_tx_thread_time_slice+0x90>)
 8013686:	2200      	movs	r2, #0
 8013688:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d024      	beq.n	80136da <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013694:	2b00      	cmp	r3, #0
 8013696:	d120      	bne.n	80136da <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	69da      	ldr	r2, [r3, #28]
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	699b      	ldr	r3, [r3, #24]
 80136a4:	4a15      	ldr	r2, [pc, #84]	; (80136fc <_tx_thread_time_slice+0x94>)
 80136a6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	6a1b      	ldr	r3, [r3, #32]
 80136ac:	697a      	ldr	r2, [r7, #20]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d013      	beq.n	80136da <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d10d      	bne.n	80136da <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c2:	697a      	ldr	r2, [r7, #20]
 80136c4:	6a12      	ldr	r2, [r2, #32]
 80136c6:	490e      	ldr	r1, [pc, #56]	; (8013700 <_tx_thread_time_slice+0x98>)
 80136c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80136cc:	4b0d      	ldr	r3, [pc, #52]	; (8013704 <_tx_thread_time_slice+0x9c>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4a0b      	ldr	r2, [pc, #44]	; (8013700 <_tx_thread_time_slice+0x98>)
 80136d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d6:	4a0c      	ldr	r2, [pc, #48]	; (8013708 <_tx_thread_time_slice+0xa0>)
 80136d8:	6013      	str	r3, [r2, #0]
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f383 8810 	msr	PRIMASK, r3
}
 80136e4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80136e6:	bf00      	nop
 80136e8:	371c      	adds	r7, #28
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	2400364c 	.word	0x2400364c
 80136f8:	240036f4 	.word	0x240036f4
 80136fc:	24003c50 	.word	0x24003c50
 8013700:	24003664 	.word	0x24003664
 8013704:	24003660 	.word	0x24003660
 8013708:	24003650 	.word	0x24003650

0801370c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b08a      	sub	sp, #40	; 0x28
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013718:	f3ef 8310 	mrs	r3, PRIMASK
 801371c:	617b      	str	r3, [r7, #20]
    return(posture);
 801371e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013720:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013722:	b672      	cpsid	i
    return(int_posture);
 8013724:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8013726:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801372c:	2b04      	cmp	r3, #4
 801372e:	d10e      	bne.n	801374e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8013730:	4b13      	ldr	r3, [pc, #76]	; (8013780 <_tx_thread_timeout+0x74>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	3301      	adds	r3, #1
 8013736:	4a12      	ldr	r2, [pc, #72]	; (8013780 <_tx_thread_timeout+0x74>)
 8013738:	6013      	str	r3, [r2, #0]
 801373a:	6a3b      	ldr	r3, [r7, #32]
 801373c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f383 8810 	msr	PRIMASK, r3
}
 8013744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013748:	f7ff fd76 	bl	8013238 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801374c:	e013      	b.n	8013776 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013752:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801375a:	61bb      	str	r3, [r7, #24]
 801375c:	6a3b      	ldr	r3, [r7, #32]
 801375e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	f383 8810 	msr	PRIMASK, r3
}
 8013766:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d003      	beq.n	8013776 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	69b9      	ldr	r1, [r7, #24]
 8013772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013774:	4798      	blx	r3
}
 8013776:	bf00      	nop
 8013778:	3728      	adds	r7, #40	; 0x28
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	240036e4 	.word	0x240036e4

08013784 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8013784:	b480      	push	{r7}
 8013786:	b087      	sub	sp, #28
 8013788:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801378a:	f3ef 8310 	mrs	r3, PRIMASK
 801378e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8013790:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8013792:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013794:	b672      	cpsid	i
    return(int_posture);
 8013796:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8013798:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 801379a:	4b08      	ldr	r3, [pc, #32]	; (80137bc <_tx_time_get+0x38>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	613b      	str	r3, [r7, #16]
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	f383 8810 	msr	PRIMASK, r3
}
 80137aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 80137ac:	693b      	ldr	r3, [r7, #16]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	371c      	adds	r7, #28
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	240036f0 	.word	0x240036f0

080137c0 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b08a      	sub	sp, #40	; 0x28
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
 80137cc:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 80137ce:	222c      	movs	r2, #44	; 0x2c
 80137d0:	2100      	movs	r1, #0
 80137d2:	68f8      	ldr	r0, [r7, #12]
 80137d4:	f000 fdc8 	bl	8014368 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	68ba      	ldr	r2, [r7, #8]
 80137dc:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137e2:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137e8:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	683a      	ldr	r2, [r7, #0]
 80137f4:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137f6:	f3ef 8310 	mrs	r3, PRIMASK
 80137fa:	61bb      	str	r3, [r7, #24]
    return(posture);
 80137fc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80137fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013800:	b672      	cpsid	i
    return(int_posture);
 8013802:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013804:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	4a1c      	ldr	r2, [pc, #112]	; (801387c <_tx_timer_create+0xbc>)
 801380a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801380c:	4b1c      	ldr	r3, [pc, #112]	; (8013880 <_tx_timer_create+0xc0>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d109      	bne.n	8013828 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8013814:	4a1b      	ldr	r2, [pc, #108]	; (8013884 <_tx_timer_create+0xc4>)
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	68fa      	ldr	r2, [r7, #12]
 8013824:	629a      	str	r2, [r3, #40]	; 0x28
 8013826:	e011      	b.n	801384c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8013828:	4b16      	ldr	r3, [pc, #88]	; (8013884 <_tx_timer_create+0xc4>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801382e:	6a3b      	ldr	r3, [r7, #32]
 8013830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013832:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8013834:	6a3b      	ldr	r3, [r7, #32]
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	69fa      	ldr	r2, [r7, #28]
 8013844:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	6a3a      	ldr	r2, [r7, #32]
 801384a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801384c:	4b0c      	ldr	r3, [pc, #48]	; (8013880 <_tx_timer_create+0xc0>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	3301      	adds	r3, #1
 8013852:	4a0b      	ldr	r2, [pc, #44]	; (8013880 <_tx_timer_create+0xc0>)
 8013854:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8013856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013858:	2b01      	cmp	r3, #1
 801385a:	d104      	bne.n	8013866 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	3308      	adds	r3, #8
 8013860:	4618      	mov	r0, r3
 8013862:	f000 f8af 	bl	80139c4 <_tx_timer_system_activate>
 8013866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013868:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	f383 8810 	msr	PRIMASK, r3
}
 8013870:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013872:	2300      	movs	r3, #0
}
 8013874:	4618      	mov	r0, r3
 8013876:	3728      	adds	r7, #40	; 0x28
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	4154494d 	.word	0x4154494d
 8013880:	2400378c 	.word	0x2400378c
 8013884:	24003788 	.word	0x24003788

08013888 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801388e:	f3ef 8310 	mrs	r3, PRIMASK
 8013892:	607b      	str	r3, [r7, #4]
    return(posture);
 8013894:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013896:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013898:	b672      	cpsid	i
    return(int_posture);
 801389a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801389c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801389e:	4b09      	ldr	r3, [pc, #36]	; (80138c4 <_tx_timer_expiration_process+0x3c>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	3301      	adds	r3, #1
 80138a4:	4a07      	ldr	r2, [pc, #28]	; (80138c4 <_tx_timer_expiration_process+0x3c>)
 80138a6:	6013      	str	r3, [r2, #0]
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	f383 8810 	msr	PRIMASK, r3
}
 80138b2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80138b4:	4804      	ldr	r0, [pc, #16]	; (80138c8 <_tx_timer_expiration_process+0x40>)
 80138b6:	f7ff fcbf 	bl	8013238 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80138ba:	bf00      	nop
 80138bc:	3710      	adds	r7, #16
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	240036e4 	.word	0x240036e4
 80138c8:	24003794 	.word	0x24003794

080138cc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80138cc:	b590      	push	{r4, r7, lr}
 80138ce:	b089      	sub	sp, #36	; 0x24
 80138d0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80138d2:	4b28      	ldr	r3, [pc, #160]	; (8013974 <_tx_timer_initialize+0xa8>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80138d8:	4b27      	ldr	r3, [pc, #156]	; (8013978 <_tx_timer_initialize+0xac>)
 80138da:	2200      	movs	r2, #0
 80138dc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80138de:	4b27      	ldr	r3, [pc, #156]	; (801397c <_tx_timer_initialize+0xb0>)
 80138e0:	2200      	movs	r2, #0
 80138e2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80138e4:	4b26      	ldr	r3, [pc, #152]	; (8013980 <_tx_timer_initialize+0xb4>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80138ea:	4b26      	ldr	r3, [pc, #152]	; (8013984 <_tx_timer_initialize+0xb8>)
 80138ec:	2200      	movs	r2, #0
 80138ee:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80138f0:	2280      	movs	r2, #128	; 0x80
 80138f2:	2100      	movs	r1, #0
 80138f4:	4824      	ldr	r0, [pc, #144]	; (8013988 <_tx_timer_initialize+0xbc>)
 80138f6:	f000 fd37 	bl	8014368 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80138fa:	4b24      	ldr	r3, [pc, #144]	; (801398c <_tx_timer_initialize+0xc0>)
 80138fc:	4a22      	ldr	r2, [pc, #136]	; (8013988 <_tx_timer_initialize+0xbc>)
 80138fe:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8013900:	4b23      	ldr	r3, [pc, #140]	; (8013990 <_tx_timer_initialize+0xc4>)
 8013902:	4a21      	ldr	r2, [pc, #132]	; (8013988 <_tx_timer_initialize+0xbc>)
 8013904:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8013906:	4b23      	ldr	r3, [pc, #140]	; (8013994 <_tx_timer_initialize+0xc8>)
 8013908:	4a23      	ldr	r2, [pc, #140]	; (8013998 <_tx_timer_initialize+0xcc>)
 801390a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801390c:	4b21      	ldr	r3, [pc, #132]	; (8013994 <_tx_timer_initialize+0xc8>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	3304      	adds	r3, #4
 8013912:	4a20      	ldr	r2, [pc, #128]	; (8013994 <_tx_timer_initialize+0xc8>)
 8013914:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8013916:	4b21      	ldr	r3, [pc, #132]	; (801399c <_tx_timer_initialize+0xd0>)
 8013918:	4a21      	ldr	r2, [pc, #132]	; (80139a0 <_tx_timer_initialize+0xd4>)
 801391a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801391c:	4b21      	ldr	r3, [pc, #132]	; (80139a4 <_tx_timer_initialize+0xd8>)
 801391e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013922:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8013924:	4b20      	ldr	r3, [pc, #128]	; (80139a8 <_tx_timer_initialize+0xdc>)
 8013926:	2200      	movs	r2, #0
 8013928:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801392a:	4b1c      	ldr	r3, [pc, #112]	; (801399c <_tx_timer_initialize+0xd0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a1d      	ldr	r2, [pc, #116]	; (80139a4 <_tx_timer_initialize+0xd8>)
 8013930:	6812      	ldr	r2, [r2, #0]
 8013932:	491d      	ldr	r1, [pc, #116]	; (80139a8 <_tx_timer_initialize+0xdc>)
 8013934:	6809      	ldr	r1, [r1, #0]
 8013936:	481c      	ldr	r0, [pc, #112]	; (80139a8 <_tx_timer_initialize+0xdc>)
 8013938:	6800      	ldr	r0, [r0, #0]
 801393a:	2400      	movs	r4, #0
 801393c:	9405      	str	r4, [sp, #20]
 801393e:	2400      	movs	r4, #0
 8013940:	9404      	str	r4, [sp, #16]
 8013942:	9003      	str	r0, [sp, #12]
 8013944:	9102      	str	r1, [sp, #8]
 8013946:	9201      	str	r2, [sp, #4]
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	4b18      	ldr	r3, [pc, #96]	; (80139ac <_tx_timer_initialize+0xe0>)
 801394c:	4a18      	ldr	r2, [pc, #96]	; (80139b0 <_tx_timer_initialize+0xe4>)
 801394e:	4919      	ldr	r1, [pc, #100]	; (80139b4 <_tx_timer_initialize+0xe8>)
 8013950:	4819      	ldr	r0, [pc, #100]	; (80139b8 <_tx_timer_initialize+0xec>)
 8013952:	f7ff f9a7 	bl	8012ca4 <_tx_thread_create>
 8013956:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d1e5      	bne.n	801392a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801395e:	4b17      	ldr	r3, [pc, #92]	; (80139bc <_tx_timer_initialize+0xf0>)
 8013960:	2200      	movs	r2, #0
 8013962:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8013964:	4b16      	ldr	r3, [pc, #88]	; (80139c0 <_tx_timer_initialize+0xf4>)
 8013966:	2200      	movs	r2, #0
 8013968:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801396a:	bf00      	nop
 801396c:	370c      	adds	r7, #12
 801396e:	46bd      	mov	sp, r7
 8013970:	bd90      	pop	{r4, r7, pc}
 8013972:	bf00      	nop
 8013974:	240036f0 	.word	0x240036f0
 8013978:	24003c50 	.word	0x24003c50
 801397c:	240036f4 	.word	0x240036f4
 8013980:	24003784 	.word	0x24003784
 8013984:	24003790 	.word	0x24003790
 8013988:	240036f8 	.word	0x240036f8
 801398c:	24003778 	.word	0x24003778
 8013990:	24003780 	.word	0x24003780
 8013994:	2400377c 	.word	0x2400377c
 8013998:	24003774 	.word	0x24003774
 801399c:	24003844 	.word	0x24003844
 80139a0:	24003850 	.word	0x24003850
 80139a4:	24003848 	.word	0x24003848
 80139a8:	2400384c 	.word	0x2400384c
 80139ac:	4154494d 	.word	0x4154494d
 80139b0:	08013af9 	.word	0x08013af9
 80139b4:	080144b0 	.word	0x080144b0
 80139b8:	24003794 	.word	0x24003794
 80139bc:	24003788 	.word	0x24003788
 80139c0:	2400378c 	.word	0x2400378c

080139c4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b089      	sub	sp, #36	; 0x24
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d04a      	beq.n	8013a6e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139de:	d046      	beq.n	8013a6e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	699b      	ldr	r3, [r3, #24]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d142      	bne.n	8013a6e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b20      	cmp	r3, #32
 80139ec:	d902      	bls.n	80139f4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80139ee:	231f      	movs	r3, #31
 80139f0:	61bb      	str	r3, [r7, #24]
 80139f2:	e002      	b.n	80139fa <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	3b01      	subs	r3, #1
 80139f8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80139fa:	4b20      	ldr	r3, [pc, #128]	; (8013a7c <_tx_timer_system_activate+0xb8>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	4413      	add	r3, r2
 8013a04:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8013a06:	4b1e      	ldr	r3, [pc, #120]	; (8013a80 <_tx_timer_system_activate+0xbc>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	69fa      	ldr	r2, [r7, #28]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d30b      	bcc.n	8013a28 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8013a10:	4b1b      	ldr	r3, [pc, #108]	; (8013a80 <_tx_timer_system_activate+0xbc>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	69fa      	ldr	r2, [r7, #28]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	109b      	asrs	r3, r3, #2
 8013a1a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8013a1c:	4b19      	ldr	r3, [pc, #100]	; (8013a84 <_tx_timer_system_activate+0xc0>)
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	4413      	add	r3, r2
 8013a26:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d109      	bne.n	8013a44 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	687a      	ldr	r2, [r7, #4]
 8013a3a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	e011      	b.n	8013a68 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	695b      	ldr	r3, [r3, #20]
 8013a4e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	68ba      	ldr	r2, [r7, #8]
 8013a66:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	69fa      	ldr	r2, [r7, #28]
 8013a6c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8013a6e:	bf00      	nop
 8013a70:	3724      	adds	r7, #36	; 0x24
 8013a72:	46bd      	mov	sp, r7
 8013a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a78:	4770      	bx	lr
 8013a7a:	bf00      	nop
 8013a7c:	24003780 	.word	0x24003780
 8013a80:	2400377c 	.word	0x2400377c
 8013a84:	24003778 	.word	0x24003778

08013a88 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b087      	sub	sp, #28
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	699b      	ldr	r3, [r3, #24]
 8013a94:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d026      	beq.n	8013aea <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	691b      	ldr	r3, [r3, #16]
 8013aa0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d108      	bne.n	8013abc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d117      	bne.n	8013ae4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	601a      	str	r2, [r3, #0]
 8013aba:	e013      	b.n	8013ae4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	68fa      	ldr	r2, [r7, #12]
 8013ac6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	693a      	ldr	r2, [r7, #16]
 8013acc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d105      	bne.n	8013ae4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8013ad8:	693b      	ldr	r3, [r7, #16]
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	693a      	ldr	r2, [r7, #16]
 8013ae2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	619a      	str	r2, [r3, #24]
    }
}
 8013aea:	bf00      	nop
 8013aec:	371c      	adds	r7, #28
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr
	...

08013af8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b098      	sub	sp, #96	; 0x60
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8013b00:	2300      	movs	r3, #0
 8013b02:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	4a73      	ldr	r2, [pc, #460]	; (8013cd4 <_tx_timer_thread_entry+0x1dc>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	f040 80de 	bne.w	8013cca <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8013b12:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8013b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8013b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b18:	b672      	cpsid	i
    return(int_posture);
 8013b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8013b1c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8013b1e:	4b6e      	ldr	r3, [pc, #440]	; (8013cd8 <_tx_timer_thread_entry+0x1e0>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d003      	beq.n	8013b34 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f107 020c 	add.w	r2, r7, #12
 8013b32:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8013b34:	4b68      	ldr	r3, [pc, #416]	; (8013cd8 <_tx_timer_thread_entry+0x1e0>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8013b3c:	4b66      	ldr	r3, [pc, #408]	; (8013cd8 <_tx_timer_thread_entry+0x1e0>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	3304      	adds	r3, #4
 8013b42:	4a65      	ldr	r2, [pc, #404]	; (8013cd8 <_tx_timer_thread_entry+0x1e0>)
 8013b44:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8013b46:	4b64      	ldr	r3, [pc, #400]	; (8013cd8 <_tx_timer_thread_entry+0x1e0>)
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	4b64      	ldr	r3, [pc, #400]	; (8013cdc <_tx_timer_thread_entry+0x1e4>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d103      	bne.n	8013b5a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8013b52:	4b63      	ldr	r3, [pc, #396]	; (8013ce0 <_tx_timer_thread_entry+0x1e8>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	4a60      	ldr	r2, [pc, #384]	; (8013cd8 <_tx_timer_thread_entry+0x1e0>)
 8013b58:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8013b5a:	4b62      	ldr	r3, [pc, #392]	; (8013ce4 <_tx_timer_thread_entry+0x1ec>)
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	601a      	str	r2, [r3, #0]
 8013b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b62:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b66:	f383 8810 	msr	PRIMASK, r3
}
 8013b6a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b70:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013b74:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b76:	b672      	cpsid	i
    return(int_posture);
 8013b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8013b7a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8013b7c:	e07f      	b.n	8013c7e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	691b      	ldr	r3, [r3, #16]
 8013b86:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8013b8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d102      	bne.n	8013b9a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8013b94:	2300      	movs	r3, #0
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	e00e      	b.n	8013bb8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8013b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b9c:	695b      	ldr	r3, [r3, #20]
 8013b9e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8013ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ba4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013baa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8013bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bae:	f107 020c 	add.w	r2, r7, #12
 8013bb2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8013bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bb6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8013bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	2b20      	cmp	r3, #32
 8013bbe:	d911      	bls.n	8013be4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8013bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8013bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bca:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8013bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bd2:	f107 0208 	add.w	r2, r7, #8
 8013bd6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8013bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013bdc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8013bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013be0:	60bb      	str	r3, [r7, #8]
 8013be2:	e01a      	b.n	8013c1a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8013be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013be6:	689b      	ldr	r3, [r3, #8]
 8013be8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8013bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8013bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bf2:	685a      	ldr	r2, [r3, #4]
 8013bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bf6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8013bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d009      	beq.n	8013c14 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8013c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c02:	f107 0208 	add.w	r2, r7, #8
 8013c06:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8013c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013c0c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8013c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c10:	60bb      	str	r3, [r7, #8]
 8013c12:	e002      	b.n	8013c1a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8013c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c16:	2200      	movs	r2, #0
 8013c18:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8013c1a:	4a33      	ldr	r2, [pc, #204]	; (8013ce8 <_tx_timer_thread_entry+0x1f0>)
 8013c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c1e:	6013      	str	r3, [r2, #0]
 8013c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	f383 8810 	msr	PRIMASK, r3
}
 8013c2a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8013c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8013c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013c36:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c38:	f3ef 8310 	mrs	r3, PRIMASK
 8013c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013c40:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c42:	b672      	cpsid	i
    return(int_posture);
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8013c46:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8013c48:	4b27      	ldr	r3, [pc, #156]	; (8013ce8 <_tx_timer_thread_entry+0x1f0>)
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d105      	bne.n	8013c62 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8013c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c58:	2200      	movs	r2, #0
 8013c5a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8013c5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013c5e:	f7ff feb1 	bl	80139c4 <_tx_timer_system_activate>
 8013c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	f383 8810 	msr	PRIMASK, r3
}
 8013c6c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8013c72:	623b      	str	r3, [r7, #32]
    return(posture);
 8013c74:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013c76:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c78:	b672      	cpsid	i
    return(int_posture);
 8013c7a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8013c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f47f af7c 	bne.w	8013b7e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8013c86:	4b17      	ldr	r3, [pc, #92]	; (8013ce4 <_tx_timer_thread_entry+0x1ec>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d116      	bne.n	8013cbc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8013c8e:	4b17      	ldr	r3, [pc, #92]	; (8013cec <_tx_timer_thread_entry+0x1f4>)
 8013c90:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8013c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c94:	2203      	movs	r2, #3
 8013c96:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8013c9e:	4b14      	ldr	r3, [pc, #80]	; (8013cf0 <_tx_timer_thread_entry+0x1f8>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	4a12      	ldr	r2, [pc, #72]	; (8013cf0 <_tx_timer_thread_entry+0x1f8>)
 8013ca6:	6013      	str	r3, [r2, #0]
 8013ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013caa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	f383 8810 	msr	PRIMASK, r3
}
 8013cb2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013cb4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013cb6:	f7ff fbbf 	bl	8013438 <_tx_thread_system_suspend>
 8013cba:	e728      	b.n	8013b0e <_tx_timer_thread_entry+0x16>
 8013cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cbe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	f383 8810 	msr	PRIMASK, r3
}
 8013cc6:	bf00      	nop
            TX_DISABLE
 8013cc8:	e721      	b.n	8013b0e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8013cca:	bf00      	nop
 8013ccc:	3760      	adds	r7, #96	; 0x60
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	4154494d 	.word	0x4154494d
 8013cd8:	24003780 	.word	0x24003780
 8013cdc:	2400377c 	.word	0x2400377c
 8013ce0:	24003778 	.word	0x24003778
 8013ce4:	24003784 	.word	0x24003784
 8013ce8:	24003790 	.word	0x24003790
 8013cec:	24003794 	.word	0x24003794
 8013cf0:	240036e4 	.word	0x240036e4

08013cf4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b08a      	sub	sp, #40	; 0x28
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
 8013d00:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013d02:	2300      	movs	r3, #0
 8013d04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d102      	bne.n	8013d12 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013d0c:	2302      	movs	r3, #2
 8013d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8013d10:	e029      	b.n	8013d66 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4a2d      	ldr	r2, [pc, #180]	; (8013dcc <_txe_byte_allocate+0xd8>)
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	d002      	beq.n	8013d22 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013d1c:	2302      	movs	r3, #2
 8013d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8013d20:	e021      	b.n	8013d66 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d102      	bne.n	8013d2e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8013d2c:	e01b      	b.n	8013d66 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d102      	bne.n	8013d3a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8013d34:	2305      	movs	r3, #5
 8013d36:	627b      	str	r3, [r7, #36]	; 0x24
 8013d38:	e015      	b.n	8013d66 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	69db      	ldr	r3, [r3, #28]
 8013d3e:	687a      	ldr	r2, [r7, #4]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d902      	bls.n	8013d4a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8013d44:	2305      	movs	r3, #5
 8013d46:	627b      	str	r3, [r7, #36]	; 0x24
 8013d48:	e00d      	b.n	8013d66 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d00a      	beq.n	8013d66 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d50:	f3ef 8305 	mrs	r3, IPSR
 8013d54:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8013d56:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013d58:	4b1d      	ldr	r3, [pc, #116]	; (8013dd0 <_txe_byte_allocate+0xdc>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4313      	orrs	r3, r2
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d001      	beq.n	8013d66 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013d62:	2304      	movs	r3, #4
 8013d64:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d108      	bne.n	8013d7e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013d6c:	4b19      	ldr	r3, [pc, #100]	; (8013dd4 <_txe_byte_allocate+0xe0>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013d72:	6a3b      	ldr	r3, [r7, #32]
 8013d74:	4a18      	ldr	r2, [pc, #96]	; (8013dd8 <_txe_byte_allocate+0xe4>)
 8013d76:	4293      	cmp	r3, r2
 8013d78:	d101      	bne.n	8013d7e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013d7a:	2313      	movs	r3, #19
 8013d7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d114      	bne.n	8013dae <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d84:	f3ef 8305 	mrs	r3, IPSR
 8013d88:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013d8a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013d8c:	4b10      	ldr	r3, [pc, #64]	; (8013dd0 <_txe_byte_allocate+0xdc>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4313      	orrs	r3, r2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00b      	beq.n	8013dae <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d96:	f3ef 8305 	mrs	r3, IPSR
 8013d9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013d9c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013d9e:	4b0c      	ldr	r3, [pc, #48]	; (8013dd0 <_txe_byte_allocate+0xdc>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4313      	orrs	r3, r2
 8013da4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013da8:	d201      	bcs.n	8013dae <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013daa:	2313      	movs	r3, #19
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d106      	bne.n	8013dc2 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	68b9      	ldr	r1, [r7, #8]
 8013dba:	68f8      	ldr	r0, [r7, #12]
 8013dbc:	f7fd fb74 	bl	80114a8 <_tx_byte_allocate>
 8013dc0:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8013dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3728      	adds	r7, #40	; 0x28
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	42595445 	.word	0x42595445
 8013dd0:	2400006c 	.word	0x2400006c
 8013dd4:	2400364c 	.word	0x2400364c
 8013dd8:	24003794 	.word	0x24003794

08013ddc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b092      	sub	sp, #72	; 0x48
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013dea:	2300      	movs	r3, #0
 8013dec:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d102      	bne.n	8013dfa <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013df4:	2302      	movs	r3, #2
 8013df6:	647b      	str	r3, [r7, #68]	; 0x44
 8013df8:	e075      	b.n	8013ee6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8013dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dfc:	2b34      	cmp	r3, #52	; 0x34
 8013dfe:	d002      	beq.n	8013e06 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013e00:	2302      	movs	r3, #2
 8013e02:	647b      	str	r3, [r7, #68]	; 0x44
 8013e04:	e06f      	b.n	8013ee6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e06:	f3ef 8310 	mrs	r3, PRIMASK
 8013e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e10:	b672      	cpsid	i
    return(int_posture);
 8013e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013e14:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013e16:	4b3b      	ldr	r3, [pc, #236]	; (8013f04 <_txe_byte_pool_create+0x128>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	4a39      	ldr	r2, [pc, #228]	; (8013f04 <_txe_byte_pool_create+0x128>)
 8013e1e:	6013      	str	r3, [r2, #0]
 8013e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e22:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e26:	f383 8810 	msr	PRIMASK, r3
}
 8013e2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8013e2c:	4b36      	ldr	r3, [pc, #216]	; (8013f08 <_txe_byte_pool_create+0x12c>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013e32:	2300      	movs	r3, #0
 8013e34:	643b      	str	r3, [r7, #64]	; 0x40
 8013e36:	e009      	b.n	8013e4c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d00b      	beq.n	8013e58 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8013e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e48:	3301      	adds	r3, #1
 8013e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8013e4c:	4b2f      	ldr	r3, [pc, #188]	; (8013f0c <_txe_byte_pool_create+0x130>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d3f0      	bcc.n	8013e38 <_txe_byte_pool_create+0x5c>
 8013e56:	e000      	b.n	8013e5a <_txe_byte_pool_create+0x7e>
                break;
 8013e58:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013e60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013e62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e64:	b672      	cpsid	i
    return(int_posture);
 8013e66:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013e68:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013e6a:	4b26      	ldr	r3, [pc, #152]	; (8013f04 <_txe_byte_pool_create+0x128>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	3b01      	subs	r3, #1
 8013e70:	4a24      	ldr	r2, [pc, #144]	; (8013f04 <_txe_byte_pool_create+0x128>)
 8013e72:	6013      	str	r3, [r2, #0]
 8013e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e76:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	f383 8810 	msr	PRIMASK, r3
}
 8013e7e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013e80:	f7ff f9a0 	bl	80131c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d102      	bne.n	8013e92 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013e8c:	2302      	movs	r3, #2
 8013e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8013e90:	e029      	b.n	8013ee6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d102      	bne.n	8013e9e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8013e98:	2303      	movs	r3, #3
 8013e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8013e9c:	e023      	b.n	8013ee6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	2b63      	cmp	r3, #99	; 0x63
 8013ea2:	d802      	bhi.n	8013eaa <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8013ea4:	2305      	movs	r3, #5
 8013ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8013ea8:	e01d      	b.n	8013ee6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013eaa:	4b19      	ldr	r3, [pc, #100]	; (8013f10 <_txe_byte_pool_create+0x134>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb2:	4a18      	ldr	r2, [pc, #96]	; (8013f14 <_txe_byte_pool_create+0x138>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d101      	bne.n	8013ebc <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013eb8:	2313      	movs	r3, #19
 8013eba:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ebc:	f3ef 8305 	mrs	r3, IPSR
 8013ec0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013ec2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013ec4:	4b14      	ldr	r3, [pc, #80]	; (8013f18 <_txe_byte_pool_create+0x13c>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d00b      	beq.n	8013ee6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ece:	f3ef 8305 	mrs	r3, IPSR
 8013ed2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013ed4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013ed6:	4b10      	ldr	r3, [pc, #64]	; (8013f18 <_txe_byte_pool_create+0x13c>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4313      	orrs	r3, r2
 8013edc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013ee0:	d201      	bcs.n	8013ee6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013ee2:	2313      	movs	r3, #19
 8013ee4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d106      	bne.n	8013efa <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	68b9      	ldr	r1, [r7, #8]
 8013ef2:	68f8      	ldr	r0, [r7, #12]
 8013ef4:	f7fd fc1a 	bl	801172c <_tx_byte_pool_create>
 8013ef8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8013efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3748      	adds	r7, #72	; 0x48
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	240036e4 	.word	0x240036e4
 8013f08:	2400363c 	.word	0x2400363c
 8013f0c:	24003640 	.word	0x24003640
 8013f10:	2400364c 	.word	0x2400364c
 8013f14:	24003794 	.word	0x24003794
 8013f18:	2400006c 	.word	0x2400006c

08013f1c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b092      	sub	sp, #72	; 0x48
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	607a      	str	r2, [r7, #4]
 8013f28:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d102      	bne.n	8013f3a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013f34:	230c      	movs	r3, #12
 8013f36:	647b      	str	r3, [r7, #68]	; 0x44
 8013f38:	e054      	b.n	8013fe4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	2b1c      	cmp	r3, #28
 8013f3e:	d002      	beq.n	8013f46 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013f40:	230c      	movs	r3, #12
 8013f42:	647b      	str	r3, [r7, #68]	; 0x44
 8013f44:	e04e      	b.n	8013fe4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f46:	f3ef 8310 	mrs	r3, PRIMASK
 8013f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f50:	b672      	cpsid	i
    return(int_posture);
 8013f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013f54:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013f56:	4b36      	ldr	r3, [pc, #216]	; (8014030 <_txe_semaphore_create+0x114>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	4a34      	ldr	r2, [pc, #208]	; (8014030 <_txe_semaphore_create+0x114>)
 8013f5e:	6013      	str	r3, [r2, #0]
 8013f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f62:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f66:	f383 8810 	msr	PRIMASK, r3
}
 8013f6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8013f6c:	4b31      	ldr	r3, [pc, #196]	; (8014034 <_txe_semaphore_create+0x118>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8013f72:	2300      	movs	r3, #0
 8013f74:	643b      	str	r3, [r7, #64]	; 0x40
 8013f76:	e009      	b.n	8013f8c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d00b      	beq.n	8013f98 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8013f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f82:	695b      	ldr	r3, [r3, #20]
 8013f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8013f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f88:	3301      	adds	r3, #1
 8013f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8013f8c:	4b2a      	ldr	r3, [pc, #168]	; (8014038 <_txe_semaphore_create+0x11c>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d3f0      	bcc.n	8013f78 <_txe_semaphore_create+0x5c>
 8013f96:	e000      	b.n	8013f9a <_txe_semaphore_create+0x7e>
                break;
 8013f98:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f9e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013fa0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013fa2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013fa4:	b672      	cpsid	i
    return(int_posture);
 8013fa6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013fa8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013faa:	4b21      	ldr	r3, [pc, #132]	; (8014030 <_txe_semaphore_create+0x114>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	3b01      	subs	r3, #1
 8013fb0:	4a1f      	ldr	r2, [pc, #124]	; (8014030 <_txe_semaphore_create+0x114>)
 8013fb2:	6013      	str	r3, [r2, #0]
 8013fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fba:	f383 8810 	msr	PRIMASK, r3
}
 8013fbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013fc0:	f7ff f900 	bl	80131c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d102      	bne.n	8013fd2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8013fcc:	230c      	movs	r3, #12
 8013fce:	647b      	str	r3, [r7, #68]	; 0x44
 8013fd0:	e008      	b.n	8013fe4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013fd2:	4b1a      	ldr	r3, [pc, #104]	; (801403c <_txe_semaphore_create+0x120>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fda:	4a19      	ldr	r2, [pc, #100]	; (8014040 <_txe_semaphore_create+0x124>)
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d101      	bne.n	8013fe4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013fe0:	2313      	movs	r3, #19
 8013fe2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d114      	bne.n	8014014 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013fea:	f3ef 8305 	mrs	r3, IPSR
 8013fee:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013ff0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013ff2:	4b14      	ldr	r3, [pc, #80]	; (8014044 <_txe_semaphore_create+0x128>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	4313      	orrs	r3, r2
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00b      	beq.n	8014014 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ffc:	f3ef 8305 	mrs	r3, IPSR
 8014000:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014002:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014004:	4b0f      	ldr	r3, [pc, #60]	; (8014044 <_txe_semaphore_create+0x128>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	4313      	orrs	r3, r2
 801400a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801400e:	d201      	bcs.n	8014014 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014010:	2313      	movs	r3, #19
 8014012:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014016:	2b00      	cmp	r3, #0
 8014018:	d105      	bne.n	8014026 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	68b9      	ldr	r1, [r7, #8]
 801401e:	68f8      	ldr	r0, [r7, #12]
 8014020:	f7fe fc74 	bl	801290c <_tx_semaphore_create>
 8014024:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014028:	4618      	mov	r0, r3
 801402a:	3748      	adds	r7, #72	; 0x48
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	240036e4 	.word	0x240036e4
 8014034:	24003614 	.word	0x24003614
 8014038:	24003618 	.word	0x24003618
 801403c:	2400364c 	.word	0x2400364c
 8014040:	24003794 	.word	0x24003794
 8014044:	2400006c 	.word	0x2400006c

08014048 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b086      	sub	sp, #24
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014050:	2300      	movs	r3, #0
 8014052:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d102      	bne.n	8014060 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801405a:	230c      	movs	r3, #12
 801405c:	617b      	str	r3, [r7, #20]
 801405e:	e01c      	b.n	801409a <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4a13      	ldr	r2, [pc, #76]	; (80140b4 <_txe_semaphore_delete+0x6c>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d002      	beq.n	8014070 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801406a:	230c      	movs	r3, #12
 801406c:	617b      	str	r3, [r7, #20]
 801406e:	e014      	b.n	801409a <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014070:	f3ef 8305 	mrs	r3, IPSR
 8014074:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014076:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014078:	4b0f      	ldr	r3, [pc, #60]	; (80140b8 <_txe_semaphore_delete+0x70>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	4313      	orrs	r3, r2
 801407e:	2b00      	cmp	r3, #0
 8014080:	d002      	beq.n	8014088 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014082:	2313      	movs	r3, #19
 8014084:	617b      	str	r3, [r7, #20]
 8014086:	e008      	b.n	801409a <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014088:	4b0c      	ldr	r3, [pc, #48]	; (80140bc <_txe_semaphore_delete+0x74>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	4a0b      	ldr	r2, [pc, #44]	; (80140c0 <_txe_semaphore_delete+0x78>)
 8014092:	4293      	cmp	r3, r2
 8014094:	d101      	bne.n	801409a <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014096:	2313      	movs	r3, #19
 8014098:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d103      	bne.n	80140a8 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f7fe fc85 	bl	80129b0 <_tx_semaphore_delete>
 80140a6:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80140a8:	697b      	ldr	r3, [r7, #20]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3718      	adds	r7, #24
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop
 80140b4:	53454d41 	.word	0x53454d41
 80140b8:	2400006c 	.word	0x2400006c
 80140bc:	2400364c 	.word	0x2400364c
 80140c0:	24003794 	.word	0x24003794

080140c4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b086      	sub	sp, #24
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80140ce:	2300      	movs	r3, #0
 80140d0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d102      	bne.n	80140de <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80140d8:	230c      	movs	r3, #12
 80140da:	617b      	str	r3, [r7, #20]
 80140dc:	e01f      	b.n	801411e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	4a15      	ldr	r2, [pc, #84]	; (8014138 <_txe_semaphore_get+0x74>)
 80140e4:	4293      	cmp	r3, r2
 80140e6:	d002      	beq.n	80140ee <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80140e8:	230c      	movs	r3, #12
 80140ea:	617b      	str	r3, [r7, #20]
 80140ec:	e017      	b.n	801411e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d014      	beq.n	801411e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80140f4:	f3ef 8305 	mrs	r3, IPSR
 80140f8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80140fa:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80140fc:	4b0f      	ldr	r3, [pc, #60]	; (801413c <_txe_semaphore_get+0x78>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	4313      	orrs	r3, r2
 8014102:	2b00      	cmp	r3, #0
 8014104:	d002      	beq.n	801410c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014106:	2304      	movs	r3, #4
 8014108:	617b      	str	r3, [r7, #20]
 801410a:	e008      	b.n	801411e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801410c:	4b0c      	ldr	r3, [pc, #48]	; (8014140 <_txe_semaphore_get+0x7c>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	4a0b      	ldr	r2, [pc, #44]	; (8014144 <_txe_semaphore_get+0x80>)
 8014116:	4293      	cmp	r3, r2
 8014118:	d101      	bne.n	801411e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801411a:	2304      	movs	r3, #4
 801411c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d104      	bne.n	801412e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f7fe fcd2 	bl	8012ad0 <_tx_semaphore_get>
 801412c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801412e:	697b      	ldr	r3, [r7, #20]
}
 8014130:	4618      	mov	r0, r3
 8014132:	3718      	adds	r7, #24
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}
 8014138:	53454d41 	.word	0x53454d41
 801413c:	2400006c 	.word	0x2400006c
 8014140:	2400364c 	.word	0x2400364c
 8014144:	24003794 	.word	0x24003794

08014148 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d102      	bne.n	801415c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014156:	230c      	movs	r3, #12
 8014158:	60fb      	str	r3, [r7, #12]
 801415a:	e00b      	b.n	8014174 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4a07      	ldr	r2, [pc, #28]	; (8014180 <_txe_semaphore_put+0x38>)
 8014162:	4293      	cmp	r3, r2
 8014164:	d002      	beq.n	801416c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014166:	230c      	movs	r3, #12
 8014168:	60fb      	str	r3, [r7, #12]
 801416a:	e003      	b.n	8014174 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f7fe fd41 	bl	8012bf4 <_tx_semaphore_put>
 8014172:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014174:	68fb      	ldr	r3, [r7, #12]
}
 8014176:	4618      	mov	r0, r3
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	53454d41 	.word	0x53454d41

08014184 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b09a      	sub	sp, #104	; 0x68
 8014188:	af06      	add	r7, sp, #24
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	607a      	str	r2, [r7, #4]
 8014190:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014192:	2300      	movs	r3, #0
 8014194:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d102      	bne.n	80141a2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801419c:	230e      	movs	r3, #14
 801419e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141a0:	e0bb      	b.n	801431a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80141a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80141a4:	2bb0      	cmp	r3, #176	; 0xb0
 80141a6:	d002      	beq.n	80141ae <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80141a8:	230e      	movs	r3, #14
 80141aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141ac:	e0b5      	b.n	801431a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141ae:	f3ef 8310 	mrs	r3, PRIMASK
 80141b2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80141b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80141b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80141b8:	b672      	cpsid	i
    return(int_posture);
 80141ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80141bc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80141be:	4b64      	ldr	r3, [pc, #400]	; (8014350 <_txe_thread_create+0x1cc>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	3301      	adds	r3, #1
 80141c4:	4a62      	ldr	r2, [pc, #392]	; (8014350 <_txe_thread_create+0x1cc>)
 80141c6:	6013      	str	r3, [r2, #0]
 80141c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ce:	f383 8810 	msr	PRIMASK, r3
}
 80141d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80141d4:	2300      	movs	r3, #0
 80141d6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80141d8:	4b5e      	ldr	r3, [pc, #376]	; (8014354 <_txe_thread_create+0x1d0>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80141de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80141e0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80141e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141e4:	3b01      	subs	r3, #1
 80141e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141e8:	4413      	add	r3, r2
 80141ea:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80141ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ee:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80141f0:	2300      	movs	r3, #0
 80141f2:	647b      	str	r3, [r7, #68]	; 0x44
 80141f4:	e02b      	b.n	801424e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d101      	bne.n	8014202 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80141fe:	2301      	movs	r3, #1
 8014200:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8014202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014204:	2b01      	cmp	r3, #1
 8014206:	d028      	beq.n	801425a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8014208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801420e:	429a      	cmp	r2, r3
 8014210:	d308      	bcc.n	8014224 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8014212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014214:	691b      	ldr	r3, [r3, #16]
 8014216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014218:	429a      	cmp	r2, r3
 801421a:	d203      	bcs.n	8014224 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801421c:	2300      	movs	r3, #0
 801421e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014220:	2301      	movs	r3, #1
 8014222:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801422a:	429a      	cmp	r2, r3
 801422c:	d308      	bcc.n	8014240 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014230:	691b      	ldr	r3, [r3, #16]
 8014232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014234:	429a      	cmp	r2, r3
 8014236:	d203      	bcs.n	8014240 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014238:	2300      	movs	r3, #0
 801423a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801423c:	2301      	movs	r3, #1
 801423e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8014240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014246:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801424a:	3301      	adds	r3, #1
 801424c:	647b      	str	r3, [r7, #68]	; 0x44
 801424e:	4b42      	ldr	r3, [pc, #264]	; (8014358 <_txe_thread_create+0x1d4>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014254:	429a      	cmp	r2, r3
 8014256:	d3ce      	bcc.n	80141f6 <_txe_thread_create+0x72>
 8014258:	e000      	b.n	801425c <_txe_thread_create+0xd8>
                break;
 801425a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801425c:	f3ef 8310 	mrs	r3, PRIMASK
 8014260:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014262:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014264:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014266:	b672      	cpsid	i
    return(int_posture);
 8014268:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801426a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801426c:	4b38      	ldr	r3, [pc, #224]	; (8014350 <_txe_thread_create+0x1cc>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	3b01      	subs	r3, #1
 8014272:	4a37      	ldr	r2, [pc, #220]	; (8014350 <_txe_thread_create+0x1cc>)
 8014274:	6013      	str	r3, [r2, #0]
 8014276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014278:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801427a:	6a3b      	ldr	r3, [r7, #32]
 801427c:	f383 8810 	msr	PRIMASK, r3
}
 8014280:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014282:	f7fe ff9f 	bl	80131c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8014286:	68fa      	ldr	r2, [r7, #12]
 8014288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801428a:	429a      	cmp	r2, r3
 801428c:	d102      	bne.n	8014294 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801428e:	230e      	movs	r3, #14
 8014290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014292:	e042      	b.n	801431a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8014294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014296:	2b00      	cmp	r3, #0
 8014298:	d102      	bne.n	80142a0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801429a:	2303      	movs	r3, #3
 801429c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801429e:	e03c      	b.n	801431a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d102      	bne.n	80142ac <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80142a6:	2303      	movs	r3, #3
 80142a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142aa:	e036      	b.n	801431a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80142ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142ae:	2bc7      	cmp	r3, #199	; 0xc7
 80142b0:	d802      	bhi.n	80142b8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80142b2:	2305      	movs	r3, #5
 80142b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142b6:	e030      	b.n	801431a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80142b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80142ba:	2b1f      	cmp	r3, #31
 80142bc:	d902      	bls.n	80142c4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80142be:	230f      	movs	r3, #15
 80142c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142c2:	e02a      	b.n	801431a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80142c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80142c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d902      	bls.n	80142d2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80142cc:	2318      	movs	r3, #24
 80142ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142d0:	e023      	b.n	801431a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80142d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	d902      	bls.n	80142de <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80142d8:	2310      	movs	r3, #16
 80142da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142dc:	e01d      	b.n	801431a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80142de:	4b1f      	ldr	r3, [pc, #124]	; (801435c <_txe_thread_create+0x1d8>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80142e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e6:	4a1e      	ldr	r2, [pc, #120]	; (8014360 <_txe_thread_create+0x1dc>)
 80142e8:	4293      	cmp	r3, r2
 80142ea:	d101      	bne.n	80142f0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80142ec:	2313      	movs	r3, #19
 80142ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80142f0:	f3ef 8305 	mrs	r3, IPSR
 80142f4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80142f6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80142f8:	4b1a      	ldr	r3, [pc, #104]	; (8014364 <_txe_thread_create+0x1e0>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4313      	orrs	r3, r2
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d00b      	beq.n	801431a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014302:	f3ef 8305 	mrs	r3, IPSR
 8014306:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014308:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801430a:	4b16      	ldr	r3, [pc, #88]	; (8014364 <_txe_thread_create+0x1e0>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	4313      	orrs	r3, r2
 8014310:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014314:	d201      	bcs.n	801431a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014316:	2313      	movs	r3, #19
 8014318:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801431a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801431c:	2b00      	cmp	r3, #0
 801431e:	d112      	bne.n	8014346 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014322:	9305      	str	r3, [sp, #20]
 8014324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014326:	9304      	str	r3, [sp, #16]
 8014328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801432a:	9303      	str	r3, [sp, #12]
 801432c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801432e:	9302      	str	r3, [sp, #8]
 8014330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014332:	9301      	str	r3, [sp, #4]
 8014334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014336:	9300      	str	r3, [sp, #0]
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	687a      	ldr	r2, [r7, #4]
 801433c:	68b9      	ldr	r1, [r7, #8]
 801433e:	68f8      	ldr	r0, [r7, #12]
 8014340:	f7fe fcb0 	bl	8012ca4 <_tx_thread_create>
 8014344:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014348:	4618      	mov	r0, r3
 801434a:	3750      	adds	r7, #80	; 0x50
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	240036e4 	.word	0x240036e4
 8014354:	24003654 	.word	0x24003654
 8014358:	24003658 	.word	0x24003658
 801435c:	2400364c 	.word	0x2400364c
 8014360:	24003794 	.word	0x24003794
 8014364:	2400006c 	.word	0x2400006c

08014368 <memset>:
 8014368:	4402      	add	r2, r0
 801436a:	4603      	mov	r3, r0
 801436c:	4293      	cmp	r3, r2
 801436e:	d100      	bne.n	8014372 <memset+0xa>
 8014370:	4770      	bx	lr
 8014372:	f803 1b01 	strb.w	r1, [r3], #1
 8014376:	e7f9      	b.n	801436c <memset+0x4>

08014378 <__libc_init_array>:
 8014378:	b570      	push	{r4, r5, r6, lr}
 801437a:	4d0d      	ldr	r5, [pc, #52]	; (80143b0 <__libc_init_array+0x38>)
 801437c:	4c0d      	ldr	r4, [pc, #52]	; (80143b4 <__libc_init_array+0x3c>)
 801437e:	1b64      	subs	r4, r4, r5
 8014380:	10a4      	asrs	r4, r4, #2
 8014382:	2600      	movs	r6, #0
 8014384:	42a6      	cmp	r6, r4
 8014386:	d109      	bne.n	801439c <__libc_init_array+0x24>
 8014388:	4d0b      	ldr	r5, [pc, #44]	; (80143b8 <__libc_init_array+0x40>)
 801438a:	4c0c      	ldr	r4, [pc, #48]	; (80143bc <__libc_init_array+0x44>)
 801438c:	f000 f826 	bl	80143dc <_init>
 8014390:	1b64      	subs	r4, r4, r5
 8014392:	10a4      	asrs	r4, r4, #2
 8014394:	2600      	movs	r6, #0
 8014396:	42a6      	cmp	r6, r4
 8014398:	d105      	bne.n	80143a6 <__libc_init_array+0x2e>
 801439a:	bd70      	pop	{r4, r5, r6, pc}
 801439c:	f855 3b04 	ldr.w	r3, [r5], #4
 80143a0:	4798      	blx	r3
 80143a2:	3601      	adds	r6, #1
 80143a4:	e7ee      	b.n	8014384 <__libc_init_array+0xc>
 80143a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80143aa:	4798      	blx	r3
 80143ac:	3601      	adds	r6, #1
 80143ae:	e7f2      	b.n	8014396 <__libc_init_array+0x1e>
 80143b0:	080144dc 	.word	0x080144dc
 80143b4:	080144dc 	.word	0x080144dc
 80143b8:	080144dc 	.word	0x080144dc
 80143bc:	080144e0 	.word	0x080144e0

080143c0 <memcpy>:
 80143c0:	440a      	add	r2, r1
 80143c2:	4291      	cmp	r1, r2
 80143c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80143c8:	d100      	bne.n	80143cc <memcpy+0xc>
 80143ca:	4770      	bx	lr
 80143cc:	b510      	push	{r4, lr}
 80143ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143d6:	4291      	cmp	r1, r2
 80143d8:	d1f9      	bne.n	80143ce <memcpy+0xe>
 80143da:	bd10      	pop	{r4, pc}

080143dc <_init>:
 80143dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143de:	bf00      	nop
 80143e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143e2:	bc08      	pop	{r3}
 80143e4:	469e      	mov	lr, r3
 80143e6:	4770      	bx	lr

080143e8 <_fini>:
 80143e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ea:	bf00      	nop
 80143ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ee:	bc08      	pop	{r3}
 80143f0:	469e      	mov	lr, r3
 80143f2:	4770      	bx	lr
