
fx_sd33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014844  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08014ae4  08014ae4  00024ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014bc8  08014bc8  00024bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014bd0  08014bd0  00024bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014bd4  08014bd4  00024bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  08014bd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003c14  24000080  08014c48  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24003c94  08014c48  00033c94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003009e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004a98a  00000000  00000000  000300e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a878  00000000  00000000  0007aa6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d18  00000000  00000000  000852e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001472  00000000  00000000  00087000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042b7f  00000000  00000000  00088472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ff46  00000000  00000000  000caff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170480  00000000  00000000  0010af37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005ea0  00000000  00000000  0027b3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000fe  00000000  00000000  00281258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014acc 	.word	0x08014acc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08014acc 	.word	0x08014acc

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24003688 	.word	0x24003688
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24003724 	.word	0x24003724
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	2400368c 	.word	0x2400368c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24003690 	.word	0x24003690
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24003c90 	.word	0x24003c90

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f013 fd5d 	bl	8013f78 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f013 fc48 	bl	8013d58 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24003730 	.word	0x24003730
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24003c90 	.word	0x24003c90
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24003734 	.word	0x24003734
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	240037c0 	.word	0x240037c0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	240037c4 	.word	0x240037c4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	240037bc 	.word	0x240037bc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	240037b8 	.word	0x240037b8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24003724 	.word	0x24003724
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	2400368c 	.word	0x2400368c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24003690 	.word	0x24003690
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04

08000518 <__aeabi_uldivmod>:
 8000518:	b953      	cbnz	r3, 8000530 <__aeabi_uldivmod+0x18>
 800051a:	b94a      	cbnz	r2, 8000530 <__aeabi_uldivmod+0x18>
 800051c:	2900      	cmp	r1, #0
 800051e:	bf08      	it	eq
 8000520:	2800      	cmpeq	r0, #0
 8000522:	bf1c      	itt	ne
 8000524:	f04f 31ff 	movne.w	r1, #4294967295
 8000528:	f04f 30ff 	movne.w	r0, #4294967295
 800052c:	f000 b970 	b.w	8000810 <__aeabi_idiv0>
 8000530:	f1ad 0c08 	sub.w	ip, sp, #8
 8000534:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000538:	f000 f806 	bl	8000548 <__udivmoddi4>
 800053c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000544:	b004      	add	sp, #16
 8000546:	4770      	bx	lr

08000548 <__udivmoddi4>:
 8000548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800054c:	9e08      	ldr	r6, [sp, #32]
 800054e:	460d      	mov	r5, r1
 8000550:	4604      	mov	r4, r0
 8000552:	460f      	mov	r7, r1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d14a      	bne.n	80005ee <__udivmoddi4+0xa6>
 8000558:	428a      	cmp	r2, r1
 800055a:	4694      	mov	ip, r2
 800055c:	d965      	bls.n	800062a <__udivmoddi4+0xe2>
 800055e:	fab2 f382 	clz	r3, r2
 8000562:	b143      	cbz	r3, 8000576 <__udivmoddi4+0x2e>
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	f1c3 0220 	rsb	r2, r3, #32
 800056c:	409f      	lsls	r7, r3
 800056e:	fa20 f202 	lsr.w	r2, r0, r2
 8000572:	4317      	orrs	r7, r2
 8000574:	409c      	lsls	r4, r3
 8000576:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800057a:	fa1f f58c 	uxth.w	r5, ip
 800057e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000582:	0c22      	lsrs	r2, r4, #16
 8000584:	fb0e 7711 	mls	r7, lr, r1, r7
 8000588:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800058c:	fb01 f005 	mul.w	r0, r1, r5
 8000590:	4290      	cmp	r0, r2
 8000592:	d90a      	bls.n	80005aa <__udivmoddi4+0x62>
 8000594:	eb1c 0202 	adds.w	r2, ip, r2
 8000598:	f101 37ff 	add.w	r7, r1, #4294967295
 800059c:	f080 811c 	bcs.w	80007d8 <__udivmoddi4+0x290>
 80005a0:	4290      	cmp	r0, r2
 80005a2:	f240 8119 	bls.w	80007d8 <__udivmoddi4+0x290>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	1a12      	subs	r2, r2, r0
 80005ac:	b2a4      	uxth	r4, r4
 80005ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80005b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80005b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005ba:	fb00 f505 	mul.w	r5, r0, r5
 80005be:	42a5      	cmp	r5, r4
 80005c0:	d90a      	bls.n	80005d8 <__udivmoddi4+0x90>
 80005c2:	eb1c 0404 	adds.w	r4, ip, r4
 80005c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80005ca:	f080 8107 	bcs.w	80007dc <__udivmoddi4+0x294>
 80005ce:	42a5      	cmp	r5, r4
 80005d0:	f240 8104 	bls.w	80007dc <__udivmoddi4+0x294>
 80005d4:	4464      	add	r4, ip
 80005d6:	3802      	subs	r0, #2
 80005d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005dc:	1b64      	subs	r4, r4, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	b11e      	cbz	r6, 80005ea <__udivmoddi4+0xa2>
 80005e2:	40dc      	lsrs	r4, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	e9c6 4300 	strd	r4, r3, [r6]
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0xbc>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	f000 80ed 	beq.w	80007d2 <__udivmoddi4+0x28a>
 80005f8:	2100      	movs	r1, #0
 80005fa:	e9c6 0500 	strd	r0, r5, [r6]
 80005fe:	4608      	mov	r0, r1
 8000600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000604:	fab3 f183 	clz	r1, r3
 8000608:	2900      	cmp	r1, #0
 800060a:	d149      	bne.n	80006a0 <__udivmoddi4+0x158>
 800060c:	42ab      	cmp	r3, r5
 800060e:	d302      	bcc.n	8000616 <__udivmoddi4+0xce>
 8000610:	4282      	cmp	r2, r0
 8000612:	f200 80f8 	bhi.w	8000806 <__udivmoddi4+0x2be>
 8000616:	1a84      	subs	r4, r0, r2
 8000618:	eb65 0203 	sbc.w	r2, r5, r3
 800061c:	2001      	movs	r0, #1
 800061e:	4617      	mov	r7, r2
 8000620:	2e00      	cmp	r6, #0
 8000622:	d0e2      	beq.n	80005ea <__udivmoddi4+0xa2>
 8000624:	e9c6 4700 	strd	r4, r7, [r6]
 8000628:	e7df      	b.n	80005ea <__udivmoddi4+0xa2>
 800062a:	b902      	cbnz	r2, 800062e <__udivmoddi4+0xe6>
 800062c:	deff      	udf	#255	; 0xff
 800062e:	fab2 f382 	clz	r3, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8090 	bne.w	8000758 <__udivmoddi4+0x210>
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800063e:	fa1f fe8c 	uxth.w	lr, ip
 8000642:	2101      	movs	r1, #1
 8000644:	fbb2 f5f7 	udiv	r5, r2, r7
 8000648:	fb07 2015 	mls	r0, r7, r5, r2
 800064c:	0c22      	lsrs	r2, r4, #16
 800064e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000652:	fb0e f005 	mul.w	r0, lr, r5
 8000656:	4290      	cmp	r0, r2
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x124>
 800065a:	eb1c 0202 	adds.w	r2, ip, r2
 800065e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000662:	d202      	bcs.n	800066a <__udivmoddi4+0x122>
 8000664:	4290      	cmp	r0, r2
 8000666:	f200 80cb 	bhi.w	8000800 <__udivmoddi4+0x2b8>
 800066a:	4645      	mov	r5, r8
 800066c:	1a12      	subs	r2, r2, r0
 800066e:	b2a4      	uxth	r4, r4
 8000670:	fbb2 f0f7 	udiv	r0, r2, r7
 8000674:	fb07 2210 	mls	r2, r7, r0, r2
 8000678:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800067c:	fb0e fe00 	mul.w	lr, lr, r0
 8000680:	45a6      	cmp	lr, r4
 8000682:	d908      	bls.n	8000696 <__udivmoddi4+0x14e>
 8000684:	eb1c 0404 	adds.w	r4, ip, r4
 8000688:	f100 32ff 	add.w	r2, r0, #4294967295
 800068c:	d202      	bcs.n	8000694 <__udivmoddi4+0x14c>
 800068e:	45a6      	cmp	lr, r4
 8000690:	f200 80bb 	bhi.w	800080a <__udivmoddi4+0x2c2>
 8000694:	4610      	mov	r0, r2
 8000696:	eba4 040e 	sub.w	r4, r4, lr
 800069a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800069e:	e79f      	b.n	80005e0 <__udivmoddi4+0x98>
 80006a0:	f1c1 0720 	rsb	r7, r1, #32
 80006a4:	408b      	lsls	r3, r1
 80006a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ae:	fa05 f401 	lsl.w	r4, r5, r1
 80006b2:	fa20 f307 	lsr.w	r3, r0, r7
 80006b6:	40fd      	lsrs	r5, r7
 80006b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006bc:	4323      	orrs	r3, r4
 80006be:	fbb5 f8f9 	udiv	r8, r5, r9
 80006c2:	fa1f fe8c 	uxth.w	lr, ip
 80006c6:	fb09 5518 	mls	r5, r9, r8, r5
 80006ca:	0c1c      	lsrs	r4, r3, #16
 80006cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006d0:	fb08 f50e 	mul.w	r5, r8, lr
 80006d4:	42a5      	cmp	r5, r4
 80006d6:	fa02 f201 	lsl.w	r2, r2, r1
 80006da:	fa00 f001 	lsl.w	r0, r0, r1
 80006de:	d90b      	bls.n	80006f8 <__udivmoddi4+0x1b0>
 80006e0:	eb1c 0404 	adds.w	r4, ip, r4
 80006e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006e8:	f080 8088 	bcs.w	80007fc <__udivmoddi4+0x2b4>
 80006ec:	42a5      	cmp	r5, r4
 80006ee:	f240 8085 	bls.w	80007fc <__udivmoddi4+0x2b4>
 80006f2:	f1a8 0802 	sub.w	r8, r8, #2
 80006f6:	4464      	add	r4, ip
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	b29d      	uxth	r5, r3
 80006fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000700:	fb09 4413 	mls	r4, r9, r3, r4
 8000704:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000708:	fb03 fe0e 	mul.w	lr, r3, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x1da>
 8000710:	eb1c 0404 	adds.w	r4, ip, r4
 8000714:	f103 35ff 	add.w	r5, r3, #4294967295
 8000718:	d26c      	bcs.n	80007f4 <__udivmoddi4+0x2ac>
 800071a:	45a6      	cmp	lr, r4
 800071c:	d96a      	bls.n	80007f4 <__udivmoddi4+0x2ac>
 800071e:	3b02      	subs	r3, #2
 8000720:	4464      	add	r4, ip
 8000722:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000726:	fba3 9502 	umull	r9, r5, r3, r2
 800072a:	eba4 040e 	sub.w	r4, r4, lr
 800072e:	42ac      	cmp	r4, r5
 8000730:	46c8      	mov	r8, r9
 8000732:	46ae      	mov	lr, r5
 8000734:	d356      	bcc.n	80007e4 <__udivmoddi4+0x29c>
 8000736:	d053      	beq.n	80007e0 <__udivmoddi4+0x298>
 8000738:	b156      	cbz	r6, 8000750 <__udivmoddi4+0x208>
 800073a:	ebb0 0208 	subs.w	r2, r0, r8
 800073e:	eb64 040e 	sbc.w	r4, r4, lr
 8000742:	fa04 f707 	lsl.w	r7, r4, r7
 8000746:	40ca      	lsrs	r2, r1
 8000748:	40cc      	lsrs	r4, r1
 800074a:	4317      	orrs	r7, r2
 800074c:	e9c6 7400 	strd	r7, r4, [r6]
 8000750:	4618      	mov	r0, r3
 8000752:	2100      	movs	r1, #0
 8000754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000758:	f1c3 0120 	rsb	r1, r3, #32
 800075c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000760:	fa20 f201 	lsr.w	r2, r0, r1
 8000764:	fa25 f101 	lsr.w	r1, r5, r1
 8000768:	409d      	lsls	r5, r3
 800076a:	432a      	orrs	r2, r5
 800076c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000770:	fa1f fe8c 	uxth.w	lr, ip
 8000774:	fbb1 f0f7 	udiv	r0, r1, r7
 8000778:	fb07 1510 	mls	r5, r7, r0, r1
 800077c:	0c11      	lsrs	r1, r2, #16
 800077e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000782:	fb00 f50e 	mul.w	r5, r0, lr
 8000786:	428d      	cmp	r5, r1
 8000788:	fa04 f403 	lsl.w	r4, r4, r3
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x258>
 800078e:	eb1c 0101 	adds.w	r1, ip, r1
 8000792:	f100 38ff 	add.w	r8, r0, #4294967295
 8000796:	d22f      	bcs.n	80007f8 <__udivmoddi4+0x2b0>
 8000798:	428d      	cmp	r5, r1
 800079a:	d92d      	bls.n	80007f8 <__udivmoddi4+0x2b0>
 800079c:	3802      	subs	r0, #2
 800079e:	4461      	add	r1, ip
 80007a0:	1b49      	subs	r1, r1, r5
 80007a2:	b292      	uxth	r2, r2
 80007a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80007a8:	fb07 1115 	mls	r1, r7, r5, r1
 80007ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007b0:	fb05 f10e 	mul.w	r1, r5, lr
 80007b4:	4291      	cmp	r1, r2
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x282>
 80007b8:	eb1c 0202 	adds.w	r2, ip, r2
 80007bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c0:	d216      	bcs.n	80007f0 <__udivmoddi4+0x2a8>
 80007c2:	4291      	cmp	r1, r2
 80007c4:	d914      	bls.n	80007f0 <__udivmoddi4+0x2a8>
 80007c6:	3d02      	subs	r5, #2
 80007c8:	4462      	add	r2, ip
 80007ca:	1a52      	subs	r2, r2, r1
 80007cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007d0:	e738      	b.n	8000644 <__udivmoddi4+0xfc>
 80007d2:	4631      	mov	r1, r6
 80007d4:	4630      	mov	r0, r6
 80007d6:	e708      	b.n	80005ea <__udivmoddi4+0xa2>
 80007d8:	4639      	mov	r1, r7
 80007da:	e6e6      	b.n	80005aa <__udivmoddi4+0x62>
 80007dc:	4610      	mov	r0, r2
 80007de:	e6fb      	b.n	80005d8 <__udivmoddi4+0x90>
 80007e0:	4548      	cmp	r0, r9
 80007e2:	d2a9      	bcs.n	8000738 <__udivmoddi4+0x1f0>
 80007e4:	ebb9 0802 	subs.w	r8, r9, r2
 80007e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007ec:	3b01      	subs	r3, #1
 80007ee:	e7a3      	b.n	8000738 <__udivmoddi4+0x1f0>
 80007f0:	4645      	mov	r5, r8
 80007f2:	e7ea      	b.n	80007ca <__udivmoddi4+0x282>
 80007f4:	462b      	mov	r3, r5
 80007f6:	e794      	b.n	8000722 <__udivmoddi4+0x1da>
 80007f8:	4640      	mov	r0, r8
 80007fa:	e7d1      	b.n	80007a0 <__udivmoddi4+0x258>
 80007fc:	46d0      	mov	r8, sl
 80007fe:	e77b      	b.n	80006f8 <__udivmoddi4+0x1b0>
 8000800:	3d02      	subs	r5, #2
 8000802:	4462      	add	r2, ip
 8000804:	e732      	b.n	800066c <__udivmoddi4+0x124>
 8000806:	4608      	mov	r0, r1
 8000808:	e70a      	b.n	8000620 <__udivmoddi4+0xd8>
 800080a:	4464      	add	r4, ip
 800080c:	3802      	subs	r0, #2
 800080e:	e742      	b.n	8000696 <__udivmoddi4+0x14e>

08000810 <__aeabi_idiv0>:
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000820:	2334      	movs	r3, #52	; 0x34
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <tx_application_define+0x6c>)
 800082a:	4916      	ldr	r1, [pc, #88]	; (8000884 <tx_application_define+0x70>)
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <tx_application_define+0x74>)
 800082e:	f013 fe4d 	bl	80144cc <_txe_byte_pool_create>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d109      	bne.n	800084c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <tx_application_define+0x74>)
 800083a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f000 f82b 	bl	8000898 <App_ThreadX_Init>
 8000842:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d000      	beq.n	800084c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800084a:	e7fe      	b.n	800084a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <tx_application_define+0x78>)
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <tx_application_define+0x7c>)
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <tx_application_define+0x80>)
 800085a:	f013 fe37 	bl	80144cc <_txe_byte_pool_create>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <tx_application_define+0x80>)
 8000866:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000868:	68b8      	ldr	r0, [r7, #8]
 800086a:	f008 fe49 	bl	8009500 <MX_FileX_Init>
 800086e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d000      	beq.n	8000878 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000876:	e7fe      	b.n	8000876 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400009c 	.word	0x2400009c
 8000884:	08014ae4 	.word	0x08014ae4
 8000888:	2400049c 	.word	0x2400049c
 800088c:	240004d0 	.word	0x240004d0
 8000890:	08014af8 	.word	0x08014af8
 8000894:	240008d0 	.word	0x240008d0

08000898 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a4:	68fb      	ldr	r3, [r7, #12]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b6:	f011 fc99 	bl	80121ec <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <main+0xe8>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d11b      	bne.n	800090a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
}
 80008d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d8:	f3bf 8f6f 	isb	sy
}
 80008dc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <main+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e6:	f3bf 8f4f 	dsb	sy
}
 80008ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ec:	f3bf 8f6f 	isb	sy
}
 80008f0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <main+0xe8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <main+0xe8>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fe:	f3bf 8f4f 	dsb	sy
}
 8000902:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000904:	f3bf 8f6f 	isb	sy
}
 8000908:	e000      	b.n	800090c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800090a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <main+0xe8>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d138      	bne.n	800098a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <main+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000920:	f3bf 8f4f 	dsb	sy
}
 8000924:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <main+0xe8>)
 8000928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800092c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	0b5b      	lsrs	r3, r3, #13
 8000932:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000936:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000940:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	015a      	lsls	r2, r3, #5
 8000946:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800094a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000950:	4915      	ldr	r1, [pc, #84]	; (80009a8 <main+0xe8>)
 8000952:	4313      	orrs	r3, r2
 8000954:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ef      	bne.n	8000942 <main+0x82>
    } while(sets-- != 0U);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1e5      	bne.n	8000938 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800096c:	f3bf 8f4f 	dsb	sy
}
 8000970:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <main+0xe8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <main+0xe8>)
 8000978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800097e:	f3bf 8f4f 	dsb	sy
}
 8000982:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000984:	f3bf 8f6f 	isb	sy
}
 8000988:	e000      	b.n	800098c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800098a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fdce 	bl	800152c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000990:	f000 fb16 	bl	8000fc0 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f80a 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f93e 	bl	8000c18 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800099c:	f000 f91a 	bl	8000bd4 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009a0:	f7ff ff87 	bl	80008b2 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0xe4>
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ce      	sub	sp, #312	; 0x138
 80009b0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;
	  HAL_StatusTypeDef ret = HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  /*!< Supply configuration update enable */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f002 fb0f 	bl	8002fdc <HAL_PWREx_ConfigSupply>

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	4a7e      	ldr	r2, [pc, #504]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009d6:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <SystemClock_Config+0x21c>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	f003 0201 	and.w	r2, r3, #1
 80009de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <SystemClock_Config+0x220>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <SystemClock_Config+0x220>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b75      	ldr	r3, [pc, #468]	; (8000bcc <SystemClock_Config+0x220>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a0e:	681b      	ldr	r3, [r3, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <SystemClock_Config+0x220>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x66>

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a46:	2305      	movs	r3, #5
 8000a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a70:	2308      	movs	r3, #8
 8000a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fae8 	bl	8003050 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000a86:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xe6>
	  {
	    Error_Handler();
 8000a8e:	f000 fad5 	bl	800103c <Error_Handler>
	  }

	/* Select PLL as system clock source and configure  bus clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000a92:	233f      	movs	r3, #63	; 0x3f
 8000a94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	                                  RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000ac4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 ff1a 	bl	8003904 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000ad6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x136>
	  {
	    Error_Handler();
 8000ade:	f000 faad 	bl	800103c <Error_Handler>
	  }

	  /* PLL2_VCO Input = HSE_VALUE/PLL2_M = 5 Mhz */
	  /* PLL2_VCO Output = PLL2_VCO Input * PLL_N = 700 Mhz */
	  /* SDMMC Kernel Clock = PLL2_VCO Output/PLL_R = 700/6 = 116 Mhz */
	  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ae2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ae6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8000aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	e9c1 2300 	strd	r2, r3, [r1]
	  RCC_PeriphCLKInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000af6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000afe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b02:	651a      	str	r2, [r3, #80]	; 0x50
	  RCC_PeriphCLKInitStruct.PLL2.PLL2RGE = RCC_PLL1VCIRANGE_2;
 8000b04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	61da      	str	r2, [r3, #28]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2M = 5;
 8000b10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b18:	2205      	movs	r2, #5
 8000b1a:	609a      	str	r2, [r3, #8]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2N = 140;
 8000b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b24:	228c      	movs	r2, #140	; 0x8c
 8000b26:	60da      	str	r2, [r3, #12]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2FRACN = 0;
 8000b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_PeriphCLKInitStruct.PLL2.PLL2P = 2;
 8000b34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2R = 6;
 8000b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b48:	2206      	movs	r2, #6
 8000b4a:	619a      	str	r2, [r3, #24]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2Q = 4;
 8000b4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b54:	2204      	movs	r2, #4
 8000b56:	615a      	str	r2, [r3, #20]
	  RCC_PeriphCLKInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
	  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fa83 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 8000b74:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x1d4>
	  {
	    Error_Handler();
 8000b7c:	f000 fa5e 	bl	800103c <Error_Handler>
	  }

	  /*activate CSI clock mondatory for I/O Compensation Cell*/
	  __HAL_RCC_CSI_ENABLE() ;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	6013      	str	r3, [r2, #0]

	  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
	  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <SystemClock_Config+0x224>)
 8000b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba2:	f003 0202 	and.w	r2, r3, #2
 8000ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000baa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bb4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000bb8:	681b      	ldr	r3, [r3, #0]

	  /* Enables the I/O Compensation Cell */
	  HAL_EnableCompensationCell();
 8000bba:	f000 fd59 	bl	8001670 <HAL_EnableCompensationCell>

}
 8000bbe:	bf00      	nop
 8000bc0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58000400 	.word	0x58000400
 8000bcc:	58024800 	.word	0x58024800
 8000bd0:	58024400 	.word	0x58024400

08000bd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_SDMMC1_SD_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <MX_SDMMC1_SD_Init+0x40>)
 8000bdc:	601a      	str	r2, [r3, #0]

  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
 // hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_SDMMC1_SD_Init+0x3c>)
 8000bfe:	f005 ff37 	bl	8006a70 <HAL_SD_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000c08:	f000 fa18 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000904 	.word	0x24000904
 8000c14:	52007000 	.word	0x52007000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c2e:	4b7d      	ldr	r3, [pc, #500]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a7b      	ldr	r2, [pc, #492]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b79      	ldr	r3, [pc, #484]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b75      	ldr	r3, [pc, #468]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a74      	ldr	r2, [pc, #464]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b71      	ldr	r3, [pc, #452]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a6c      	ldr	r2, [pc, #432]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4b66      	ldr	r3, [pc, #408]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a65      	ldr	r2, [pc, #404]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b62      	ldr	r3, [pc, #392]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a5d      	ldr	r2, [pc, #372]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b5b      	ldr	r3, [pc, #364]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b57      	ldr	r3, [pc, #348]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a56      	ldr	r2, [pc, #344]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b50      	ldr	r3, [pc, #320]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a4e      	ldr	r2, [pc, #312]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d00:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a47      	ldr	r2, [pc, #284]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a38      	ldr	r2, [pc, #224]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_GPIO_Init+0x20c>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	482a      	ldr	r0, [pc, #168]	; (8000e28 <MX_GPIO_Init+0x210>)
 8000d7e:	f002 f8d5 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_GPIO_Init+0x214>)
 8000d8a:	f002 f8cf 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4822      	ldr	r0, [pc, #136]	; (8000e30 <MX_GPIO_Init+0x218>)
 8000da6:	f001 fdef 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000daa:	2310      	movs	r3, #16
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4819      	ldr	r0, [pc, #100]	; (8000e28 <MX_GPIO_Init+0x210>)
 8000dc2:	f001 fde1 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_GPIO_Init+0x214>)
 8000de0:	f001 fdd2 	bl	8002988 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000de4:	2320      	movs	r3, #32
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000de8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_GPIO_Init+0x214>)
 8000dfa:	f001 fdc5 	bl	8002988 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000dfe:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000e02:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e06:	f000 fc1d 	bl	8001644 <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2106      	movs	r1, #6
 8000e0e:	2017      	movs	r0, #23
 8000e10:	f000 fd31 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e14:	2017      	movs	r0, #23
 8000e16:	f000 fd48 	bl	80018aa <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3740      	adds	r7, #64	; 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	58021400 	.word	0x58021400
 8000e30:	58020800 	.word	0x58020800

08000e34 <GetSector>:
/* USER CODE BEGIN 4 */



uint32_t GetSector(uint32_t Address)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <GetSector+0x150>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d803      	bhi.n	8000e50 <GetSector+0x1c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000e4e:	d207      	bcs.n	8000e60 <GetSector+0x2c>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <GetSector+0x154>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d806      	bhi.n	8000e66 <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000e5e:	d302      	bcc.n	8000e66 <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	e086      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <GetSector+0x158>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d803      	bhi.n	8000e76 <GetSector+0x42>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a44      	ldr	r2, [pc, #272]	; (8000f84 <GetSector+0x150>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d807      	bhi.n	8000e86 <GetSector+0x52>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <GetSector+0x15c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d806      	bhi.n	8000e8c <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <GetSector+0x154>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d902      	bls.n	8000e8c <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	e073      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <GetSector+0x160>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d803      	bhi.n	8000e9c <GetSector+0x68>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <GetSector+0x158>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d807      	bhi.n	8000eac <GetSector+0x78>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <GetSector+0x164>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d806      	bhi.n	8000eb2 <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3a      	ldr	r2, [pc, #232]	; (8000f90 <GetSector+0x15c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d902      	bls.n	8000eb2 <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e060      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a39      	ldr	r2, [pc, #228]	; (8000f9c <GetSector+0x168>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d803      	bhi.n	8000ec2 <GetSector+0x8e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <GetSector+0x160>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d807      	bhi.n	8000ed2 <GetSector+0x9e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a36      	ldr	r2, [pc, #216]	; (8000fa0 <GetSector+0x16c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d806      	bhi.n	8000ed8 <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <GetSector+0x164>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d902      	bls.n	8000ed8 <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e04d      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <GetSector+0x170>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d803      	bhi.n	8000ee8 <GetSector+0xb4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <GetSector+0x168>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d807      	bhi.n	8000ef8 <GetSector+0xc4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <GetSector+0x174>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d806      	bhi.n	8000efe <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <GetSector+0x16c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d902      	bls.n	8000efe <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e03a      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <GetSector+0x178>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d803      	bhi.n	8000f0e <GetSector+0xda>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <GetSector+0x170>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d807      	bhi.n	8000f1e <GetSector+0xea>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <GetSector+0x17c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d806      	bhi.n	8000f24 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <GetSector+0x174>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d902      	bls.n	8000f24 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e027      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <GetSector+0x180>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d803      	bhi.n	8000f34 <GetSector+0x100>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <GetSector+0x178>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d807      	bhi.n	8000f44 <GetSector+0x110>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <GetSector+0x184>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d806      	bhi.n	8000f4a <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <GetSector+0x17c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d902      	bls.n	8000f4a <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 8000f44:	2306      	movs	r3, #6
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e014      	b.n	8000f74 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000f50:	d203      	bcs.n	8000f5a <GetSector+0x126>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <GetSector+0x180>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d807      	bhi.n	8000f6a <GetSector+0x136>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <GetSector+0x188>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d806      	bhi.n	8000f70 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <GetSector+0x184>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d902      	bls.n	8000f70 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e001      	b.n	8000f74 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 8000f70:	2307      	movs	r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	0801ffff 	.word	0x0801ffff
 8000f88:	0811ffff 	.word	0x0811ffff
 8000f8c:	0803ffff 	.word	0x0803ffff
 8000f90:	0813ffff 	.word	0x0813ffff
 8000f94:	0805ffff 	.word	0x0805ffff
 8000f98:	0815ffff 	.word	0x0815ffff
 8000f9c:	0807ffff 	.word	0x0807ffff
 8000fa0:	0817ffff 	.word	0x0817ffff
 8000fa4:	0809ffff 	.word	0x0809ffff
 8000fa8:	0819ffff 	.word	0x0819ffff
 8000fac:	080bffff 	.word	0x080bffff
 8000fb0:	081bffff 	.word	0x081bffff
 8000fb4:	080dffff 	.word	0x080dffff
 8000fb8:	081dffff 	.word	0x081dffff
 8000fbc:	081ffffe 	.word	0x081ffffe

08000fc0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fd2:	f000 fc8b 	bl	80018ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fe6:	2387      	movs	r3, #135	; 0x87
 8000fe8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fca9 	bl	800195c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800100a:	2004      	movs	r0, #4
 800100c:	f000 fc86 	bl	800191c <HAL_MPU_Enable>

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102a:	f000 fabb 	bl	80015a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40001000 	.word	0x40001000

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_MspInit+0x30>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x30>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x30>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	58024400 	.word	0x58024400

0800107c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0bc      	sub	sp, #240	; 0xf0
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	22c0      	movs	r2, #192	; 0xc0
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f013 fcdb 	bl	8014a58 <memset>
  if(hsd->Instance==SDMMC1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5a      	ldr	r2, [pc, #360]	; (8001210 <HAL_SD_MspInit+0x194>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	f040 80ac 	bne.w	8001206 <HAL_SD_MspInit+0x18a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80010ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 ffd6 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80010ce:	f7ff ffb5 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_SD_MspInit+0x198>)
 80010d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010d8:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <HAL_SD_MspInit+0x198>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010e2:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <HAL_SD_MspInit+0x198>)
 80010e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f0:	4b48      	ldr	r3, [pc, #288]	; (8001214 <HAL_SD_MspInit+0x198>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	4a47      	ldr	r2, [pc, #284]	; (8001214 <HAL_SD_MspInit+0x198>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001100:	4b44      	ldr	r3, [pc, #272]	; (8001214 <HAL_SD_MspInit+0x198>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <HAL_SD_MspInit+0x198>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	4a3f      	ldr	r2, [pc, #252]	; (8001214 <HAL_SD_MspInit+0x198>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111e:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_SD_MspInit+0x198>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_SD_MspInit+0x198>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	4a38      	ldr	r2, [pc, #224]	; (8001214 <HAL_SD_MspInit+0x198>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_SD_MspInit+0x198>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 800114a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800114e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001164:	230c      	movs	r3, #12
 8001166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800116e:	4619      	mov	r1, r3
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <HAL_SD_MspInit+0x19c>)
 8001172:	f001 fc09 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001176:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800119a:	4619      	mov	r1, r3
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <HAL_SD_MspInit+0x1a0>)
 800119e:	f001 fbf3 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80011a2:	2304      	movs	r3, #4
 80011a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011ba:	230c      	movs	r3, #12
 80011bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011c4:	4619      	mov	r1, r3
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <HAL_SD_MspInit+0x1a4>)
 80011c8:	f001 fbde 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 80011cc:	23c0      	movs	r3, #192	; 0xc0
 80011ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 80011e4:	2308      	movs	r3, #8
 80011e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ee:	4619      	mov	r1, r3
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <HAL_SD_MspInit+0x19c>)
 80011f2:	f001 fbc9 	bl	8002988 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2107      	movs	r1, #7
 80011fa:	2031      	movs	r0, #49	; 0x31
 80011fc:	f000 fb3b 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f000 fb52 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	37f0      	adds	r7, #240	; 0xf0
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	52007000 	.word	0x52007000
 8001214:	58024400 	.word	0x58024400
 8001218:	58020800 	.word	0x58020800
 800121c:	58020400 	.word	0x58020400
 8001220:	58020c00 	.word	0x58020c00

08001224 <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_SD_MspDeInit+0x4c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d118      	bne.n	8001268 <HAL_SD_MspDeInit+0x44>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_SD_MspDeInit+0x50>)
 8001238:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <HAL_SD_MspDeInit+0x50>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8001246:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <HAL_SD_MspDeInit+0x54>)
 800124c:	f001 fd4c 	bl	8002ce8 <HAL_GPIO_DeInit>
                          |SDIO1_D1_Pin|SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin);

    HAL_GPIO_DeInit(GPIOB, SDIO1_CDIR_Pin|SDIO1_CKIN_Pin);
 8001250:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_SD_MspDeInit+0x58>)
 8001256:	f001 fd47 	bl	8002ce8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 800125a:	2104      	movs	r1, #4
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <HAL_SD_MspDeInit+0x5c>)
 800125e:	f001 fd43 	bl	8002ce8 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001262:	2031      	movs	r0, #49	; 0x31
 8001264:	f000 fb2f 	bl	80018c6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	52007000 	.word	0x52007000
 8001274:	58024400 	.word	0x58024400
 8001278:	58020800 	.word	0x58020800
 800127c:	58020400 	.word	0x58020400
 8001280:	58020c00 	.word	0x58020c00

08001284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b090      	sub	sp, #64	; 0x40
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	d827      	bhi.n	80012e2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001292:	2200      	movs	r2, #0
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	2036      	movs	r0, #54	; 0x36
 8001298:	f000 faed 	bl	8001876 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800129c:	2036      	movs	r0, #54	; 0x36
 800129e:	f000 fb04 	bl	80018aa <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_InitTick+0xc4>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_InitTick+0xc8>)
 80012aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_InitTick+0xc8>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_InitTick+0xc8>)
 80012ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012c6:	f107 0210 	add.w	r2, r7, #16
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fe8d 	bl	8003ff0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <HAL_InitTick+0x6a>
 80012e0:	e001      	b.n	80012e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e02b      	b.n	800133e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012e6:	f002 fe6d 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 80012ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80012ec:	e004      	b.n	80012f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012ee:	f002 fe69 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 80012f2:	4603      	mov	r3, r0
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <HAL_InitTick+0xcc>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3b01      	subs	r3, #1
 8001304:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_InitTick+0xd0>)
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <HAL_InitTick+0xd4>)
 800130a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_InitTick+0xd0>)
 800130e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001312:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_InitTick+0xd0>)
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_InitTick+0xd0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_InitTick+0xd0>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_InitTick+0xd0>)
 8001328:	f007 f836 	bl	8008398 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d104      	bne.n	800133c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <HAL_InitTick+0xd0>)
 8001334:	f007 f892 	bl	800845c <HAL_TIM_Base_Start_IT>
 8001338:	4603      	mov	r3, r0
 800133a:	e000      	b.n	800133e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	3740      	adds	r7, #64	; 0x40
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000008 	.word	0x24000008
 800134c:	58024400 	.word	0x58024400
 8001350:	431bde83 	.word	0x431bde83
 8001354:	24000984 	.word	0x24000984
 8001358:	40001000 	.word	0x40001000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800138c:	2020      	movs	r0, #32
 800138e:	f001 fe00 	bl	8002f92 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQOUT_Pin);
 8001392:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001396:	f001 fdfc 	bl	8002f92 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SDMMC1_IRQHandler+0x10>)
 80013a6:	f005 fe0d 	bl	8006fc4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000904 	.word	0x24000904

080013b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM6_DAC_IRQHandler+0x10>)
 80013ba:	f007 f8c7 	bl	800854c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	24000984 	.word	0x24000984

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <SystemInit+0xe4>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a36      	ldr	r2, [pc, #216]	; (80014ac <SystemInit+0xe4>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <SystemInit+0xe8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d807      	bhi.n	80013f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <SystemInit+0xe8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 030f 	bic.w	r3, r3, #15
 80013f0:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <SystemInit+0xe8>)
 80013f2:	f043 0307 	orr.w	r3, r3, #7
 80013f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <SystemInit+0xec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <SystemInit+0xec>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <SystemInit+0xec>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <SystemInit+0xec>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4929      	ldr	r1, [pc, #164]	; (80014b4 <SystemInit+0xec>)
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <SystemInit+0xf0>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <SystemInit+0xe8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <SystemInit+0xe8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 030f 	bic.w	r3, r3, #15
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <SystemInit+0xe8>)
 800142c:	f043 0307 	orr.w	r3, r3, #7
 8001430:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <SystemInit+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <SystemInit+0xec>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <SystemInit+0xec>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <SystemInit+0xec>)
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <SystemInit+0xf4>)
 8001448:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <SystemInit+0xec>)
 800144c:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <SystemInit+0xf8>)
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <SystemInit+0xec>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <SystemInit+0xfc>)
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <SystemInit+0xec>)
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <SystemInit+0xec>)
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <SystemInit+0xfc>)
 8001460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <SystemInit+0xec>)
 8001464:	2200      	movs	r2, #0
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <SystemInit+0xec>)
 800146a:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <SystemInit+0xfc>)
 800146c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <SystemInit+0xec>)
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <SystemInit+0xec>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <SystemInit+0xec>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <SystemInit+0xec>)
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <SystemInit+0x100>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <SystemInit+0x104>)
 800148c:	4013      	ands	r3, r2
 800148e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001492:	d202      	bcs.n	800149a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <SystemInit+0x108>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <SystemInit+0x10c>)
 800149c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	52002000 	.word	0x52002000
 80014b4:	58024400 	.word	0x58024400
 80014b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80014bc:	02020200 	.word	0x02020200
 80014c0:	01ff0000 	.word	0x01ff0000
 80014c4:	01010280 	.word	0x01010280
 80014c8:	5c001000 	.word	0x5c001000
 80014cc:	ffff0000 	.word	0xffff0000
 80014d0:	51008108 	.word	0x51008108
 80014d4:	52004000 	.word	0x52004000

080014d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014dc:	f7ff ff74 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f013 faaf 	bl	8014a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150a:	f7ff f9d9 	bl	80008c0 <main>
  bx  lr
 800150e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001510:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001514:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001518:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800151c:	08014bd8 	.word	0x08014bd8
  ldr r2, =_sbss
 8001520:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001524:	24003c94 	.word	0x24003c94

08001528 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC3_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f994 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001538:	f002 fb9a 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_Init+0x68>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	4913      	ldr	r1, [pc, #76]	; (8001598 <HAL_Init+0x6c>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
 8001554:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_Init+0x68>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_Init+0x6c>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_Init+0x70>)
 800156e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_Init+0x74>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	200f      	movs	r0, #15
 8001578:	f7ff fe84 	bl	8001284 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e002      	b.n	800158c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001586:	f7ff fd5f 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	58024400 	.word	0x58024400
 8001598:	08014bb8 	.word	0x08014bb8
 800159c:	24000004 	.word	0x24000004
 80015a0:	24000000 	.word	0x24000000

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2400000c 	.word	0x2400000c
 80015c8:	240009d0 	.word	0x240009d0

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	240009d0 	.word	0x240009d0

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffde 	bl	80015cc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2400000c 	.word	0x2400000c

0800162c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetREVID+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0c1b      	lsrs	r3, r3, #16
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	5c001000 	.word	0x5c001000

08001644 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	58000400 	.word	0x58000400

08001670 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_EnableCompensationCell+0x1c>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_EnableCompensationCell+0x1c>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6213      	str	r3, [r2, #32]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	58000400 	.word	0x58000400

08001690 <__NVIC_SetPriorityGrouping>:
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <__NVIC_SetPriorityGrouping+0x40>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x40>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00
 80016d4:	05fa0000 	.word	0x05fa0000

080016d8 <__NVIC_GetPriorityGrouping>:
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <__NVIC_GetPriorityGrouping+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0307 	and.w	r3, r3, #7
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_EnableIRQ>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db0b      	blt.n	800171e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	f003 021f 	and.w	r2, r3, #31
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <__NVIC_EnableIRQ+0x38>)
 800170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	2001      	movs	r0, #1
 8001716:	fa00 f202 	lsl.w	r2, r0, r2
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_DisableIRQ>:
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db12      	blt.n	8001768 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	490a      	ldr	r1, [pc, #40]	; (8001774 <__NVIC_DisableIRQ+0x44>)
 800174a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	3320      	adds	r3, #32
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800175c:	f3bf 8f4f 	dsb	sy
}
 8001760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001762:	f3bf 8f6f 	isb	sy
}
 8001766:	bf00      	nop
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <__NVIC_SystemReset>:
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <__NVIC_SystemReset+0x24>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001846:	4904      	ldr	r1, [pc, #16]	; (8001858 <__NVIC_SystemReset+0x24>)
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_SystemReset+0x28>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800184e:	f3bf 8f4f 	dsb	sy
}
 8001852:	bf00      	nop
    __NOP();
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <__NVIC_SystemReset+0x20>
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	05fa0004 	.word	0x05fa0004

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff11 	bl	8001690 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff28 	bl	80016d8 <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff9c 	bl	80017cc <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff6b 	bl	8001778 <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff1b 	bl	80016f4 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff2b 	bl	8001730 <__NVIC_DisableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80018e6:	f7ff ffa5 	bl	8001834 <__NVIC_SystemReset>
	...

080018ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018f0:	f3bf 8f5f 	dmb	sy
}
 80018f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_MPU_Disable+0x28>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_MPU_Disable+0x28>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_MPU_Disable+0x2c>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00
 8001918:	e000ed90 	.word	0xe000ed90

0800191c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_MPU_Enable+0x38>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_MPU_Enable+0x3c>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_MPU_Enable+0x3c>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800193a:	f3bf 8f4f 	dsb	sy
}
 800193e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001940:	f3bf 8f6f 	isb	sy
}
 8001944:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed90 	.word	0xe000ed90
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	785a      	ldrb	r2, [r3, #1]
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_MPU_ConfigRegion+0x84>)
 800196a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d029      	beq.n	80019c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001974:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_MPU_ConfigRegion+0x84>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7b1b      	ldrb	r3, [r3, #12]
 8001980:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7adb      	ldrb	r3, [r3, #11]
 8001986:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7a9b      	ldrb	r3, [r3, #10]
 800198e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7b9b      	ldrb	r3, [r3, #14]
 800199e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7bdb      	ldrb	r3, [r3, #15]
 80019a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a5b      	ldrb	r3, [r3, #9]
 80019ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7a1b      	ldrb	r3, [r3, #8]
 80019b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80019c6:	e005      	b.n	80019d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_MPU_ConfigRegion+0x84>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_MPU_ConfigRegion+0x84>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed90 	.word	0xe000ed90

080019e4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_FLASH_Program+0x11c>)
 80019fe:	7d1b      	ldrb	r3, [r3, #20]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_FLASH_Program+0x24>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e076      	b.n	8001af6 <HAL_FLASH_Program+0x112>
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_FLASH_Program+0x11c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a14:	d306      	bcc.n	8001a24 <HAL_FLASH_Program+0x40>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001a1c:	d202      	bcs.n	8001a24 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e00c      	b.n	8001a3e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001a2a:	d306      	bcc.n	8001a3a <HAL_FLASH_Program+0x56>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8001a32:	d202      	bcs.n	8001a3a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	e001      	b.n	8001a3e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e05b      	b.n	8001af6 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_FLASH_Program+0x11c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001a44:	69b9      	ldr	r1, [r7, #24]
 8001a46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a4a:	f000 f915 	bl	8001c78 <FLASH_WaitForLastOperation>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8001a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d147      	bne.n	8001aec <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d106      	bne.n	8001a70 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	60d3      	str	r3, [r2, #12]
 8001a6e:	e007      	b.n	8001a80 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001a72:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8001a80:	f3bf 8f6f 	isb	sy
}
 8001a84:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001a86:	f3bf 8f4f 	dsb	sy
}
 8001a8a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	3304      	adds	r3, #4
 8001a98:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ef      	bne.n	8001a8c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8001aac:	f3bf 8f6f 	isb	sy
}
 8001ab0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab2:	f3bf 8f4f 	dsb	sy
}
 8001ab6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001ab8:	69b9      	ldr	r1, [r7, #24]
 8001aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001abe:	f000 f8db 	bl	8001c78 <FLASH_WaitForLastOperation>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d106      	bne.n	8001adc <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001ad4:	f023 0302 	bic.w	r3, r3, #2
 8001ad8:	60d3      	str	r3, [r2, #12]
 8001ada:	e007      	b.n	8001aec <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001ade:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_FLASH_Program+0x120>)
 8001ae4:	f023 0302 	bic.w	r3, r3, #2
 8001ae8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_FLASH_Program+0x11c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	751a      	strb	r2, [r3, #20]

  return status;
 8001af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	240009d4 	.word	0x240009d4
 8001b04:	52002000 	.word	0x52002000

08001b08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_FLASH_Unlock+0x6c>)
 8001b1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_FLASH_Unlock+0x70>)
 8001b22:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e018      	b.n	8001b66 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b36:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d010      	beq.n	8001b64 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_FLASH_Unlock+0x6c>)
 8001b46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_FLASH_Unlock+0x70>)
 8001b4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_FLASH_Unlock+0x68>)
 8001b54:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	52002000 	.word	0x52002000
 8001b74:	45670123 	.word	0x45670123
 8001b78:	cdef89ab 	.word	0xcdef89ab

08001b7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_FLASH_Lock+0x50>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_FLASH_Lock+0x50>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_FLASH_Lock+0x50>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e011      	b.n	8001bc0 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_FLASH_Lock+0x50>)
 8001b9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_FLASH_Lock+0x50>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_FLASH_Lock+0x50>)
 8001bae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	52002000 	.word	0x52002000

08001bd0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_FLASH_OB_Unlock+0x38>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_FLASH_OB_Unlock+0x38>)
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_FLASH_OB_Unlock+0x3c>)
 8001be4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_FLASH_OB_Unlock+0x38>)
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_FLASH_OB_Unlock+0x40>)
 8001bea:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_FLASH_OB_Unlock+0x38>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	52002000 	.word	0x52002000
 8001c0c:	08192a3b 	.word	0x08192a3b
 8001c10:	4c5d6e7f 	.word	0x4c5d6e7f

08001c14 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c20:	f000 f902 	bl	8001e28 <FLASH_CRC_WaitForLastOperation>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	e00c      	b.n	8001c4a <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001c30:	2102      	movs	r1, #2
 8001c32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c36:	f000 f8f7 	bl	8001e28 <FLASH_CRC_WaitForLastOperation>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	e001      	b.n	8001c4a <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10b      	bne.n	8001c68 <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_FLASH_OB_Launch+0x60>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_FLASH_OB_Launch+0x60>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c60:	f000 f8a6 	bl	8001db0 <FLASH_OB_WaitForLastOperation>
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	52002000 	.word	0x52002000

08001c78 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8001c82:	2304      	movs	r3, #4
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8001c8a:	f7ff fc9f 	bl	80015cc <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d113      	bne.n	8001cbe <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <FLASH_WaitForLastOperation+0x124>)
 8001c98:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001c9a:	e010      	b.n	8001cbe <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d00c      	beq.n	8001cbe <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7ff fc92 	bl	80015cc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <FLASH_WaitForLastOperation+0x42>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e06a      	b.n	8001d94 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <FLASH_WaitForLastOperation+0x128>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d10a      	bne.n	8001ce0 <FLASH_WaitForLastOperation+0x68>
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e00c      	b.n	8001cfa <FLASH_WaitForLastOperation+0x82>
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001ce2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4013      	ands	r3, r2
 8001cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ce      	bne.n	8001c9c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <FLASH_WaitForLastOperation+0x130>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e007      	b.n	8001d20 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d12:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <FLASH_WaitForLastOperation+0x130>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d1e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d017      	beq.n	8001d5a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <FLASH_WaitForLastOperation+0x134>)
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <FLASH_WaitForLastOperation+0x134>)
 8001d34:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <FLASH_WaitForLastOperation+0x128>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d103      	bne.n	8001d4a <FLASH_WaitForLastOperation+0xd2>
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6153      	str	r3, [r2, #20]
 8001d48:	e005      	b.n	8001d56 <FLASH_WaitForLastOperation+0xde>
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d52:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e01c      	b.n	8001d94 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10b      	bne.n	8001d78 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d111      	bne.n	8001d92 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	e00c      	b.n	8001d92 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d7a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d86:	d104      	bne.n	8001d92 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <FLASH_WaitForLastOperation+0x12c>)
 8001d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	80000004 	.word	0x80000004
 8001da0:	1fef000f 	.word	0x1fef000f
 8001da4:	52002000 	.word	0x52002000
 8001da8:	17ee0000 	.word	0x17ee0000
 8001dac:	240009d4 	.word	0x240009d4

08001db0 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fc08 	bl	80015cc <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8001dbe:	e010      	b.n	8001de2 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d00c      	beq.n	8001de2 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dc8:	f7ff fc00 	bl	80015cc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <FLASH_OB_WaitForLastOperation+0x2e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e01a      	b.n	8001e18 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <FLASH_OB_WaitForLastOperation+0x70>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1e8      	bne.n	8001dc0 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <FLASH_OB_WaitForLastOperation+0x70>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <FLASH_OB_WaitForLastOperation+0x74>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <FLASH_OB_WaitForLastOperation+0x74>)
 8001e04:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <FLASH_OB_WaitForLastOperation+0x70>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <FLASH_OB_WaitForLastOperation+0x70>)
 8001e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e10:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	52002000 	.word	0x52002000
 8001e24:	240009d4 	.word	0x240009d4

08001e28 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 8001e32:	f7ff fbcb 	bl	80015cc <HAL_GetTick>
 8001e36:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e013      	b.n	8001e6c <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <FLASH_CRC_WaitForLastOperation+0xe4>)
 8001e46:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001e48:	e010      	b.n	8001e6c <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d00c      	beq.n	8001e6c <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e52:	f7ff fbbb 	bl	80015cc <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d302      	bcc.n	8001e68 <FLASH_CRC_WaitForLastOperation+0x40>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e04b      	b.n	8001f04 <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <FLASH_CRC_WaitForLastOperation+0xe8>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10a      	bne.n	8001e8e <FLASH_CRC_WaitForLastOperation+0x66>
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <FLASH_CRC_WaitForLastOperation+0xec>)
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	e00c      	b.n	8001ea8 <FLASH_CRC_WaitForLastOperation+0x80>
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <FLASH_CRC_WaitForLastOperation+0xec>)
 8001e90:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001e94:	43da      	mvns	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ce      	bne.n	8001e4a <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d112      	bne.n	8001ed8 <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <FLASH_CRC_WaitForLastOperation+0xec>)
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ebe:	d120      	bne.n	8001f02 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8001eca:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <FLASH_CRC_WaitForLastOperation+0xec>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed2:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e015      	b.n	8001f04 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <FLASH_CRC_WaitForLastOperation+0xec>)
 8001eda:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ee6:	d10c      	bne.n	8001f02 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <FLASH_CRC_WaitForLastOperation+0xf0>)
 8001ef2:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <FLASH_CRC_WaitForLastOperation+0xec>)
 8001ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	80000008 	.word	0x80000008
 8001f10:	1fef000f 	.word	0x1fef000f
 8001f14:	52002000 	.word	0x52002000
 8001f18:	240009d4 	.word	0x240009d4

08001f1c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_FLASHEx_Erase+0x188>)
 8001f2c:	7d1b      	ldrb	r3, [r3, #20]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_FLASHEx_Erase+0x1a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e0b2      	b.n	800209c <HAL_FLASHEx_Erase+0x180>
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_FLASHEx_Erase+0x188>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_FLASHEx_Erase+0x188>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f54:	f7ff fe90 	bl	8001c78 <FLASH_WaitForLastOperation>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001f6e:	2102      	movs	r1, #2
 8001f70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f74:	f7ff fe80 	bl	8001c78 <FLASH_WaitForLastOperation>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 8085 	bne.w	8002094 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d136      	bne.n	8002000 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f000 f987 	bl	80022b0 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00f      	beq.n	8001fce <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fb4:	f7ff fe60 	bl	8001c78 <FLASH_WaitForLastOperation>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8001fc8:	f023 0308 	bic.w	r3, r3, #8
 8001fcc:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d05c      	beq.n	8002094 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001fda:	2102      	movs	r1, #2
 8001fdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fe0:	f7ff fe4a 	bl	8001c78 <FLASH_WaitForLastOperation>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8001ff0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8001ff6:	f023 0308 	bic.w	r3, r3, #8
 8001ffa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001ffe:	e049      	b.n	8002094 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f04f 32ff 	mov.w	r2, #4294967295
 8002006:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	e039      	b.n	8002084 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	461a      	mov	r2, r3
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f000 f9b2 	bl	8002384 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00c      	beq.n	8002046 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800202c:	2101      	movs	r1, #1
 800202e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002032:	f7ff fe21 	bl	8001c78 <FLASH_WaitForLastOperation>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_FLASHEx_Erase+0x190>)
 8002042:	4013      	ands	r3, r2
 8002044:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8002052:	2102      	movs	r1, #2
 8002054:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002058:	f7ff fe0e 	bl	8001c78 <FLASH_WaitForLastOperation>
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8002062:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002066:	4910      	ldr	r1, [pc, #64]	; (80020a8 <HAL_FLASHEx_Erase+0x18c>)
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_FLASHEx_Erase+0x190>)
 800206a:	4013      	ands	r3, r2
 800206c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	601a      	str	r2, [r3, #0]
          break;
 800207c:	e00a      	b.n	8002094 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4413      	add	r3, r2
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3bd      	bcc.n	8002010 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_FLASHEx_Erase+0x188>)
 8002096:	2200      	movs	r2, #0
 8002098:	751a      	strb	r2, [r3, #20]

  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	240009d4 	.word	0x240009d4
 80020a8:	52002000 	.word	0x52002000
 80020ac:	fffff8fb 	.word	0xfffff8fb

080020b0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020b8:	4b4e      	ldr	r3, [pc, #312]	; (80021f4 <HAL_FLASHEx_OBProgram+0x144>)
 80020ba:	7d1b      	ldrb	r3, [r3, #20]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_FLASHEx_OBProgram+0x14>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e092      	b.n	80021ea <HAL_FLASHEx_OBProgram+0x13a>
 80020c4:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_FLASHEx_OBProgram+0x144>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_FLASHEx_OBProgram+0x144>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80020d0:	2101      	movs	r1, #1
 80020d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020d6:	f7ff fdcf 	bl	8001c78 <FLASH_WaitForLastOperation>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e00c      	b.n	8002100 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80020e6:	2102      	movs	r1, #2
 80020e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020ec:	f7ff fdc4 	bl	8001c78 <FLASH_WaitForLastOperation>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e001      	b.n	8002100 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d16d      	bne.n	80021e2 <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d014      	beq.n	800213c <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f000 f96b 	bl	8002400 <FLASH_OB_EnableWRP>
 800212a:	e007      	b.n	800213c <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 f98c 	bl	8002454 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f9d7 	bl	8002500 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f000 f9f9 	bl	8002560 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a18      	ldr	r0, [r3, #32]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f000 faa1 	bl	80026d0 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fb0e 	bl	80027c0 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021bc:	461a      	mov	r2, r3
 80021be:	f000 fb21 	bl	8002804 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f000 fb57 	bl	8002890 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_FLASHEx_OBProgram+0x144>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	751a      	strb	r2, [r3, #20]

  return status;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	240009d4 	.word	0x240009d4

080021f8 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2216      	movs	r2, #22
 8002204:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002206:	f000 f98f 	bl	8002528 <FLASH_OB_GetRDP>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002210:	f000 fa48 	bl	80026a4 <FLASH_OB_GetUser>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800221a:	f000 fae5 	bl	80027e8 <FLASH_OB_GetBOR>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d003      	beq.n	8002234 <HAL_FLASHEx_OBGetConfig+0x3c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d129      	bne.n	8002288 <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f043 0229 	orr.w	r2, r3, #41	; 0x29
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1d18      	adds	r0, r3, #4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0108 	add.w	r1, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	461a      	mov	r2, r3
 8002250:	f000 f928 	bl	80024a4 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 0020 	add.w	r0, r3, #32
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f000 fa67 	bl	800273c <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f000 fb3e 	bl	8002904 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3334      	adds	r3, #52	; 0x34
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f000 fadf 	bl	8002858 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d122      	bne.n	800230a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <FLASH_MassErase+0xd0>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	; (8002380 <FLASH_MassErase+0xd0>)
 80022ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022ce:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <FLASH_MassErase+0xd0>)
 80022d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80022d6:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <FLASH_MassErase+0xd0>)
 80022d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <FLASH_MassErase+0xd0>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4926      	ldr	r1, [pc, #152]	; (8002380 <FLASH_MassErase+0xd0>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <FLASH_MassErase+0xd0>)
 80022ee:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80022f2:	4923      	ldr	r1, [pc, #140]	; (8002380 <FLASH_MassErase+0xd0>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <FLASH_MassErase+0xd0>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <FLASH_MassErase+0xd0>)
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002308:	e033      	b.n	8002372 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d011      	beq.n	8002338 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <FLASH_MassErase+0xd0>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <FLASH_MassErase+0xd0>)
 800231a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800231e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <FLASH_MassErase+0xd0>)
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4916      	ldr	r1, [pc, #88]	; (8002380 <FLASH_MassErase+0xd0>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <FLASH_MassErase+0xd0>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <FLASH_MassErase+0xd0>)
 8002332:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002336:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <FLASH_MassErase+0xd0>)
 8002344:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <FLASH_MassErase+0xd0>)
 800234a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800234e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <FLASH_MassErase+0xd0>)
 8002354:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002358:	4909      	ldr	r1, [pc, #36]	; (8002380 <FLASH_MassErase+0xd0>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <FLASH_MassErase+0xd0>)
 8002364:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002368:	4a05      	ldr	r2, [pc, #20]	; (8002380 <FLASH_MassErase+0xd0>)
 800236a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800236e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	52002000 	.word	0x52002000

08002384 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <FLASH_Erase_Sector+0x78>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023a0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80023a4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0219      	lsls	r1, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	4313      	orrs	r3, r2
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023b6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80023ba:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d014      	beq.n	80023f0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023ce:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80023d2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023d8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0219      	lsls	r1, r3, #8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	4313      	orrs	r3, r2
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <FLASH_Erase_Sector+0x78>)
 80023e8:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80023ec:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	52002000 	.word	0x52002000

08002400 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <FLASH_OB_EnableWRP+0x50>)
 8002416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	490c      	ldr	r1, [pc, #48]	; (8002450 <FLASH_OB_EnableWRP+0x50>)
 8002420:	4013      	ands	r3, r2
 8002422:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <FLASH_OB_EnableWRP+0x50>)
 8002430:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	4905      	ldr	r1, [pc, #20]	; (8002450 <FLASH_OB_EnableWRP+0x50>)
 800243c:	4013      	ands	r3, r2
 800243e:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	52002000 	.word	0x52002000

08002454 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <FLASH_OB_DisableWRP+0x4c>)
 800246a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	490b      	ldr	r1, [pc, #44]	; (80024a0 <FLASH_OB_DisableWRP+0x4c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <FLASH_OB_DisableWRP+0x4c>)
 8002482:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4905      	ldr	r1, [pc, #20]	; (80024a0 <FLASH_OB_DisableWRP+0x4c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	52002000 	.word	0x52002000

080024a4 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <FLASH_OB_GetWRP+0x58>)
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <FLASH_OB_GetWRP+0x58>)
 80024c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80024cc:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 80024e6:	e002      	b.n	80024ee <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	52002000 	.word	0x52002000

08002500 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <FLASH_OB_RDPConfig+0x24>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <FLASH_OB_RDPConfig+0x24>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	620b      	str	r3, [r1, #32]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	52002000 	.word	0x52002000

08002528 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <FLASH_OB_GetRDP+0x34>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002536:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 800253e:	d006      	beq.n	800254e <FLASH_OB_GetRDP+0x26>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
 8002546:	d002      	beq.n	800254e <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 8002548:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 800254c:	e000      	b.n	8002550 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 800254e:	687b      	ldr	r3, [r7, #4]
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	52002000 	.word	0x52002000

08002560 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ac:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ca:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d009      	beq.n	8002608 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002606:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8002624:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002642:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002660:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800267e:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <FLASH_OB_UserConfig+0x140>)
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	4905      	ldr	r1, [pc, #20]	; (80026a0 <FLASH_OB_UserConfig+0x140>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	620b      	str	r3, [r1, #32]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	52002000 	.word	0x52002000

080026a4 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <FLASH_OB_GetUser+0x24>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <FLASH_OB_GetUser+0x28>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	607b      	str	r3, [r7, #4]

  return userConfig;
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	52002000 	.word	0x52002000
 80026cc:	ffff00f3 	.word	0xffff00f3

080026d0 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80026ee:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 80026fa:	431a      	orrs	r2, r3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8002702:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 8002714:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8002720:	431a      	orrs	r2, r3
 8002722:	4905      	ldr	r1, [pc, #20]	; (8002738 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
 8002728:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	52002000 	.word	0x52002000

0800273c <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <FLASH_OB_GetPCROP+0x7c>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 800275e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002762:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d106      	bne.n	8002778 <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <FLASH_OB_GetPCROP+0x7c>)
 800276c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002770:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 8002772:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8002776:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <FLASH_OB_GetPCROP+0x80>)
 8002788:	4013      	ands	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	441a      	add	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	441a      	add	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	52002000 	.word	0x52002000
 80027bc:	000fff00 	.word	0x000fff00

080027c0 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <FLASH_OB_BOR_LevelConfig+0x24>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f023 020c 	bic.w	r2, r3, #12
 80027d0:	4904      	ldr	r1, [pc, #16]	; (80027e4 <FLASH_OB_BOR_LevelConfig+0x24>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	620b      	str	r3, [r1, #32]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	52002000 	.word	0x52002000

080027e8 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <FLASH_OB_GetBOR+0x18>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 030c 	and.w	r3, r3, #12
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	52002000 	.word	0x52002000

08002804 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <FLASH_OB_BootAddConfig+0x4c>)
 800281c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <FLASH_OB_BootAddConfig+0x50>)
 8002820:	4013      	ands	r3, r2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	0c12      	lsrs	r2, r2, #16
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <FLASH_OB_BootAddConfig+0x4c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <FLASH_OB_BootAddConfig+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	b29a      	uxth	r2, r3
 800283c:	4904      	ldr	r1, [pc, #16]	; (8002850 <FLASH_OB_BootAddConfig+0x4c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	52002000 	.word	0x52002000
 8002854:	ffff0000 	.word	0xffff0000

08002858 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <FLASH_OB_GetBootAdd+0x30>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <FLASH_OB_GetBootAdd+0x34>)
 8002874:	4013      	ands	r3, r2
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	52002000 	.word	0x52002000
 800288c:	ffff0000 	.word	0xffff0000

08002890 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00f      	beq.n	80028c8 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80028ae:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 80028ba:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 80028c2:	490f      	ldr	r1, [pc, #60]	; (8002900 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 80028c4:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 80028c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d010      	beq.n	80028f4 <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80028d8:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80028e4:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80028ec:	4904      	ldr	r1, [pc, #16]	; (8002900 <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 80028ee:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
 80028f0:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	52002000 	.word	0x52002000

08002904 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <FLASH_OB_GetSecureArea+0x7c>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8002926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800292a:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d106      	bne.n	8002940 <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <FLASH_OB_GetSecureArea+0x7c>)
 8002934:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8002938:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
 800293a:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 800293e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	021a      	lsls	r2, r3, #8
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <FLASH_OB_GetSecureArea+0x80>)
 8002950:	4013      	ands	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	441a      	add	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	52002000 	.word	0x52002000
 8002984:	000fff00 	.word	0x000fff00

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002996:	4b89      	ldr	r3, [pc, #548]	; (8002bbc <HAL_GPIO_Init+0x234>)
 8002998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800299a:	e194      	b.n	8002cc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8186 	beq.w	8002cc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d005      	beq.n	80029cc <HAL_GPIO_Init+0x44>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d130      	bne.n	8002a2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a02:	2201      	movs	r2, #1
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 0201 	and.w	r2, r3, #1
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d017      	beq.n	8002a6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d123      	bne.n	8002abe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	69b9      	ldr	r1, [r7, #24]
 8002aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0203 	and.w	r2, r3, #3
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80e0 	beq.w	8002cc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_GPIO_Init+0x238>)
 8002b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b06:	4a2e      	ldr	r2, [pc, #184]	; (8002bc0 <HAL_GPIO_Init+0x238>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_GPIO_Init+0x238>)
 8002b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_GPIO_Init+0x23c>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_GPIO_Init+0x240>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d052      	beq.n	8002bf0 <HAL_GPIO_Init+0x268>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_GPIO_Init+0x244>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d031      	beq.n	8002bb6 <HAL_GPIO_Init+0x22e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_GPIO_Init+0x248>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02b      	beq.n	8002bb2 <HAL_GPIO_Init+0x22a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_GPIO_Init+0x24c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x226>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_GPIO_Init+0x250>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x222>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_GPIO_Init+0x254>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x21e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_GPIO_Init+0x258>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x21a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_GPIO_Init+0x25c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x216>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_GPIO_Init+0x260>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x212>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a17      	ldr	r2, [pc, #92]	; (8002bec <HAL_GPIO_Init+0x264>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x20e>
 8002b92:	2309      	movs	r3, #9
 8002b94:	e02d      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002b96:	230a      	movs	r3, #10
 8002b98:	e02b      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e029      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e027      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e025      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e023      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e021      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e01f      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e01d      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e01b      	b.n	8002bf2 <HAL_GPIO_Init+0x26a>
 8002bba:	bf00      	nop
 8002bbc:	58000080 	.word	0x58000080
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	58000400 	.word	0x58000400
 8002bc8:	58020000 	.word	0x58020000
 8002bcc:	58020400 	.word	0x58020400
 8002bd0:	58020800 	.word	0x58020800
 8002bd4:	58020c00 	.word	0x58020c00
 8002bd8:	58021000 	.word	0x58021000
 8002bdc:	58021400 	.word	0x58021400
 8002be0:	58021800 	.word	0x58021800
 8002be4:	58021c00 	.word	0x58021c00
 8002be8:	58022000 	.word	0x58022000
 8002bec:	58022400 	.word	0x58022400
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	f002 0203 	and.w	r2, r2, #3
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	4093      	lsls	r3, r2
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c02:	4938      	ldr	r1, [pc, #224]	; (8002ce4 <HAL_GPIO_Init+0x35c>)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f ae63 	bne.w	800299c <HAL_GPIO_Init+0x14>
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	3724      	adds	r7, #36	; 0x24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	58000400 	.word	0x58000400

08002ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cf6:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <HAL_GPIO_DeInit+0x1e4>)
 8002cf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002cfa:	e0d9      	b.n	8002eb0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	4013      	ands	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80cc 	beq.w	8002eaa <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a6f      	ldr	r2, [pc, #444]	; (8002ed0 <HAL_GPIO_DeInit+0x1e8>)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <HAL_GPIO_DeInit+0x1ec>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d037      	beq.n	8002dac <HAL_GPIO_DeInit+0xc4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a66      	ldr	r2, [pc, #408]	; (8002ed8 <HAL_GPIO_DeInit+0x1f0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d031      	beq.n	8002da8 <HAL_GPIO_DeInit+0xc0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_GPIO_DeInit+0x1f4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d02b      	beq.n	8002da4 <HAL_GPIO_DeInit+0xbc>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a64      	ldr	r2, [pc, #400]	; (8002ee0 <HAL_GPIO_DeInit+0x1f8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d025      	beq.n	8002da0 <HAL_GPIO_DeInit+0xb8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a63      	ldr	r2, [pc, #396]	; (8002ee4 <HAL_GPIO_DeInit+0x1fc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01f      	beq.n	8002d9c <HAL_GPIO_DeInit+0xb4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a62      	ldr	r2, [pc, #392]	; (8002ee8 <HAL_GPIO_DeInit+0x200>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d019      	beq.n	8002d98 <HAL_GPIO_DeInit+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_GPIO_DeInit+0x204>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_GPIO_DeInit+0xac>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <HAL_GPIO_DeInit+0x208>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00d      	beq.n	8002d90 <HAL_GPIO_DeInit+0xa8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a5f      	ldr	r2, [pc, #380]	; (8002ef4 <HAL_GPIO_DeInit+0x20c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <HAL_GPIO_DeInit+0xa4>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a5e      	ldr	r2, [pc, #376]	; (8002ef8 <HAL_GPIO_DeInit+0x210>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_GPIO_DeInit+0xa0>
 8002d84:	2309      	movs	r3, #9
 8002d86:	e012      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002d88:	230a      	movs	r3, #10
 8002d8a:	e010      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	e00e      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002d90:	2307      	movs	r3, #7
 8002d92:	e00c      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002d94:	2306      	movs	r3, #6
 8002d96:	e00a      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002d98:	2305      	movs	r3, #5
 8002d9a:	e008      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_DeInit+0xc6>
 8002dac:	2300      	movs	r3, #0
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d136      	bne.n	8002e2c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de8:	4013      	ands	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e0e:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <HAL_GPIO_DeInit+0x1e8>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	482c      	ldr	r0, [pc, #176]	; (8002ed0 <HAL_GPIO_DeInit+0x1e8>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	400a      	ands	r2, r1
 8002e26:	3302      	adds	r3, #2
 8002e28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2103      	movs	r1, #3
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	08d2      	lsrs	r2, r2, #3
 8002e60:	4019      	ands	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3208      	adds	r2, #8
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2103      	movs	r1, #3
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	2101      	movs	r1, #1
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f47f af1f 	bne.w	8002cfc <HAL_GPIO_DeInit+0x14>
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	58000080 	.word	0x58000080
 8002ed0:	58000400 	.word	0x58000400
 8002ed4:	58020000 	.word	0x58020000
 8002ed8:	58020400 	.word	0x58020400
 8002edc:	58020800 	.word	0x58020800
 8002ee0:	58020c00 	.word	0x58020c00
 8002ee4:	58021000 	.word	0x58021000
 8002ee8:	58021400 	.word	0x58021400
 8002eec:	58021800 	.word	0x58021800
 8002ef0:	58021c00 	.word	0x58021c00
 8002ef4:	58022000 	.word	0x58022000
 8002ef8:	58022400 	.word	0x58022400

08002efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f70:	887a      	ldrh	r2, [r7, #2]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	041a      	lsls	r2, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	400b      	ands	r3, r1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f804 	bl	8002fc6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_PWREx_ConfigSupply+0x70>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00a      	beq.n	8003006 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_PWREx_ConfigSupply+0x70>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01f      	b.n	8003042 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e01d      	b.n	8003042 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_PWREx_ConfigSupply+0x70>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	490f      	ldr	r1, [pc, #60]	; (800304c <HAL_PWREx_ConfigSupply+0x70>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003016:	f7fe fad9 	bl	80015cc <HAL_GetTick>
 800301a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800301c:	e009      	b.n	8003032 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800301e:	f7fe fad5 	bl	80015cc <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302c:	d901      	bls.n	8003032 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e007      	b.n	8003042 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_PWREx_ConfigSupply+0x70>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	d1ee      	bne.n	800301e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	58024800 	.word	0x58024800

08003050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f000 bc48 	b.w	80038f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8088 	beq.w	8003182 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003072:	4b99      	ldr	r3, [pc, #612]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800307c:	4b96      	ldr	r3, [pc, #600]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	2b10      	cmp	r3, #16
 8003086:	d007      	beq.n	8003098 <HAL_RCC_OscConfig+0x48>
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	2b18      	cmp	r3, #24
 800308c:	d111      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	4b8f      	ldr	r3, [pc, #572]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d06d      	beq.n	8003180 <HAL_RCC_OscConfig+0x130>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d169      	bne.n	8003180 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f000 bc21 	b.w	80038f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x7a>
 80030bc:	4b86      	ldr	r3, [pc, #536]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a85      	ldr	r2, [pc, #532]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x9c>
 80030d2:	4b81      	ldr	r3, [pc, #516]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a80      	ldr	r2, [pc, #512]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b7e      	ldr	r3, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7d      	ldr	r2, [pc, #500]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xc0>
 80030f6:	4b78      	ldr	r3, [pc, #480]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a77      	ldr	r2, [pc, #476]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a74      	ldr	r2, [pc, #464]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 8003110:	4b71      	ldr	r3, [pc, #452]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a70      	ldr	r2, [pc, #448]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b6e      	ldr	r3, [pc, #440]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6d      	ldr	r2, [pc, #436]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fa4c 	bl	80015cc <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fa48 	bl	80015cc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e3d4      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fa38 	bl	80015cc <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fa34 	bl	80015cc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e3c0      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003172:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x110>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80ca 	beq.w	8003324 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003190:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003198:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800319a:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_RCC_OscConfig+0x166>
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	2b18      	cmp	r3, #24
 80031aa:	d156      	bne.n	800325a <HAL_RCC_OscConfig+0x20a>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d151      	bne.n	800325a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b6:	4b48      	ldr	r3, [pc, #288]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e392      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ce:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0219 	bic.w	r2, r3, #25
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	493f      	ldr	r1, [pc, #252]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f9f4 	bl	80015cc <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe f9f0 	bl	80015cc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e37c      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	f7fe fa11 	bl	800162c <HAL_GetREVID>
 800320a:	4603      	mov	r3, r0
 800320c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003210:	4293      	cmp	r3, r2
 8003212:	d817      	bhi.n	8003244 <HAL_RCC_OscConfig+0x1f4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d108      	bne.n	800322e <HAL_RCC_OscConfig+0x1de>
 800321c:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800322c:	e07a      	b.n	8003324 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	031b      	lsls	r3, r3, #12
 800323c:	4926      	ldr	r1, [pc, #152]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003242:	e06f      	b.n	8003324 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	4921      	ldr	r1, [pc, #132]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003258:	e064      	b.n	8003324 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d047      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 0219 	bic.w	r2, r3, #25
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	491a      	ldr	r1, [pc, #104]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f9aa 	bl	80015cc <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f9a6 	bl	80015cc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e332      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	f7fe f9c7 	bl	800162c <HAL_GetREVID>
 800329e:	4603      	mov	r3, r0
 80032a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d819      	bhi.n	80032dc <HAL_RCC_OscConfig+0x28c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d108      	bne.n	80032c2 <HAL_RCC_OscConfig+0x272>
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80032b8:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80032ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032be:	6053      	str	r3, [r2, #4]
 80032c0:	e030      	b.n	8003324 <HAL_RCC_OscConfig+0x2d4>
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	031b      	lsls	r3, r3, #12
 80032d0:	4901      	ldr	r1, [pc, #4]	; (80032d8 <HAL_RCC_OscConfig+0x288>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
 80032d6:	e025      	b.n	8003324 <HAL_RCC_OscConfig+0x2d4>
 80032d8:	58024400 	.word	0x58024400
 80032dc:	4b9a      	ldr	r3, [pc, #616]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	4997      	ldr	r1, [pc, #604]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	e018      	b.n	8003324 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b95      	ldr	r3, [pc, #596]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a94      	ldr	r2, [pc, #592]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe f965 	bl	80015cc <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7fe f961 	bl	80015cc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e2ed      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a9 	beq.w	8003484 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800333c:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d007      	beq.n	8003358 <HAL_RCC_OscConfig+0x308>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b18      	cmp	r3, #24
 800334c:	d13a      	bne.n	80033c4 <HAL_RCC_OscConfig+0x374>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d135      	bne.n	80033c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x320>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e2c1      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003370:	f7fe f95c 	bl	800162c <HAL_GetREVID>
 8003374:	4603      	mov	r3, r0
 8003376:	f241 0203 	movw	r2, #4099	; 0x1003
 800337a:	4293      	cmp	r3, r2
 800337c:	d817      	bhi.n	80033ae <HAL_RCC_OscConfig+0x35e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	2b20      	cmp	r3, #32
 8003384:	d108      	bne.n	8003398 <HAL_RCC_OscConfig+0x348>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800338e:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003394:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003396:	e075      	b.n	8003484 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	069b      	lsls	r3, r3, #26
 80033a6:	4968      	ldr	r1, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033ac:	e06a      	b.n	8003484 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033ae:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	4962      	ldr	r1, [pc, #392]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033c2:	e05f      	b.n	8003484 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d042      	beq.n	8003452 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe f8f8 	bl	80015cc <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033e0:	f7fe f8f4 	bl	80015cc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e280      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f2:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033fe:	f7fe f915 	bl	800162c <HAL_GetREVID>
 8003402:	4603      	mov	r3, r0
 8003404:	f241 0203 	movw	r2, #4099	; 0x1003
 8003408:	4293      	cmp	r3, r2
 800340a:	d817      	bhi.n	800343c <HAL_RCC_OscConfig+0x3ec>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	2b20      	cmp	r3, #32
 8003412:	d108      	bne.n	8003426 <HAL_RCC_OscConfig+0x3d6>
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800341c:	4a4a      	ldr	r2, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800341e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003422:	6053      	str	r3, [r2, #4]
 8003424:	e02e      	b.n	8003484 <HAL_RCC_OscConfig+0x434>
 8003426:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	069b      	lsls	r3, r3, #26
 8003434:	4944      	ldr	r1, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
 800343a:	e023      	b.n	8003484 <HAL_RCC_OscConfig+0x434>
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	493f      	ldr	r1, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800344c:	4313      	orrs	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
 8003450:	e018      	b.n	8003484 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a3c      	ldr	r2, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe f8b5 	bl	80015cc <HAL_GetTick>
 8003462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003466:	f7fe f8b1 	bl	80015cc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e23d      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003478:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d036      	beq.n	80034fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d019      	beq.n	80034cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe f892 	bl	80015cc <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe f88e 	bl	80015cc <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e21a      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x45c>
 80034ca:	e018      	b.n	80034fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe f878 	bl	80015cc <HAL_GetTick>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e0:	f7fe f874 	bl	80015cc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e200      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d039      	beq.n	800357e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01c      	beq.n	800354c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 8003518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800351c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800351e:	f7fe f855 	bl	80015cc <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003526:	f7fe f851 	bl	80015cc <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1dd      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_OscConfig+0x4f8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x4d6>
 8003544:	e01b      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
 8003546:	bf00      	nop
 8003548:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800354c:	4b9b      	ldr	r3, [pc, #620]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a9a      	ldr	r2, [pc, #616]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003556:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003558:	f7fe f838 	bl	80015cc <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003560:	f7fe f834 	bl	80015cc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1c0      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003572:	4b92      	ldr	r3, [pc, #584]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8081 	beq.w	800368e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800358c:	4b8c      	ldr	r3, [pc, #560]	; (80037c0 <HAL_RCC_OscConfig+0x770>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a8b      	ldr	r2, [pc, #556]	; (80037c0 <HAL_RCC_OscConfig+0x770>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003598:	f7fe f818 	bl	80015cc <HAL_GetTick>
 800359c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a0:	f7fe f814 	bl	80015cc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1a0      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b2:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <HAL_RCC_OscConfig+0x770>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x584>
 80035c6:	4b7d      	ldr	r3, [pc, #500]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a7c      	ldr	r2, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	e02d      	b.n	8003630 <HAL_RCC_OscConfig+0x5e0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x5a6>
 80035dc:	4b77      	ldr	r3, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a76      	ldr	r2, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	4b74      	ldr	r3, [pc, #464]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a73      	ldr	r2, [pc, #460]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80035ee:	f023 0304 	bic.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x5e0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c8>
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a6b      	ldr	r2, [pc, #428]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x5e0>
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a67      	ldr	r2, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a64      	ldr	r2, [pc, #400]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd ffc8 	bl	80015cc <HAL_GetTick>
 800363c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fd ffc4 	bl	80015cc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e14e      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ee      	beq.n	8003640 <HAL_RCC_OscConfig+0x5f0>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd ffb2 	bl	80015cc <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd ffae 	bl	80015cc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e138      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003682:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ee      	bne.n	800366c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 812d 	beq.w	80038f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003698:	4b48      	ldr	r3, [pc, #288]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a0:	2b18      	cmp	r3, #24
 80036a2:	f000 80bd 	beq.w	8003820 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	f040 809e 	bne.w	80037ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a41      	ldr	r2, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80036b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd ff86 	bl	80015cc <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fd ff82 	bl	80015cc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e10e      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80036e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_OscConfig+0x774>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	430a      	orrs	r2, r1
 80036f6:	4931      	ldr	r1, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	628b      	str	r3, [r1, #40]	; 0x28
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	3b01      	subs	r3, #1
 8003702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	3b01      	subs	r3, #1
 800370c:	025b      	lsls	r3, r3, #9
 800370e:	b29b      	uxth	r3, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	3b01      	subs	r3, #1
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	3b01      	subs	r3, #1
 8003726:	061b      	lsls	r3, r3, #24
 8003728:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800372c:	4923      	ldr	r1, [pc, #140]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_RCC_OscConfig+0x778>)
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800374a:	00d2      	lsls	r2, r2, #3
 800374c:	491b      	ldr	r1, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f023 020c 	bic.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4917      	ldr	r1, [pc, #92]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003760:	4313      	orrs	r3, r2
 8003762:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f023 0202 	bic.w	r2, r3, #2
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	4912      	ldr	r1, [pc, #72]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_RCC_OscConfig+0x76c>)
 80037ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fd ff0b 	bl	80015cc <HAL_GetTick>
 80037b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037b8:	e011      	b.n	80037de <HAL_RCC_OscConfig+0x78e>
 80037ba:	bf00      	nop
 80037bc:	58024400 	.word	0x58024400
 80037c0:	58024800 	.word	0x58024800
 80037c4:	fffffc0c 	.word	0xfffffc0c
 80037c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fefe 	bl	80015cc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e08a      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x77c>
 80037ea:	e082      	b.n	80038f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a42      	ldr	r2, [pc, #264]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80037f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd fee8 	bl	80015cc <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fee4 	bl	80015cc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e070      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003812:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x7b0>
 800381e:	e068      	b.n	80038f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003826:	4b35      	ldr	r3, [pc, #212]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b01      	cmp	r3, #1
 8003832:	d031      	beq.n	8003898 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d12a      	bne.n	8003898 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d122      	bne.n	8003898 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11a      	bne.n	8003898 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	0a5b      	lsrs	r3, r3, #9
 8003866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d111      	bne.n	8003898 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d108      	bne.n	8003898 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e02b      	b.n	80038f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d01f      	beq.n	80038f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	4a11      	ldr	r2, [pc, #68]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038be:	f7fd fe85 	bl	80015cc <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80038c4:	bf00      	nop
 80038c6:	f7fd fe81 	bl	80015cc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d0f9      	beq.n	80038c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80038d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_RCC_OscConfig+0x8b0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038de:	00d2      	lsls	r2, r2, #3
 80038e0:	4906      	ldr	r1, [pc, #24]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_RCC_OscConfig+0x8ac>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	58024400 	.word	0x58024400
 8003900:	ffff0007 	.word	0xffff0007

08003904 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e19c      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b8a      	ldr	r3, [pc, #552]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 020f 	bic.w	r2, r3, #15
 800392e:	4985      	ldr	r1, [pc, #532]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b83      	ldr	r3, [pc, #524]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e184      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003960:	429a      	cmp	r2, r3
 8003962:	d908      	bls.n	8003976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003964:	4b78      	ldr	r3, [pc, #480]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4975      	ldr	r1, [pc, #468]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003972:	4313      	orrs	r3, r2
 8003974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800398e:	429a      	cmp	r2, r3
 8003990:	d908      	bls.n	80039a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	496a      	ldr	r1, [pc, #424]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039bc:	429a      	cmp	r2, r3
 80039be:	d908      	bls.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	495e      	ldr	r1, [pc, #376]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d908      	bls.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ee:	4b56      	ldr	r3, [pc, #344]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4953      	ldr	r1, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d908      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f023 020f 	bic.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4947      	ldr	r1, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d055      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4940      	ldr	r1, [pc, #256]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a54:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d121      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0f6      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0ea      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a84:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0de      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0d6      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f023 0207 	bic.w	r2, r3, #7
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4925      	ldr	r1, [pc, #148]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fd89 	bl	80015cc <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abe:	f7fd fd85 	bl	80015cc <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0be      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d1eb      	bne.n	8003abe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d208      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f023 020f 	bic.w	r2, r3, #15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d214      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4906      	ldr	r1, [pc, #24]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e086      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
 8003b44:	52002000 	.word	0x52002000
 8003b48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d208      	bcs.n	8003b7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b68:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	4939      	ldr	r1, [pc, #228]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d208      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	492e      	ldr	r1, [pc, #184]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d208      	bcs.n	8003bd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4922      	ldr	r1, [pc, #136]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d208      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4917      	ldr	r1, [pc, #92]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c04:	f000 f834 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	4912      	ldr	r1, [pc, #72]	; (8003c60 <HAL_RCC_ClockConfig+0x35c>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <HAL_RCC_ClockConfig+0x35c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x360>)
 8003c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x364>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_RCC_ClockConfig+0x368>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd fb1c 	bl	8001284 <HAL_InitTick>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	08014bb8 	.word	0x08014bb8
 8003c64:	24000004 	.word	0x24000004
 8003c68:	24000000 	.word	0x24000000
 8003c6c:	24000008 	.word	0x24000008

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c76:	4bb3      	ldr	r3, [pc, #716]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c7e:	2b18      	cmp	r3, #24
 8003c80:	f200 8155 	bhi.w	8003f2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003cf1 	.word	0x08003cf1
 8003c90:	08003f2f 	.word	0x08003f2f
 8003c94:	08003f2f 	.word	0x08003f2f
 8003c98:	08003f2f 	.word	0x08003f2f
 8003c9c:	08003f2f 	.word	0x08003f2f
 8003ca0:	08003f2f 	.word	0x08003f2f
 8003ca4:	08003f2f 	.word	0x08003f2f
 8003ca8:	08003f2f 	.word	0x08003f2f
 8003cac:	08003d17 	.word	0x08003d17
 8003cb0:	08003f2f 	.word	0x08003f2f
 8003cb4:	08003f2f 	.word	0x08003f2f
 8003cb8:	08003f2f 	.word	0x08003f2f
 8003cbc:	08003f2f 	.word	0x08003f2f
 8003cc0:	08003f2f 	.word	0x08003f2f
 8003cc4:	08003f2f 	.word	0x08003f2f
 8003cc8:	08003f2f 	.word	0x08003f2f
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003f2f 	.word	0x08003f2f
 8003cd4:	08003f2f 	.word	0x08003f2f
 8003cd8:	08003f2f 	.word	0x08003f2f
 8003cdc:	08003f2f 	.word	0x08003f2f
 8003ce0:	08003f2f 	.word	0x08003f2f
 8003ce4:	08003f2f 	.word	0x08003f2f
 8003ce8:	08003f2f 	.word	0x08003f2f
 8003cec:	08003d23 	.word	0x08003d23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf0:	4b94      	ldr	r3, [pc, #592]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cfc:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003d0e:	e111      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d10:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d12:	61bb      	str	r3, [r7, #24]
      break;
 8003d14:	e10e      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003d16:	4b8d      	ldr	r3, [pc, #564]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d18:	61bb      	str	r3, [r7, #24]
      break;
 8003d1a:	e10b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d1e:	61bb      	str	r3, [r7, #24]
      break;
 8003d20:	e108      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d22:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d2c:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d38:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d42:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80e1 	beq.w	8003f28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	f000 8083 	beq.w	8003e74 <HAL_RCC_GetSysClockFreq+0x204>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f200 80a1 	bhi.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x248>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x114>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d056      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d82:	e099      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02d      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d90:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	4a6b      	ldr	r2, [pc, #428]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003dea:	e087      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e2e:	e065      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e72:	e043      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eb6:	e021      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ede:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003efa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	3301      	adds	r3, #1
 8003f08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f20:	ee17 3a90 	vmov	r3, s15
 8003f24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
      break;
 8003f2c:	e002      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f30:	61bb      	str	r3, [r7, #24]
      break;
 8003f32:	bf00      	nop
  }

  return sysclockfreq;
 8003f34:	69bb      	ldr	r3, [r7, #24]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
 8003f48:	03d09000 	.word	0x03d09000
 8003f4c:	003d0900 	.word	0x003d0900
 8003f50:	017d7840 	.word	0x017d7840
 8003f54:	46000000 	.word	0x46000000
 8003f58:	4c742400 	.word	0x4c742400
 8003f5c:	4a742400 	.word	0x4a742400
 8003f60:	4bbebc20 	.word	0x4bbebc20

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f6a:	f7ff fe81 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490f      	ldr	r1, [pc, #60]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f92:	5cd3      	ldrb	r3, [r2, r3]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003fa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	08014bb8 	.word	0x08014bb8
 8003fbc:	24000004 	.word	0x24000004
 8003fc0:	24000000 	.word	0x24000000

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003fc8:	f7ff ffcc 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4904      	ldr	r1, [pc, #16]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	08014bb8 	.word	0x08014bb8

08003ff0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	223f      	movs	r2, #63	; 0x3f
 8003ffe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0207 	and.w	r2, r3, #7
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_RCC_GetClockConfig+0x7c>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_GetClockConfig+0x80>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 020f 	and.w	r2, r3, #15
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	58024400 	.word	0x58024400
 8004070:	52002000 	.word	0x52002000

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b0ca      	sub	sp, #296	; 0x128
 800407a:	af00      	add	r7, sp, #0
 800407c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004080:	2300      	movs	r3, #0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004098:	2500      	movs	r5, #0
 800409a:	ea54 0305 	orrs.w	r3, r4, r5
 800409e:	d049      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040aa:	d02f      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b0:	d828      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040b6:	d01a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040bc:	d822      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c6:	d007      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040c8:	e01c      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ca:	4bb8      	ldr	r3, [pc, #736]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4ab7      	ldr	r2, [pc, #732]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040d6:	e01a      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	3308      	adds	r3, #8
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f002 fb61 	bl	80067a8 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040ec:	e00f      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f2:	3328      	adds	r3, #40	; 0x28
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f002 fc08 	bl	800690c <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004116:	4ba5      	ldr	r3, [pc, #660]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004124:	4aa1      	ldr	r2, [pc, #644]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6513      	str	r3, [r2, #80]	; 0x50
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004140:	f04f 0900 	mov.w	r9, #0
 8004144:	ea58 0309 	orrs.w	r3, r8, r9
 8004148:	d047      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	2b04      	cmp	r3, #4
 8004152:	d82a      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004171 	.word	0x08004171
 8004160:	0800417f 	.word	0x0800417f
 8004164:	08004195 	.word	0x08004195
 8004168:	080041b3 	.word	0x080041b3
 800416c:	080041b3 	.word	0x080041b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004170:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	4a8d      	ldr	r2, [pc, #564]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800417c:	e01a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004182:	3308      	adds	r3, #8
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f002 fb0e 	bl	80067a8 <RCCEx_PLL2_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004192:	e00f      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	3328      	adds	r3, #40	; 0x28
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f002 fbb5 	bl	800690c <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041bc:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	f023 0107 	bic.w	r1, r3, #7
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	4a78      	ldr	r2, [pc, #480]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6513      	str	r3, [r2, #80]	; 0x50
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80041e6:	f04f 0b00 	mov.w	fp, #0
 80041ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80041ee:	d04c      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	d030      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80041fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004200:	d829      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004202:	2bc0      	cmp	r3, #192	; 0xc0
 8004204:	d02d      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004206:	2bc0      	cmp	r3, #192	; 0xc0
 8004208:	d825      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d018      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d821      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d007      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800421a:	e01c      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421c:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	4a62      	ldr	r2, [pc, #392]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004228:	e01c      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422e:	3308      	adds	r3, #8
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fab8 	bl	80067a8 <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800423e:	e011      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	3328      	adds	r3, #40	; 0x28
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f002 fb5f 	bl	800690c <RCCEx_PLL3_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800425c:	e002      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800426c:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004270:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	4a4c      	ldr	r2, [pc, #304]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800427c:	430b      	orrs	r3, r1
 800427e:	6513      	str	r3, [r2, #80]	; 0x50
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004296:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800429a:	2300      	movs	r3, #0
 800429c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d053      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b6:	d035      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80042b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042bc:	d82e      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042c2:	d031      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80042c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042c8:	d828      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ce:	d01a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d4:	d822      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80042da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042de:	d007      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80042e0:	e01c      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042ee:	e01c      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f4:	3308      	adds	r3, #8
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f002 fa55 	bl	80067a8 <RCCEx_PLL2_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004304:	e011      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430a:	3328      	adds	r3, #40	; 0x28
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f002 fafc 	bl	800690c <RCCEx_PLL3_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800431a:	e006      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004322:	e002      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004344:	430b      	orrs	r3, r1
 8004346:	6593      	str	r3, [r2, #88]	; 0x58
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800435e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004368:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800436c:	460b      	mov	r3, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	d056      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004376:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800437a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800437e:	d038      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004384:	d831      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004386:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800438a:	d034      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800438c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004390:	d82b      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004396:	d01d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800439c:	d825      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043a8:	e01f      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b0:	4ba2      	ldr	r3, [pc, #648]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	4aa1      	ldr	r2, [pc, #644]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043bc:	e01c      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	3308      	adds	r3, #8
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 f9ee 	bl	80067a8 <RCCEx_PLL2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	3328      	adds	r3, #40	; 0x28
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f002 fa95 	bl	800690c <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043f0:	e002      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004400:	4b8e      	ldr	r3, [pc, #568]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004410:	4a8a      	ldr	r2, [pc, #552]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004412:	430b      	orrs	r3, r1
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800441c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800442c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004430:	2300      	movs	r3, #0
 8004432:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004436:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d03a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	2b30      	cmp	r3, #48	; 0x30
 8004448:	d01f      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800444a:	2b30      	cmp	r3, #48	; 0x30
 800444c:	d819      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800444e:	2b20      	cmp	r3, #32
 8004450:	d00c      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d815      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d019      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800445a:	2b10      	cmp	r3, #16
 800445c:	d111      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445e:	4b77      	ldr	r3, [pc, #476]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	4a76      	ldr	r2, [pc, #472]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004470:	3308      	adds	r3, #8
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f002 f997 	bl	80067a8 <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004480:	e006      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004488:	e002      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004498:	4b68      	ldr	r3, [pc, #416]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80044c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4313      	orrs	r3, r2
 80044d4:	d051      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e0:	d035      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80044e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e6:	d82e      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ec:	d031      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80044ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044f2:	d828      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f8:	d01a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80044fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fe:	d822      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d007      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800450a:	e01c      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4b4b      	ldr	r3, [pc, #300]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a4a      	ldr	r2, [pc, #296]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004518:	e01c      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451e:	3308      	adds	r3, #8
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f002 f940 	bl	80067a8 <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800452e:	e011      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	3328      	adds	r3, #40	; 0x28
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f002 f9e7 	bl	800690c <RCCEx_PLL3_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800454c:	e002      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	4a34      	ldr	r2, [pc, #208]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800456c:	430b      	orrs	r3, r1
 800456e:	6513      	str	r3, [r2, #80]	; 0x50
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004590:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d056      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d033      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80045a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045aa:	d82c      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045b0:	d02f      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80045b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045b6:	d826      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045bc:	d02b      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80045be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045c2:	d820      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c8:	d012      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80045ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ce:	d81a      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d022      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d115      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045de:	3308      	adds	r3, #8
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f002 f8e0 	bl	80067a8 <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045ee:	e015      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f4:	3328      	adds	r3, #40	; 0x28
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f002 f987 	bl	800690c <RCCEx_PLL3_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004604:	e00a      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800461a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10d      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004632:	4a02      	ldr	r2, [pc, #8]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004634:	430b      	orrs	r3, r1
 8004636:	6513      	str	r3, [r2, #80]	; 0x50
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004644:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800465e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d055      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004674:	d033      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800467a:	d82c      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004680:	d02f      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d826      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800468c:	d02b      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800468e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004692:	d820      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004698:	d012      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800469a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469e:	d81a      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d022      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80046a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a8:	d115      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	3308      	adds	r3, #8
 80046b0:	2101      	movs	r1, #1
 80046b2:	4618      	mov	r0, r3
 80046b4:	f002 f878 	bl	80067a8 <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046be:	e015      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c4:	3328      	adds	r3, #40	; 0x28
 80046c6:	2101      	movs	r1, #1
 80046c8:	4618      	mov	r0, r3
 80046ca:	f002 f91f 	bl	800690c <RCCEx_PLL3_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046d4:	e00a      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046dc:	e006      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046de:	bf00      	nop
 80046e0:	e004      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046e2:	bf00      	nop
 80046e4:	e002      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046f4:	4ba3      	ldr	r3, [pc, #652]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004704:	4a9f      	ldr	r2, [pc, #636]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004706:	430b      	orrs	r3, r1
 8004708:	6593      	str	r3, [r2, #88]	; 0x58
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800472a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d037      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473e:	d00e      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004744:	d816      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800474a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800474e:	d111      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004750:	4b8c      	ldr	r3, [pc, #560]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	4a8b      	ldr	r2, [pc, #556]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800475a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800475c:	e00f      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004762:	3308      	adds	r3, #8
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f002 f81e 	bl	80067a8 <RCCEx_PLL2_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004786:	4b7f      	ldr	r3, [pc, #508]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a7b      	ldr	r2, [pc, #492]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6513      	str	r3, [r2, #80]	; 0x50
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d039      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d81c      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004811 	.word	0x08004811
 80047d8:	080047e5 	.word	0x080047e5
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	08004811 	.word	0x08004811
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e4:	4b67      	ldr	r3, [pc, #412]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	4a66      	ldr	r2, [pc, #408]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047f0:	e00f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f6:	3308      	adds	r3, #8
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 ffd4 	bl	80067a8 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800481a:	4b5a      	ldr	r3, [pc, #360]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	f023 0103 	bic.w	r1, r3, #3
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004828:	4a56      	ldr	r2, [pc, #344]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800482a:	430b      	orrs	r3, r1
 800482c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004834:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800484e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	f000 809f 	beq.w	8004998 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800485a:	4b4b      	ldr	r3, [pc, #300]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004866:	f7fc feb1 	bl	80015cc <HAL_GetTick>
 800486a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486e:	e00b      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004870:	f7fc feac 	bl	80015cc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b64      	cmp	r3, #100	; 0x64
 800487e:	d903      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ed      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004898:	2b00      	cmp	r3, #0
 800489a:	d179      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800489e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048a8:	4053      	eors	r3, r2
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d015      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048be:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ca:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048d6:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d118      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fc fe6e 	bl	80015cc <HAL_GetTick>
 80048f0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f4:	e00d      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fc fe69 	bl	80015cc <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004900:	1ad2      	subs	r2, r2, r3
 8004902:	f241 3388 	movw	r3, #5000	; 0x1388
 8004906:	429a      	cmp	r2, r3
 8004908:	d903      	bls.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004910:	e005      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0eb      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d129      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004936:	d10e      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004948:	091a      	lsrs	r2, r3, #4
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800494c:	4013      	ands	r3, r2
 800494e:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004950:	430b      	orrs	r3, r1
 8004952:	6113      	str	r3, [r2, #16]
 8004954:	e005      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800495c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004960:	6113      	str	r3, [r2, #16]
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004964:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800496e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004972:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	e00e      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004982:	e009      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004984:	58024400 	.word	0x58024400
 8004988:	58024800 	.word	0x58024800
 800498c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 0301 	and.w	r3, r2, #1
 80049a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f000 8089 	beq.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c0:	2b28      	cmp	r3, #40	; 0x28
 80049c2:	d86b      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004aa5 	.word	0x08004aa5
 80049d0:	08004a9d 	.word	0x08004a9d
 80049d4:	08004a9d 	.word	0x08004a9d
 80049d8:	08004a9d 	.word	0x08004a9d
 80049dc:	08004a9d 	.word	0x08004a9d
 80049e0:	08004a9d 	.word	0x08004a9d
 80049e4:	08004a9d 	.word	0x08004a9d
 80049e8:	08004a9d 	.word	0x08004a9d
 80049ec:	08004a71 	.word	0x08004a71
 80049f0:	08004a9d 	.word	0x08004a9d
 80049f4:	08004a9d 	.word	0x08004a9d
 80049f8:	08004a9d 	.word	0x08004a9d
 80049fc:	08004a9d 	.word	0x08004a9d
 8004a00:	08004a9d 	.word	0x08004a9d
 8004a04:	08004a9d 	.word	0x08004a9d
 8004a08:	08004a9d 	.word	0x08004a9d
 8004a0c:	08004a87 	.word	0x08004a87
 8004a10:	08004a9d 	.word	0x08004a9d
 8004a14:	08004a9d 	.word	0x08004a9d
 8004a18:	08004a9d 	.word	0x08004a9d
 8004a1c:	08004a9d 	.word	0x08004a9d
 8004a20:	08004a9d 	.word	0x08004a9d
 8004a24:	08004a9d 	.word	0x08004a9d
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004aa5 	.word	0x08004aa5
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	08004a9d 	.word	0x08004a9d
 8004a44:	08004a9d 	.word	0x08004a9d
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004aa5 	.word	0x08004aa5
 8004a50:	08004a9d 	.word	0x08004a9d
 8004a54:	08004a9d 	.word	0x08004a9d
 8004a58:	08004a9d 	.word	0x08004a9d
 8004a5c:	08004a9d 	.word	0x08004a9d
 8004a60:	08004a9d 	.word	0x08004a9d
 8004a64:	08004a9d 	.word	0x08004a9d
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004aa5 	.word	0x08004aa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a74:	3308      	adds	r3, #8
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fe95 	bl	80067a8 <RCCEx_PLL2_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a84:	e00f      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8a:	3328      	adds	r3, #40	; 0x28
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 ff3c 	bl	800690c <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a9a:	e004      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004aae:	4bbf      	ldr	r3, [pc, #764]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004abc:	4abb      	ldr	r2, [pc, #748]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	6553      	str	r3, [r2, #84]	; 0x54
 8004ac2:	e003      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f002 0302 	and.w	r3, r2, #2
 8004ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ae2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	d041      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d824      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b49 	.word	0x08004b49
 8004b00:	08004b15 	.word	0x08004b15
 8004b04:	08004b2b 	.word	0x08004b2b
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b49 	.word	0x08004b49
 8004b10:	08004b49 	.word	0x08004b49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b18:	3308      	adds	r3, #8
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fe43 	bl	80067a8 <RCCEx_PLL2_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b28:	e00f      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2e:	3328      	adds	r3, #40	; 0x28
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 feea 	bl	800690c <RCCEx_PLL3_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b3e:	e004      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b52:	4b96      	ldr	r3, [pc, #600]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f023 0107 	bic.w	r1, r3, #7
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b60:	4a92      	ldr	r2, [pc, #584]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b62:	430b      	orrs	r3, r1
 8004b64:	6553      	str	r3, [r2, #84]	; 0x54
 8004b66:	e003      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f002 0304 	and.w	r3, r2, #4
 8004b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	d044      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b98:	2b05      	cmp	r3, #5
 8004b9a:	d825      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bf1 	.word	0x08004bf1
 8004ba8:	08004bbd 	.word	0x08004bbd
 8004bac:	08004bd3 	.word	0x08004bd3
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004bf1 	.word	0x08004bf1
 8004bb8:	08004bf1 	.word	0x08004bf1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 fdef 	bl	80067a8 <RCCEx_PLL2_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e00f      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd6:	3328      	adds	r3, #40	; 0x28
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fe96 	bl	800690c <RCCEx_PLL3_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004be6:	e004      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bee:	e000      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10b      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bfa:	4b6c      	ldr	r3, [pc, #432]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	f023 0107 	bic.w	r1, r3, #7
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0a:	4a68      	ldr	r2, [pc, #416]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c10:	e003      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f002 0320 	and.w	r3, r2, #32
 8004c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d055      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c46:	d033      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c4c:	d82c      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c52:	d02f      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d826      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c5e:	d02b      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004c60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c64:	d820      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6a:	d012      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c70:	d81a      	bhi.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d022      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7a:	d115      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c80:	3308      	adds	r3, #8
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fd8f 	bl	80067a8 <RCCEx_PLL2_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c90:	e015      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c96:	3328      	adds	r3, #40	; 0x28
 8004c98:	2102      	movs	r1, #2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fe36 	bl	800690c <RCCEx_PLL3_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cae:	e006      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cc6:	4b39      	ldr	r3, [pc, #228]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	4a35      	ldr	r2, [pc, #212]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6553      	str	r3, [r2, #84]	; 0x54
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4313      	orrs	r3, r2
 8004d04:	d058      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d12:	d033      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d18:	d82c      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d02f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d826      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d2a:	d02b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d30:	d820      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d36:	d012      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3c:	d81a      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d022      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d115      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fd29 	bl	80067a8 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d5c:	e015      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d62:	3328      	adds	r3, #40	; 0x28
 8004d64:	2102      	movs	r1, #2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 fdd0 	bl	800690c <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d72:	e00a      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d7a:	e006      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10e      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da2:	4a02      	ldr	r2, [pc, #8]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6593      	str	r3, [r2, #88]	; 0x58
 8004da8:	e006      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d055      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004de0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004de4:	d033      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004de6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dea:	d82c      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df0:	d02f      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d826      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004df8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dfc:	d02b      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004dfe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e02:	d820      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e08:	d012      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0e:	d81a      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d022      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d115      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1e:	3308      	adds	r3, #8
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f001 fcc0 	bl	80067a8 <RCCEx_PLL2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e2e:	e015      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e34:	3328      	adds	r3, #40	; 0x28
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fd67 	bl	800690c <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e44:	e00a      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e4c:	e006      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e004      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e64:	4ba1      	ldr	r3, [pc, #644]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e74:	4a9d      	ldr	r2, [pc, #628]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7a:	e003      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f002 0308 	and.w	r3, r2, #8
 8004e90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d01e      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb6:	3328      	adds	r3, #40	; 0x28
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 fd26 	bl	800690c <RCCEx_PLL3_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ecc:	4b87      	ldr	r3, [pc, #540]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	4a83      	ldr	r2, [pc, #524]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f002 0310 	and.w	r3, r2, #16
 8004eee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ef8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d01e      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0e:	d10c      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f14:	3328      	adds	r3, #40	; 0x28
 8004f16:	2102      	movs	r1, #2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 fcf7 	bl	800690c <RCCEx_PLL3_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f2a:	4b70      	ldr	r3, [pc, #448]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3a:	4a6c      	ldr	r2, [pc, #432]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	d03e      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6c:	d022      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f72:	d81b      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d00b      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004f7e:	e015      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f84:	3308      	adds	r3, #8
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 fc0d 	bl	80067a8 <RCCEx_PLL2_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f94:	e00f      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	3328      	adds	r3, #40	; 0x28
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 fcb4 	bl	800690c <RCCEx_PLL3_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004faa:	e004      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fbe:	4b4b      	ldr	r3, [pc, #300]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fce:	4a47      	ldr	r2, [pc, #284]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd4:	e003      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004fea:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fec:	2300      	movs	r3, #0
 8004fee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ff0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005006:	d01f      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800500c:	d818      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005018:	d007      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800501a:	e011      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a32      	ldr	r2, [pc, #200]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005028:	e00f      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502e:	3328      	adds	r3, #40	; 0x28
 8005030:	2101      	movs	r1, #1
 8005032:	4618      	mov	r0, r3
 8005034:	f001 fc6a 	bl	800690c <RCCEx_PLL3_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800503e:	e004      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	4a22      	ldr	r2, [pc, #136]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005064:	430b      	orrs	r3, r1
 8005066:	6553      	str	r3, [r2, #84]	; 0x54
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800506e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800507e:	673b      	str	r3, [r7, #112]	; 0x70
 8005080:	2300      	movs	r3, #0
 8005082:	677b      	str	r3, [r7, #116]	; 0x74
 8005084:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005088:	460b      	mov	r3, r1
 800508a:	4313      	orrs	r3, r2
 800508c:	d034      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800508e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509c:	d007      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800509e:	e011      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a0:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a11      	ldr	r2, [pc, #68]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050ac:	e00e      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b2:	3308      	adds	r3, #8
 80050b4:	2102      	movs	r1, #2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 fb76 	bl	80067a8 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e2:	4a02      	ldr	r2, [pc, #8]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050e8:	e006      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80050ea:	bf00      	nop
 80050ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005104:	66bb      	str	r3, [r7, #104]	; 0x68
 8005106:	2300      	movs	r3, #0
 8005108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d00c      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	3328      	adds	r3, #40	; 0x28
 800511a:	2102      	movs	r1, #2
 800511c:	4618      	mov	r0, r3
 800511e:	f001 fbf5 	bl	800690c <RCCEx_PLL3_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800513a:	663b      	str	r3, [r7, #96]	; 0x60
 800513c:	2300      	movs	r3, #0
 800513e:	667b      	str	r3, [r7, #100]	; 0x64
 8005140:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005144:	460b      	mov	r3, r1
 8005146:	4313      	orrs	r3, r2
 8005148:	d038      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800514a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005156:	d018      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515c:	d811      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800515e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005162:	d014      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005168:	d80b      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800516e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005172:	d106      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005174:	4bc3      	ldr	r3, [pc, #780]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4ac2      	ldr	r2, [pc, #776]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800517a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005180:	e008      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005188:	e004      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800519c:	4bb9      	ldr	r3, [pc, #740]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ac:	4ab5      	ldr	r2, [pc, #724]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ae:	430b      	orrs	r3, r1
 80051b0:	6553      	str	r3, [r2, #84]	; 0x54
 80051b2:	e003      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80051c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ca:	2300      	movs	r3, #0
 80051cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80051d2:	460b      	mov	r3, r1
 80051d4:	4313      	orrs	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051d8:	4baa      	ldr	r3, [pc, #680]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	4aa7      	ldr	r2, [pc, #668]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80051f8:	653b      	str	r3, [r7, #80]	; 0x50
 80051fa:	2300      	movs	r3, #0
 80051fc:	657b      	str	r3, [r7, #84]	; 0x54
 80051fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005202:	460b      	mov	r3, r1
 8005204:	4313      	orrs	r3, r2
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005208:	4b9e      	ldr	r3, [pc, #632]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005214:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005218:	4a9a      	ldr	r2, [pc, #616]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800521a:	430b      	orrs	r3, r1
 800521c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800522a:	64bb      	str	r3, [r7, #72]	; 0x48
 800522c:	2300      	movs	r3, #0
 800522e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005230:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005234:	460b      	mov	r3, r1
 8005236:	4313      	orrs	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800523a:	4b92      	ldr	r3, [pc, #584]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800523c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005248:	4a8e      	ldr	r2, [pc, #568]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800524a:	430b      	orrs	r3, r1
 800524c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
 800525c:	2300      	movs	r3, #0
 800525e:	647b      	str	r3, [r7, #68]	; 0x44
 8005260:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005264:	460b      	mov	r3, r1
 8005266:	4313      	orrs	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800526a:	4b86      	ldr	r3, [pc, #536]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	4a85      	ldr	r2, [pc, #532]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005270:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005274:	6113      	str	r3, [r2, #16]
 8005276:	4b83      	ldr	r3, [pc, #524]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005278:	6919      	ldr	r1, [r3, #16]
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005282:	4a80      	ldr	r2, [pc, #512]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
 8005296:	2300      	movs	r3, #0
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800529a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052a4:	4b77      	ldr	r3, [pc, #476]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	4a74      	ldr	r2, [pc, #464]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052b4:	430b      	orrs	r3, r1
 80052b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80052ce:	460b      	mov	r3, r1
 80052d0:	4313      	orrs	r3, r2
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052d4:	4b6b      	ldr	r3, [pc, #428]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e4:	4a67      	ldr	r2, [pc, #412]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	2100      	movs	r1, #0
 80052f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005300:	460b      	mov	r3, r1
 8005302:	4313      	orrs	r3, r2
 8005304:	d011      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530a:	3308      	adds	r3, #8
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fa4a 	bl	80067a8 <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	2100      	movs	r1, #0
 8005334:	6239      	str	r1, [r7, #32]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
 800533c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005340:	460b      	mov	r3, r1
 8005342:	4313      	orrs	r3, r2
 8005344:	d011      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534a:	3308      	adds	r3, #8
 800534c:	2101      	movs	r1, #1
 800534e:	4618      	mov	r0, r3
 8005350:	f001 fa2a 	bl	80067a8 <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800535a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	2100      	movs	r1, #0
 8005374:	61b9      	str	r1, [r7, #24]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d011      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538a:	3308      	adds	r3, #8
 800538c:	2102      	movs	r1, #2
 800538e:	4618      	mov	r0, r3
 8005390:	f001 fa0a 	bl	80067a8 <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	2100      	movs	r1, #0
 80053b4:	6139      	str	r1, [r7, #16]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053c0:	460b      	mov	r3, r1
 80053c2:	4313      	orrs	r3, r2
 80053c4:	d011      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ca:	3328      	adds	r3, #40	; 0x28
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fa9c 	bl	800690c <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	2100      	movs	r1, #0
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d011      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540a:	3328      	adds	r3, #40	; 0x28
 800540c:	2101      	movs	r1, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f001 fa7c 	bl	800690c <RCCEx_PLL3_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800541a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	2100      	movs	r1, #0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005440:	460b      	mov	r3, r1
 8005442:	4313      	orrs	r3, r2
 8005444:	d011      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	3328      	adds	r3, #40	; 0x28
 800544c:	2102      	movs	r1, #2
 800544e:	4618      	mov	r0, r3
 8005450:	f001 fa5c 	bl	800690c <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800545a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800546a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
}
 8005478:	4618      	mov	r0, r3
 800547a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800547e:	46bd      	mov	sp, r7
 8005480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005484:	58024400 	.word	0x58024400

08005488 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b090      	sub	sp, #64	; 0x40
 800548c:	af00      	add	r7, sp, #0
 800548e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005496:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800549a:	430b      	orrs	r3, r1
 800549c:	f040 8094 	bne.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80054a0:	4b9e      	ldr	r3, [pc, #632]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	f200 8087 	bhi.w	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054f5 	.word	0x080054f5
 80054c0:	0800551d 	.word	0x0800551d
 80054c4:	080055b9 	.word	0x080055b9
 80054c8:	08005545 	.word	0x08005545
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054cc:	4b93      	ldr	r3, [pc, #588]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d8:	d108      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 f810 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e8:	f000 bd45 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f0:	f000 bd41 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f4:	4b89      	ldr	r3, [pc, #548]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005500:	d108      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005502:	f107 0318 	add.w	r3, r7, #24
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fd54 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005510:	f000 bd31 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005518:	f000 bd2d 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800551c:	4b7f      	ldr	r3, [pc, #508]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005528:	d108      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fe94 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005538:	f000 bd1d 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005540:	f000 bd19 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005544:	4b75      	ldr	r3, [pc, #468]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800554c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800554e:	4b73      	ldr	r3, [pc, #460]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b04      	cmp	r3, #4
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005560:	4b6e      	ldr	r3, [pc, #440]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	08db      	lsrs	r3, r3, #3
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	4a6d      	ldr	r2, [pc, #436]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005572:	e01f      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005574:	4b69      	ldr	r3, [pc, #420]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005580:	d106      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005588:	d102      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800558a:	4b66      	ldr	r3, [pc, #408]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558e:	e011      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005590:	4b62      	ldr	r3, [pc, #392]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800559c:	d106      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a4:	d102      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055a6:	4b60      	ldr	r3, [pc, #384]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055aa:	e003      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80055b0:	f000 bce1 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055b4:	f000 bcdf 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055b8:	4b5c      	ldr	r3, [pc, #368]	; (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055bc:	f000 bcdb 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c4:	f000 bcd7 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80055c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055cc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80055d0:	430b      	orrs	r3, r1
 80055d2:	f040 80ad 	bne.w	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80055d6:	4b51      	ldr	r3, [pc, #324]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80055de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e6:	d056      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	f200 8090 	bhi.w	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2bc0      	cmp	r3, #192	; 0xc0
 80055f6:	f000 8088 	beq.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	2bc0      	cmp	r3, #192	; 0xc0
 80055fe:	f200 8088 	bhi.w	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b80      	cmp	r3, #128	; 0x80
 8005606:	d032      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	f200 8081 	bhi.w	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d014      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800561c:	e079      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800561e:	4b3f      	ldr	r3, [pc, #252]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800562a:	d108      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800562c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005630:	4618      	mov	r0, r3
 8005632:	f000 ff67 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800563a:	f000 bc9c 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005642:	f000 bc98 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005646:	4b35      	ldr	r3, [pc, #212]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800564e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005652:	d108      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005654:	f107 0318 	add.w	r3, r7, #24
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fcab 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005662:	f000 bc88 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800566a:	f000 bc84 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800566e:	4b2b      	ldr	r3, [pc, #172]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567a:	d108      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fdeb 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800568a:	f000 bc74 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005692:	f000 bc70 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005696:	4b21      	ldr	r3, [pc, #132]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c4:	e01f      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056c6:	4b15      	ldr	r3, [pc, #84]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d2:	d106      	bne.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056da:	d102      	bne.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	e011      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ee:	d106      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f6:	d102      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005702:	f000 bc38 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005706:	f000 bc36 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800570a:	4b08      	ldr	r3, [pc, #32]	; (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800570e:	f000 bc32 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005716:	f000 bc2e 	b.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
 8005720:	03d09000 	.word	0x03d09000
 8005724:	003d0900 	.word	0x003d0900
 8005728:	017d7840 	.word	0x017d7840
 800572c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005734:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005738:	430b      	orrs	r3, r1
 800573a:	f040 809c 	bne.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800573e:	4b9e      	ldr	r3, [pc, #632]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005742:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005746:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800574e:	d054      	beq.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005756:	f200 808b 	bhi.w	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005760:	f000 8083 	beq.w	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800576a:	f200 8081 	bhi.w	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005774:	d02f      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577c:	d878      	bhi.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800578a:	d012      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800578c:	e070      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800578e:	4b8a      	ldr	r3, [pc, #552]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800579a:	d107      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800579c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 feaf 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057aa:	e3e4      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b0:	e3e1      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057b2:	4b81      	ldr	r3, [pc, #516]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057be:	d107      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057c0:	f107 0318 	add.w	r3, r7, #24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fbf5 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ce:	e3d2      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d4:	e3cf      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057d6:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e2:	d107      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fd37 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f2:	e3c0      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f8:	e3bd      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057fa:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005802:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005804:	4b6c      	ldr	r3, [pc, #432]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d10c      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005816:	4b68      	ldr	r3, [pc, #416]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	4a66      	ldr	r2, [pc, #408]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005828:	e01e      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800582a:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005836:	d106      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583e:	d102      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005840:	4b5f      	ldr	r3, [pc, #380]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005844:	e010      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005846:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005852:	d106      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585a:	d102      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800585c:	4b59      	ldr	r3, [pc, #356]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005866:	e386      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005868:	e385      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800586a:	4b57      	ldr	r3, [pc, #348]	; (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800586e:	e382      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005874:	e37f      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800587e:	430b      	orrs	r3, r1
 8005880:	f040 80a7 	bne.w	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005884:	4b4c      	ldr	r3, [pc, #304]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800588c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005894:	d055      	beq.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800589c:	f200 8096 	bhi.w	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058a6:	f000 8084 	beq.w	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058b0:	f200 808c 	bhi.w	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ba:	d030      	beq.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058c2:	f200 8083 	bhi.w	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d004      	beq.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058d2:	d012      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80058d4:	e07a      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058d6:	4b38      	ldr	r3, [pc, #224]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e2:	d107      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fe0b 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f2:	e340      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f8:	e33d      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005906:	d107      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005908:	f107 0318 	add.w	r3, r7, #24
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fb51 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005916:	e32e      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591c:	e32b      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800592a:	d107      	bne.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800592c:	f107 030c 	add.w	r3, r7, #12
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fc93 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800593a:	e31c      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005940:	e319      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800594a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b04      	cmp	r3, #4
 8005956:	d10c      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800595e:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	08db      	lsrs	r3, r3, #3
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	4a14      	ldr	r2, [pc, #80]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800596a:	fa22 f303 	lsr.w	r3, r2, r3
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	e01e      	b.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597e:	d106      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005986:	d102      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800598c:	e010      	b.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800599a:	d106      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a2:	d102      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80059ae:	e2e2      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059b0:	e2e1      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b6:	e2de      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059b8:	58024400 	.word	0x58024400
 80059bc:	03d09000 	.word	0x03d09000
 80059c0:	003d0900 	.word	0x003d0900
 80059c4:	017d7840 	.word	0x017d7840
 80059c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059d0:	e2d1      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80059d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80059da:	430b      	orrs	r3, r1
 80059dc:	f040 809c 	bne.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80059e0:	4b93      	ldr	r3, [pc, #588]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80059e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f0:	d054      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f8:	f200 808b 	bhi.w	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a02:	f000 8083 	beq.w	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a0c:	f200 8081 	bhi.w	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a16:	d02f      	beq.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1e:	d878      	bhi.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2c:	d012      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a2e:	e070      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a30:	4b7f      	ldr	r3, [pc, #508]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fd5e 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a4c:	e293      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a52:	e290      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a54:	4b76      	ldr	r3, [pc, #472]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0318 	add.w	r3, r7, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 faa4 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a70:	e281      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a76:	e27e      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a78:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a84:	d107      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a86:	f107 030c 	add.w	r3, r7, #12
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fbe6 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a94:	e26f      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a9a:	e26c      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a9c:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005aa6:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ab8:	4b5d      	ldr	r3, [pc, #372]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	08db      	lsrs	r3, r3, #3
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	4a5c      	ldr	r2, [pc, #368]	; (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aca:	e01e      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005acc:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad8:	d106      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae0:	d102      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ae2:	4b55      	ldr	r3, [pc, #340]	; (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae6:	e010      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ae8:	4b51      	ldr	r3, [pc, #324]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af4:	d106      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afc:	d102      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005afe:	4b4f      	ldr	r3, [pc, #316]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b02:	e002      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b08:	e235      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b0a:	e234      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b10:	e231      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b16:	e22e      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005b20:	430b      	orrs	r3, r1
 8005b22:	f040 808f 	bne.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005b26:	4b42      	ldr	r3, [pc, #264]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005b2e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b36:	d06b      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b3e:	d874      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b46:	d056      	beq.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b4e:	d86c      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b56:	d03b      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b5e:	d864      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b66:	d021      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b6e:	d85c      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d004      	beq.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005b7e:	e054      	b.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b80:	f7fe fa20 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8005b84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b86:	e1f6      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b96:	f107 0318 	add.w	r3, r7, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fa0a 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ba4:	e1e7      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005baa:	e1e4      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb8:	d107      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bba:	f107 030c 	add.w	r3, r7, #12
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fb4c 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc8:	e1d5      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bce:	e1d2      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bd0:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d109      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	08db      	lsrs	r3, r3, #3
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005be8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bee:	e1c2      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf4:	e1bf      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c02:	d102      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c08:	e1b5      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c0e:	e1b2      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1c:	d102      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005c1e:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c22:	e1a8      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c28:	e1a5      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c2e:	e1a2      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c30:	58024400 	.word	0x58024400
 8005c34:	03d09000 	.word	0x03d09000
 8005c38:	003d0900 	.word	0x003d0900
 8005c3c:	017d7840 	.word	0x017d7840
 8005c40:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c48:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	d173      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c50:	4b9c      	ldr	r3, [pc, #624]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c60:	d02f      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c68:	d863      	bhi.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c76:	d012      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c78:	e05b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c7a:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c86:	d107      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c88:	f107 0318 	add.w	r3, r7, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f991 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c96:	e16e      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c9c:	e16b      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c9e:	4b89      	ldr	r3, [pc, #548]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005caa:	d107      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cac:	f107 030c 	add.w	r3, r7, #12
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fad3 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cba:	e15c      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc0:	e159      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cc2:	4b80      	ldr	r3, [pc, #512]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ccc:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d10c      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cde:	4b79      	ldr	r3, [pc, #484]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	4a77      	ldr	r2, [pc, #476]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf0:	e01e      	b.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cf2:	4b74      	ldr	r3, [pc, #464]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfe:	d106      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d06:	d102      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d08:	4b70      	ldr	r3, [pc, #448]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0c:	e010      	b.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d22:	d102      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d24:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d28:	e002      	b.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005d2e:	e122      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d30:	e121      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d36:	e11e      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d3c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005d40:	430b      	orrs	r3, r1
 8005d42:	d133      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005d44:	4b5f      	ldr	r3, [pc, #380]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5a:	d012      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005d5c:	e023      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d5e:	4b59      	ldr	r3, [pc, #356]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fbc7 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d7a:	e0fc      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d80:	e0f9      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d82:	4b50      	ldr	r3, [pc, #320]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d90:	f107 0318 	add.w	r3, r7, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f90d 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9e:	e0ea      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da4:	e0e7      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005daa:	e0e4      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005db4:	430b      	orrs	r3, r1
 8005db6:	f040 808d 	bne.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005dba:	4b42      	ldr	r3, [pc, #264]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dca:	d06b      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd2:	d874      	bhi.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d056      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d86c      	bhi.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dea:	d03b      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005df2:	d864      	bhi.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfa:	d021      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e02:	d85c      	bhi.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e10:	d004      	beq.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005e12:	e054      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e14:	f000 f8b8 	bl	8005f88 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e1a:	e0ac      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e1c:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e28:	d107      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f8c0 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e38:	e09d      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e3e:	e09a      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e40:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e4e:	f107 030c 	add.w	r3, r7, #12
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa02 	bl	800625c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e5c:	e08b      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e62:	e088      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e64:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d109      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	08db      	lsrs	r3, r3, #3
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e82:	e078      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e88:	e075      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e96:	d102      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e9c:	e06b      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ea2:	e068      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb0:	d102      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eb6:	e05e      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ebc:	e05b      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec2:	e058      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ec4:	58024400 	.word	0x58024400
 8005ec8:	03d09000 	.word	0x03d09000
 8005ecc:	003d0900 	.word	0x003d0900
 8005ed0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005edc:	430b      	orrs	r3, r1
 8005ede:	d148      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ee0:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef0:	d02a      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef8:	d838      	bhi.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f06:	d00d      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005f08:	e030      	b.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f0a:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f16:	d102      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f1c:	e02b      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f22:	e028      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f24:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f30:	d107      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fae4 	bl	8006504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f40:	e019      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f46:	e016      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f48:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f54:	d107      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f82a 	bl	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f64:	e007      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f70:	e001      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3740      	adds	r7, #64	; 0x40
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	58024400 	.word	0x58024400
 8005f84:	017d7840 	.word	0x017d7840

08005f88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f8c:	f7fd ffea 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8005f90:	4602      	mov	r2, r0
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	091b      	lsrs	r3, r3, #4
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	4904      	ldr	r1, [pc, #16]	; (8005fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f9e:	5ccb      	ldrb	r3, [r1, r3]
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	08014bb8 	.word	0x08014bb8

08005fb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	; 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fbc:	4ba1      	ldr	r3, [pc, #644]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fc6:	4b9f      	ldr	r3, [pc, #636]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	0b1b      	lsrs	r3, r3, #12
 8005fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fd2:	4b9c      	ldr	r3, [pc, #624]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fde:	4b99      	ldr	r3, [pc, #612]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	08db      	lsrs	r3, r3, #3
 8005fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8111 	beq.w	8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b02      	cmp	r3, #2
 8006006:	f000 8083 	beq.w	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b02      	cmp	r3, #2
 800600e:	f200 80a1 	bhi.w	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d056      	beq.n	80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800601e:	e099      	b.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006020:	4b88      	ldr	r3, [pc, #544]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d02d      	beq.n	8006088 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800602c:	4b85      	ldr	r3, [pc, #532]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	4a84      	ldr	r2, [pc, #528]	; (8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006056:	4b7b      	ldr	r3, [pc, #492]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	ed97 6a03 	vldr	s12, [r7, #12]
 800606a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800606e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006086:	e087      	b.n	8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ca:	e065      	b.n	8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b59      	ldr	r3, [pc, #356]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800610e:	e043      	b.n	8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800611e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006122:	4b48      	ldr	r3, [pc, #288]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a03 	vldr	s12, [r7, #12]
 8006136:	eddf 5a45 	vldr	s11, [pc, #276]	; 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006152:	e021      	b.n	8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	ed97 6a03 	vldr	s12, [r7, #12]
 800617a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800624c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800617e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006196:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006198:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	0a5b      	lsrs	r3, r3, #9
 800619e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061be:	ee17 2a90 	vmov	r2, s15
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061c6:	4b1f      	ldr	r3, [pc, #124]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ec:	ee17 2a90 	vmov	r2, s15
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061f4:	4b13      	ldr	r3, [pc, #76]	; (8006244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	0e1b      	lsrs	r3, r3, #24
 80061fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800620a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621a:	ee17 2a90 	vmov	r2, s15
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006222:	e008      	b.n	8006236 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	609a      	str	r2, [r3, #8]
}
 8006236:	bf00      	nop
 8006238:	3724      	adds	r7, #36	; 0x24
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
 8006248:	03d09000 	.word	0x03d09000
 800624c:	46000000 	.word	0x46000000
 8006250:	4c742400 	.word	0x4c742400
 8006254:	4a742400 	.word	0x4a742400
 8006258:	4bbebc20 	.word	0x4bbebc20

0800625c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800625c:	b480      	push	{r7}
 800625e:	b089      	sub	sp, #36	; 0x24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006264:	4ba1      	ldr	r3, [pc, #644]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800626e:	4b9f      	ldr	r3, [pc, #636]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	0d1b      	lsrs	r3, r3, #20
 8006274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006278:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800627a:	4b9c      	ldr	r3, [pc, #624]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006286:	4b99      	ldr	r3, [pc, #612]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	08db      	lsrs	r3, r3, #3
 800628c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8111 	beq.w	80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	f000 8083 	beq.w	80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f200 80a1 	bhi.w	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d056      	beq.n	8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062c6:	e099      	b.n	80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c8:	4b88      	ldr	r3, [pc, #544]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d02d      	beq.n	8006330 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062d4:	4b85      	ldr	r3, [pc, #532]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	08db      	lsrs	r3, r3, #3
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	4a84      	ldr	r2, [pc, #528]	; (80064f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fe:	4b7b      	ldr	r3, [pc, #492]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006312:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800632e:	e087      	b.n	8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800633e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006342:	4b6a      	ldr	r3, [pc, #424]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006352:	ed97 6a03 	vldr	s12, [r7, #12]
 8006356:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006372:	e065      	b.n	8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006396:	ed97 6a03 	vldr	s12, [r7, #12]
 800639a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800639e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b6:	e043      	b.n	8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ca:	4b48      	ldr	r3, [pc, #288]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063da:	ed97 6a03 	vldr	s12, [r7, #12]
 80063de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063fa:	e021      	b.n	8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800640a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640e:	4b37      	ldr	r3, [pc, #220]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006422:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800643e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006440:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	0a5b      	lsrs	r3, r3, #9
 8006446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800645a:	edd7 6a07 	vldr	s13, [r7, #28]
 800645e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006466:	ee17 2a90 	vmov	r2, s15
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800646e:	4b1f      	ldr	r3, [pc, #124]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006488:	edd7 6a07 	vldr	s13, [r7, #28]
 800648c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006494:	ee17 2a90 	vmov	r2, s15
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800649c:	4b13      	ldr	r3, [pc, #76]	; (80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	0e1b      	lsrs	r3, r3, #24
 80064a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c2:	ee17 2a90 	vmov	r2, s15
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064ca:	e008      	b.n	80064de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	609a      	str	r2, [r3, #8]
}
 80064de:	bf00      	nop
 80064e0:	3724      	adds	r7, #36	; 0x24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
 80064f0:	03d09000 	.word	0x03d09000
 80064f4:	46000000 	.word	0x46000000
 80064f8:	4c742400 	.word	0x4c742400
 80064fc:	4a742400 	.word	0x4a742400
 8006500:	4bbebc20 	.word	0x4bbebc20

08006504 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800650c:	4ba0      	ldr	r3, [pc, #640]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006516:	4b9e      	ldr	r3, [pc, #632]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006520:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006522:	4b9b      	ldr	r3, [pc, #620]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800652c:	4b98      	ldr	r3, [pc, #608]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	08db      	lsrs	r3, r3, #3
 8006532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	fb02 f303 	mul.w	r3, r2, r3
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006544:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8111 	beq.w	8006772 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b02      	cmp	r3, #2
 8006554:	f000 8083 	beq.w	800665e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b02      	cmp	r3, #2
 800655c:	f200 80a1 	bhi.w	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d056      	beq.n	800661a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800656c:	e099      	b.n	80066a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800656e:	4b88      	ldr	r3, [pc, #544]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02d      	beq.n	80065d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800657a:	4b85      	ldr	r3, [pc, #532]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	08db      	lsrs	r3, r3, #3
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	4a83      	ldr	r2, [pc, #524]	; (8006794 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a4:	4b7a      	ldr	r3, [pc, #488]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065d4:	e087      	b.n	80066e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800679c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e8:	4b69      	ldr	r3, [pc, #420]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006618:	e065      	b.n	80066e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006624:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80067a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662c:	4b58      	ldr	r3, [pc, #352]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006640:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800665c:	e043      	b.n	80066e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006668:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800666c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006670:	4b47      	ldr	r3, [pc, #284]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006680:	ed97 6a03 	vldr	s12, [r7, #12]
 8006684:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a0:	e021      	b.n	80066e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	ee07 3a90 	vmov	s15, r3
 80066a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800679c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b4:	4b36      	ldr	r3, [pc, #216]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	0a5b      	lsrs	r3, r3, #9
 80066ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006700:	edd7 6a07 	vldr	s13, [r7, #28]
 8006704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670c:	ee17 2a90 	vmov	r2, s15
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006714:	4b1e      	ldr	r3, [pc, #120]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800672a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800672e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800673a:	ee17 2a90 	vmov	r2, s15
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	0e1b      	lsrs	r3, r3, #24
 8006748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800675c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006768:	ee17 2a90 	vmov	r2, s15
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006770:	e008      	b.n	8006784 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	3724      	adds	r7, #36	; 0x24
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	58024400 	.word	0x58024400
 8006794:	03d09000 	.word	0x03d09000
 8006798:	46000000 	.word	0x46000000
 800679c:	4c742400 	.word	0x4c742400
 80067a0:	4a742400 	.word	0x4a742400
 80067a4:	4bbebc20 	.word	0x4bbebc20

080067a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067b6:	4b53      	ldr	r3, [pc, #332]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d101      	bne.n	80067c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e099      	b.n	80068fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067c6:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a4e      	ldr	r2, [pc, #312]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fa fefb 	bl	80015cc <HAL_GetTick>
 80067d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067d8:	e008      	b.n	80067ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067da:	f7fa fef7 	bl	80015cc <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e086      	b.n	80068fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067ec:	4b45      	ldr	r3, [pc, #276]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067f8:	4b42      	ldr	r3, [pc, #264]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	031b      	lsls	r3, r3, #12
 8006806:	493f      	ldr	r1, [pc, #252]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006808:	4313      	orrs	r3, r2
 800680a:	628b      	str	r3, [r1, #40]	; 0x28
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	3b01      	subs	r3, #1
 8006812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	3b01      	subs	r3, #1
 800681c:	025b      	lsls	r3, r3, #9
 800681e:	b29b      	uxth	r3, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	3b01      	subs	r3, #1
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800683c:	4931      	ldr	r1, [pc, #196]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006842:	4b30      	ldr	r3, [pc, #192]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	492d      	ldr	r1, [pc, #180]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006850:	4313      	orrs	r3, r2
 8006852:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f023 0220 	bic.w	r2, r3, #32
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	4928      	ldr	r1, [pc, #160]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006862:	4313      	orrs	r3, r2
 8006864:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	4a26      	ldr	r2, [pc, #152]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <RCCEx_PLL2_Config+0x160>)
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	69d2      	ldr	r2, [r2, #28]
 800687e:	00d2      	lsls	r2, r2, #3
 8006880:	4920      	ldr	r1, [pc, #128]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006886:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800688c:	f043 0310 	orr.w	r3, r3, #16
 8006890:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 800689e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068a4:	e00f      	b.n	80068c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d106      	bne.n	80068ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068b8:	e005      	b.n	80068c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	4a11      	ldr	r2, [pc, #68]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a0e      	ldr	r2, [pc, #56]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d2:	f7fa fe7b 	bl	80015cc <HAL_GetTick>
 80068d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068d8:	e008      	b.n	80068ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068da:	f7fa fe77 	bl	80015cc <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e006      	b.n	80068fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <RCCEx_PLL2_Config+0x15c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	58024400 	.word	0x58024400
 8006908:	ffff0007 	.word	0xffff0007

0800690c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800691a:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d101      	bne.n	800692a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e099      	b.n	8006a5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800692a:	4b4f      	ldr	r3, [pc, #316]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4e      	ldr	r2, [pc, #312]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006936:	f7fa fe49 	bl	80015cc <HAL_GetTick>
 800693a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800693c:	e008      	b.n	8006950 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800693e:	f7fa fe45 	bl	80015cc <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e086      	b.n	8006a5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006950:	4b45      	ldr	r3, [pc, #276]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f0      	bne.n	800693e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800695c:	4b42      	ldr	r3, [pc, #264]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	051b      	lsls	r3, r3, #20
 800696a:	493f      	ldr	r1, [pc, #252]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 800696c:	4313      	orrs	r3, r2
 800696e:	628b      	str	r3, [r1, #40]	; 0x28
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	3b01      	subs	r3, #1
 8006976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	3b01      	subs	r3, #1
 8006980:	025b      	lsls	r3, r3, #9
 8006982:	b29b      	uxth	r3, r3
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	3b01      	subs	r3, #1
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	3b01      	subs	r3, #1
 800699a:	061b      	lsls	r3, r3, #24
 800699c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069a0:	4931      	ldr	r1, [pc, #196]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069a6:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	492d      	ldr	r1, [pc, #180]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069b8:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	4928      	ldr	r1, [pc, #160]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069ca:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <RCCEx_PLL3_Config+0x160>)
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	69d2      	ldr	r2, [r2, #28]
 80069e2:	00d2      	lsls	r2, r2, #3
 80069e4:	4920      	ldr	r1, [pc, #128]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069ea:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a08:	e00f      	b.n	8006a2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d106      	bne.n	8006a1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a10:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a1c:	e005      	b.n	8006a2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a1e:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0e      	ldr	r2, [pc, #56]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a36:	f7fa fdc9 	bl	80015cc <HAL_GetTick>
 8006a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a3c:	e008      	b.n	8006a50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a3e:	f7fa fdc5 	bl	80015cc <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <RCCEx_PLL3_Config+0x15c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f0      	beq.n	8006a3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	ffff0007 	.word	0xffff0007

08006a70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e07c      	b.n	8006b7c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fa faea 	bl	800107c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f867 	bl	8006b84 <HAL_SD_InitCard>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e05d      	b.n	8006b7c <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006ac0:	f107 0308 	add.w	r3, r7, #8
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fdee 	bl	80076a8 <HAL_SD_GetCardStatus>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e052      	b.n	8006b7c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006ad6:	7e3b      	ldrb	r3, [r7, #24]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006adc:	7e7b      	ldrb	r3, [r7, #25]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10a      	bne.n	8006b00 <HAL_SD_Init+0x90>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_SD_Init+0x86>
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006afe:	e00b      	b.n	8006b18 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d104      	bne.n	8006b12 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b10:	e002      	b.n	8006b18 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fe80 	bl	8007824 <HAL_SD_ConfigWideBusOperation>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e026      	b.n	8006b7c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006b2e:	f7fa fd4d 	bl	80015cc <HAL_GetTick>
 8006b32:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b34:	e011      	b.n	8006b5a <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b36:	f7fa fd49 	bl	80015cc <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d109      	bne.n	8006b5a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e010      	b.n	8006b7c <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ff78 	bl	8007a50 <HAL_SD_GetCardState>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d1e7      	bne.n	8006b36 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3728      	adds	r7, #40	; 0x28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b84:	b5b0      	push	{r4, r5, r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af04      	add	r7, sp, #16
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006b9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	f7fe fc70 	bl	8005488 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ba8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d109      	bne.n	8006bc4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e07f      	b.n	8006cc4 <HAL_SD_InitCard+0x140>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	4a40      	ldr	r2, [pc, #256]	; (8006ccc <HAL_SD_InitCard+0x148>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d107      	bne.n	8006bf0 <HAL_SD_InitCard+0x6c>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0210 	orr.w	r2, r2, #16
 8006bee:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681d      	ldr	r5, [r3, #0]
 8006bf4:	466c      	mov	r4, sp
 8006bf6:	f107 0314 	add.w	r3, r7, #20
 8006bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c02:	f107 0308 	add.w	r3, r7, #8
 8006c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f001 fe9f 	bl	800894c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 fee2 	bl	80089dc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_SD_InitCard+0xa6>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_SD_InitCard+0xbc>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006c30:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <HAL_SD_InitCard+0x14c>)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fa fcd2 	bl	80015e4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fff3 	bl	8007c2c <SD_PowerON>
 8006c46:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <HAL_SD_InitCard+0xe2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e02e      	b.n	8006cc4 <HAL_SD_InitCard+0x140>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 ff12 	bl	8007a90 <SD_InitCard>
 8006c6c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_SD_InitCard+0x108>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e01b      	b.n	8006cc4 <HAL_SD_InitCard+0x140>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 ff47 	bl	8008b28 <SDMMC_CmdBlockLength>
 8006c9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00f      	beq.n	8006cc2 <HAL_SD_InitCard+0x13e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <HAL_SD_InitCard+0x150>)
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <HAL_SD_InitCard+0x140>
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3728      	adds	r7, #40	; 0x28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ccc:	014f8b59 	.word	0x014f8b59
 8006cd0:	00012110 	.word	0x00012110
 8006cd4:	1fe00fff 	.word	0x1fe00fff

08006cd8 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e018      	b.n	8006d1c <HAL_SD_DeInit+0x44>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2203      	movs	r2, #3
 8006cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_SD_TRANSCEIVER != 0U)
  /* Deactivate the 1.8V Mode */
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d102      	bne.n	8006d00 <HAL_SD_DeInit+0x28>
    {
      hsd->DriveTransceiver_1_8V_Callback = HAL_SD_DriveTransceiver_1_8V_Callback;
    }
    hsd->DriveTransceiver_1_8V_Callback(RESET);
#else
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	f000 fb24 	bl	8007348 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f825 	bl	8007d50 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fa fa8c 	bl	8001224 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08c      	sub	sp, #48	; 0x30
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d107      	bne.n	8006d4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e08d      	b.n	8006e68 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 8086 	bne.w	8006e66 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	441a      	add	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d907      	bls.n	8006d7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e074      	b.n	8006e68 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2203      	movs	r2, #3
 8006d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	025a      	lsls	r2, r3, #9
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d002      	beq.n	8006daa <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	025b      	lsls	r3, r3, #9
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006daa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	025b      	lsls	r3, r3, #9
 8006db4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006db6:	2390      	movs	r3, #144	; 0x90
 8006db8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f107 0210 	add.w	r2, r7, #16
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fe7d 	bl	8008ad0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2201      	movs	r2, #1
 8006df4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d90a      	bls.n	8006e12 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2282      	movs	r2, #130	; 0x82
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 fed3 	bl	8008bb4 <SDMMC_CmdReadMultiBlock>
 8006e0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e10:	e009      	b.n	8006e26 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2281      	movs	r2, #129	; 0x81
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 fea5 	bl	8008b6e <SDMMC_CmdReadSingleBlock>
 8006e24:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d012      	beq.n	8006e52 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e00a      	b.n	8006e68 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006e60:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e000      	b.n	8006e68 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006e66:	2302      	movs	r3, #2
  }
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3730      	adds	r7, #48	; 0x30
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	1fe00fff 	.word	0x1fe00fff

08006e74 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	; 0x30
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e08d      	b.n	8006fb8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	f040 8086 	bne.w	8006fb6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d907      	bls.n	8006ece <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e074      	b.n	8006fb8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	025a      	lsls	r2, r3, #9
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d002      	beq.n	8006efa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	025b      	lsls	r3, r3, #9
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	025b      	lsls	r3, r3, #9
 8006f04:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f06:	2390      	movs	r3, #144	; 0x90
 8006f08:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f107 0210 	add.w	r2, r7, #16
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fdd5 	bl	8008ad0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f34:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2201      	movs	r2, #1
 8006f44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d90a      	bls.n	8006f62 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	22a0      	movs	r2, #160	; 0xa0
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fe71 	bl	8008c40 <SDMMC_CmdWriteMultiBlock>
 8006f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f60:	e009      	b.n	8006f76 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2290      	movs	r2, #144	; 0x90
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 fe43 	bl	8008bfa <SDMMC_CmdWriteSingleBlock>
 8006f74:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0f      	ldr	r2, [pc, #60]	; (8006fc0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e00a      	b.n	8006fb8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3730      	adds	r7, #48	; 0x30
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	1fe00fff 	.word	0x1fe00fff

08006fc4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_SD_IRQHandler+0x2e>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 f91c 	bl	8008228 <SD_Read_IT>
 8006ff0:	e19a      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80ac 	beq.w	800715a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800700a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_SD_IRQHandler+0x1b8>)
 8007018:	400b      	ands	r3, r1
 800701a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800702a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d038      	beq.n	80070b8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_SD_IRQHandler+0x96>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d011      	beq.n	800707e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f001 fe12 	bl	8008c88 <SDMMC_CmdStopTransfer>
 8007064:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f95b 	bl	8007334 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3f      	ldr	r2, [pc, #252]	; (8007180 <HAL_SD_IRQHandler+0x1bc>)
 8007084:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <HAL_SD_IRQHandler+0xe4>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 fc6b 	bl	8009984 <HAL_SD_RxCpltCallback>
 80070ae:	e13b      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f002 fc59 	bl	8009968 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070b6:	e137      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8132 	beq.w	8007328 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2200      	movs	r2, #0
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2200      	movs	r2, #0
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d104      	bne.n	80070f0 <HAL_SD_IRQHandler+0x12c>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d011      	beq.n	8007114 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fdc7 	bl	8008c88 <SDMMC_CmdStopTransfer>
 80070fa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f910 	bl	8007334 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f003 0310 	and.w	r3, r3, #16
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <HAL_SD_IRQHandler+0x172>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f002 fc16 	bl	8009968 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d105      	bne.n	8007152 <HAL_SD_IRQHandler+0x18e>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80eb 	beq.w	8007328 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f002 fc16 	bl	8009984 <HAL_SD_RxCpltCallback>
}
 8007158:	e0e6      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00d      	beq.n	8007184 <HAL_SD_IRQHandler+0x1c0>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 f89e 	bl	80082b4 <SD_Write_IT>
 8007178:	e0d6      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
 800717a:	bf00      	nop
 800717c:	ffff3ec5 	.word	0xffff3ec5
 8007180:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 809d 	beq.w	80072ce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	f043 0202 	orr.w	r2, r3, #2
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	f043 0208 	orr.w	r2, r3, #8
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	f043 0220 	orr.w	r2, r3, #32
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	f043 0210 	orr.w	r2, r3, #16
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a4b      	ldr	r2, [pc, #300]	; (8007330 <HAL_SD_IRQHandler+0x36c>)
 8007202:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007212:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007222:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007232:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007242:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fd1d 	bl	8008c88 <SDMMC_CmdStopTransfer>
 800724e:	4602      	mov	r2, r0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007268:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f851 	bl	8007334 <HAL_SD_ErrorCallback>
}
 8007292:	e049      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b00      	cmp	r3, #0
 800729c:	d044      	beq.n	8007328 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d040      	beq.n	8007328 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072b4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f834 	bl	8007334 <HAL_SD_ErrorCallback>
}
 80072cc:	e02c      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d025      	beq.n	8007328 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10c      	bne.n	800730e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 f840 	bl	8008384 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007304:	e010      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f828 	bl	800835c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800730c:	e00c      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 f829 	bl	8008370 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800731e:	e003      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 f811 	bl	8008348 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007326:	e7ff      	b.n	8007328 <HAL_SD_IRQHandler+0x364>
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	18000f3a 	.word	0x18000f3a

08007334 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736e:	0f9b      	lsrs	r3, r3, #30
 8007370:	b2da      	uxtb	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737a:	0e9b      	lsrs	r3, r3, #26
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	b2da      	uxtb	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	0e1b      	lsrs	r3, r3, #24
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	b2da      	uxtb	r2, r3
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739e:	0c1b      	lsrs	r3, r3, #16
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c0:	0d1b      	lsrs	r3, r3, #20
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073cc:	0c1b      	lsrs	r3, r3, #16
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073de:	0bdb      	lsrs	r3, r3, #15
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f0:	0b9b      	lsrs	r3, r3, #14
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007402:	0b5b      	lsrs	r3, r3, #13
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007414:	0b1b      	lsrs	r3, r3, #12
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	b2da      	uxtb	r2, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2200      	movs	r2, #0
 8007426:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d163      	bne.n	80074f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007434:	009a      	lsls	r2, r3, #2
 8007436:	f640 73fc 	movw	r3, #4092	; 0xffc
 800743a:	4013      	ands	r3, r2
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007440:	0f92      	lsrs	r2, r2, #30
 8007442:	431a      	orrs	r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800744c:	0edb      	lsrs	r3, r3, #27
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	b2da      	uxtb	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745e:	0e1b      	lsrs	r3, r3, #24
 8007460:	b2db      	uxtb	r3, r3
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	b2da      	uxtb	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007470:	0d5b      	lsrs	r3, r3, #21
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	b2da      	uxtb	r2, r3
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007482:	0c9b      	lsrs	r3, r3, #18
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	b2da      	uxtb	r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007494:	0bdb      	lsrs	r3, r3, #15
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 0307 	and.w	r3, r3, #7
 800749c:	b2da      	uxtb	r2, r3
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	7e1b      	ldrb	r3, [r3, #24]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	3302      	adds	r3, #2
 80074b8:	2201      	movs	r2, #1
 80074ba:	fa02 f303 	lsl.w	r3, r2, r3
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80074c2:	fb03 f202 	mul.w	r2, r3, r2
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	7a1b      	ldrb	r3, [r3, #8]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	2201      	movs	r2, #1
 80074d6:	409a      	lsls	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80074e4:	0a52      	lsrs	r2, r2, #9
 80074e6:	fb03 f202 	mul.w	r2, r3, r2
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f4:	659a      	str	r2, [r3, #88]	; 0x58
 80074f6:	e031      	b.n	800755c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d11d      	bne.n	800753c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	431a      	orrs	r2, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	029a      	lsls	r2, r3, #10
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007530:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	659a      	str	r2, [r3, #88]	; 0x58
 800753a:	e00f      	b.n	800755c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a58      	ldr	r2, [pc, #352]	; (80076a4 <HAL_SD_GetCardCSD+0x344>)
 8007542:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e09d      	b.n	8007698 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007560:	0b9b      	lsrs	r3, r3, #14
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	b2da      	uxtb	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007572:	09db      	lsrs	r3, r3, #7
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757a:	b2da      	uxtb	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007584:	b2db      	uxtb	r3, r3
 8007586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758a:	b2da      	uxtb	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007594:	0fdb      	lsrs	r3, r3, #31
 8007596:	b2da      	uxtb	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a0:	0f5b      	lsrs	r3, r3, #29
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b2:	0e9b      	lsrs	r3, r3, #26
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c4:	0d9b      	lsrs	r3, r3, #22
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d6:	0d5b      	lsrs	r3, r3, #21
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	0bdb      	lsrs	r3, r3, #15
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	b2da      	uxtb	r2, r3
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800761a:	0b9b      	lsrs	r3, r3, #14
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762e:	0b5b      	lsrs	r3, r3, #13
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007642:	0b1b      	lsrs	r3, r3, #12
 8007644:	b2db      	uxtb	r3, r3
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007656:	0a9b      	lsrs	r3, r3, #10
 8007658:	b2db      	uxtb	r3, r3
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	b2da      	uxtb	r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007686:	b2da      	uxtb	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	1fe00fff 	.word	0x1fe00fff

080076a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b094      	sub	sp, #80	; 0x50
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d101      	bne.n	80076c8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0a7      	b.n	8007818 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80076c8:	f107 0308 	add.w	r3, r7, #8
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fb4c 	bl	8007d6c <SD_SendSDStatus>
 80076d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d011      	beq.n	8007700 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a4f      	ldr	r2, [pc, #316]	; (8007820 <HAL_SD_GetCardStatus+0x178>)
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80076fe:	e070      	b.n	80077e2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	099b      	lsrs	r3, r3, #6
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	b2da      	uxtb	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	b2da      	uxtb	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	0a1b      	lsrs	r3, r3, #8
 8007724:	b29b      	uxth	r3, r3
 8007726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800772a:	b29a      	uxth	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	0e1b      	lsrs	r3, r3, #24
 8007730:	b29b      	uxth	r3, r3
 8007732:	4313      	orrs	r3, r2
 8007734:	b29a      	uxth	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	061a      	lsls	r2, r3, #24
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007746:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007750:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	0e1b      	lsrs	r3, r3, #24
 8007756:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	b2da      	uxtb	r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	b2da      	uxtb	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	b29b      	uxth	r3, r3
 8007784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007788:	b29a      	uxth	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	b29b      	uxth	r3, r3
 800778e:	b2db      	uxtb	r3, r3
 8007790:	b29b      	uxth	r3, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	b29a      	uxth	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	0a9b      	lsrs	r3, r3, #10
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	0e1b      	lsrs	r3, r3, #24
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 f99c 	bl	8008b28 <SDMMC_CmdBlockLength>
 80077f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80077f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a08      	ldr	r2, [pc, #32]	; (8007820 <HAL_SD_GetCardStatus+0x178>)
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007814:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007818:	4618      	mov	r0, r3
 800781a:	3750      	adds	r7, #80	; 0x50
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	1fe00fff 	.word	0x1fe00fff

08007824 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007824:	b5b0      	push	{r4, r5, r7, lr}
 8007826:	b090      	sub	sp, #64	; 0x40
 8007828:	af04      	add	r7, sp, #16
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2203      	movs	r2, #3
 8007838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	2b03      	cmp	r3, #3
 8007842:	d02e      	beq.n	80078a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	d106      	bne.n	800785a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
 8007858:	e029      	b.n	80078ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007860:	d10a      	bne.n	8007878 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fb7a 	bl	8007f5c <SD_WideBus_Enable>
 8007868:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	639a      	str	r2, [r3, #56]	; 0x38
 8007876:	e01a      	b.n	80078ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fbb7 	bl	8007ff2 <SD_WideBus_Disable>
 8007884:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	639a      	str	r2, [r3, #56]	; 0x38
 8007892:	e00c      	b.n	80078ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
 80078a0:	e005      	b.n	80078ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a61      	ldr	r2, [pc, #388]	; (8007a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078c4:	e099      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x1d6>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80078c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80078ca:	f04f 0100 	mov.w	r1, #0
 80078ce:	f7fd fddb 	bl	8005488 <HAL_RCCEx_GetPeriphCLKFreq>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 8086 	beq.w	80079e8 <HAL_SD_ConfigWideBusOperation+0x1c4>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	4952      	ldr	r1, [pc, #328]	; (8007a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 80078fa:	fba1 1303 	umull	r1, r3, r1, r3
 80078fe:	0e1b      	lsrs	r3, r3, #24
 8007900:	429a      	cmp	r2, r3
 8007902:	d303      	bcc.n	800790c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	61fb      	str	r3, [r7, #28]
 800790a:	e05a      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007914:	d103      	bne.n	800791e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	e051      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007926:	d126      	bne.n	8007976 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10e      	bne.n	800794e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	4a45      	ldr	r2, [pc, #276]	; (8007a48 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d906      	bls.n	8007946 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	4a42      	ldr	r2, [pc, #264]	; (8007a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 800793c:	fba2 2303 	umull	r2, r3, r2, r3
 8007940:	0e5b      	lsrs	r3, r3, #25
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e03d      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	61fb      	str	r3, [r7, #28]
 800794c:	e039      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	4a3b      	ldr	r2, [pc, #236]	; (8007a48 <HAL_SD_ConfigWideBusOperation+0x224>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d906      	bls.n	800796e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	4a38      	ldr	r2, [pc, #224]	; (8007a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	0e5b      	lsrs	r3, r3, #25
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	e029      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e025      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10e      	bne.n	800799c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	4a32      	ldr	r2, [pc, #200]	; (8007a4c <HAL_SD_ConfigWideBusOperation+0x228>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d906      	bls.n	8007994 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	4a2e      	ldr	r2, [pc, #184]	; (8007a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 800798a:	fba2 2303 	umull	r2, r3, r2, r3
 800798e:	0e1b      	lsrs	r3, r3, #24
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	e016      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	e012      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a8:	4a28      	ldr	r2, [pc, #160]	; (8007a4c <HAL_SD_ConfigWideBusOperation+0x228>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d906      	bls.n	80079bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	4a24      	ldr	r2, [pc, #144]	; (8007a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	0e1b      	lsrs	r3, r3, #24
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	e002      	b.n	80079c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681d      	ldr	r5, [r3, #0]
 80079cc:	466c      	mov	r4, sp
 80079ce:	f107 0318 	add.w	r3, r7, #24
 80079d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079da:	f107 030c 	add.w	r3, r7, #12
 80079de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 ffb3 	bl	800894c <SDMMC_Init>
 80079e6:	e008      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x1d6>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 f890 	bl	8008b28 <SDMMC_CmdBlockLength>
 8007a08:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00c      	beq.n	8007a2a <HAL_SD_ConfigWideBusOperation+0x206>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3730      	adds	r7, #48	; 0x30
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	1fe00fff 	.word	0x1fe00fff
 8007a44:	55e63b89 	.word	0x55e63b89
 8007a48:	02faf080 	.word	0x02faf080
 8007a4c:	017d7840 	.word	0x017d7840

08007a50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a5c:	f107 030c 	add.w	r3, r7, #12
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa52 	bl	8007f0c <SD_SendStatus>
 8007a68:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	0a5b      	lsrs	r3, r3, #9
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007a86:	693b      	ldr	r3, [r7, #16]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b090      	sub	sp, #64	; 0x40
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007a9c:	f7f9 fd96 	bl	80015cc <HAL_GetTick>
 8007aa0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 ffba 	bl	8008a20 <SDMMC_GetPowerState>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ab2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007ab6:	e0b5      	b.n	8007c24 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d02e      	beq.n	8007b1e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 fa04 	bl	8008ed2 <SDMMC_CmdSendCID>
 8007aca:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <SD_InitCard+0x46>
    {
      return errorstate;
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	e0a6      	b.n	8007c24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 ffe4 	bl	8008aaa <SDMMC_GetResponse>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2104      	movs	r1, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 ffdb 	bl	8008aaa <SDMMC_GetResponse>
 8007af4:	4602      	mov	r2, r0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2108      	movs	r1, #8
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 ffd2 	bl	8008aaa <SDMMC_GetResponse>
 8007b06:	4602      	mov	r2, r0
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	210c      	movs	r1, #12
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 ffc9 	bl	8008aaa <SDMMC_GetResponse>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d01d      	beq.n	8007b62 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007b26:	e019      	b.n	8007b5c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f107 020a 	add.w	r2, r7, #10
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 fa0c 	bl	8008f50 <SDMMC_CmdSetRelAdd>
 8007b38:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	e06f      	b.n	8007c24 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007b44:	f7f9 fd42 	bl	80015cc <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d902      	bls.n	8007b5c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007b56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b5a:	e063      	b.n	8007c24 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007b5c:	897b      	ldrh	r3, [r7, #10]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0e2      	beq.n	8007b28 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d036      	beq.n	8007bd8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b6a:	897b      	ldrh	r3, [r7, #10]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7a:	041b      	lsls	r3, r3, #16
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	f001 f9c6 	bl	8008f10 <SDMMC_CmdSendCSD>
 8007b84:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <SD_InitCard+0x100>
    {
      return errorstate;
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	e049      	b.n	8007c24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ff87 	bl	8008aaa <SDMMC_GetResponse>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 ff7e 	bl	8008aaa <SDMMC_GetResponse>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2108      	movs	r1, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 ff75 	bl	8008aaa <SDMMC_GetResponse>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	210c      	movs	r1, #12
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 ff6c 	bl	8008aaa <SDMMC_GetResponse>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2104      	movs	r1, #4
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 ff63 	bl	8008aaa <SDMMC_GetResponse>
 8007be4:	4603      	mov	r3, r0
 8007be6:	0d1a      	lsrs	r2, r3, #20
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007bec:	f107 030c 	add.w	r3, r7, #12
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fbb4 	bl	8007360 <HAL_SD_GetCardCSD>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c02:	e00f      	b.n	8007c24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0c:	041b      	lsls	r3, r3, #16
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f001 f875 	bl	8008d00 <SDMMC_CmdSelDesel>
 8007c16:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <SD_InitCard+0x192>
  {
    return errorstate;
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	e000      	b.n	8007c24 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3740      	adds	r7, #64	; 0x40
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007c40:	f7f9 fcc4 	bl	80015cc <HAL_GetTick>
 8007c44:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 f87b 	bl	8008d46 <SDMMC_CmdGoIdleState>
 8007c50:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <SD_PowerON+0x30>
  {
    return errorstate;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	e072      	b.n	8007d42 <SD_PowerON+0x116>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f88e 	bl	8008d82 <SDMMC_CmdOperCond>
 8007c66:	6138      	str	r0, [r7, #16]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6e:	d10d      	bne.n	8007c8c <SD_PowerON+0x60>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f863 	bl	8008d46 <SDMMC_CmdGoIdleState>
 8007c80:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <SD_PowerON+0x66>
    {
      return errorstate;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	e05a      	b.n	8007d42 <SD_PowerON+0x116>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d137      	bne.n	8007d0a <SD_PowerON+0xde>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f88e 	bl	8008dc2 <SDMMC_CmdAppCommand>
 8007ca6:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02d      	beq.n	8007d0a <SD_PowerON+0xde>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cb2:	e046      	b.n	8007d42 <SD_PowerON+0x116>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f881 	bl	8008dc2 <SDMMC_CmdAppCommand>
 8007cc0:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <SD_PowerON+0xa0>
    {
      return errorstate;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	e03a      	b.n	8007d42 <SD_PowerON+0x116>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	491e      	ldr	r1, [pc, #120]	; (8007d4c <SD_PowerON+0x120>)
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f898 	bl	8008e08 <SDMMC_CmdAppOperCommand>
 8007cd8:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <SD_PowerON+0xba>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ce0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ce4:	e02d      	b.n	8007d42 <SD_PowerON+0x116>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fedc 	bl	8008aaa <SDMMC_GetResponse>
 8007cf2:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	0fdb      	lsrs	r3, r3, #31
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <SD_PowerON+0xd4>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <SD_PowerON+0xd6>
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]

    count++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d802      	bhi.n	8007d1a <SD_PowerON+0xee>
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0cc      	beq.n	8007cb4 <SD_PowerON+0x88>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d902      	bls.n	8007d2a <SD_PowerON+0xfe>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d28:	e00b      	b.n	8007d42 <SD_PowerON+0x116>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <SD_PowerON+0x114>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	c1100000 	.word	0xc1100000

08007d50 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fe4e 	bl	80089fe <SDMMC_PowerState_OFF>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08c      	sub	sp, #48	; 0x30
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d76:	f7f9 fc29 	bl	80015cc <HAL_GetTick>
 8007d7a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fe8f 	bl	8008aaa <SDMMC_GetResponse>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d96:	d102      	bne.n	8007d9e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d9c:	e0b0      	b.n	8007f00 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2140      	movs	r1, #64	; 0x40
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 febf 	bl	8008b28 <SDMMC_CmdBlockLength>
 8007daa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	e0a0      	b.n	8007f00 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f000 fff9 	bl	8008dc2 <SDMMC_CmdAppCommand>
 8007dd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	e08d      	b.n	8007f00 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295
 8007de8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007dea:	2340      	movs	r3, #64	; 0x40
 8007dec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007dee:	2360      	movs	r3, #96	; 0x60
 8007df0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007df2:	2302      	movs	r3, #2
 8007df4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f107 0208 	add.w	r2, r7, #8
 8007e06:	4611      	mov	r1, r2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fe61 	bl	8008ad0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 f8e1 	bl	8008fda <SDMMC_CmdStatusRegister>
 8007e18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d02b      	beq.n	8007e78 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	e069      	b.n	8007f00 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d013      	beq.n	8007e62 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3e:	e00d      	b.n	8007e5c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fdab 	bl	80089a0 <SDMMC_ReadFIFO>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	601a      	str	r2, [r3, #0]
        pData++;
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	3304      	adds	r3, #4
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	3301      	adds	r3, #1
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	2b07      	cmp	r3, #7
 8007e60:	d9ee      	bls.n	8007e40 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e62:	f7f9 fbb3 	bl	80015cc <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d102      	bne.n	8007e78 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e76:	e043      	b.n	8007f00 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0d2      	beq.n	8007e2c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e94:	2308      	movs	r3, #8
 8007e96:	e033      	b.n	8007f00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e02a      	b.n	8007f00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d017      	beq.n	8007ee8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007eb8:	2320      	movs	r3, #32
 8007eba:	e021      	b.n	8007f00 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fd6d 	bl	80089a0 <SDMMC_ReadFIFO>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	601a      	str	r2, [r3, #0]
    pData++;
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	3304      	adds	r3, #4
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ed2:	f7f9 fb7b 	bl	80015cc <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d102      	bne.n	8007ee8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ee2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ee6:	e00b      	b.n	8007f00 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e2      	bne.n	8007ebc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a03      	ldr	r2, [pc, #12]	; (8007f08 <SD_SendSDStatus+0x19c>)
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3730      	adds	r7, #48	; 0x30
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	18000f3a 	.word	0x18000f3a

08007f0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007f1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f20:	e018      	b.n	8007f54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f001 f830 	bl	8008f94 <SDMMC_CmdSendStatus>
 8007f34:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e009      	b.n	8007f54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fdaf 	bl	8008aaa <SDMMC_GetResponse>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fd99 	bl	8008aaa <SDMMC_GetResponse>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f82:	d102      	bne.n	8007f8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f88:	e02f      	b.n	8007fea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f8a:	f107 030c 	add.w	r3, r7, #12
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f879 	bl	8008088 <SD_FindSCR>
 8007f96:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	e023      	b.n	8007fea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01c      	beq.n	8007fe6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f000 ff02 	bl	8008dc2 <SDMMC_CmdAppCommand>
 8007fbe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	e00f      	b.n	8007fea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2102      	movs	r1, #2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 ff39 	bl	8008e48 <SDMMC_CmdBusWidth>
 8007fd6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	e003      	b.n	8007fea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e001      	b.n	8007fea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fe6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	2300      	movs	r3, #0
 8008000:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2100      	movs	r1, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fd4e 	bl	8008aaa <SDMMC_GetResponse>
 800800e:	4603      	mov	r3, r0
 8008010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008018:	d102      	bne.n	8008020 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800801a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800801e:	e02f      	b.n	8008080 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f82e 	bl	8008088 <SD_FindSCR>
 800802c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e023      	b.n	8008080 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01c      	beq.n	800807c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f000 feb7 	bl	8008dc2 <SDMMC_CmdAppCommand>
 8008054:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	e00f      	b.n	8008080 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f000 feee 	bl	8008e48 <SDMMC_CmdBusWidth>
 800806c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	e003      	b.n	8008080 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008078:	2300      	movs	r3, #0
 800807a:	e001      	b.n	8008080 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800807c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	; 0x38
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008092:	f7f9 fa9b 	bl	80015cc <HAL_GetTick>
 8008096:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800809c:	2300      	movs	r3, #0
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2108      	movs	r1, #8
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fd3a 	bl	8008b28 <SDMMC_CmdBlockLength>
 80080b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	e0ad      	b.n	800821c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f000 fe78 	bl	8008dc2 <SDMMC_CmdAppCommand>
 80080d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <SD_FindSCR+0x56>
  {
    return errorstate;
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	e09e      	b.n	800821c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080de:	f04f 33ff 	mov.w	r3, #4294967295
 80080e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80080e4:	2308      	movs	r3, #8
 80080e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80080e8:	2330      	movs	r3, #48	; 0x30
 80080ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080ec:	2302      	movs	r3, #2
 80080ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f107 0210 	add.w	r2, r7, #16
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fce4 	bl	8008ad0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 febe 	bl	8008e8e <SDMMC_CmdSendSCR>
 8008112:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d027      	beq.n	800816a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	e07e      	b.n	800821c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d113      	bne.n	8008154 <SD_FindSCR+0xcc>
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d110      	bne.n	8008154 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fc32 	bl	80089a0 <SDMMC_ReadFIFO>
 800813c:	4603      	mov	r3, r0
 800813e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fc2b 	bl	80089a0 <SDMMC_ReadFIFO>
 800814a:	4603      	mov	r3, r0
 800814c:	60fb      	str	r3, [r7, #12]
      index++;
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	3301      	adds	r3, #1
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008154:	f7f9 fa3a 	bl	80015cc <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d102      	bne.n	800816a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008168:	e058      	b.n	800821c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008170:	f240 532a 	movw	r3, #1322	; 0x52a
 8008174:	4013      	ands	r3, r2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0d1      	beq.n	800811e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2208      	movs	r2, #8
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008190:	2308      	movs	r3, #8
 8008192:	e043      	b.n	800821c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2202      	movs	r2, #2
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80081aa:	2302      	movs	r3, #2
 80081ac:	e036      	b.n	800821c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2220      	movs	r2, #32
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80081c4:	2320      	movs	r3, #32
 80081c6:	e029      	b.n	800821c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a15      	ldr	r2, [pc, #84]	; (8008224 <SD_FindSCR+0x19c>)
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	061a      	lsls	r2, r3, #24
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	0a1b      	lsrs	r3, r3, #8
 80081e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80081e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	601a      	str	r2, [r3, #0]
    scr++;
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	3304      	adds	r3, #4
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	061a      	lsls	r2, r3, #24
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008204:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800820e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	0e1b      	lsrs	r3, r3, #24
 8008214:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3738      	adds	r7, #56	; 0x38
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	18000f3a 	.word	0x18000f3a

08008228 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	2b1f      	cmp	r3, #31
 800823c:	d936      	bls.n	80082ac <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e027      	b.n	8008294 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 fba9 	bl	80089a0 <SDMMC_ReadFIFO>
 800824e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3301      	adds	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	0a1b      	lsrs	r3, r3, #8
 8008262:	b2da      	uxtb	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3301      	adds	r3, #1
 800826c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	b2da      	uxtb	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	3301      	adds	r3, #1
 800827c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	0e1b      	lsrs	r3, r3, #24
 8008282:	b2da      	uxtb	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3301      	adds	r3, #1
 800828c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	3301      	adds	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b07      	cmp	r3, #7
 8008298:	d9d4      	bls.n	8008244 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	f1a3 0220 	sub.w	r2, r3, #32
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b1f      	cmp	r3, #31
 80082c8:	d93a      	bls.n	8008340 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	e02b      	b.n	8008328 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	3301      	adds	r3, #1
 80082da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	021a      	lsls	r2, r3, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3301      	adds	r3, #1
 80082ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	041a      	lsls	r2, r3, #16
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	3301      	adds	r3, #1
 80082fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	061a      	lsls	r2, r3, #24
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	3301      	adds	r3, #1
 8008310:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f107 020c 	add.w	r2, r7, #12
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fb4c 	bl	80089ba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	3301      	adds	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b07      	cmp	r3, #7
 800832c:	d9d0      	bls.n	80082d0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	f1a3 0220 	sub.w	r2, r3, #32
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e049      	b.n	800843e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f841 	bl	8008446 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f000 fa00 	bl	80087dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d001      	beq.n	8008474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e054      	b.n	800851e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a26      	ldr	r2, [pc, #152]	; (800852c <HAL_TIM_Base_Start_IT+0xd0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d022      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849e:	d01d      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a22      	ldr	r2, [pc, #136]	; (8008530 <HAL_TIM_Base_Start_IT+0xd4>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d018      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a21      	ldr	r2, [pc, #132]	; (8008534 <HAL_TIM_Base_Start_IT+0xd8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d013      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1f      	ldr	r2, [pc, #124]	; (8008538 <HAL_TIM_Base_Start_IT+0xdc>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00e      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1e      	ldr	r2, [pc, #120]	; (800853c <HAL_TIM_Base_Start_IT+0xe0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d009      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <HAL_TIM_Base_Start_IT+0xe4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d004      	beq.n	80084dc <HAL_TIM_Base_Start_IT+0x80>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1b      	ldr	r2, [pc, #108]	; (8008544 <HAL_TIM_Base_Start_IT+0xe8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d115      	bne.n	8008508 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	4b19      	ldr	r3, [pc, #100]	; (8008548 <HAL_TIM_Base_Start_IT+0xec>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b06      	cmp	r3, #6
 80084ec:	d015      	beq.n	800851a <HAL_TIM_Base_Start_IT+0xbe>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f4:	d011      	beq.n	800851a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008506:	e008      	b.n	800851a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0201 	orr.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e000      	b.n	800851c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40010000 	.word	0x40010000
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40000c00 	.word	0x40000c00
 800853c:	40010400 	.word	0x40010400
 8008540:	40001800 	.word	0x40001800
 8008544:	40014000 	.word	0x40014000
 8008548:	00010007 	.word	0x00010007

0800854c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b02      	cmp	r3, #2
 8008560:	d122      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b02      	cmp	r3, #2
 800856e:	d11b      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f06f 0202 	mvn.w	r2, #2
 8008578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f905 	bl	800879e <HAL_TIM_IC_CaptureCallback>
 8008594:	e005      	b.n	80085a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f8f7 	bl	800878a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f908 	bl	80087b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d122      	bne.n	80085fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d11b      	bne.n	80085fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0204 	mvn.w	r2, #4
 80085cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f8db 	bl	800879e <HAL_TIM_IC_CaptureCallback>
 80085e8:	e005      	b.n	80085f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8cd 	bl	800878a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8de 	bl	80087b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b08      	cmp	r3, #8
 8008608:	d122      	bne.n	8008650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b08      	cmp	r3, #8
 8008616:	d11b      	bne.n	8008650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f06f 0208 	mvn.w	r2, #8
 8008620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2204      	movs	r2, #4
 8008626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f8b1 	bl	800879e <HAL_TIM_IC_CaptureCallback>
 800863c:	e005      	b.n	800864a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8a3 	bl	800878a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f8b4 	bl	80087b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b10      	cmp	r3, #16
 800865c:	d122      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b10      	cmp	r3, #16
 800866a:	d11b      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0210 	mvn.w	r2, #16
 8008674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2208      	movs	r2, #8
 800867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f887 	bl	800879e <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f879 	bl	800878a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f88a 	bl	80087b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d10e      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d107      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0201 	mvn.w	r2, #1
 80086c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f8 fca4 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d10e      	bne.n	80086fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e8:	2b80      	cmp	r3, #128	; 0x80
 80086ea:	d107      	bne.n	80086fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f914 	bl	8008924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870a:	d10e      	bne.n	800872a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d107      	bne.n	800872a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f907 	bl	8008938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d10e      	bne.n	8008756 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d107      	bne.n	8008756 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800874e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f838 	bl	80087c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b20      	cmp	r3, #32
 8008762:	d10e      	bne.n	8008782 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b20      	cmp	r3, #32
 8008770:	d107      	bne.n	8008782 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f06f 0220 	mvn.w	r2, #32
 800877a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f8c7 	bl	8008910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a40      	ldr	r2, [pc, #256]	; (80088f0 <TIM_Base_SetConfig+0x114>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d013      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087fa:	d00f      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a3d      	ldr	r2, [pc, #244]	; (80088f4 <TIM_Base_SetConfig+0x118>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00b      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a3c      	ldr	r2, [pc, #240]	; (80088f8 <TIM_Base_SetConfig+0x11c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d007      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a3b      	ldr	r2, [pc, #236]	; (80088fc <TIM_Base_SetConfig+0x120>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a3a      	ldr	r2, [pc, #232]	; (8008900 <TIM_Base_SetConfig+0x124>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d108      	bne.n	800882e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a2f      	ldr	r2, [pc, #188]	; (80088f0 <TIM_Base_SetConfig+0x114>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01f      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883c:	d01b      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a2c      	ldr	r2, [pc, #176]	; (80088f4 <TIM_Base_SetConfig+0x118>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d017      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a2b      	ldr	r2, [pc, #172]	; (80088f8 <TIM_Base_SetConfig+0x11c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d013      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a2a      	ldr	r2, [pc, #168]	; (80088fc <TIM_Base_SetConfig+0x120>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00f      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a29      	ldr	r2, [pc, #164]	; (8008900 <TIM_Base_SetConfig+0x124>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00b      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a28      	ldr	r2, [pc, #160]	; (8008904 <TIM_Base_SetConfig+0x128>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d007      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a27      	ldr	r2, [pc, #156]	; (8008908 <TIM_Base_SetConfig+0x12c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d003      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a26      	ldr	r2, [pc, #152]	; (800890c <TIM_Base_SetConfig+0x130>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d108      	bne.n	8008888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800887c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <TIM_Base_SetConfig+0x114>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00f      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a12      	ldr	r2, [pc, #72]	; (8008900 <TIM_Base_SetConfig+0x124>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00b      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a11      	ldr	r2, [pc, #68]	; (8008904 <TIM_Base_SetConfig+0x128>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a10      	ldr	r2, [pc, #64]	; (8008908 <TIM_Base_SetConfig+0x12c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a0f      	ldr	r2, [pc, #60]	; (800890c <TIM_Base_SetConfig+0x130>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d103      	bne.n	80088dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	615a      	str	r2, [r3, #20]
}
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40010000 	.word	0x40010000
 80088f4:	40000400 	.word	0x40000400
 80088f8:	40000800 	.word	0x40000800
 80088fc:	40000c00 	.word	0x40000c00
 8008900:	40010400 	.word	0x40010400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800894c:	b084      	sub	sp, #16
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	f107 001c 	add.w	r0, r7, #28
 800895a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008962:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008964:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008966:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800896a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800896e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008972:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	4b07      	ldr	r3, [pc, #28]	; (800899c <SDMMC_Init+0x50>)
 8008980:	4013      	ands	r3, r2
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	b004      	add	sp, #16
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	ffc02c00 	.word	0xffc02c00

080089a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f043 0203 	orr.w	r2, r3, #3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f023 0203 	bic.w	r2, r3, #3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0303 	and.w	r3, r3, #3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008a5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008a60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008a66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <SDMMC_SendCommand+0x50>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	fffee0c0 	.word	0xfffee0c0

08008a90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	b2db      	uxtb	r3, r3
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b085      	sub	sp, #20
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	461a      	mov	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	4413      	add	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008af6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008afc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008b02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0

}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b36:	2310      	movs	r3, #16
 8008b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ff73 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b5a:	2110      	movs	r1, #16
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa5f 	bl	8009020 <SDMMC_GetCmdResp1>
 8008b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b64:	69fb      	ldr	r3, [r7, #28]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b088      	sub	sp, #32
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b7c:	2311      	movs	r3, #17
 8008b7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b90:	f107 0308 	add.w	r3, r7, #8
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff ff50 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba0:	2111      	movs	r1, #17
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fa3c 	bl	8009020 <SDMMC_GetCmdResp1>
 8008ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008baa:	69fb      	ldr	r3, [r7, #28]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008bc2:	2312      	movs	r3, #18
 8008bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff2d 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be6:	2112      	movs	r1, #18
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa19 	bl	8009020 <SDMMC_GetCmdResp1>
 8008bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c08:	2318      	movs	r3, #24
 8008c0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1c:	f107 0308 	add.w	r3, r7, #8
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff ff0a 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2c:	2118      	movs	r1, #24
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f9f6 	bl	8009020 <SDMMC_GetCmdResp1>
 8008c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c36:	69fb      	ldr	r3, [r7, #28]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3720      	adds	r7, #32
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008c4e:	2319      	movs	r3, #25
 8008c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fee7 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c72:	2119      	movs	r1, #25
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f9d3 	bl	8009020 <SDMMC_GetCmdResp1>
 8008c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c94:	230c      	movs	r3, #12
 8008c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff feb8 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008ccc:	4a0b      	ldr	r2, [pc, #44]	; (8008cfc <SDMMC_CmdStopTransfer+0x74>)
 8008cce:	210c      	movs	r1, #12
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f9a5 	bl	8009020 <SDMMC_GetCmdResp1>
 8008cd6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cea:	d101      	bne.n	8008cf0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008cec:	2300      	movs	r3, #0
 8008cee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	05f5e100 	.word	0x05f5e100

08008d00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d0e:	2307      	movs	r3, #7
 8008d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d22:	f107 0308 	add.w	r3, r7, #8
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fe87 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d32:	2107      	movs	r1, #7
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f973 	bl	8009020 <SDMMC_GetCmdResp1>
 8008d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b088      	sub	sp, #32
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff fe66 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb97 	bl	80094a4 <SDMMC_GetCmdError>
 8008d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d78:	69fb      	ldr	r3, [r7, #28]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3720      	adds	r7, #32
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b088      	sub	sp, #32
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d90:	2308      	movs	r3, #8
 8008d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da4:	f107 0308 	add.w	r3, r7, #8
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fe46 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fb29 	bl	8009408 <SDMMC_GetCmdResp7>
 8008db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db8:	69fb      	ldr	r3, [r7, #28]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b088      	sub	sp, #32
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008dd0:	2337      	movs	r3, #55	; 0x37
 8008dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fe26 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df4:	2137      	movs	r1, #55	; 0x37
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f912 	bl	8009020 <SDMMC_GetCmdResp1>
 8008dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e16:	2329      	movs	r3, #41	; 0x29
 8008e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff fe03 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa2e 	bl	8009298 <SDMMC_GetCmdResp3>
 8008e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3720      	adds	r7, #32
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e56:	2306      	movs	r3, #6
 8008e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e6a:	f107 0308 	add.w	r3, r7, #8
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff fde3 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7a:	2106      	movs	r1, #6
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8cf 	bl	8009020 <SDMMC_GetCmdResp1>
 8008e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e84:	69fb      	ldr	r3, [r7, #28]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b088      	sub	sp, #32
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e9a:	2333      	movs	r3, #51	; 0x33
 8008e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff fdc1 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebe:	2133      	movs	r1, #51	; 0x33
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f8ad 	bl	8009020 <SDMMC_GetCmdResp1>
 8008ec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b088      	sub	sp, #32
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ef2:	f107 0308 	add.w	r3, r7, #8
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fd9f 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f980 	bl	8009204 <SDMMC_GetCmdResp2>
 8008f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f06:	69fb      	ldr	r3, [r7, #28]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f1e:	2309      	movs	r3, #9
 8008f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fd7f 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f960 	bl	8009204 <SDMMC_GetCmdResp2>
 8008f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f46:	69fb      	ldr	r3, [r7, #28]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff fd5f 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	2103      	movs	r1, #3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f9c8 	bl	8009318 <SDMMC_GetCmdResp6>
 8008f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008fa2:	230d      	movs	r3, #13
 8008fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff fd3d 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc6:	210d      	movs	r1, #13
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f829 	bl	8009020 <SDMMC_GetCmdResp1>
 8008fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008fe6:	230d      	movs	r3, #13
 8008fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff fd1b 	bl	8008a3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009006:	f241 3288 	movw	r2, #5000	; 0x1388
 800900a:	210d      	movs	r1, #13
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f807 	bl	8009020 <SDMMC_GetCmdResp1>
 8009012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009014:	69fb      	ldr	r3, [r7, #28]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	460b      	mov	r3, r1
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800902e:	4b70      	ldr	r3, [pc, #448]	; (80091f0 <SDMMC_GetCmdResp1+0x1d0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a70      	ldr	r2, [pc, #448]	; (80091f4 <SDMMC_GetCmdResp1+0x1d4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	0a5a      	lsrs	r2, r3, #9
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	fb02 f303 	mul.w	r3, r2, r3
 8009040:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	1e5a      	subs	r2, r3, #1
 8009046:	61fa      	str	r2, [r7, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800904c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009050:	e0c9      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009056:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	4b67      	ldr	r3, [pc, #412]	; (80091f8 <SDMMC_GetCmdResp1+0x1d8>)
 800905c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0ef      	beq.n	8009042 <SDMMC_GetCmdResp1+0x22>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1ea      	bne.n	8009042 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2204      	movs	r2, #4
 800907c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800907e:	2304      	movs	r3, #4
 8009080:	e0b1      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d004      	beq.n	8009098 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009094:	2301      	movs	r3, #1
 8009096:	e0a6      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4a58      	ldr	r2, [pc, #352]	; (80091fc <SDMMC_GetCmdResp1+0x1dc>)
 800909c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f7ff fcf6 	bl	8008a90 <SDMMC_GetCommandResponse>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461a      	mov	r2, r3
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d001      	beq.n	80090b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e099      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80090b2:	2100      	movs	r1, #0
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff fcf8 	bl	8008aaa <SDMMC_GetResponse>
 80090ba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4b50      	ldr	r3, [pc, #320]	; (8009200 <SDMMC_GetCmdResp1+0x1e0>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e08d      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da02      	bge.n	80090d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090d4:	e087      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090e0:	2340      	movs	r3, #64	; 0x40
 80090e2:	e080      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	e079      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009100:	e071      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800910c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009110:	e069      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800911c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009120:	e061      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800912c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009130:	e059      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800913c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009140:	e051      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800914c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009150:	e049      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800915c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009160:	e041      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800916c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009170:	e039      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800917c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009180:	e031      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800918c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009190:	e029      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800919c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091a0:	e021      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80091ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80091b0:	e019      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80091bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091c0:	e011      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80091cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091d0:	e009      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f003 0308 	and.w	r3, r3, #8
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80091e0:	e001      	b.n	80091e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	24000000 	.word	0x24000000
 80091f4:	10624dd3 	.word	0x10624dd3
 80091f8:	00200045 	.word	0x00200045
 80091fc:	002000c5 	.word	0x002000c5
 8009200:	fdffe008 	.word	0xfdffe008

08009204 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800920c:	4b1f      	ldr	r3, [pc, #124]	; (800928c <SDMMC_GetCmdResp2+0x88>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a1f      	ldr	r2, [pc, #124]	; (8009290 <SDMMC_GetCmdResp2+0x8c>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	0a5b      	lsrs	r3, r3, #9
 8009218:	f241 3288 	movw	r2, #5000	; 0x1388
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	60fa      	str	r2, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800922c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009230:	e026      	b.n	8009280 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0ef      	beq.n	8009222 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1ea      	bne.n	8009222 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2204      	movs	r2, #4
 800925c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800925e:	2304      	movs	r3, #4
 8009260:	e00e      	b.n	8009280 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009274:	2301      	movs	r3, #1
 8009276:	e003      	b.n	8009280 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a06      	ldr	r2, [pc, #24]	; (8009294 <SDMMC_GetCmdResp2+0x90>)
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	24000000 	.word	0x24000000
 8009290:	10624dd3 	.word	0x10624dd3
 8009294:	002000c5 	.word	0x002000c5

08009298 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80092a0:	4b1a      	ldr	r3, [pc, #104]	; (800930c <SDMMC_GetCmdResp3+0x74>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a1a      	ldr	r2, [pc, #104]	; (8009310 <SDMMC_GetCmdResp3+0x78>)
 80092a6:	fba2 2303 	umull	r2, r3, r2, r3
 80092aa:	0a5b      	lsrs	r3, r3, #9
 80092ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b0:	fb02 f303 	mul.w	r3, r2, r3
 80092b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	60fa      	str	r2, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092c4:	e01b      	b.n	80092fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ef      	beq.n	80092b6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1ea      	bne.n	80092b6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2204      	movs	r2, #4
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092f2:	2304      	movs	r3, #4
 80092f4:	e003      	b.n	80092fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a06      	ldr	r2, [pc, #24]	; (8009314 <SDMMC_GetCmdResp3+0x7c>)
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	24000000 	.word	0x24000000
 8009310:	10624dd3 	.word	0x10624dd3
 8009314:	002000c5 	.word	0x002000c5

08009318 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009326:	4b35      	ldr	r3, [pc, #212]	; (80093fc <SDMMC_GetCmdResp6+0xe4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a35      	ldr	r2, [pc, #212]	; (8009400 <SDMMC_GetCmdResp6+0xe8>)
 800932c:	fba2 2303 	umull	r2, r3, r2, r3
 8009330:	0a5b      	lsrs	r3, r3, #9
 8009332:	f241 3288 	movw	r2, #5000	; 0x1388
 8009336:	fb02 f303 	mul.w	r3, r2, r3
 800933a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	1e5a      	subs	r2, r3, #1
 8009340:	61fa      	str	r2, [r7, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009346:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800934a:	e052      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009350:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0ef      	beq.n	800933c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1ea      	bne.n	800933c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2204      	movs	r2, #4
 8009376:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009378:	2304      	movs	r3, #4
 800937a:	e03a      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800938e:	2301      	movs	r3, #1
 8009390:	e02f      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff fb7c 	bl	8008a90 <SDMMC_GetCommandResponse>
 8009398:	4603      	mov	r3, r0
 800939a:	461a      	mov	r2, r3
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	4293      	cmp	r3, r2
 80093a0:	d001      	beq.n	80093a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e025      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4a16      	ldr	r2, [pc, #88]	; (8009404 <SDMMC_GetCmdResp6+0xec>)
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80093ac:	2100      	movs	r1, #0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fb7b 	bl	8008aaa <SDMMC_GetResponse>
 80093b4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	0c1b      	lsrs	r3, r3, #16
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e011      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093dc:	e009      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ec:	e001      	b.n	80093f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	24000000 	.word	0x24000000
 8009400:	10624dd3 	.word	0x10624dd3
 8009404:	002000c5 	.word	0x002000c5

08009408 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009410:	4b22      	ldr	r3, [pc, #136]	; (800949c <SDMMC_GetCmdResp7+0x94>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a22      	ldr	r2, [pc, #136]	; (80094a0 <SDMMC_GetCmdResp7+0x98>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	0a5b      	lsrs	r3, r3, #9
 800941c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009420:	fb02 f303 	mul.w	r3, r2, r3
 8009424:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	1e5a      	subs	r2, r3, #1
 800942a:	60fa      	str	r2, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009434:	e02c      	b.n	8009490 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0ef      	beq.n	8009426 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1ea      	bne.n	8009426 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2204      	movs	r2, #4
 8009460:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009462:	2304      	movs	r3, #4
 8009464:	e014      	b.n	8009490 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009478:	2301      	movs	r3, #1
 800947a:	e009      	b.n	8009490 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2240      	movs	r2, #64	; 0x40
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800948e:	2300      	movs	r3, #0

}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	24000000 	.word	0x24000000
 80094a0:	10624dd3 	.word	0x10624dd3

080094a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80094ac:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <SDMMC_GetCmdError+0x50>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a11      	ldr	r2, [pc, #68]	; (80094f8 <SDMMC_GetCmdError+0x54>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0a5b      	lsrs	r3, r3, #9
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	fb02 f303 	mul.w	r3, r2, r3
 80094c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	60fa      	str	r2, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094d0:	e009      	b.n	80094e6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0f1      	beq.n	80094c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a06      	ldr	r2, [pc, #24]	; (80094fc <SDMMC_GetCmdError+0x58>)
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	24000000 	.word	0x24000000
 80094f8:	10624dd3 	.word	0x10624dd3
 80094fc:	002000c5 	.word	0x002000c5

08009500 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
*/
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	; 0x38
 8009504:	af08      	add	r7, sp, #32
 8009506:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	613b      	str	r3, [r7, #16]
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 8009510:	f107 010c 	add.w	r1, r7, #12
 8009514:	2300      	movs	r3, #0
 8009516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800951a:	6938      	ldr	r0, [r7, #16]
 800951c:	f00a ff62 	bl	80143e4 <_txe_byte_allocate>
 8009520:	6178      	str	r0, [r7, #20]

/* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8009528:	2302      	movs	r3, #2
 800952a:	e01d      	b.n	8009568 <MX_FileX_Init+0x68>
  }

/* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	22b0      	movs	r2, #176	; 0xb0
 8009530:	9206      	str	r2, [sp, #24]
 8009532:	2201      	movs	r2, #1
 8009534:	9205      	str	r2, [sp, #20]
 8009536:	2200      	movs	r2, #0
 8009538:	9204      	str	r2, [sp, #16]
 800953a:	220a      	movs	r2, #10
 800953c:	9203      	str	r2, [sp, #12]
 800953e:	220a      	movs	r2, #10
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009546:	9201      	str	r2, [sp, #4]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	2300      	movs	r3, #0
 800954c:	4a08      	ldr	r2, [pc, #32]	; (8009570 <MX_FileX_Init+0x70>)
 800954e:	4909      	ldr	r1, [pc, #36]	; (8009574 <MX_FileX_Init+0x74>)
 8009550:	4809      	ldr	r0, [pc, #36]	; (8009578 <MX_FileX_Init+0x78>)
 8009552:	f00b f98f 	bl	8014874 <_txe_thread_create>
 8009556:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

/* Check main thread creation */
  if (ret != FX_SUCCESS)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 800955e:	230e      	movs	r3, #14
 8009560:	e002      	b.n	8009568 <MX_FileX_Init+0x68>
/* USER CODE BEGIN MX_FileX_Init */

/* USER CODE END MX_FileX_Init */

/* Initialize FileX.  */
  fx_system_initialize();
 8009562:	f005 fedd 	bl	800f320 <_fx_system_initialize>

/* USER CODE BEGIN MX_FileX_Init 1*/

/* USER CODE END MX_FileX_Init 1*/

  return ret;
 8009566:	697b      	ldr	r3, [r7, #20]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	0800957d 	.word	0x0800957d
 8009574:	08014b0c 	.word	0x08014b0c
 8009578:	24000a58 	.word	0x24000a58

0800957c <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
*/
 void fx_app_thread_entry(ULONG thread_input)
 {
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af04      	add	r7, sp, #16
 8009582:	6078      	str	r0, [r7, #4]

  UINT sd_status = FX_SUCCESS;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN fx_app_thread_entry 0*/

 // CHAR* place = SRAM2_ADDR;
 // CHAR data[] = "69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ";
  Address = FLASH_USER_START_ADDR;
 8009588:	4b52      	ldr	r3, [pc, #328]	; (80096d4 <fx_app_thread_entry+0x158>)
 800958a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 800958e:	601a      	str	r2, [r3, #0]
 	    // ram_adrr =place ;

/* USER CODE END fx_app_thread_entry 0*/

/* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 8009590:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8009594:	9302      	str	r3, [sp, #8]
 8009596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	4b4e      	ldr	r3, [pc, #312]	; (80096d8 <fx_app_thread_entry+0x15c>)
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	4a4e      	ldr	r2, [pc, #312]	; (80096dc <fx_app_thread_entry+0x160>)
 80095a4:	494e      	ldr	r1, [pc, #312]	; (80096e0 <fx_app_thread_entry+0x164>)
 80095a6:	484f      	ldr	r0, [pc, #316]	; (80096e4 <fx_app_thread_entry+0x168>)
 80095a8:	f008 fa5a 	bl	8011a60 <_fxe_media_open>
 80095ac:	60f8      	str	r0, [r7, #12]

/* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d000      	beq.n	80095b6 <fx_app_thread_entry+0x3a>
  {
     /* USER CODE BEGIN SD DRIVER get info error */
    while(1);
 80095b4:	e7fe      	b.n	80095b4 <fx_app_thread_entry+0x38>




  /* Create a file called STM32.TXT in the root directory.  */
 sd_status =  fx_file_create(&sdio_disk, "swap_nbsp_v1.bin");
 80095b6:	494c      	ldr	r1, [pc, #304]	; (80096e8 <fx_app_thread_entry+0x16c>)
 80095b8:	484a      	ldr	r0, [pc, #296]	; (80096e4 <fx_app_thread_entry+0x168>)
 80095ba:	f008 f90f 	bl	80117dc <_fxe_file_create>
 80095be:	60f8      	str	r0, [r7, #12]

 if (sd_status != FX_SUCCESS)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <fx_app_thread_entry+0x54>
 {
    if (sd_status != FX_ALREADY_CREATED)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b0b      	cmp	r3, #11
 80095ca:	d001      	beq.n	80095d0 <fx_app_thread_entry+0x54>
    {
      Error_Handler();
 80095cc:	f7f7 fd36 	bl	800103c <Error_Handler>
  {
   Error_Handler();
  }*/


 sd_status = load("swap_nbsp_v1.bin");
 80095d0:	4845      	ldr	r0, [pc, #276]	; (80096e8 <fx_app_thread_entry+0x16c>)
 80095d2:	f000 f895 	bl	8009700 <load>
 80095d6:	60f8      	str	r0, [r7, #12]
 if (sd_status != FX_SUCCESS)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <fx_app_thread_entry+0x66>
   {
    Error_Handler();
 80095de:	f7f7 fd2d 	bl	800103c <Error_Handler>
   }

  HAL_FLASH_Unlock();
 80095e2:	f7f8 fa91 	bl	8001b08 <HAL_FLASH_Unlock>

   HAL_FLASH_OB_Unlock();
 80095e6:	f7f8 faf3 	bl	8001bd0 <HAL_FLASH_OB_Unlock>
  while(1)
  {
   // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);

	  /* Wait for BUTTON_TAMPER is released */
	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80095ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80095ee:	483f      	ldr	r0, [pc, #252]	; (80096ec <fx_app_thread_entry+0x170>)
 80095f0:	f7f9 fc84 	bl	8002efc <HAL_GPIO_ReadPin>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d15a      	bne.n	80096b0 <fx_app_thread_entry+0x134>
	    {
	      while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET);
 80095fa:	bf00      	nop
 80095fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009600:	483a      	ldr	r0, [pc, #232]	; (80096ec <fx_app_thread_entry+0x170>)
 8009602:	f7f9 fc7b 	bl	8002efc <HAL_GPIO_ReadPin>
 8009606:	4603      	mov	r3, r0
 8009608:	2b01      	cmp	r3, #1
 800960a:	d0f7      	beq.n	80095fc <fx_app_thread_entry+0x80>

	      /* Get the Dual boot configuration status */
	      HAL_FLASHEx_OBGetConfig(&OBInit);
 800960c:	4838      	ldr	r0, [pc, #224]	; (80096f0 <fx_app_thread_entry+0x174>)
 800960e:	f7f8 fdf3 	bl	80021f8 <HAL_FLASHEx_OBGetConfig>

	      /* Get FLASH_WRP_SECTORS write protection status */
	      OBInit.Banks     = FLASH_BANK_1;
 8009612:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <fx_app_thread_entry+0x174>)
 8009614:	2201      	movs	r2, #1
 8009616:	61da      	str	r2, [r3, #28]
	      HAL_FLASHEx_OBGetConfig(&OBInit);
 8009618:	4835      	ldr	r0, [pc, #212]	; (80096f0 <fx_app_thread_entry+0x174>)
 800961a:	f7f8 fded 	bl	80021f8 <HAL_FLASHEx_OBGetConfig>

	      /* Check Swap Flash banks  status */
	      if ((OBInit.USERConfig & OB_SWAP_BANK_ENABLE) == OB_SWAP_BANK_DISABLE)
 800961e:	4b34      	ldr	r3, [pc, #208]	; (80096f0 <fx_app_thread_entry+0x174>)
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	2b00      	cmp	r3, #0
 8009624:	db22      	blt.n	800966c <fx_app_thread_entry+0xf0>
	      {
	        /*Swap to bank2 */
	        /*Set OB SWAP_BANK_OPT to swap Bank2*/
	        OBInit.OptionType = OPTIONBYTE_USER;
 8009626:	4b32      	ldr	r3, [pc, #200]	; (80096f0 <fx_app_thread_entry+0x174>)
 8009628:	2204      	movs	r2, #4
 800962a:	601a      	str	r2, [r3, #0]
	        OBInit.USERType   = OB_USER_SWAP_BANK;
 800962c:	4b30      	ldr	r3, [pc, #192]	; (80096f0 <fx_app_thread_entry+0x174>)
 800962e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009632:	615a      	str	r2, [r3, #20]
	        OBInit.USERConfig = OB_SWAP_BANK_ENABLE;
 8009634:	4b2e      	ldr	r3, [pc, #184]	; (80096f0 <fx_app_thread_entry+0x174>)
 8009636:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800963a:	619a      	str	r2, [r3, #24]
	        HAL_FLASHEx_OBProgram(&OBInit);
 800963c:	482c      	ldr	r0, [pc, #176]	; (80096f0 <fx_app_thread_entry+0x174>)
 800963e:	f7f8 fd37 	bl	80020b0 <HAL_FLASHEx_OBProgram>

	        /* Launch Option bytes loading */
	        HAL_FLASH_OB_Launch();
 8009642:	f7f8 fae7 	bl	8001c14 <HAL_FLASH_OB_Launch>

	        HAL_NVIC_SystemReset();
 8009646:	f7f8 f94c 	bl	80018e2 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800964a:	f3bf 8f4f 	dsb	sy
}
 800964e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009650:	f3bf 8f6f 	isb	sy
}
 8009654:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8009656:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <fx_app_thread_entry+0x178>)
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800965e:	f3bf 8f4f 	dsb	sy
}
 8009662:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009664:	f3bf 8f6f 	isb	sy
}
 8009668:	bf00      	nop
}
 800966a:	e02e      	b.n	80096ca <fx_app_thread_entry+0x14e>
	      }
	      else
	      {
	        /* Swap to bank1 */
	        /*Set OB SWAP_BANK_OPT to swap Bank1*/
	        OBInit.OptionType = OPTIONBYTE_USER;
 800966c:	4b20      	ldr	r3, [pc, #128]	; (80096f0 <fx_app_thread_entry+0x174>)
 800966e:	2204      	movs	r2, #4
 8009670:	601a      	str	r2, [r3, #0]
	        OBInit.USERType = OB_USER_SWAP_BANK;
 8009672:	4b1f      	ldr	r3, [pc, #124]	; (80096f0 <fx_app_thread_entry+0x174>)
 8009674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009678:	615a      	str	r2, [r3, #20]
	        OBInit.USERConfig = OB_SWAP_BANK_DISABLE;
 800967a:	4b1d      	ldr	r3, [pc, #116]	; (80096f0 <fx_app_thread_entry+0x174>)
 800967c:	2200      	movs	r2, #0
 800967e:	619a      	str	r2, [r3, #24]
	        HAL_FLASHEx_OBProgram(&OBInit);
 8009680:	481b      	ldr	r0, [pc, #108]	; (80096f0 <fx_app_thread_entry+0x174>)
 8009682:	f7f8 fd15 	bl	80020b0 <HAL_FLASHEx_OBProgram>

	        /* Launch Option bytes loading */
	        HAL_FLASH_OB_Launch();
 8009686:	f7f8 fac5 	bl	8001c14 <HAL_FLASH_OB_Launch>

	        HAL_NVIC_SystemReset();
 800968a:	f7f8 f92a 	bl	80018e2 <HAL_NVIC_SystemReset>
  __ASM volatile ("dsb 0xF":::"memory");
 800968e:	f3bf 8f4f 	dsb	sy
}
 8009692:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009694:	f3bf 8f6f 	isb	sy
}
 8009698:	bf00      	nop
    SCB->ICIALLU = 0UL;
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <fx_app_thread_entry+0x178>)
 800969c:	2200      	movs	r2, #0
 800969e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80096a2:	f3bf 8f4f 	dsb	sy
}
 80096a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80096a8:	f3bf 8f6f 	isb	sy
}
 80096ac:	bf00      	nop
}
 80096ae:	e00c      	b.n	80096ca <fx_app_thread_entry+0x14e>
	    else
	    {
	#ifdef FLASH_BANK1
	      /* Toggle LED1 */

	      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80096b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80096b4:	4810      	ldr	r0, [pc, #64]	; (80096f8 <fx_app_thread_entry+0x17c>)
 80096b6:	f7f9 fc52 	bl	8002f5e <HAL_GPIO_TogglePin>
	      /* Turn off LED2 */
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80096ba:	2201      	movs	r2, #1
 80096bc:	2110      	movs	r1, #16
 80096be:	480f      	ldr	r0, [pc, #60]	; (80096fc <fx_app_thread_entry+0x180>)
 80096c0:	f7f9 fc34 	bl	8002f2c <HAL_GPIO_WritePin>
	#endif

	      /* Insert 100 ms delay */
	      HAL_Delay(100);
 80096c4:	2064      	movs	r0, #100	; 0x64
 80096c6:	f7f7 ff8d 	bl	80015e4 <HAL_Delay>
	    }

    tx_thread_sleep(40);
 80096ca:	2028      	movs	r0, #40	; 0x28
 80096cc:	f00a f872 	bl	80137b4 <_tx_thread_sleep>
	    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80096d0:	e78b      	b.n	80095ea <fx_app_thread_entry+0x6e>
 80096d2:	bf00      	nop
 80096d4:	240009f8 	.word	0x240009f8
 80096d8:	24000b20 	.word	0x24000b20
 80096dc:	080099dd 	.word	0x080099dd
 80096e0:	08014b20 	.word	0x08014b20
 80096e4:	24000d20 	.word	0x24000d20
 80096e8:	08014b30 	.word	0x08014b30
 80096ec:	58020800 	.word	0x58020800
 80096f0:	24000a14 	.word	0x24000a14
 80096f4:	e000ed00 	.word	0xe000ed00
 80096f8:	58021400 	.word	0x58021400
 80096fc:	58020000 	.word	0x58020000

08009700 <load>:
/* USER CODE BEGIN 1 */



UINT load(CHAR * file_name)
{
 8009700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009704:	b08b      	sub	sp, #44	; 0x2c
 8009706:	af02      	add	r7, sp, #8
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	466b      	mov	r3, sp
 800970c:	461e      	mov	r6, r3
	  int k =0;
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
	  ULONG bytes_read;
	   ULONG offset=32;
 8009712:	2320      	movs	r3, #32
 8009714:	617b      	str	r3, [r7, #20]
	  // int j=0;
	   CHAR read_buffer[offset];
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	460b      	mov	r3, r1
 800971a:	3b01      	subs	r3, #1
 800971c:	613b      	str	r3, [r7, #16]
 800971e:	2300      	movs	r3, #0
 8009720:	4688      	mov	r8, r1
 8009722:	4699      	mov	r9, r3
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009738:	2300      	movs	r3, #0
 800973a:	460c      	mov	r4, r1
 800973c:	461d      	mov	r5, r3
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	00eb      	lsls	r3, r5, #3
 8009748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800974c:	00e2      	lsls	r2, r4, #3
 800974e:	1dcb      	adds	r3, r1, #7
 8009750:	08db      	lsrs	r3, r3, #3
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	ebad 0d03 	sub.w	sp, sp, r3
 8009758:	ab02      	add	r3, sp, #8
 800975a:	3300      	adds	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
	   UINT sd_status;
	  sd_status =  fx_file_open(&sdio_disk, &fx_file, file_name, FX_OPEN_FOR_READ);
 800975e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	2300      	movs	r3, #0
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	493e      	ldr	r1, [pc, #248]	; (8009864 <load+0x164>)
 800976a:	483f      	ldr	r0, [pc, #252]	; (8009868 <load+0x168>)
 800976c:	f008 f864 	bl	8011838 <_fxe_file_open>
 8009770:	61b8      	str	r0, [r7, #24]

	  	  if (sd_status != FX_SUCCESS)
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <load+0x7c>
	  	  {
	  		  Error_Handler();
 8009778:	f7f7 fc60 	bl	800103c <Error_Handler>
	  	  }
	  HAL_FLASH_Unlock();
 800977c:	f7f8 f9c4 	bl	8001b08 <HAL_FLASH_Unlock>


	    FirstSector = GetSector(FLASH_USER_START_ADDR);
 8009780:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8009784:	f7f7 fb56 	bl	8000e34 <GetSector>
 8009788:	4603      	mov	r3, r0
 800978a:	4a38      	ldr	r2, [pc, #224]	; (800986c <load+0x16c>)
 800978c:	6013      	str	r3, [r2, #0]
	    NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800978e:	4838      	ldr	r0, [pc, #224]	; (8009870 <load+0x170>)
 8009790:	f7f7 fb50 	bl	8000e34 <GetSector>
 8009794:	4602      	mov	r2, r0
 8009796:	4b35      	ldr	r3, [pc, #212]	; (800986c <load+0x16c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	3301      	adds	r3, #1
 800979e:	4a35      	ldr	r2, [pc, #212]	; (8009874 <load+0x174>)
 80097a0:	6013      	str	r3, [r2, #0]

	    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80097a2:	4b35      	ldr	r3, [pc, #212]	; (8009878 <load+0x178>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
	    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80097a8:	4b33      	ldr	r3, [pc, #204]	; (8009878 <load+0x178>)
 80097aa:	2220      	movs	r2, #32
 80097ac:	611a      	str	r2, [r3, #16]
	    EraseInitStruct.Banks         = FLASH_BANK_2;
 80097ae:	4b32      	ldr	r3, [pc, #200]	; (8009878 <load+0x178>)
 80097b0:	2202      	movs	r2, #2
 80097b2:	605a      	str	r2, [r3, #4]
	    EraseInitStruct.Sector        = FirstSector;
 80097b4:	4b2d      	ldr	r3, [pc, #180]	; (800986c <load+0x16c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a2f      	ldr	r2, [pc, #188]	; (8009878 <load+0x178>)
 80097ba:	6093      	str	r3, [r2, #8]
	    EraseInitStruct.NbSectors     = NbOfSectors;
 80097bc:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <load+0x174>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a2d      	ldr	r2, [pc, #180]	; (8009878 <load+0x178>)
 80097c2:	60d3      	str	r3, [r2, #12]

	    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80097c4:	492d      	ldr	r1, [pc, #180]	; (800987c <load+0x17c>)
 80097c6:	482c      	ldr	r0, [pc, #176]	; (8009878 <load+0x178>)
 80097c8:	f7f8 fba8 	bl	8001f1c <HAL_FLASHEx_Erase>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d02a      	beq.n	8009828 <load+0x128>
	    {

	      while (1)
 80097d2:	e7fe      	b.n	80097d2 <load+0xd2>
	      }
	    }
	  while(sd_status != FX_END_OF_FILE)
	  {

		  sd_status =  fx_file_seek(&fx_file,k*offset);
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
 80097dc:	4619      	mov	r1, r3
 80097de:	4821      	ldr	r0, [pc, #132]	; (8009864 <load+0x164>)
 80097e0:	f008 f8e4 	bl	80119ac <_fxe_file_seek>
 80097e4:	61b8      	str	r0, [r7, #24]
		  if (sd_status != FX_SUCCESS)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <load+0xf0>
		  {
			  Error_Handler();
 80097ec:	f7f7 fc26 	bl	800103c <Error_Handler>
		  }


		  sd_status =  fx_file_read(&fx_file, read_buffer,32, &bytes_read);
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	2220      	movs	r2, #32
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	481a      	ldr	r0, [pc, #104]	; (8009864 <load+0x164>)
 80097fa:	f008 f89f 	bl	801193c <_fxe_file_read>
 80097fe:	61b8      	str	r0, [r7, #24]




		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)read_buffer)) == HAL_OK)
 8009800:	4b1f      	ldr	r3, [pc, #124]	; (8009880 <load+0x180>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4619      	mov	r1, r3
 8009808:	2001      	movs	r0, #1
 800980a:	f7f8 f8eb 	bl	80019e4 <HAL_FLASH_Program>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d105      	bne.n	8009820 <load+0x120>
		  {
		      Address = Address + 32; // increment for the next Flash word
 8009814:	4b1a      	ldr	r3, [pc, #104]	; (8009880 <load+0x180>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3320      	adds	r3, #32
 800981a:	4a19      	ldr	r2, [pc, #100]	; (8009880 <load+0x180>)
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	e000      	b.n	8009822 <load+0x122>
		         //ram_adrr = ram_adrr +32;
		  }
		  else
		  {
		      while (1)
 8009820:	e7fe      	b.n	8009820 <load+0x120>
		         {
		           //BSP_LED_On(LED3);
		         }
		  }
		  k++;
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	61fb      	str	r3, [r7, #28]
	  while(sd_status != FX_END_OF_FILE)
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d1d2      	bne.n	80097d4 <load+0xd4>

	  }
	  HAL_FLASH_Lock();
 800982e:	f7f8 f9a5 	bl	8001b7c <HAL_FLASH_Lock>



	  sd_status =  fx_file_close(&fx_file);
 8009832:	480c      	ldr	r0, [pc, #48]	; (8009864 <load+0x164>)
 8009834:	f007 ffa6 	bl	8011784 <_fxe_file_close>
 8009838:	61b8      	str	r0, [r7, #24]

	  if (sd_status != FX_SUCCESS)
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <load+0x144>
	  {
	    Error_Handler();
 8009840:	f7f7 fbfc 	bl	800103c <Error_Handler>
	  }

	  sd_status =  fx_media_close(&sdio_disk);
 8009844:	4808      	ldr	r0, [pc, #32]	; (8009868 <load+0x168>)
 8009846:	f008 f8df 	bl	8011a08 <_fxe_media_close>
 800984a:	61b8      	str	r0, [r7, #24]

	  if (sd_status != FX_SUCCESS)
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <load+0x156>
	  {
	    Error_Handler();
 8009852:	f7f7 fbf3 	bl	800103c <Error_Handler>
	  }
	  return(sd_status);
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	46b5      	mov	sp, r6
}
 800985a:	4618      	mov	r0, r3
 800985c:	3724      	adds	r7, #36	; 0x24
 800985e:	46bd      	mov	sp, r7
 8009860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009864:	240031d8 	.word	0x240031d8
 8009868:	24000d20 	.word	0x24000d20
 800986c:	240009f0 	.word	0x240009f0
 8009870:	0813ffff 	.word	0x0813ffff
 8009874:	240009f4 	.word	0x240009f4
 8009878:	24000a00 	.word	0x24000a00
 800987c:	240009fc 	.word	0x240009fc
 8009880:	240009f8 	.word	0x240009f8

08009884 <fx_stm32_sd_init>:
* @brief Initializes the SD IP instance
* @param UINT instance SD instance to initialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_init(UINT instance)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN PRE_FX_SD_INIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_INIT */

#if (FX_STM32_SD_INIT == 1)
  MX_SDMMC1_SD_Init();
 8009890:	f7f7 f9a0 	bl	8000bd4 <MX_SDMMC1_SD_Init>

  /* USER CODE BEGIN POST_FX_SD_INIT */

  /* USER CODE END POST_FX_SD_INIT */

  return ret;
 8009894:	68fb      	ldr	r3, [r7, #12]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <fx_stm32_sd_deinit>:
* @brief Deinitializes the SD IP instance
* @param UINT instance SD instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_deinit(UINT instance)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_FX_SD_DEINIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_DEINIT */
#if (FX_STM32_SD_INIT == 1)
  if(HAL_SD_DeInit(&hsd1) != HAL_OK)
 80098ac:	4806      	ldr	r0, [pc, #24]	; (80098c8 <fx_stm32_sd_deinit+0x28>)
 80098ae:	f7fd fa13 	bl	8006cd8 <HAL_SD_DeInit>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <fx_stm32_sd_deinit+0x1c>
  {
    ret = 1;
 80098b8:	2301      	movs	r3, #1
 80098ba:	60fb      	str	r3, [r7, #12]
#endif
  /* USER CODE BEGIN POST_FX_SD_DEINIT */

  /* USER CODE END POST_FX_SD_DEINIT */

  return ret;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	24000904 	.word	0x24000904

080098cc <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 80098d8:	4806      	ldr	r0, [pc, #24]	; (80098f4 <fx_stm32_sd_get_status+0x28>)
 80098da:	f7fe f8b9 	bl	8007a50 <HAL_SD_GetCardState>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d001      	beq.n	80098e8 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 80098e4:	2301      	movs	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 80098e8:	68fb      	ldr	r3, [r7, #12]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	24000904 	.word	0x24000904

080098f8 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	4806      	ldr	r0, [pc, #24]	; (800992c <fx_stm32_sd_read_blocks+0x34>)
 8009912:	f7fd fa07 	bl	8006d24 <HAL_SD_ReadBlocks_DMA>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 800991c:	2301      	movs	r3, #1
 800991e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8009920:	697b      	ldr	r3, [r7, #20]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	24000904 	.word	0x24000904

08009930 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	4806      	ldr	r0, [pc, #24]	; (8009964 <fx_stm32_sd_write_blocks+0x34>)
 800994a:	f7fd fa93 	bl	8006e74 <HAL_SD_WriteBlocks_DMA>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 8009954:	2301      	movs	r3, #1
 8009956:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 8009958:	697b      	ldr	r3, [r7, #20]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	24000904 	.word	0x24000904

08009968 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 8009970:	4803      	ldr	r0, [pc, #12]	; (8009980 <HAL_SD_TxCpltCallback+0x18>)
 8009972:	f00a ff61 	bl	8014838 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	240033b8 	.word	0x240033b8

08009984 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 800998c:	4803      	ldr	r0, [pc, #12]	; (800999c <HAL_SD_RxCpltCallback+0x18>)
 800998e:	f00a ff53 	bl	8014838 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	240033d4 	.word	0x240033d4

080099a0 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 80099a8:	f00a fa64 	bl	8013e74 <_tx_time_get>
 80099ac:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80099ae:	e007      	b.n	80099c0 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff ff8b 	bl	80098cc <fx_stm32_sd_get_status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <check_sd_status+0x20>
    {
      return 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	e008      	b.n	80099d2 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80099c0:	f00a fa58 	bl	8013e74 <_tx_time_get>
 80099c4:	4602      	mov	r2, r0
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099ce:	d3ef      	bcc.n	80099b0 <check_sd_status+0x10>
    }
  }

  return 1;
 80099d0:	2301      	movs	r3, #1
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 80099e4:	4b8e      	ldr	r3, [pc, #568]	; (8009c20 <fx_stm32_sd_driver+0x244>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10a      	bne.n	8009a02 <fx_stm32_sd_driver+0x26>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7ff ffd7 	bl	80099a0 <check_sd_status>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <fx_stm32_sd_driver+0x26>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2290      	movs	r2, #144	; 0x90
 80099fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009a00:	e10a      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	f200 80f5 	bhi.w	8009c04 <fx_stm32_sd_driver+0x228>
 8009a1a:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <fx_stm32_sd_driver+0x44>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009adb 	.word	0x08009adb
 8009a24:	08009b0f 	.word	0x08009b0f
 8009a28:	08009b41 	.word	0x08009b41
 8009a2c:	08009b4b 	.word	0x08009b4b
 8009a30:	08009a45 	.word	0x08009a45
 8009a34:	08009b55 	.word	0x08009b55
 8009a38:	08009c05 	.word	0x08009c05
 8009a3c:	08009be9 	.word	0x08009be9
 8009a40:	08009aa5 	.word	0x08009aa5
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 8009a4c:	231c      	movs	r3, #28
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4974      	ldr	r1, [pc, #464]	; (8009c24 <fx_stm32_sd_driver+0x248>)
 8009a52:	4875      	ldr	r0, [pc, #468]	; (8009c28 <fx_stm32_sd_driver+0x24c>)
 8009a54:	f00a fdda 	bl	801460c <_txe_semaphore_create>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d108      	bne.n	8009a70 <fx_stm32_sd_driver+0x94>
 8009a5e:	231c      	movs	r3, #28
 8009a60:	2200      	movs	r2, #0
 8009a62:	4972      	ldr	r1, [pc, #456]	; (8009c2c <fx_stm32_sd_driver+0x250>)
 8009a64:	4872      	ldr	r0, [pc, #456]	; (8009c30 <fx_stm32_sd_driver+0x254>)
 8009a66:	f00a fdd1 	bl	801460c <_txe_semaphore_create>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <fx_stm32_sd_driver+0x9c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2290      	movs	r2, #144	; 0x90
 8009a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      /* Initialize the SD instance */
      if (is_initialized == 0)
 8009a78:	4b69      	ldr	r3, [pc, #420]	; (8009c20 <fx_stm32_sd_driver+0x244>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 80c6 	bne.w	8009c0e <fx_stm32_sd_driver+0x232>
      {
        status = fx_stm32_sd_init(FX_STM32_SD_INSTANCE);
 8009a82:	2000      	movs	r0, #0
 8009a84:	f7ff fefe 	bl	8009884 <fx_stm32_sd_init>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	613b      	str	r3, [r7, #16]

        if (status == 0)
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <fx_stm32_sd_driver+0xbe>
        {
          is_initialized = 1;
 8009a92:	4b63      	ldr	r3, [pc, #396]	; (8009c20 <fx_stm32_sd_driver+0x244>)
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 8009a98:	e0b9      	b.n	8009c0e <fx_stm32_sd_driver+0x232>
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2290      	movs	r2, #144	; 0x90
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8009aa2:	e0b4      	b.n	8009c0e <fx_stm32_sd_driver+0x232>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      status = fx_stm32_sd_deinit(FX_STM32_SD_INSTANCE);
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7ff fef7 	bl	80098a0 <fx_stm32_sd_deinit>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	613b      	str	r3, [r7, #16]

      if (status != 0)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <fx_stm32_sd_driver+0xea>
      {
        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2290      	movs	r2, #144	; 0x90
 8009ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009ac4:	e002      	b.n	8009acc <fx_stm32_sd_driver+0xf0>
      }
      else
      {
        is_initialized = 0;
 8009ac6:	4b56      	ldr	r3, [pc, #344]	; (8009c20 <fx_stm32_sd_driver+0x244>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 8009acc:	4856      	ldr	r0, [pc, #344]	; (8009c28 <fx_stm32_sd_driver+0x24c>)
 8009ace:	f00a fe33 	bl	8014738 <_txe_semaphore_delete>
 8009ad2:	4857      	ldr	r0, [pc, #348]	; (8009c30 <fx_stm32_sd_driver+0x254>)
 8009ad4:	f00a fe30 	bl	8014738 <_txe_semaphore_delete>

      break;
 8009ad8:	e09e      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2290      	movs	r2, #144	; 0x90
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aec:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f89c 	bl	8009c34 <sd_read_data>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f040 8087 	bne.w	8009c12 <fx_stm32_sd_driver+0x236>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8009b0c:	e081      	b.n	8009c12 <fx_stm32_sd_driver+0x236>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2290      	movs	r2, #144	; 0x90
 8009b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b20:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f940 	bl	8009db0 <sd_write_data>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d16f      	bne.n	8009c16 <fx_stm32_sd_driver+0x23a>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8009b3e:	e06a      	b.n	8009c16 <fx_stm32_sd_driver+0x23a>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8009b48:	e066      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 8009b52:	e061      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f868 	bl	8009c34 <sd_read_data>
 8009b64:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d004      	beq.n	8009b76 <fx_stm32_sd_driver+0x19a>
      {
        media_ptr->fx_media_driver_status = status;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009b74:	e050      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009b80:	f107 0308 	add.w	r3, r7, #8
 8009b84:	f107 020c 	add.w	r2, r7, #12
 8009b88:	2100      	movs	r1, #0
 8009b8a:	f005 fa77 	bl	800f07c <_fx_partition_offset_calculate>
 8009b8e:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <fx_stm32_sd_driver+0x1c4>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2290      	movs	r2, #144	; 0x90
 8009b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009b9e:	e03b      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d01b      	beq.n	8009bde <fx_stm32_sd_driver+0x202>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f7ff fefa 	bl	80099a0 <check_sd_status>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <fx_stm32_sd_driver+0x1e0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2290      	movs	r2, #144	; 0x90
 8009bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8009bba:	e02d      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f834 	bl	8009c34 <sd_read_data>
 8009bcc:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <fx_stm32_sd_driver+0x202>
        {
          media_ptr->fx_media_driver_status = status;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8009bdc:	e01c      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8009be6:	e017      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f8dc 	bl	8009db0 <sd_write_data>
 8009bf8:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 8009c02:	e009      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2290      	movs	r2, #144	; 0x90
 8009c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8009c0c:	e004      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
      break;
 8009c0e:	bf00      	nop
 8009c10:	e002      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
      break;
 8009c12:	bf00      	nop
 8009c14:	e000      	b.n	8009c18 <fx_stm32_sd_driver+0x23c>
      break;
 8009c16:	bf00      	nop
    }
  }
}
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	24003600 	.word	0x24003600
 8009c24:	08014b44 	.word	0x08014b44
 8009c28:	240033d4 	.word	0x240033d4
 8009c2c:	08014b60 	.word	0x08014b60
 8009c30:	240033b8 	.word	0x240033b8

08009c34 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b090      	sub	sp, #64	; 0x40
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d061      	beq.n	8009d10 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c52:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c58:	e04c      	b.n	8009cf4 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	1c53      	adds	r3, r2, #1
 8009c5e:	60bb      	str	r3, [r7, #8]
 8009c60:	2301      	movs	r3, #1
 8009c62:	4950      	ldr	r1, [pc, #320]	; (8009da4 <sd_read_data+0x170>)
 8009c64:	2000      	movs	r0, #0
 8009c66:	f7ff fe47 	bl	80098f8 <fx_stm32_sd_read_blocks>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8009c74:	2390      	movs	r3, #144	; 0x90
 8009c76:	e090      	b.n	8009d9a <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8009c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c7c:	484a      	ldr	r0, [pc, #296]	; (8009da8 <sd_read_data+0x174>)
 8009c7e:	f00a fd99 	bl	80147b4 <_txe_semaphore_get>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <sd_read_data+0x58>
 8009c88:	2390      	movs	r3, #144	; 0x90
 8009c8a:	e086      	b.n	8009d9a <sd_read_data+0x166>
 8009c8c:	4b45      	ldr	r3, [pc, #276]	; (8009da4 <sd_read_data+0x170>)
 8009c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8009c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	dd1d      	ble.n	8009cd8 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	f003 021f 	and.w	r2, r3, #31
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	4413      	add	r3, r2
 8009ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009cac:	f3bf 8f4f 	dsb	sy
}
 8009cb0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009cb2:	4a3e      	ldr	r2, [pc, #248]	; (8009dac <sd_read_data+0x178>)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	3320      	adds	r3, #32
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	3b20      	subs	r3, #32
 8009cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dcf2      	bgt.n	8009cb2 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009ccc:	f3bf 8f4f 	dsb	sy
}
 8009cd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009cd2:	f3bf 8f6f 	isb	sy
}
 8009cd6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009cd8:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8009cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ce0:	4830      	ldr	r0, [pc, #192]	; (8009da4 <sd_read_data+0x170>)
 8009ce2:	f007 fd3f 	bl	8011764 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 8009cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d8ae      	bhi.n	8009c5a <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d102      	bne.n	8009d0a <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 8009d04:	2300      	movs	r3, #0
 8009d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d08:	e046      	b.n	8009d98 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8009d0a:	2321      	movs	r3, #33	; 0x21
 8009d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d0e:	e043      	b.n	8009d98 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f7ff fdec 	bl	80098f8 <fx_stm32_sd_read_blocks>
 8009d20:	4603      	mov	r3, r0
 8009d22:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8009d2a:	2390      	movs	r3, #144	; 0x90
 8009d2c:	e035      	b.n	8009d9a <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8009d2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009d32:	481d      	ldr	r0, [pc, #116]	; (8009da8 <sd_read_data+0x174>)
 8009d34:	f00a fd3e 	bl	80147b4 <_txe_semaphore_get>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <sd_read_data+0x10e>
 8009d3e:	2390      	movs	r3, #144	; 0x90
 8009d40:	e02b      	b.n	8009d9a <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	025b      	lsls	r3, r3, #9
 8009d4c:	623a      	str	r2, [r7, #32]
 8009d4e:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd1d      	ble.n	8009d92 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	f003 021f 	and.w	r2, r3, #31
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	4413      	add	r3, r2
 8009d60:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d66:	f3bf 8f4f 	dsb	sy
}
 8009d6a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009d6c:	4a0f      	ldr	r2, [pc, #60]	; (8009dac <sd_read_data+0x178>)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	3320      	adds	r3, #32
 8009d78:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	3b20      	subs	r3, #32
 8009d7e:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dcf2      	bgt.n	8009d6c <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 8009d86:	f3bf 8f4f 	dsb	sy
}
 8009d8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d8c:	f3bf 8f6f 	isb	sy
}
 8009d90:	bf00      	nop
}
 8009d92:	bf00      	nop
#endif

    status = FX_SUCCESS;
 8009d94:	2300      	movs	r3, #0
 8009d96:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 8009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3740      	adds	r7, #64	; 0x40
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	24003400 	.word	0x24003400
 8009da8:	240033d4 	.word	0x240033d4
 8009dac:	e000ed00 	.word	0xe000ed00

08009db0 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b090      	sub	sp, #64	; 0x40
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d061      	beq.n	8009e8c <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dce:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd4:	e04c      	b.n	8009e70 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8009dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dda:	4951      	ldr	r1, [pc, #324]	; (8009f20 <sd_write_data+0x170>)
 8009ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009dde:	f007 fcc1 	bl	8011764 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8009de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009de8:	637b      	str	r3, [r7, #52]	; 0x34
 8009dea:	4b4d      	ldr	r3, [pc, #308]	; (8009f20 <sd_write_data+0x170>)
 8009dec:	633b      	str	r3, [r7, #48]	; 0x30
 8009dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dd1d      	ble.n	8009e36 <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	f003 021f 	and.w	r2, r3, #31
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	4413      	add	r3, r2
 8009e04:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009e0a:	f3bf 8f4f 	dsb	sy
}
 8009e0e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009e10:	4a44      	ldr	r2, [pc, #272]	; (8009f24 <sd_write_data+0x174>)
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	3320      	adds	r3, #32
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	3b20      	subs	r3, #32
 8009e22:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	dcf2      	bgt.n	8009e10 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8009e2a:	f3bf 8f4f 	dsb	sy
}
 8009e2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e30:	f3bf 8f6f 	isb	sy
}
 8009e34:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009e36:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	1c53      	adds	r3, r2, #1
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4937      	ldr	r1, [pc, #220]	; (8009f20 <sd_write_data+0x170>)
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7ff fd74 	bl	8009930 <fx_stm32_sd_write_blocks>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8009e52:	2390      	movs	r3, #144	; 0x90
 8009e54:	e05f      	b.n	8009f16 <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8009e56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009e5a:	4833      	ldr	r0, [pc, #204]	; (8009f28 <sd_write_data+0x178>)
 8009e5c:	f00a fcaa 	bl	80147b4 <_txe_semaphore_get>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <sd_write_data+0xba>
 8009e66:	2390      	movs	r3, #144	; 0x90
 8009e68:	e055      	b.n	8009f16 <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d8ae      	bhi.n	8009dd6 <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8009e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d102      	bne.n	8009e86 <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8009e80:	2300      	movs	r3, #0
 8009e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e84:	e046      	b.n	8009f14 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8009e86:	2321      	movs	r3, #33	; 0x21
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e8a:	e043      	b.n	8009f14 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	025b      	lsls	r3, r3, #9
 8009e96:	623a      	str	r2, [r7, #32]
 8009e98:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dd1d      	ble.n	8009edc <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	f003 021f 	and.w	r2, r3, #31
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009eb0:	f3bf 8f4f 	dsb	sy
}
 8009eb4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009eb6:	4a1b      	ldr	r2, [pc, #108]	; (8009f24 <sd_write_data+0x174>)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	3320      	adds	r3, #32
 8009ec2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	3b20      	subs	r3, #32
 8009ec8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dcf2      	bgt.n	8009eb6 <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 8009ed0:	f3bf 8f4f 	dsb	sy
}
 8009ed4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009ed6:	f3bf 8f6f 	isb	sy
}
 8009eda:	bf00      	nop
}
 8009edc:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f7ff fd21 	bl	8009930 <fx_stm32_sd_write_blocks>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8009ef8:	2390      	movs	r3, #144	; 0x90
 8009efa:	e00c      	b.n	8009f16 <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8009efc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009f00:	4809      	ldr	r0, [pc, #36]	; (8009f28 <sd_write_data+0x178>)
 8009f02:	f00a fc57 	bl	80147b4 <_txe_semaphore_get>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <sd_write_data+0x160>
 8009f0c:	2390      	movs	r3, #144	; 0x90
 8009f0e:	e002      	b.n	8009f16 <sd_write_data+0x166>

    status = FX_SUCCESS;
 8009f10:	2300      	movs	r3, #0
 8009f12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3740      	adds	r7, #64	; 0x40
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	24003400 	.word	0x24003400
 8009f24:	e000ed00 	.word	0xe000ed00
 8009f28:	240033b8 	.word	0x240033b8

08009f2c <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 8009f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f30:	b09e      	sub	sp, #120	; 0x78
 8009f32:	af04      	add	r7, sp, #16
 8009f34:	61f8      	str	r0, [r7, #28]
 8009f36:	61b9      	str	r1, [r7, #24]
 8009f38:	617a      	str	r2, [r7, #20]
 8009f3a:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	015b      	lsls	r3, r3, #5
 8009f58:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <_fx_directory_entry_read+0x3e>
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80a1 	beq.w	800a0ac <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8009f6e:	69fa      	ldr	r2, [r7, #28]
 8009f70:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009f72:	fb02 f303 	mul.w	r3, r2, r3
 8009f76:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e355      	b.n	800a62e <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8009f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 8009f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f90:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f96:	fb01 f202 	mul.w	r2, r1, r2
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d028      	beq.n	800a002 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01e      	beq.n	8009ff6 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8009fbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d319      	bcc.n	8009ff6 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	bf08      	it	eq
 8009fd2:	4290      	cmpeq	r0, r2
 8009fd4:	d10f      	bne.n	8009ff6 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d109      	bne.n	8009ff6 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fec:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	651a      	str	r2, [r3, #80]	; 0x50
 8009ff4:	e00a      	b.n	800a00c <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffa:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	667b      	str	r3, [r7, #100]	; 0x64
 800a000:	e024      	b.n	800a04c <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a006:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 800a008:	2300      	movs	r3, #0
 800a00a:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800a00c:	e01e      	b.n	800a04c <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a010:	2b01      	cmp	r3, #1
 800a012:	d907      	bls.n	800a024 <_fx_directory_entry_read+0xf8>
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a01a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a01e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a020:	429a      	cmp	r2, r3
 800a022:	d301      	bcc.n	800a028 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 800a024:	2308      	movs	r3, #8
 800a026:	e302      	b.n	800a62e <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a02c:	461a      	mov	r2, r3
 800a02e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a030:	69f8      	ldr	r0, [r7, #28]
 800a032:	f005 fb8d 	bl	800f750 <_fx_utility_FAT_entry_read>
 800a036:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 800a038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800a03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a040:	e2f5      	b.n	800a62e <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 800a046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a048:	3301      	adds	r3, #1
 800a04a:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800a04c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a050:	429a      	cmp	r2, r3
 800a052:	d3dc      	bcc.n	800a00e <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a05a:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800a05c:	69f9      	ldr	r1, [r7, #28]
 800a05e:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a060:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a064:	4413      	add	r3, r2
 800a066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a068:	4413      	add	r3, r2
 800a06a:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a06e:	2200      	movs	r2, #0
 800a070:	60bb      	str	r3, [r7, #8]
 800a072:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a078:	2203      	movs	r2, #3
 800a07a:	9202      	str	r2, [sp, #8]
 800a07c:	2201      	movs	r2, #1
 800a07e:	9201      	str	r2, [sp, #4]
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a086:	69f8      	ldr	r0, [r7, #28]
 800a088:	f006 ff70 	bl	8010f6c <_fx_utility_logical_sector_read>
 800a08c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 800a094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a096:	e2ca      	b.n	800a62e <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0a2:	fb01 f202 	mul.w	r2, r1, r2
 800a0a6:	1a9b      	subs	r3, r3, r2
 800a0a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a0aa:	e02f      	b.n	800a10c <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0b2:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800a0ba:	4413      	add	r3, r2
 800a0bc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a0be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	9202      	str	r2, [sp, #8]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	9201      	str	r2, [sp, #4]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d8:	69f8      	ldr	r0, [r7, #28]
 800a0da:	f006 ff47 	bl	8010f6c <_fx_utility_logical_sector_read>
 800a0de:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	e2a1      	b.n	800a62e <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f4:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0fc:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800a102:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800a106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a112:	4413      	add	r3, r2
 800a114:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 800a116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a118:	2200      	movs	r2, #0
 800a11a:	4698      	mov	r8, r3
 800a11c:	4691      	mov	r9, r2
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a128:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2200      	movs	r2, #0
 800a12e:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2200      	movs	r2, #0
 800a134:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 800a140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a142:	330b      	adds	r3, #11
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b0f      	cmp	r3, #15
 800a148:	f040 8129 	bne.w	800a39e <_fx_directory_entry_read+0x472>
 800a14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2be5      	cmp	r3, #229	; 0xe5
 800a152:	f000 8124 	beq.w	800a39e <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 800a156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	f003 021f 	and.w	r2, r3, #31
 800a15e:	4613      	mov	r3, r2
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	3b0d      	subs	r3, #13
 800a16a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800a16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 800a176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a178:	2bfe      	cmp	r3, #254	; 0xfe
 800a17a:	d908      	bls.n	800a18e <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800a180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	f003 021f 	and.w	r2, r3, #31
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	619a      	str	r2, [r3, #24]
 800a18c:	e015      	b.n	800a1ba <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3304      	adds	r3, #4
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 800a194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a196:	330e      	adds	r3, #14
 800a198:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1a0:	4413      	add	r3, r2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 800a1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800a1ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d202      	bcs.n	800a1ba <_fx_directory_entry_read+0x28e>
 800a1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1b6:	2bff      	cmp	r3, #255	; 0xff
 800a1b8:	d9ef      	bls.n	800a19a <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800a1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	f003 031f 	and.w	r3, r3, #31
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 800a1c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d168      	bne.n	800a29e <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	667b      	str	r3, [r7, #100]	; 0x64
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	663b      	str	r3, [r7, #96]	; 0x60
 800a1d4:	e060      	b.n	800a298 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 800a1d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d8:	2b0b      	cmp	r3, #11
 800a1da:	d057      	beq.n	800a28c <_fx_directory_entry_read+0x360>
 800a1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1de:	2b1a      	cmp	r3, #26
 800a1e0:	d054      	beq.n	800a28c <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 800a1e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1e4:	2b0d      	cmp	r3, #13
 800a1e6:	d102      	bne.n	800a1ee <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 800a1ec:	e051      	b.n	800a292 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 800a1ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1f4:	4413      	add	r3, r2
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d014      	beq.n	800a226 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 800a1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1fe:	3301      	adds	r3, #1
 800a200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a202:	4413      	add	r3, r2
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2bff      	cmp	r3, #255	; 0xff
 800a208:	d105      	bne.n	800a216 <_fx_directory_entry_read+0x2ea>
 800a20a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a20c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a20e:	4413      	add	r3, r2
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2bff      	cmp	r3, #255	; 0xff
 800a214:	d007      	beq.n	800a226 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 800a216:	2301      	movs	r3, #1
 800a218:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a21e:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 800a226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a22a:	4413      	add	r3, r2
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d02e      	beq.n	800a290 <_fx_directory_entry_read+0x364>
 800a232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2bff      	cmp	r3, #255	; 0xff
 800a23c:	d028      	beq.n	800a290 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800a23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a240:	4613      	mov	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	441a      	add	r2, r3
 800a24a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a24c:	4413      	add	r3, r2
 800a24e:	2bfe      	cmp	r3, #254	; 0xfe
 800a250:	d908      	bls.n	800a264 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 800a252:	2301      	movs	r3, #1
 800a254:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a25a:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 800a262:	e01c      	b.n	800a29e <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 800a264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a268:	18d1      	adds	r1, r2, r3
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a270:	4613      	mov	r3, r2
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	441a      	add	r2, r3
 800a27a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a27c:	4413      	add	r3, r2
 800a27e:	4403      	add	r3, r0
 800a280:	780a      	ldrb	r2, [r1, #0]
 800a282:	701a      	strb	r2, [r3, #0]

                    j++;
 800a284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a286:	3301      	adds	r3, #1
 800a288:	663b      	str	r3, [r7, #96]	; 0x60
 800a28a:	e002      	b.n	800a292 <_fx_directory_entry_read+0x366>
                        continue;
 800a28c:	bf00      	nop
 800a28e:	e000      	b.n	800a292 <_fx_directory_entry_read+0x366>
                        continue;
 800a290:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800a292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a294:	3302      	adds	r3, #2
 800a296:	667b      	str	r3, [r7, #100]	; 0x64
 800a298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a29a:	2b1f      	cmp	r3, #31
 800a29c:	d99b      	bls.n	800a1d6 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800a29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a0:	f103 0220 	add.w	r2, r3, #32
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d365      	bcc.n	800a378 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d103      	bne.n	800a2ba <_fx_directory_entry_read+0x38e>
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d038      	beq.n	800a32c <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d206      	bcs.n	800a2d4 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a2d2:	e038      	b.n	800a346 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a2d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2d8:	461a      	mov	r2, r3
 800a2da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2dc:	69f8      	ldr	r0, [r7, #28]
 800a2de:	f005 fa37 	bl	800f750 <_fx_utility_FAT_entry_read>
 800a2e2:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	e19f      	b.n	800a62e <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d907      	bls.n	800a308 <_fx_directory_entry_read+0x3dc>
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a2fe:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a302:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a304:	429a      	cmp	r2, r3
 800a306:	d301      	bcc.n	800a30c <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a308:	2308      	movs	r3, #8
 800a30a:	e190      	b.n	800a62e <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 800a30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a30e:	3301      	adds	r3, #1
 800a310:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a312:	2300      	movs	r3, #0
 800a314:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a31c:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a31e:	69f9      	ldr	r1, [r7, #28]
 800a320:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a322:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a326:	4413      	add	r3, r2
 800a328:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a32a:	e00c      	b.n	800a346 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 800a32c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32e:	3301      	adds	r3, #1
 800a330:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33a:	4413      	add	r3, r2
 800a33c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a33e:	429a      	cmp	r2, r3
 800a340:	d301      	bcc.n	800a346 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a342:	2308      	movs	r3, #8
 800a344:	e173      	b.n	800a62e <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a348:	2200      	movs	r2, #0
 800a34a:	469a      	mov	sl, r3
 800a34c:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a352:	2203      	movs	r2, #3
 800a354:	9202      	str	r2, [sp, #8]
 800a356:	2201      	movs	r2, #1
 800a358:	9201      	str	r2, [sp, #4]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4652      	mov	r2, sl
 800a35e:	465b      	mov	r3, fp
 800a360:	69f8      	ldr	r0, [r7, #28]
 800a362:	f006 fe03 	bl	8010f6c <_fx_utility_logical_sector_read>
 800a366:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 800a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a370:	e15d      	b.n	800a62e <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	647b      	str	r3, [r7, #68]	; 0x44
 800a376:	e002      	b.n	800a37e <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 800a378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37a:	3320      	adds	r3, #32
 800a37c:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a384:	4413      	add	r3, r2
 800a386:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	3301      	adds	r3, #1
 800a38c:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	f47f af12 	bne.w	800a1ba <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2201      	movs	r2, #1
 800a39a:	615a      	str	r2, [r3, #20]
 800a39c:	e001      	b.n	800a3a2 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 800a3a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d102      	bne.n	800a3ae <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	667b      	str	r3, [r7, #100]	; 0x64
 800a3bc:	2300      	movs	r3, #0
 800a3be:	663b      	str	r3, [r7, #96]	; 0x60
 800a3c0:	e03d      	b.n	800a43e <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 800a3c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c6:	4413      	add	r3, r2
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d03b      	beq.n	800a446 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800a3ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3d2:	4413      	add	r3, r2
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3d8:	d101      	bne.n	800a3de <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 800a3da:	2302      	movs	r3, #2
 800a3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 800a3de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e2:	4413      	add	r3, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b20      	cmp	r3, #32
 800a3e8:	d105      	bne.n	800a3f6 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 800a3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d122      	bne.n	800a436 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 800a3f4:	e01f      	b.n	800a436 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 800a3f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f8:	2b08      	cmp	r3, #8
 800a3fa:	d104      	bne.n	800a406 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 800a3fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 800a402:	2301      	movs	r3, #1
 800a404:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 800a406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d108      	bne.n	800a41e <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 800a40c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	663a      	str	r2, [r7, #96]	; 0x60
 800a412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a414:	4413      	add	r3, r2
 800a416:	222e      	movs	r2, #46	; 0x2e
 800a418:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 800a41a:	2302      	movs	r3, #2
 800a41c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 800a41e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	441a      	add	r2, r3
 800a424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a428:	440b      	add	r3, r1
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 800a42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a430:	3301      	adds	r3, #1
 800a432:	663b      	str	r3, [r7, #96]	; 0x60
 800a434:	e000      	b.n	800a438 <_fx_directory_entry_read+0x50c>
            continue;
 800a436:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a43a:	3301      	adds	r3, #1
 800a43c:	667b      	str	r3, [r7, #100]	; 0x64
 800a43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a440:	2b0a      	cmp	r3, #10
 800a442:	d9be      	bls.n	800a3c2 <_fx_directory_entry_read+0x496>
 800a444:	e000      	b.n	800a448 <_fx_directory_entry_read+0x51c>
            break;
 800a446:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00a      	beq.n	800a466 <_fx_directory_entry_read+0x53a>
 800a450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2be5      	cmp	r3, #229	; 0xe5
 800a456:	d106      	bne.n	800a466 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	22e5      	movs	r2, #229	; 0xe5
 800a45e:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 800a460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 800a466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d114      	bne.n	800a498 <_fx_directory_entry_read+0x56c>
 800a46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b20      	cmp	r3, #32
 800a474:	d110      	bne.n	800a498 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a476:	2300      	movs	r3, #0
 800a478:	663b      	str	r3, [r7, #96]	; 0x60
 800a47a:	e00a      	b.n	800a492 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 800a47c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a47e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a480:	441a      	add	r2, r3
 800a482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a486:	440b      	add	r3, r1
 800a488:	7812      	ldrb	r2, [r2, #0]
 800a48a:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a48c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a48e:	3301      	adds	r3, #1
 800a490:	663b      	str	r3, [r7, #96]	; 0x60
 800a492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a494:	2b0a      	cmp	r3, #10
 800a496:	d9f1      	bls.n	800a47c <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 800a498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a49c:	4413      	add	r3, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a4:	330b      	adds	r3, #11
 800a4a6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 800a4a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	643a      	str	r2, [r7, #64]	; 0x40
 800a4ae:	781a      	ldrb	r2, [r3, #0]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 800a4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	643a      	str	r2, [r7, #64]	; 0x40
 800a4ba:	781a      	ldrb	r2, [r3, #0]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 800a4c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d02a      	beq.n	800a51c <_fx_directory_entry_read+0x5f0>
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	7f5b      	ldrb	r3, [r3, #29]
 800a4ca:	f003 0308 	and.w	r3, r3, #8
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d024      	beq.n	800a51c <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a4d6:	e018      	b.n	800a50a <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800a4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4dc:	4413      	add	r3, r2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b40      	cmp	r3, #64	; 0x40
 800a4e2:	d90f      	bls.n	800a504 <_fx_directory_entry_read+0x5d8>
 800a4e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4e8:	4413      	add	r3, r2
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b5a      	cmp	r3, #90	; 0x5a
 800a4ee:	d809      	bhi.n	800a504 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800a4f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4f4:	4413      	add	r3, r2
 800a4f6:	781a      	ldrb	r2, [r3, #0]
 800a4f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4fc:	440b      	add	r3, r1
 800a4fe:	3220      	adds	r2, #32
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800a504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a506:	3301      	adds	r3, #1
 800a508:	663b      	str	r3, [r7, #96]	; 0x60
 800a50a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a50c:	2b0b      	cmp	r3, #11
 800a50e:	d805      	bhi.n	800a51c <_fx_directory_entry_read+0x5f0>
 800a510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a514:	4413      	add	r3, r2
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1dd      	bne.n	800a4d8 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 800a51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	643a      	str	r2, [r7, #64]	; 0x40
 800a522:	781a      	ldrb	r2, [r3, #0]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 800a528:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a52a:	f005 f8ab 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a52e:	4602      	mov	r2, r0
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a536:	3302      	adds	r3, #2
 800a538:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 800a53a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a53c:	f005 f8a2 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a548:	3302      	adds	r3, #2
 800a54a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 800a54c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a54e:	f005 f899 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a552:	4602      	mov	r2, r0
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a55a:	3302      	adds	r3, #2
 800a55c:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00b      	beq.n	800a57e <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800a566:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a568:	f005 f88c 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a56c:	4602      	mov	r2, r0
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a576:	041a      	lsls	r2, r3, #16
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	635a      	str	r2, [r3, #52]	; 0x34
 800a57c:	e002      	b.n	800a584 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2200      	movs	r2, #0
 800a582:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a586:	3302      	adds	r3, #2
 800a588:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 800a58a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a58c:	f005 f87a 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a590:	4602      	mov	r2, r0
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a598:	3302      	adds	r3, #2
 800a59a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 800a59c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a59e:	f005 f871 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800a5ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a5b0:	f005 f868 	bl	800f684 <_fx_utility_16_unsigned_read>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	441a      	add	r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c2:	3302      	adds	r3, #2
 800a5c4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800a5c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a5c8:	f005 f884 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	461c      	mov	r4, r3
 800a5d2:	4615      	mov	r5, r2
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 800a5e6:	6939      	ldr	r1, [r7, #16]
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a604:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00f      	beq.n	800a62c <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a610:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a616:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a61e:	69b9      	ldr	r1, [r7, #24]
 800a620:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3768      	adds	r7, #104	; 0x68
 800a632:	46bd      	mov	sp, r7
 800a634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a638 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800a638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a63c:	b0a2      	sub	sp, #136	; 0x88
 800a63e:	af04      	add	r7, sp, #16
 800a640:	6178      	str	r0, [r7, #20]
 800a642:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2be5      	cmp	r3, #229	; 0xe5
 800a65a:	d109      	bne.n	800a670 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800a660:	2be5      	cmp	r3, #229	; 0xe5
 800a662:	d105      	bne.n	800a670 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 800a664:	2301      	movs	r3, #1
 800a666:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2200      	movs	r2, #0
 800a66c:	711a      	strb	r2, [r3, #4]
 800a66e:	e001      	b.n	800a674 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 800a670:	2300      	movs	r3, #0
 800a672:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a678:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a680:	4613      	mov	r3, r2
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d316      	bcc.n	800a6bc <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a694:	1ad2      	subs	r2, r2, r3
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69e:	3302      	adds	r3, #2
 800a6a0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800a6aa:	6979      	ldr	r1, [r7, #20]
 800a6ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a6ae:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a6b2:	4413      	add	r3, r2
 800a6b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ba:	e003      	b.n	800a6c4 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	9302      	str	r3, [sp, #8]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	9200      	str	r2, [sp, #0]
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	6978      	ldr	r0, [r7, #20]
 800a6de:	f006 fc45 	bl	8010f6c <_fx_utility_logical_sector_read>
 800a6e2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	f000 bdda 	b.w	800b2a4 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a6fc:	4413      	add	r3, r2
 800a6fe:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 83cc 	beq.w	800aea2 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a70a:	2300      	movs	r3, #0
 800a70c:	653b      	str	r3, [r7, #80]	; 0x50
 800a70e:	2300      	movs	r3, #0
 800a710:	667b      	str	r3, [r7, #100]	; 0x64
 800a712:	2300      	movs	r3, #0
 800a714:	64bb      	str	r3, [r7, #72]	; 0x48
 800a716:	2300      	movs	r3, #0
 800a718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a71a:	e02c      	b.n	800a776 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a722:	4413      	add	r3, r2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b2e      	cmp	r3, #46	; 0x2e
 800a728:	d108      	bne.n	800a73c <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800a72a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01e      	beq.n	800a76e <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800a730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a732:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800a734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a736:	3301      	adds	r3, #1
 800a738:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800a73a:	e019      	b.n	800a770 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a742:	4413      	add	r3, r2
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b20      	cmp	r3, #32
 800a748:	d012      	beq.n	800a770 <_fx_directory_entry_write+0x138>
 800a74a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a74c:	2b07      	cmp	r3, #7
 800a74e:	d80f      	bhi.n	800a770 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a756:	4413      	add	r3, r2
 800a758:	7819      	ldrb	r1, [r3, #0]
 800a75a:	f107 021c 	add.w	r2, r7, #28
 800a75e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a760:	4413      	add	r3, r2
 800a762:	460a      	mov	r2, r1
 800a764:	701a      	strb	r2, [r3, #0]
                i++;
 800a766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a768:	3301      	adds	r3, #1
 800a76a:	667b      	str	r3, [r7, #100]	; 0x64
 800a76c:	e000      	b.n	800a770 <_fx_directory_entry_write+0x138>
                    continue;
 800a76e:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a772:	3301      	adds	r3, #1
 800a774:	653b      	str	r3, [r7, #80]	; 0x50
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1cb      	bne.n	800a71c <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a786:	663b      	str	r3, [r7, #96]	; 0x60
 800a788:	e008      	b.n	800a79c <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800a78a:	f107 021c 	add.w	r2, r7, #28
 800a78e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a790:	4413      	add	r3, r2
 800a792:	2220      	movs	r2, #32
 800a794:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a798:	3301      	adds	r3, #1
 800a79a:	663b      	str	r3, [r7, #96]	; 0x60
 800a79c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a79e:	2b0a      	cmp	r3, #10
 800a7a0:	d9f3      	bls.n	800a78a <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800a7a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d03e      	beq.n	800a826 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ae:	4413      	add	r3, r2
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d008      	beq.n	800a7c8 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7bc:	1c59      	adds	r1, r3, #1
 800a7be:	64b9      	str	r1, [r7, #72]	; 0x48
 800a7c0:	4413      	add	r3, r2
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d008      	beq.n	800a7e8 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7dc:	1c59      	adds	r1, r3, #1
 800a7de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a7e0:	4413      	add	r3, r2
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ee:	4413      	add	r3, r2
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7fc:	1c59      	adds	r1, r3, #1
 800a7fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800a800:	4413      	add	r3, r2
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800a808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a80a:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800a80c:	e008      	b.n	800a820 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800a80e:	f107 021c 	add.w	r2, r7, #28
 800a812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a814:	4413      	add	r3, r2
 800a816:	2220      	movs	r2, #32
 800a818:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800a81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81c:	3301      	adds	r3, #1
 800a81e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a822:	2b07      	cmp	r3, #7
 800a824:	d9f3      	bls.n	800a80e <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800a826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a828:	4b8e      	ldr	r3, [pc, #568]	; (800aa64 <_fx_directory_entry_write+0x42c>)
 800a82a:	fba3 2301 	umull	r2, r3, r3, r1
 800a82e:	089a      	lsrs	r2, r3, #2
 800a830:	4613      	mov	r3, r2
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	1aca      	subs	r2, r1, r3
 800a83c:	2a00      	cmp	r2, #0
 800a83e:	d106      	bne.n	800a84e <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800a840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a842:	4a88      	ldr	r2, [pc, #544]	; (800aa64 <_fx_directory_entry_write+0x42c>)
 800a844:	fba2 2303 	umull	r2, r3, r2, r3
 800a848:	089b      	lsrs	r3, r3, #2
 800a84a:	657b      	str	r3, [r7, #84]	; 0x54
 800a84c:	e006      	b.n	800a85c <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800a84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a850:	4a84      	ldr	r2, [pc, #528]	; (800aa64 <_fx_directory_entry_write+0x42c>)
 800a852:	fba2 2303 	umull	r2, r3, r2, r3
 800a856:	089b      	lsrs	r3, r3, #2
 800a858:	3301      	adds	r3, #1
 800a85a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800a860:	2300      	movs	r3, #0
 800a862:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800a864:	2300      	movs	r3, #0
 800a866:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a868:	e03f      	b.n	800a8ea <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800a86a:	f107 021c 	add.w	r2, r7, #28
 800a86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a870:	4413      	add	r3, r2
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b20      	cmp	r3, #32
 800a876:	d116      	bne.n	800a8a6 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a87e:	4413      	add	r3, r2
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d035      	beq.n	800a8f2 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a88c:	4413      	add	r3, r2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b2e      	cmp	r3, #46	; 0x2e
 800a892:	d002      	beq.n	800a89a <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800a894:	2300      	movs	r3, #0
 800a896:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a898:	e02c      	b.n	800a8f4 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800a89a:	2308      	movs	r3, #8
 800a89c:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800a89e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800a8a4:	e021      	b.n	800a8ea <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800a8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d109      	bne.n	800a8c0 <_fx_directory_entry_write+0x288>
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8b2:	4413      	add	r3, r2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8b8:	d102      	bne.n	800a8c0 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800a8ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8bc:	3301      	adds	r3, #1
 800a8be:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800a8c0:	f107 021c 	add.w	r2, r7, #28
 800a8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8c6:	4413      	add	r3, r2
 800a8c8:	781a      	ldrb	r2, [r3, #0]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	6819      	ldr	r1, [r3, #0]
 800a8ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8d0:	440b      	add	r3, r1
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d002      	beq.n	800a8de <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800a8dc:	e00a      	b.n	800a8f4 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800a8de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800a8e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a8ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8ec:	2b0a      	cmp	r3, #10
 800a8ee:	d9bc      	bls.n	800a86a <_fx_directory_entry_write+0x232>
 800a8f0:	e000      	b.n	800a8f4 <_fx_directory_entry_write+0x2bc>
                    break;
 800a8f2:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800a8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <_fx_directory_entry_write+0x2ce>
 800a8fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d101      	bne.n	800a906 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a902:	2300      	movs	r3, #0
 800a904:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a90c:	4413      	add	r3, r2
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800a918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d15a      	bne.n	800a9d4 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a922:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	b29b      	uxth	r3, r3
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800a92a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d901      	bls.n	800a934 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800a930:	2303      	movs	r3, #3
 800a932:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800a934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	667a      	str	r2, [r7, #100]	; 0x64
 800a93a:	3368      	adds	r3, #104	; 0x68
 800a93c:	f107 0210 	add.w	r2, r7, #16
 800a940:	4413      	add	r3, r2
 800a942:	227e      	movs	r2, #126	; 0x7e
 800a944:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800a948:	2300      	movs	r3, #0
 800a94a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a94c:	e03f      	b.n	800a9ce <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800a94e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a950:	2b00      	cmp	r3, #0
 800a952:	d105      	bne.n	800a960 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	0b1b      	lsrs	r3, r3, #12
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a95e:	e015      	b.n	800a98c <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800a960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a962:	2b01      	cmp	r3, #1
 800a964:	d105      	bne.n	800a972 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	0a1b      	lsrs	r3, r3, #8
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a970:	e00c      	b.n	800a98c <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800a972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a974:	2b02      	cmp	r3, #2
 800a976:	d105      	bne.n	800a984 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	091b      	lsrs	r3, r3, #4
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a982:	e003      	b.n	800a98c <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800a984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800a98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a98e:	2b09      	cmp	r3, #9
 800a990:	d90d      	bls.n	800a9ae <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800a992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a994:	b2da      	uxtb	r2, r3
 800a996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a998:	1c59      	adds	r1, r3, #1
 800a99a:	6679      	str	r1, [r7, #100]	; 0x64
 800a99c:	3237      	adds	r2, #55	; 0x37
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	3368      	adds	r3, #104	; 0x68
 800a9a2:	f107 0110 	add.w	r1, r7, #16
 800a9a6:	440b      	add	r3, r1
 800a9a8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800a9ac:	e00c      	b.n	800a9c8 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800a9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9b4:	1c59      	adds	r1, r3, #1
 800a9b6:	6679      	str	r1, [r7, #100]	; 0x64
 800a9b8:	3230      	adds	r2, #48	; 0x30
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	3368      	adds	r3, #104	; 0x68
 800a9be:	f107 0110 	add.w	r1, r7, #16
 800a9c2:	440b      	add	r3, r1
 800a9c4:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800a9c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d9bc      	bls.n	800a94e <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800a9da:	7f3b      	ldrb	r3, [r7, #28]
 800a9dc:	2be5      	cmp	r3, #229	; 0xe5
 800a9de:	d104      	bne.n	800a9ea <_fx_directory_entry_write+0x3b2>
 800a9e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800a9e6:	238f      	movs	r3, #143	; 0x8f
 800a9e8:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ee:	e01d      	b.n	800aa2c <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800a9f0:	f107 021c 	add.w	r2, r7, #28
 800a9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f6:	4413      	add	r3, r2
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800a9fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa02:	2b60      	cmp	r3, #96	; 0x60
 800aa04:	d908      	bls.n	800aa18 <_fx_directory_entry_write+0x3e0>
 800aa06:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa0a:	2b7a      	cmp	r3, #122	; 0x7a
 800aa0c:	d804      	bhi.n	800aa18 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800aa0e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa12:	3b20      	subs	r3, #32
 800aa14:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800aa18:	f107 021c 	add.w	r2, r7, #28
 800aa1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa1e:	4413      	add	r3, r2
 800aa20:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aa24:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800aa26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa28:	3301      	adds	r3, #1
 800aa2a:	667b      	str	r3, [r7, #100]	; 0x64
 800aa2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa2e:	2b0a      	cmp	r3, #10
 800aa30:	d9de      	bls.n	800a9f0 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	791b      	ldrb	r3, [r3, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 8095 	beq.w	800ab66 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	667b      	str	r3, [r7, #100]	; 0x64
 800aa40:	e008      	b.n	800aa54 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800aa42:	f107 021c 	add.w	r2, r7, #28
 800aa46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa48:	4413      	add	r3, r2
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800aa4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa50:	3301      	adds	r3, #1
 800aa52:	667b      	str	r3, [r7, #100]	; 0x64
 800aa54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa56:	2b0a      	cmp	r3, #10
 800aa58:	d9f3      	bls.n	800aa42 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa5e:	2300      	movs	r3, #0
 800aa60:	663b      	str	r3, [r7, #96]	; 0x60
 800aa62:	e023      	b.n	800aaac <_fx_directory_entry_write+0x474>
 800aa64:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6c:	4413      	add	r3, r2
 800aa6e:	3304      	adds	r3, #4
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b2e      	cmp	r3, #46	; 0x2e
 800aa74:	d01e      	beq.n	800aab4 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa7a:	4413      	add	r3, r2
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d019      	beq.n	800aab8 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa88:	4413      	add	r3, r2
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800aa92:	f107 021c 	add.w	r2, r7, #28
 800aa96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa98:	4413      	add	r3, r2
 800aa9a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aa9e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800aaa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	667b      	str	r3, [r7, #100]	; 0x64
 800aaa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	663b      	str	r3, [r7, #96]	; 0x60
 800aaac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaae:	2b07      	cmp	r3, #7
 800aab0:	d9da      	bls.n	800aa68 <_fx_directory_entry_write+0x430>
 800aab2:	e002      	b.n	800aaba <_fx_directory_entry_write+0x482>
                    break;
 800aab4:	bf00      	nop
 800aab6:	e000      	b.n	800aaba <_fx_directory_entry_write+0x482>
                    break;
 800aab8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aabe:	4413      	add	r3, r2
 800aac0:	3304      	adds	r3, #4
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d025      	beq.n	800ab14 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800aac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaca:	3301      	adds	r3, #1
 800aacc:	667b      	str	r3, [r7, #100]	; 0x64
 800aace:	2308      	movs	r3, #8
 800aad0:	663b      	str	r3, [r7, #96]	; 0x60
 800aad2:	e01a      	b.n	800ab0a <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800aad4:	693a      	ldr	r2, [r7, #16]
 800aad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad8:	4413      	add	r3, r2
 800aada:	3304      	adds	r3, #4
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d017      	beq.n	800ab12 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aae6:	4413      	add	r3, r2
 800aae8:	3304      	adds	r3, #4
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800aaf0:	f107 021c 	add.w	r2, r7, #28
 800aaf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aafc:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800aafe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab00:	3301      	adds	r3, #1
 800ab02:	667b      	str	r3, [r7, #100]	; 0x64
 800ab04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab06:	3301      	adds	r3, #1
 800ab08:	663b      	str	r3, [r7, #96]	; 0x60
 800ab0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab0c:	2b0a      	cmp	r3, #10
 800ab0e:	d9e1      	bls.n	800aad4 <_fx_directory_entry_write+0x49c>
 800ab10:	e000      	b.n	800ab14 <_fx_directory_entry_write+0x4dc>
                        break;
 800ab12:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800ab14:	2300      	movs	r3, #0
 800ab16:	663b      	str	r3, [r7, #96]	; 0x60
 800ab18:	e01d      	b.n	800ab56 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800ab1a:	f107 021c 	add.w	r2, r7, #28
 800ab1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab20:	4413      	add	r3, r2
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800ab28:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ab2c:	2b60      	cmp	r3, #96	; 0x60
 800ab2e:	d908      	bls.n	800ab42 <_fx_directory_entry_write+0x50a>
 800ab30:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ab34:	2b7a      	cmp	r3, #122	; 0x7a
 800ab36:	d804      	bhi.n	800ab42 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800ab38:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ab3c:	3b20      	subs	r3, #32
 800ab3e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800ab42:	f107 021c 	add.w	r2, r7, #28
 800ab46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab48:	4413      	add	r3, r2
 800ab4a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800ab4e:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800ab50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab52:	3301      	adds	r3, #1
 800ab54:	663b      	str	r3, [r7, #96]	; 0x60
 800ab56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab58:	2b0a      	cmp	r3, #10
 800ab5a:	d9de      	bls.n	800ab1a <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800ab5c:	7f3b      	ldrb	r3, [r7, #28]
 800ab5e:	2be5      	cmp	r3, #229	; 0xe5
 800ab60:	d101      	bne.n	800ab66 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800ab62:	238f      	movs	r3, #143	; 0x8f
 800ab64:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	667b      	str	r3, [r7, #100]	; 0x64
 800ab70:	e016      	b.n	800aba0 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800ab72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab76:	01db      	lsls	r3, r3, #7
 800ab78:	b25a      	sxtb	r2, r3
 800ab7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	b25b      	sxtb	r3, r3
 800ab84:	4313      	orrs	r3, r2
 800ab86:	b25b      	sxtb	r3, r3
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	f107 011c 	add.w	r1, r7, #28
 800ab8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab90:	440b      	add	r3, r1
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	4413      	add	r3, r2
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800ab9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	667b      	str	r3, [r7, #100]	; 0x64
 800aba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba2:	2b0a      	cmp	r3, #10
 800aba4:	d9e5      	bls.n	800ab72 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800aba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abb2:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800abb4:	e0f3      	b.n	800ad9e <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800abbc:	7f3b      	ldrb	r3, [r7, #28]
 800abbe:	2be5      	cmp	r3, #229	; 0xe5
 800abc0:	d102      	bne.n	800abc8 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800abc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abc4:	22e5      	movs	r2, #229	; 0xe5
 800abc6:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800abc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abca:	330b      	adds	r3, #11
 800abcc:	220f      	movs	r2, #15
 800abce:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800abd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abd2:	330c      	adds	r3, #12
 800abd4:	2200      	movs	r2, #0
 800abd6:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800abd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abda:	330d      	adds	r3, #13
 800abdc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800abe0:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800abe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abe4:	331a      	adds	r3, #26
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800abea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abec:	331b      	adds	r3, #27
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800abf2:	2301      	movs	r3, #1
 800abf4:	667b      	str	r3, [r7, #100]	; 0x64
 800abf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abf8:	4613      	mov	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	3b0d      	subs	r3, #13
 800ac04:	663b      	str	r3, [r7, #96]	; 0x60
 800ac06:	e03e      	b.n	800ac86 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800ac08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac0a:	2b0b      	cmp	r3, #11
 800ac0c:	d037      	beq.n	800ac7e <_fx_directory_entry_write+0x646>
 800ac0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac10:	2b1a      	cmp	r3, #26
 800ac12:	d034      	beq.n	800ac7e <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800ac14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac16:	2b0d      	cmp	r3, #13
 800ac18:	d102      	bne.n	800ac20 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800ac1a:	230c      	movs	r3, #12
 800ac1c:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800ac1e:	e02f      	b.n	800ac80 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800ac20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00d      	beq.n	800ac44 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800ac28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800ac32:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800ac34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac36:	3301      	adds	r3, #1
 800ac38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e00e      	b.n	800ac62 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac4a:	441a      	add	r2, r3
 800ac4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ac4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac50:	440b      	add	r3, r1
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800ac56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac58:	3301      	adds	r3, #1
 800ac5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac5c:	4413      	add	r3, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac68:	4413      	add	r3, r2
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d102      	bne.n	800ac76 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800ac70:	23ff      	movs	r3, #255	; 0xff
 800ac72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800ac76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac78:	3301      	adds	r3, #1
 800ac7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ac7c:	e000      	b.n	800ac80 <_fx_directory_entry_write+0x648>
                    continue;
 800ac7e:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800ac80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac82:	3302      	adds	r3, #2
 800ac84:	667b      	str	r3, [r7, #100]	; 0x64
 800ac86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac88:	2b1f      	cmp	r3, #31
 800ac8a:	d9bd      	bls.n	800ac08 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800ac8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac8e:	3320      	adds	r3, #32
 800ac90:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	3320      	adds	r3, #32
 800ac96:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d376      	bcc.n	800ad90 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca4:	2200      	movs	r2, #0
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	60fa      	str	r2, [r7, #12]
 800acaa:	2303      	movs	r3, #3
 800acac:	9302      	str	r3, [sp, #8]
 800acae:	2301      	movs	r3, #1
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f006 fbea 	bl	8011494 <_fx_utility_logical_sector_write>
 800acc0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	e2eb      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d335      	bcc.n	800ad42 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acda:	3b01      	subs	r3, #1
 800acdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acde:	429a      	cmp	r2, r3
 800ace0:	d206      	bcs.n	800acf0 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800ace2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace4:	3301      	adds	r3, #1
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	3301      	adds	r3, #1
 800acec:	63bb      	str	r3, [r7, #56]	; 0x38
 800acee:	e032      	b.n	800ad56 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800acf0:	f107 0318 	add.w	r3, r7, #24
 800acf4:	461a      	mov	r2, r3
 800acf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acf8:	6978      	ldr	r0, [r7, #20]
 800acfa:	f004 fd29 	bl	800f750 <_fx_utility_FAT_entry_read>
 800acfe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	e2cc      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d907      	bls.n	800ad24 <_fx_directory_entry_write+0x6ec>
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad1a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ad1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d301      	bcc.n	800ad28 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800ad24:	2308      	movs	r3, #8
 800ad26:	e2bd      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ad34:	6979      	ldr	r1, [r7, #20]
 800ad36:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ad38:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ad3c:	4413      	add	r3, r2
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad40:	e009      	b.n	800ad56 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800ad42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad44:	3301      	adds	r3, #1
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d301      	bcc.n	800ad56 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800ad52:	2308      	movs	r3, #8
 800ad54:	e2a6      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ad56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad58:	2200      	movs	r2, #0
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ad62:	2203      	movs	r2, #3
 800ad64:	9202      	str	r2, [sp, #8]
 800ad66:	2201      	movs	r2, #1
 800ad68:	9201      	str	r2, [sp, #4]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad70:	6978      	ldr	r0, [r7, #20]
 800ad72:	f006 f8fb 	bl	8010f6c <_fx_utility_logical_sector_read>
 800ad76:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	e290      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800ad8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad8e:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800ad90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad92:	3b01      	subs	r3, #1
 800ad94:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800ad96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad9c:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800ad9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f47f af08 	bne.w	800abb6 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d116      	bne.n	800addc <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800adae:	2300      	movs	r3, #0
 800adb0:	667b      	str	r3, [r7, #100]	; 0x64
 800adb2:	e00f      	b.n	800add4 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800adb4:	f107 021c 	add.w	r2, r7, #28
 800adb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adba:	4413      	add	r3, r2
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800adc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	677a      	str	r2, [r7, #116]	; 0x74
 800adc8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800adcc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800adce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add0:	3301      	adds	r3, #1
 800add2:	667b      	str	r3, [r7, #100]	; 0x64
 800add4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add6:	2b0a      	cmp	r3, #10
 800add8:	d9ec      	bls.n	800adb4 <_fx_directory_entry_write+0x77c>
 800adda:	e1a5      	b.n	800b128 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800addc:	2300      	movs	r3, #0
 800adde:	667b      	str	r3, [r7, #100]	; 0x64
 800ade0:	e007      	b.n	800adf2 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800ade2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ade4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ade6:	4413      	add	r3, r2
 800ade8:	2220      	movs	r2, #32
 800adea:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800adec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adee:	3301      	adds	r3, #1
 800adf0:	667b      	str	r3, [r7, #100]	; 0x64
 800adf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adf4:	2b0a      	cmp	r3, #10
 800adf6:	d9f4      	bls.n	800ade2 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800adf8:	2300      	movs	r3, #0
 800adfa:	667b      	str	r3, [r7, #100]	; 0x64
 800adfc:	2300      	movs	r3, #0
 800adfe:	663b      	str	r3, [r7, #96]	; 0x60
 800ae00:	e01c      	b.n	800ae3c <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae06:	4413      	add	r3, r2
 800ae08:	3304      	adds	r3, #4
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae0e:	d019      	beq.n	800ae44 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae14:	4413      	add	r3, r2
 800ae16:	3304      	adds	r3, #4
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d014      	beq.n	800ae48 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800ae1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ae20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae22:	4413      	add	r3, r2
 800ae24:	6939      	ldr	r1, [r7, #16]
 800ae26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae28:	440a      	add	r2, r1
 800ae2a:	3204      	adds	r2, #4
 800ae2c:	7812      	ldrb	r2, [r2, #0]
 800ae2e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800ae30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae32:	3301      	adds	r3, #1
 800ae34:	667b      	str	r3, [r7, #100]	; 0x64
 800ae36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae38:	3301      	adds	r3, #1
 800ae3a:	663b      	str	r3, [r7, #96]	; 0x60
 800ae3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae3e:	2b07      	cmp	r3, #7
 800ae40:	d9df      	bls.n	800ae02 <_fx_directory_entry_write+0x7ca>
 800ae42:	e002      	b.n	800ae4a <_fx_directory_entry_write+0x812>
                    break;
 800ae44:	bf00      	nop
 800ae46:	e000      	b.n	800ae4a <_fx_directory_entry_write+0x812>
                    break;
 800ae48:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae4e:	4413      	add	r3, r2
 800ae50:	3304      	adds	r3, #4
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d020      	beq.n	800ae9a <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800ae58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae5e:	2308      	movs	r3, #8
 800ae60:	663b      	str	r3, [r7, #96]	; 0x60
 800ae62:	e015      	b.n	800ae90 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae68:	4413      	add	r3, r2
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d012      	beq.n	800ae98 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800ae72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ae74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae76:	4413      	add	r3, r2
 800ae78:	6939      	ldr	r1, [r7, #16]
 800ae7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae7c:	440a      	add	r2, r1
 800ae7e:	3204      	adds	r2, #4
 800ae80:	7812      	ldrb	r2, [r2, #0]
 800ae82:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800ae84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae86:	3301      	adds	r3, #1
 800ae88:	667b      	str	r3, [r7, #100]	; 0x64
 800ae8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	663b      	str	r3, [r7, #96]	; 0x60
 800ae90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae92:	2b0a      	cmp	r3, #10
 800ae94:	d9e6      	bls.n	800ae64 <_fx_directory_entry_write+0x82c>
 800ae96:	e000      	b.n	800ae9a <_fx_directory_entry_write+0x862>
                        break;
 800ae98:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800ae9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae9c:	330b      	adds	r3, #11
 800ae9e:	677b      	str	r3, [r7, #116]	; 0x74
 800aea0:	e142      	b.n	800b128 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 80a1 	beq.w	800afee <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	f040 8096 	bne.w	800afee <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800aec2:	2300      	movs	r3, #0
 800aec4:	663b      	str	r3, [r7, #96]	; 0x60
 800aec6:	e08c      	b.n	800afe2 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2be5      	cmp	r3, #229	; 0xe5
 800aed0:	d102      	bne.n	800aed8 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800aed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aed4:	22e5      	movs	r2, #229	; 0xe5
 800aed6:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800aed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeda:	3320      	adds	r3, #32
 800aedc:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee0:	3320      	adds	r3, #32
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d376      	bcc.n	800afdc <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef0:	2200      	movs	r2, #0
 800aef2:	4698      	mov	r8, r3
 800aef4:	4691      	mov	r9, r2
 800aef6:	2303      	movs	r3, #3
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	2301      	movs	r3, #1
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	4642      	mov	r2, r8
 800af04:	464b      	mov	r3, r9
 800af06:	6978      	ldr	r0, [r7, #20]
 800af08:	f006 fac4 	bl	8011494 <_fx_utility_logical_sector_write>
 800af0c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	e1c5      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af1e:	429a      	cmp	r2, r3
 800af20:	d335      	bcc.n	800af8e <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af26:	3b01      	subs	r3, #1
 800af28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d206      	bcs.n	800af3c <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800af2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af30:	3301      	adds	r3, #1
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	3301      	adds	r3, #1
 800af38:	63bb      	str	r3, [r7, #56]	; 0x38
 800af3a:	e032      	b.n	800afa2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800af3c:	f107 0318 	add.w	r3, r7, #24
 800af40:	461a      	mov	r2, r3
 800af42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af44:	6978      	ldr	r0, [r7, #20]
 800af46:	f004 fc03 	bl	800f750 <_fx_utility_FAT_entry_read>
 800af4a:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	e1a6      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d907      	bls.n	800af70 <_fx_directory_entry_write+0x938>
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af66:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800af6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d301      	bcc.n	800af74 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800af70:	2308      	movs	r3, #8
 800af72:	e197      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800af74:	2300      	movs	r3, #0
 800af76:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800af80:	6979      	ldr	r1, [r7, #20]
 800af82:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800af84:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800af88:	4413      	add	r3, r2
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af8c:	e009      	b.n	800afa2 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800af8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af90:	3301      	adds	r3, #1
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d301      	bcc.n	800afa2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800af9e:	2308      	movs	r3, #8
 800afa0:	e180      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa4:	2200      	movs	r2, #0
 800afa6:	469a      	mov	sl, r3
 800afa8:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800afae:	2203      	movs	r2, #3
 800afb0:	9202      	str	r2, [sp, #8]
 800afb2:	2201      	movs	r2, #1
 800afb4:	9201      	str	r2, [sp, #4]
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4652      	mov	r2, sl
 800afba:	465b      	mov	r3, fp
 800afbc:	6978      	ldr	r0, [r7, #20]
 800afbe:	f005 ffd5 	bl	8010f6c <_fx_utility_logical_sector_read>
 800afc2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	e16a      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800afd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afda:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800afdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afde:	3301      	adds	r3, #1
 800afe0:	663b      	str	r3, [r7, #96]	; 0x60
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afe8:	429a      	cmp	r2, r3
 800afea:	f4ff af6d 	bcc.w	800aec8 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800afee:	2300      	movs	r3, #0
 800aff0:	663b      	str	r3, [r7, #96]	; 0x60
 800aff2:	e007      	b.n	800b004 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800aff4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aff8:	4413      	add	r3, r2
 800affa:	2220      	movs	r2, #32
 800affc:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800affe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b000:	3301      	adds	r3, #1
 800b002:	663b      	str	r3, [r7, #96]	; 0x60
 800b004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b006:	2b0a      	cmp	r3, #10
 800b008:	d9f4      	bls.n	800aff4 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800b00a:	2300      	movs	r3, #0
 800b00c:	667b      	str	r3, [r7, #100]	; 0x64
 800b00e:	e007      	b.n	800b020 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800b010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b014:	4413      	add	r3, r2
 800b016:	222e      	movs	r2, #46	; 0x2e
 800b018:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800b01a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b01c:	3301      	adds	r3, #1
 800b01e:	667b      	str	r3, [r7, #100]	; 0x64
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b026:	4413      	add	r3, r2
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b2e      	cmp	r3, #46	; 0x2e
 800b02c:	d0f0      	beq.n	800b010 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b034:	4413      	add	r3, r2
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d039      	beq.n	800b0b0 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b03c:	2300      	movs	r3, #0
 800b03e:	667b      	str	r3, [r7, #100]	; 0x64
 800b040:	2300      	movs	r3, #0
 800b042:	663b      	str	r3, [r7, #96]	; 0x60
 800b044:	e02d      	b.n	800b0a2 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b04c:	4413      	add	r3, r2
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b2e      	cmp	r3, #46	; 0x2e
 800b052:	d02a      	beq.n	800b0aa <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b05a:	4413      	add	r3, r2
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d025      	beq.n	800b0ae <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b068:	4413      	add	r3, r2
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b070:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b074:	2b60      	cmp	r3, #96	; 0x60
 800b076:	d908      	bls.n	800b08a <_fx_directory_entry_write+0xa52>
 800b078:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b07c:	2b7a      	cmp	r3, #122	; 0x7a
 800b07e:	d804      	bhi.n	800b08a <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800b080:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b084:	3b20      	subs	r3, #32
 800b086:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800b08a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b08c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b08e:	4413      	add	r3, r2
 800b090:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b094:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b098:	3301      	adds	r3, #1
 800b09a:	667b      	str	r3, [r7, #100]	; 0x64
 800b09c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b09e:	3301      	adds	r3, #1
 800b0a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b0a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0a4:	2b07      	cmp	r3, #7
 800b0a6:	d9ce      	bls.n	800b046 <_fx_directory_entry_write+0xa0e>
 800b0a8:	e002      	b.n	800b0b0 <_fx_directory_entry_write+0xa78>
                    break;
 800b0aa:	bf00      	nop
 800b0ac:	e000      	b.n	800b0b0 <_fx_directory_entry_write+0xa78>
                    break;
 800b0ae:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0b6:	4413      	add	r3, r2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d031      	beq.n	800b122 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b0be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	667b      	str	r3, [r7, #100]	; 0x64
 800b0c4:	2308      	movs	r3, #8
 800b0c6:	663b      	str	r3, [r7, #96]	; 0x60
 800b0c8:	e026      	b.n	800b118 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0d0:	4413      	add	r3, r2
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d023      	beq.n	800b120 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0de:	4413      	add	r3, r2
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b0e6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b0ea:	2b60      	cmp	r3, #96	; 0x60
 800b0ec:	d908      	bls.n	800b100 <_fx_directory_entry_write+0xac8>
 800b0ee:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b0f2:	2b7a      	cmp	r3, #122	; 0x7a
 800b0f4:	d804      	bhi.n	800b100 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800b0f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b0fa:	3b20      	subs	r3, #32
 800b0fc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800b100:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b104:	4413      	add	r3, r2
 800b106:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b10a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b10c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b10e:	3301      	adds	r3, #1
 800b110:	667b      	str	r3, [r7, #100]	; 0x64
 800b112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b114:	3301      	adds	r3, #1
 800b116:	663b      	str	r3, [r7, #96]	; 0x60
 800b118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b11a:	2b0a      	cmp	r3, #10
 800b11c:	d9d5      	bls.n	800b0ca <_fx_directory_entry_write+0xa92>
 800b11e:	e000      	b.n	800b122 <_fx_directory_entry_write+0xaea>
                    break;
 800b120:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800b122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b124:	330b      	adds	r3, #11
 800b126:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800b128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	677a      	str	r2, [r7, #116]	; 0x74
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	7f12      	ldrb	r2, [r2, #28]
 800b132:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800b134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b136:	1c5a      	adds	r2, r3, #1
 800b138:	677a      	str	r2, [r7, #116]	; 0x74
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	7f52      	ldrb	r2, [r2, #29]
 800b13e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800b140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	677a      	str	r2, [r7, #116]	; 0x74
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	7f92      	ldrb	r2, [r2, #30]
 800b14a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6a1b      	ldr	r3, [r3, #32]
 800b150:	4619      	mov	r1, r3
 800b152:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b154:	f004 faa9 	bl	800f6aa <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b15a:	3302      	adds	r3, #2
 800b15c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	4619      	mov	r1, r3
 800b164:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b166:	f004 faa0 	bl	800f6aa <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b16a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b16c:	3302      	adds	r3, #2
 800b16e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b174:	4619      	mov	r1, r3
 800b176:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b178:	f004 fa97 	bl	800f6aa <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b17c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b17e:	3302      	adds	r3, #2
 800b180:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b186:	2b00      	cmp	r3, #0
 800b188:	d008      	beq.n	800b19c <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800b192:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b194:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b196:	f004 fa88 	bl	800f6aa <_fx_utility_16_unsigned_write>
 800b19a:	e003      	b.n	800b1a4 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800b19c:	2100      	movs	r1, #0
 800b19e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b1a0:	f004 fa83 	bl	800f6aa <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b1a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1a6:	3302      	adds	r3, #2
 800b1a8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b1b2:	f004 fa7a 	bl	800f6aa <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1b8:	3302      	adds	r3, #2
 800b1ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b1c4:	f004 fa71 	bl	800f6aa <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b1c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1ca:	3302      	adds	r3, #2
 800b1cc:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b1d6:	f004 fa68 	bl	800f6aa <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b1da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1dc:	3302      	adds	r3, #2
 800b1de:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b1ec:	f004 fa8f 	bl	800f70e <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	461c      	mov	r4, r3
 800b1f6:	4615      	mov	r5, r2
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	9302      	str	r3, [sp, #8]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	4622      	mov	r2, r4
 800b206:	462b      	mov	r3, r5
 800b208:	6978      	ldr	r0, [r7, #20]
 800b20a:	f006 f943 	bl	8011494 <_fx_utility_logical_sector_write>
 800b20e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	e044      	b.n	800b2a4 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d03e      	beq.n	800b2a2 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800b230:	4299      	cmp	r1, r3
 800b232:	bf08      	it	eq
 800b234:	4290      	cmpeq	r0, r2
 800b236:	d134      	bne.n	800b2a2 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800b242:	429a      	cmp	r2, r3
 800b244:	d12d      	bne.n	800b2a2 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b256:	6979      	ldr	r1, [r7, #20]
 800b258:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	7f1a      	ldrb	r2, [r3, #28]
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	7f5a      	ldrb	r2, [r3, #29]
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	7f9a      	ldrb	r2, [r3, #30]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6a1a      	ldr	r2, [r3, #32]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3778      	adds	r7, #120	; 0x78
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2ae:	bf00      	nop

0800b2b0 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800b2b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2b4:	b0a8      	sub	sp, #160	; 0xa0
 800b2b6:	af04      	add	r7, sp, #16
 800b2b8:	6278      	str	r0, [r7, #36]	; 0x24
 800b2ba:	6239      	str	r1, [r7, #32]
 800b2bc:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2d2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2e2:	d108      	bne.n	800b2f6 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ee:	d102      	bne.n	800b2f6 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800b2f0:	230c      	movs	r3, #12
 800b2f2:	f000 bc17 	b.w	800bb24 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b302:	e13d      	b.n	800b580 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b30c:	4413      	add	r3, r2
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d908      	bls.n	800b326 <_fx_directory_free_search+0x76>
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b31c:	4413      	add	r3, r2
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b5a      	cmp	r3, #90	; 0x5a
 800b322:	f240 8121 	bls.w	800b568 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b2f      	cmp	r3, #47	; 0x2f
 800b334:	d908      	bls.n	800b348 <_fx_directory_free_search+0x98>
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b33e:	4413      	add	r3, r2
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b39      	cmp	r3, #57	; 0x39
 800b344:	f240 8112 	bls.w	800b56c <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b350:	4413      	add	r3, r2
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b60      	cmp	r3, #96	; 0x60
 800b356:	d90b      	bls.n	800b370 <_fx_directory_free_search+0xc0>
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b360:	4413      	add	r3, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b7a      	cmp	r3, #122	; 0x7a
 800b366:	d803      	bhi.n	800b370 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	2201      	movs	r2, #1
 800b36c:	615a      	str	r2, [r3, #20]
 800b36e:	e102      	b.n	800b576 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	d103      	bne.n	800b388 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	2201      	movs	r2, #1
 800b384:	615a      	str	r2, [r3, #20]
 800b386:	e0f6      	b.n	800b576 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b390:	4413      	add	r3, r2
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b2e      	cmp	r3, #46	; 0x2e
 800b396:	d114      	bne.n	800b3c2 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800b398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10c      	bne.n	800b3ba <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800b3a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800b3a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 80e2 	bne.w	800b576 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	615a      	str	r2, [r3, #20]
 800b3b8:	e0dd      	b.n	800b576 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	615a      	str	r2, [r3, #20]
 800b3c0:	e0d9      	b.n	800b576 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ca:	4413      	add	r3, r2
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2be5      	cmp	r3, #229	; 0xe5
 800b3d0:	d103      	bne.n	800b3da <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	615a      	str	r2, [r3, #20]
 800b3d8:	e0cd      	b.n	800b576 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3e2:	4413      	add	r3, r2
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	b25b      	sxtb	r3, r3
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f2c0 80c1 	blt.w	800b570 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3f6:	4413      	add	r3, r2
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b7e      	cmp	r3, #126	; 0x7e
 800b3fc:	f000 80ba 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b408:	4413      	add	r3, r2
 800b40a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800b40c:	2b2d      	cmp	r3, #45	; 0x2d
 800b40e:	f000 80b1 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b41a:	4413      	add	r3, r2
 800b41c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800b41e:	2b5f      	cmp	r3, #95	; 0x5f
 800b420:	f000 80a8 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b42c:	4413      	add	r3, r2
 800b42e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800b430:	2b7d      	cmp	r3, #125	; 0x7d
 800b432:	f000 809f 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b43e:	4413      	add	r3, r2
 800b440:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800b442:	2b7b      	cmp	r3, #123	; 0x7b
 800b444:	f000 8096 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b450:	4413      	add	r3, r2
 800b452:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800b454:	2b28      	cmp	r3, #40	; 0x28
 800b456:	f000 808d 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b462:	4413      	add	r3, r2
 800b464:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800b466:	2b29      	cmp	r3, #41	; 0x29
 800b468:	f000 8084 	beq.w	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b474:	4413      	add	r3, r2
 800b476:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800b478:	2b60      	cmp	r3, #96	; 0x60
 800b47a:	d07b      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b484:	4413      	add	r3, r2
 800b486:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800b488:	2b27      	cmp	r3, #39	; 0x27
 800b48a:	d073      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b494:	4413      	add	r3, r2
 800b496:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800b498:	2b21      	cmp	r3, #33	; 0x21
 800b49a:	d06b      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4a4:	4413      	add	r3, r2
 800b4a6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800b4a8:	2b23      	cmp	r3, #35	; 0x23
 800b4aa:	d063      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800b4b8:	2b24      	cmp	r3, #36	; 0x24
 800b4ba:	d05b      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4c4:	4413      	add	r3, r2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800b4c8:	2b26      	cmp	r3, #38	; 0x26
 800b4ca:	d053      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4d4:	4413      	add	r3, r2
 800b4d6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800b4d8:	2b40      	cmp	r3, #64	; 0x40
 800b4da:	d04b      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4e4:	4413      	add	r3, r2
 800b4e6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800b4e8:	2b5e      	cmp	r3, #94	; 0x5e
 800b4ea:	d043      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f4:	4413      	add	r3, r2
 800b4f6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800b4f8:	2b25      	cmp	r3, #37	; 0x25
 800b4fa:	d03b      	beq.n	800b574 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b2b      	cmp	r3, #43	; 0x2b
 800b50a:	d027      	beq.n	800b55c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b514:	4413      	add	r3, r2
 800b516:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800b518:	2b2c      	cmp	r3, #44	; 0x2c
 800b51a:	d01f      	beq.n	800b55c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b524:	4413      	add	r3, r2
 800b526:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800b528:	2b3b      	cmp	r3, #59	; 0x3b
 800b52a:	d017      	beq.n	800b55c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b534:	4413      	add	r3, r2
 800b536:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800b538:	2b3d      	cmp	r3, #61	; 0x3d
 800b53a:	d00f      	beq.n	800b55c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b544:	4413      	add	r3, r2
 800b546:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800b548:	2b5b      	cmp	r3, #91	; 0x5b
 800b54a:	d007      	beq.n	800b55c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b554:	4413      	add	r3, r2
 800b556:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800b558:	2b5d      	cmp	r3, #93	; 0x5d
 800b55a:	d103      	bne.n	800b564 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	2201      	movs	r2, #1
 800b560:	615a      	str	r2, [r3, #20]
 800b562:	e008      	b.n	800b576 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800b564:	230c      	movs	r3, #12
 800b566:	e2dd      	b.n	800bb24 <_fx_directory_free_search+0x874>
            continue;
 800b568:	bf00      	nop
 800b56a:	e004      	b.n	800b576 <_fx_directory_free_search+0x2c6>
            continue;
 800b56c:	bf00      	nop
 800b56e:	e002      	b.n	800b576 <_fx_directory_free_search+0x2c6>
            continue;
 800b570:	bf00      	nop
 800b572:	e000      	b.n	800b576 <_fx_directory_free_search+0x2c6>
            continue;
 800b574:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800b576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b57a:	3301      	adds	r3, #1
 800b57c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b588:	4413      	add	r3, r2
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f47f aeb9 	bne.w	800b304 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800b592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800b59a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b59e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b04      	cmp	r3, #4
 800b5a6:	d902      	bls.n	800b5ae <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800b5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5b2:	2b0c      	cmp	r3, #12
 800b5b4:	d818      	bhi.n	800b5e8 <_fx_directory_free_search+0x338>
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d114      	bne.n	800b5e8 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800b5c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d806      	bhi.n	800b5da <_fx_directory_free_search+0x32a>
 800b5cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b5d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	2b08      	cmp	r3, #8
 800b5d8:	d928      	bls.n	800b62c <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800b5e6:	e021      	b.n	800b62c <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800b5e8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b5ec:	4b95      	ldr	r3, [pc, #596]	; (800b844 <_fx_directory_free_search+0x594>)
 800b5ee:	fba3 2301 	umull	r2, r3, r3, r1
 800b5f2:	089a      	lsrs	r2, r3, #2
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	1aca      	subs	r2, r1, r3
 800b600:	2a00      	cmp	r2, #0
 800b602:	d109      	bne.n	800b618 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800b604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b608:	4a8e      	ldr	r2, [pc, #568]	; (800b844 <_fx_directory_free_search+0x594>)
 800b60a:	fba2 2303 	umull	r2, r3, r2, r3
 800b60e:	089b      	lsrs	r3, r3, #2
 800b610:	3301      	adds	r3, #1
 800b612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b616:	e00a      	b.n	800b62e <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800b618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b61c:	4a89      	ldr	r2, [pc, #548]	; (800b844 <_fx_directory_free_search+0x594>)
 800b61e:	fba2 2303 	umull	r2, r3, r2, r3
 800b622:	089b      	lsrs	r3, r3, #2
 800b624:	3302      	adds	r3, #2
 800b626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b62a:	e000      	b.n	800b62e <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800b62c:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00c      	beq.n	800b652 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b63e:	4613      	mov	r3, r2
 800b640:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b648:	2200      	movs	r2, #0
 800b64a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800b64c:	2302      	movs	r3, #2
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b650:	e006      	b.n	800b660 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b656:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800b660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b662:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800b664:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b66e:	f7fe fc5d 	bl	8009f2c <_fx_directory_entry_read>
 800b672:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800b674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67c:	e252      	b.n	800bb24 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2be5      	cmp	r3, #229	; 0xe5
 800b686:	d103      	bne.n	800b690 <_fx_directory_free_search+0x3e0>
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	791b      	ldrb	r3, [r3, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d004      	beq.n	800b69a <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800b696:	2b00      	cmp	r3, #0
 800b698:	d16b      	bne.n	800b772 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800b69a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d91a      	bls.n	800b6d8 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d115      	bne.n	800b6d8 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	23e5      	movs	r3, #229	; 0xe5
 800b6b8:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800b6c4:	69f9      	ldr	r1, [r7, #28]
 800b6c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6c8:	f7fe ffb6 	bl	800a638 <_fx_directory_entry_write>
 800b6cc:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800b6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800b6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d6:	e225      	b.n	800bb24 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800b6d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d109      	bne.n	800b6f4 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f2:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800b6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b700:	429a      	cmp	r2, r3
 800b702:	d838      	bhi.n	800b776 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800b704:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b706:	2200      	movs	r2, #0
 800b708:	461c      	mov	r4, r3
 800b70a:	4615      	mov	r5, r2
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b716:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2200      	movs	r2, #0
 800b71c:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	2200      	movs	r2, #0
 800b722:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b724:	f3ef 8310 	mrs	r3, PRIMASK
 800b728:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b72e:	b672      	cpsid	i
#endif
    return(int_posture);
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800b732:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800b734:	4b44      	ldr	r3, [pc, #272]	; (800b848 <_fx_directory_free_search+0x598>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800b73c:	4b43      	ldr	r3, [pc, #268]	; (800b84c <_fx_directory_free_search+0x59c>)
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800b744:	4b41      	ldr	r3, [pc, #260]	; (800b84c <_fx_directory_free_search+0x59c>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	629a      	str	r2, [r3, #40]	; 0x28
 800b74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b74e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b752:	f383 8810 	msr	PRIMASK, r3
}
 800b756:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800b758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d103      	bne.n	800b768 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	2200      	movs	r2, #0
 800b764:	615a      	str	r2, [r3, #20]
 800b766:	e002      	b.n	800b76e <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	2201      	movs	r2, #1
 800b76c:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800b76e:	2300      	movs	r3, #0
 800b770:	e1d8      	b.n	800bb24 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800b772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b774:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b778:	3301      	adds	r3, #1
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b780:	429a      	cmp	r2, r3
 800b782:	f200 81c9 	bhi.w	800bb18 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b790:	4413      	add	r3, r2
 800b792:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b798:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79c:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800b79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7a4:	4413      	add	r3, r2
 800b7a6:	1e5a      	subs	r2, r3, #1
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800b7b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d104      	bne.n	800b7c2 <_fx_directory_free_search+0x512>
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 81ab 	beq.w	800bb18 <_fx_directory_free_search+0x868>
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	f200 81a5 	bhi.w	800bb18 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d6:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7e2:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800b7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800b7e8:	e10b      	b.n	800ba02 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800b7ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800b7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800b7f6:	230a      	movs	r3, #10
 800b7f8:	e194      	b.n	800bb24 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800b7fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7fe:	461a      	mov	r2, r3
 800b800:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b804:	f003 ffa4 	bl	800f750 <_fx_utility_FAT_entry_read>
 800b808:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800b80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b812:	e187      	b.n	800bb24 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800b814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b816:	3b01      	subs	r3, #1
 800b818:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d117      	bne.n	800b850 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800b820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b834:	3302      	adds	r3, #2
 800b836:	429a      	cmp	r2, r3
 800b838:	d316      	bcc.n	800b868 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	2202      	movs	r2, #2
 800b83e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800b842:	e011      	b.n	800b868 <_fx_directory_free_search+0x5b8>
 800b844:	4ec4ec4f 	.word	0x4ec4ec4f
 800b848:	24003610 	.word	0x24003610
 800b84c:	2400360c 	.word	0x2400360c
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800b850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b852:	3301      	adds	r3, #1
 800b854:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85a:	3302      	adds	r3, #2
 800b85c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b85e:	429a      	cmp	r2, r3
 800b860:	d3c6      	bcc.n	800b7f0 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800b862:	2302      	movs	r3, #2
 800b864:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800b866:	e7c3      	b.n	800b7f0 <_fx_directory_free_search+0x540>
                            break;
 800b868:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b86e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b870:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b876:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b87a:	440b      	add	r3, r1
 800b87c:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b882:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b886:	2200      	movs	r2, #0
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b890:	2303      	movs	r3, #3
 800b892:	9302      	str	r3, [sp, #8]
 800b894:	2301      	movs	r3, #1
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	9200      	str	r2, [sp, #0]
 800b89a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b89e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8a0:	f005 fb64 	bl	8010f6c <_fx_utility_logical_sector_read>
 800b8a4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800b8ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ae:	e139      	b.n	800bb24 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b8be:	e00d      	b.n	800b8dc <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800b8c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800b8c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800b8d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d3eb      	bcc.n	800b8c0 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	60bb      	str	r3, [r7, #8]
 800b8ee:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	9302      	str	r3, [sp, #8]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	9200      	str	r2, [sp, #0]
 800b8fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b904:	f005 fdc6 	bl	8011494 <_fx_utility_logical_sector_write>
 800b908:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800b90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800b910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b912:	e107      	b.n	800bb24 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800b914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b916:	2b01      	cmp	r3, #1
 800b918:	d95a      	bls.n	800b9d0 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800b91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91c:	3301      	adds	r3, #1
 800b91e:	2200      	movs	r2, #0
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b926:	3b01      	subs	r3, #1
 800b928:	2200      	movs	r2, #0
 800b92a:	4698      	mov	r8, r3
 800b92c:	4691      	mov	r9, r2
 800b92e:	2301      	movs	r3, #1
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	e9cd 8900 	strd	r8, r9, [sp]
 800b936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b93a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b93c:	f005 f900 	bl	8010b40 <_fx_utility_logical_sector_flush>
 800b940:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800b942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800b948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94a:	e0eb      	b.n	800bb24 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800b94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b94e:	3b01      	subs	r3, #1
 800b950:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b952:	e03a      	b.n	800b9ca <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	2201      	movs	r2, #1
 800b966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	2290      	movs	r2, #144	; 0x90
 800b96e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800b97c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b97e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b980:	441a      	add	r2, r3
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	2201      	movs	r2, #1
 800b98c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	2203      	movs	r2, #3
 800b994:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	2201      	movs	r2, #1
 800b99c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b9a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9a8:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c2:	e0af      	b.n	800bb24 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800b9c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1c1      	bne.n	800b954 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800b9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800b9d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9d8:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800b9da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00a      	beq.n	800b9f6 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800b9e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b9e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9e6:	f004 f8dc 	bl	800fba2 <_fx_utility_FAT_entry_write>
 800b9ea:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800b9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f4:	e096      	b.n	800bb24 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800b9f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9f8:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba00:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800ba02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f47f aef0 	bne.w	800b7ea <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ba10:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800ba14:	461a      	mov	r2, r3
 800ba16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ba18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba1a:	f004 f8c2 	bl	800fba2 <_fx_utility_FAT_entry_write>
 800ba1e:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800ba20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800ba26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba28:	e07c      	b.n	800bb24 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800ba2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800ba30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba34:	673b      	str	r3, [r7, #112]	; 0x70
 800ba36:	e002      	b.n	800ba3e <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba3c:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800ba48:	e024      	b.n	800ba94 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800ba4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba4e:	461a      	mov	r2, r3
 800ba50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ba52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba54:	f003 fe7c 	bl	800f750 <_fx_utility_FAT_entry_read>
 800ba58:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800ba5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba5e:	3301      	adds	r3, #1
 800ba60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800ba64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6c:	e05a      	b.n	800bb24 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800ba6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d909      	bls.n	800ba88 <_fx_directory_free_search+0x7d8>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d005      	beq.n	800ba88 <_fx_directory_free_search+0x7d8>
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d901      	bls.n	800ba8c <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e04b      	b.n	800bb24 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800ba8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba8e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ba9a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ba9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d3d2      	bcc.n	800ba4a <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800baa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bab6:	fb03 f202 	mul.w	r2, r3, r2
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babe:	fb02 f303 	mul.w	r3, r2, r3
 800bac2:	095b      	lsrs	r3, r3, #5
 800bac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bac6:	4413      	add	r3, r2
 800bac8:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2be5      	cmp	r3, #229	; 0xe5
 800bad2:	d103      	bne.n	800badc <_fx_directory_free_search+0x82c>
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	791b      	ldrb	r3, [r3, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800badc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bade:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800bae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bae2:	2200      	movs	r2, #0
 800bae4:	469a      	mov	sl, r3
 800bae6:	4693      	mov	fp, r2
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <_fx_directory_free_search+0x852>
 800baf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d102      	bne.n	800bb02 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb00:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800bb02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb08:	f004 f84b 	bl	800fba2 <_fx_utility_FAT_entry_write>
 800bb0c:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800bb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800bb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb16:	e005      	b.n	800bb24 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	f63f ada1 	bhi.w	800b664 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800bb22:	230a      	movs	r3, #10
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3790      	adds	r7, #144	; 0x90
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb2e:	bf00      	nop

0800bb30 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	2b5c      	cmp	r3, #92	; 0x5c
 800bb46:	d003      	beq.n	800bb50 <_fx_directory_name_extract+0x20>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b2f      	cmp	r3, #47	; 0x2f
 800bb4e:	d106      	bne.n	800bb5e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3301      	adds	r3, #1
 800bb54:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800bb56:	e002      	b.n	800bb5e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	d0f8      	beq.n	800bb58 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800bb6a:	e015      	b.n	800bb98 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b5c      	cmp	r3, #92	; 0x5c
 800bb72:	d017      	beq.n	800bba4 <_fx_directory_name_extract+0x74>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b2f      	cmp	r3, #47	; 0x2f
 800bb7a:	d013      	beq.n	800bba4 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2bff      	cmp	r3, #255	; 0xff
 800bb80:	d00f      	beq.n	800bba2 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	1c5a      	adds	r2, r3, #1
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	440a      	add	r2, r1
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3301      	adds	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e5      	bne.n	800bb6c <_fx_directory_name_extract+0x3c>
 800bba0:	e000      	b.n	800bba4 <_fx_directory_name_extract+0x74>
            break;
 800bba2:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00b      	beq.n	800bbcc <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800bbba:	e007      	b.n	800bbcc <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d0f1      	beq.n	800bbbc <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800bbe4:	687b      	ldr	r3, [r7, #4]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800bbf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbf8:	b0c0      	sub	sp, #256	; 0x100
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bbfe:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc00:	627a      	str	r2, [r7, #36]	; 0x24
 800bc02:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc18:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc20:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800bc2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b5c      	cmp	r3, #92	; 0x5c
 800bc42:	d003      	beq.n	800bc4c <_fx_directory_search+0x58>
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2b2f      	cmp	r3, #47	; 0x2f
 800bc4a:	d103      	bne.n	800bc54 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc52:	e044      	b.n	800bcde <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800bc54:	4bab      	ldr	r3, [pc, #684]	; (800bf04 <_fx_directory_search+0x310>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d022      	beq.n	800bca6 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800bc60:	4ba8      	ldr	r3, [pc, #672]	; (800bf04 <_fx_directory_search+0x310>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d016      	beq.n	800bc9e <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800bc70:	4ba4      	ldr	r3, [pc, #656]	; (800bf04 <_fx_directory_search+0x310>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc78:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	2370      	movs	r3, #112	; 0x70
 800bc80:	461a      	mov	r2, r3
 800bc82:	f008 ff15 	bl	8014ab0 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800bc86:	4b9f      	ldr	r3, [pc, #636]	; (800bf04 <_fx_directory_search+0x310>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8e:	3370      	adds	r3, #112	; 0x70
 800bc90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800bc94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc9c:	e01f      	b.n	800bcde <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bca4:	e01b      	b.n	800bcde <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d012      	beq.n	800bcd8 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800bcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bcb8:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800bcbc:	2370      	movs	r3, #112	; 0x70
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	f008 fef6 	bl	8014ab0 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800bcca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800bcce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bcd6:	e002      	b.n	800bcde <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 81b9 	beq.w	800c05c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	2b5c      	cmp	r3, #92	; 0x5c
 800bcf6:	d02d      	beq.n	800bd54 <_fx_directory_search+0x160>
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b2f      	cmp	r3, #47	; 0x2f
 800bcfe:	d14c      	bne.n	800bd9a <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800bd00:	e028      	b.n	800bd54 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800bd02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd08:	4413      	add	r3, r2
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800bd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800bd22:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bd26:	2b5c      	cmp	r3, #92	; 0x5c
 800bd28:	d102      	bne.n	800bd30 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800bd2a:	232f      	movs	r3, #47	; 0x2f
 800bd2c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800bd30:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bd34:	2b5c      	cmp	r3, #92	; 0x5c
 800bd36:	d102      	bne.n	800bd3e <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800bd38:	232f      	movs	r3, #47	; 0x2f
 800bd3a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800bd3e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bd42:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d110      	bne.n	800bd6c <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800bd4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd4e:	3301      	adds	r3, #1
 800bd50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800bd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd58:	2bfe      	cmp	r3, #254	; 0xfe
 800bd5a:	d808      	bhi.n	800bd6e <_fx_directory_search+0x17a>
 800bd5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd62:	4413      	add	r3, r2
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1cb      	bne.n	800bd02 <_fx_directory_search+0x10e>
 800bd6a:	e000      	b.n	800bd6e <_fx_directory_search+0x17a>
                    break;
 800bd6c:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800bd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd74:	4413      	add	r3, r2
 800bd76:	7819      	ldrb	r1, [r3, #0]
 800bd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	4299      	cmp	r1, r3
 800bd88:	d003      	beq.n	800bd92 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800bd90:	e0cf      	b.n	800bf32 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800bd98:	e0cb      	b.n	800bf32 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800bda0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d043      	beq.n	800be30 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bda8:	e029      	b.n	800bdfe <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800bdaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800bdbc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc4:	4413      	add	r3, r2
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800bdcc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bdd0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdd2:	d102      	bne.n	800bdda <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800bdd4:	232f      	movs	r3, #47	; 0x2f
 800bdd6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800bdda:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bdde:	2b5c      	cmp	r3, #92	; 0x5c
 800bde0:	d102      	bne.n	800bde8 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800bde2:	232f      	movs	r3, #47	; 0x2f
 800bde4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800bde8:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bdec:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d111      	bne.n	800be18 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800bdf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bdfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be02:	2bfe      	cmp	r3, #254	; 0xfe
 800be04:	d809      	bhi.n	800be1a <_fx_directory_search+0x226>
 800be06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be0e:	4413      	add	r3, r2
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1c9      	bne.n	800bdaa <_fx_directory_search+0x1b6>
 800be16:	e000      	b.n	800be1a <_fx_directory_search+0x226>
                        break;
 800be18:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800be1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be22:	4413      	add	r3, r2
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800be30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800be34:	2b00      	cmp	r3, #0
 800be36:	d07c      	beq.n	800bf32 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800be38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be3e:	4413      	add	r3, r2
 800be40:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b5c      	cmp	r3, #92	; 0x5c
 800be48:	d00c      	beq.n	800be64 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800be4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be50:	4413      	add	r3, r2
 800be52:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be56:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800be58:	2b2f      	cmp	r3, #47	; 0x2f
 800be5a:	d003      	beq.n	800be64 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be62:	e004      	b.n	800be6e <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800be64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be68:	3301      	adds	r3, #1
 800be6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800be6e:	2300      	movs	r3, #0
 800be70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800be74:	e02d      	b.n	800bed2 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800be76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be7c:	4413      	add	r3, r2
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800be84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800be96:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800be9a:	2b5c      	cmp	r3, #92	; 0x5c
 800be9c:	d102      	bne.n	800bea4 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800be9e:	232f      	movs	r3, #47	; 0x2f
 800bea0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800bea4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bea8:	2b5c      	cmp	r3, #92	; 0x5c
 800beaa:	d102      	bne.n	800beb2 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800beac:	232f      	movs	r3, #47	; 0x2f
 800beae:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800beb2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800beb6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800beba:	429a      	cmp	r2, r3
 800bebc:	d119      	bne.n	800bef2 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800bebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec2:	3301      	adds	r3, #1
 800bec4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800bec8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800becc:	3301      	adds	r3, #1
 800bece:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800bed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed6:	2bfe      	cmp	r3, #254	; 0xfe
 800bed8:	d80c      	bhi.n	800bef4 <_fx_directory_search+0x300>
 800beda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bedc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bee0:	4413      	add	r3, r2
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <_fx_directory_search+0x300>
 800bee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1c2      	bne.n	800be76 <_fx_directory_search+0x282>
 800bef0:	e000      	b.n	800bef4 <_fx_directory_search+0x300>
                        break;
 800bef2:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800bef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef8:	2bff      	cmp	r3, #255	; 0xff
 800befa:	d905      	bls.n	800bf08 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800befc:	2300      	movs	r3, #0
 800befe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf02:	e016      	b.n	800bf32 <_fx_directory_search+0x33e>
 800bf04:	2400368c 	.word	0x2400368c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800bf08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d010      	beq.n	800bf32 <_fx_directory_search+0x33e>
 800bf10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf16:	4413      	add	r3, r2
 800bf18:	7819      	ldrb	r1, [r3, #0]
 800bf1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	4299      	cmp	r1, r3
 800bf2a:	d002      	beq.n	800bf32 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800bf32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 8090 	beq.w	800c05c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800bf44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	4610      	mov	r0, r2
 800bf4a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800bf4e:	2270      	movs	r2, #112	; 0x70
 800bf50:	4619      	mov	r1, r3
 800bf52:	f008 fdad 	bl	8014ab0 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf5c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf64:	e01d      	b.n	800bfa2 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800bf66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf6e:	4413      	add	r3, r2
 800bf70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf72:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bf76:	440a      	add	r2, r1
 800bf78:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800bf7c:	7812      	ldrb	r2, [r2, #0]
 800bf7e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800bf80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf88:	4413      	add	r3, r2
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d103      	bne.n	800bf98 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800bf90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf94:	2bfe      	cmp	r3, #254	; 0xfe
 800bf96:	d909      	bls.n	800bfac <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bfa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfa6:	2bff      	cmp	r3, #255	; 0xff
 800bfa8:	d9dd      	bls.n	800bf66 <_fx_directory_search+0x372>
 800bfaa:	e000      	b.n	800bfae <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800bfac:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d041      	beq.n	800c038 <_fx_directory_search+0x444>
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d03c      	beq.n	800c038 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800bfc6:	6a3a      	ldr	r2, [r7, #32]
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bfd0:	2270      	movs	r2, #112	; 0x70
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	f008 fd6c 	bl	8014ab0 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfde:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bfea:	2300      	movs	r3, #0
 800bfec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bff0:	e01c      	b.n	800c02c <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800bff2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bffa:	441a      	add	r2, r3
 800bffc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800c000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c004:	440b      	add	r3, r1
 800c006:	7812      	ldrb	r2, [r2, #0]
 800c008:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800c00a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c012:	4413      	add	r3, r2
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d103      	bne.n	800c022 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800c01a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c01e:	2bfe      	cmp	r3, #254	; 0xfe
 800c020:	d909      	bls.n	800c036 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c026:	3301      	adds	r3, #1
 800c028:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c02c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c030:	2bff      	cmp	r3, #255	; 0xff
 800c032:	d9de      	bls.n	800bff2 <_fx_directory_search+0x3fe>
 800c034:	e000      	b.n	800c038 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800c036:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800c038:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d004      	beq.n	800c04a <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800c040:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c044:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c048:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800c058:	2300      	movs	r3, #0
 800c05a:	e2ff      	b.n	800c65c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800c05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c05e:	2300      	movs	r3, #0
 800c060:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800c064:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d003      	beq.n	800c074 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800c06c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800c074:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c07a:	f7ff fd59 	bl	800bb30 <_fx_directory_name_extract>
 800c07e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800c080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 80be 	beq.w	800c206 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c08a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c08e:	2300      	movs	r3, #0
 800c090:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800c092:	2300      	movs	r3, #0
 800c094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800c098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800c0a2:	e02b      	b.n	800c0fc <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800c0a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800c0ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800c0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ba:	f003 fb49 	bl	800f750 <_fx_utility_FAT_entry_read>
 800c0be:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800c0c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800c0ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0ce:	e2c5      	b.n	800c65c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800c0d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d90b      	bls.n	800c0f0 <_fx_directory_search+0x4fc>
 800c0d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c0dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d005      	beq.n	800c0f0 <_fx_directory_search+0x4fc>
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d201      	bcs.n	800c0f4 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e2b3      	b.n	800c65c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800c0f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800c0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c102:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c106:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d3ca      	bcc.n	800c0a4 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c112:	2200      	movs	r2, #0
 800c114:	469a      	mov	sl, r3
 800c116:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11c:	2200      	movs	r2, #0
 800c11e:	613b      	str	r3, [r7, #16]
 800c120:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c122:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c126:	4603      	mov	r3, r0
 800c128:	fb03 f20b 	mul.w	r2, r3, fp
 800c12c:	460b      	mov	r3, r1
 800c12e:	fb0a f303 	mul.w	r3, sl, r3
 800c132:	4413      	add	r3, r2
 800c134:	4602      	mov	r2, r0
 800c136:	fbaa 4502 	umull	r4, r5, sl, r2
 800c13a:	442b      	add	r3, r5
 800c13c:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800c13e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c142:	2200      	movs	r2, #0
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	60fa      	str	r2, [r7, #12]
 800c148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c14c:	4603      	mov	r3, r0
 800c14e:	fb03 f205 	mul.w	r2, r3, r5
 800c152:	460b      	mov	r3, r1
 800c154:	fb04 f303 	mul.w	r3, r4, r3
 800c158:	4413      	add	r3, r2
 800c15a:	4602      	mov	r2, r0
 800c15c:	fba4 8902 	umull	r8, r9, r4, r2
 800c160:	444b      	add	r3, r9
 800c162:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c164:	f04f 0200 	mov.w	r2, #0
 800c168:	f04f 0300 	mov.w	r3, #0
 800c16c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800c170:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800c174:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800c178:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800c17c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c180:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c184:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d046      	beq.n	800c21c <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800c196:	6a3a      	ldr	r2, [r7, #32]
 800c198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c19c:	4610      	mov	r0, r2
 800c19e:	4619      	mov	r1, r3
 800c1a0:	2370      	movs	r3, #112	; 0x70
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f008 fc84 	bl	8014ab0 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c1a8:	6a3a      	ldr	r2, [r7, #32]
 800c1aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c1ae:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800c1b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c1c0:	e01c      	b.n	800c1fc <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800c1c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1ca:	18d1      	adds	r1, r2, r3
 800c1cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1d4:	441a      	add	r2, r3
 800c1d6:	780b      	ldrb	r3, [r1, #0]
 800c1d8:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800c1da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1e2:	4413      	add	r3, r2
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800c1ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1ee:	2bfe      	cmp	r3, #254	; 0xfe
 800c1f0:	d913      	bls.n	800c21a <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c1f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c1fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c200:	2bff      	cmp	r3, #255	; 0xff
 800c202:	d9de      	bls.n	800c1c2 <_fx_directory_search+0x5ce>
 800c204:	e00a      	b.n	800c21c <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c20a:	2200      	movs	r2, #0
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c214:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800c218:	e000      	b.n	800c21c <_fx_directory_search+0x628>
                            break;
 800c21a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800c222:	2300      	movs	r3, #0
 800c224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800c228:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c234:	f7fd fe7a 	bl	8009f2c <_fx_directory_entry_read>
 800c238:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800c23c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c240:	3301      	adds	r3, #1
 800c242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800c246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <_fx_directory_search+0x660>
            {
                return(status);
 800c24e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c252:	e203      	b.n	800c65c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f000 80c6 	beq.w	800c3ec <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	7f1b      	ldrb	r3, [r3, #28]
 800c264:	f003 0308 	and.w	r3, r3, #8
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f040 80a9 	bne.w	800c3c0 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2be5      	cmp	r3, #229	; 0xe5
 800c276:	d104      	bne.n	800c282 <_fx_directory_search+0x68e>
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	791b      	ldrb	r3, [r3, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 80a1 	beq.w	800c3c4 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800c282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800c292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800c29c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800c2a6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c2aa:	2b60      	cmp	r3, #96	; 0x60
 800c2ac:	d908      	bls.n	800c2c0 <_fx_directory_search+0x6cc>
 800c2ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c2b2:	2b7a      	cmp	r3, #122	; 0x7a
 800c2b4:	d804      	bhi.n	800c2c0 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800c2b6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c2ba:	3b20      	subs	r3, #32
 800c2bc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800c2c0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c2c4:	2b60      	cmp	r3, #96	; 0x60
 800c2c6:	d908      	bls.n	800c2da <_fx_directory_search+0x6e6>
 800c2c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c2cc:	2b7a      	cmp	r3, #122	; 0x7a
 800c2ce:	d804      	bhi.n	800c2da <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800c2d0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c2d4:	3b20      	subs	r3, #32
 800c2d6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800c2da:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c2de:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d10f      	bne.n	800c306 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800c2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800c2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800c2fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1c6      	bne.n	800c292 <_fx_directory_search+0x69e>
 800c304:	e000      	b.n	800c308 <_fx_directory_search+0x714>
                    break;
 800c306:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800c308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10b      	bne.n	800c32a <_fx_directory_search+0x736>
 800c312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d103      	bne.n	800c32a <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800c322:	2301      	movs	r3, #1
 800c324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c328:	e04d      	b.n	800c3c6 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	791b      	ldrb	r3, [r3, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d049      	beq.n	800c3c6 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800c332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	3304      	adds	r3, #4
 800c33e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800c342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800c34c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800c356:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c35a:	2b60      	cmp	r3, #96	; 0x60
 800c35c:	d908      	bls.n	800c370 <_fx_directory_search+0x77c>
 800c35e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c362:	2b7a      	cmp	r3, #122	; 0x7a
 800c364:	d804      	bhi.n	800c370 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800c366:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c36a:	3b20      	subs	r3, #32
 800c36c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800c370:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c374:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c378:	429a      	cmp	r2, r3
 800c37a:	d10f      	bne.n	800c39c <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800c37c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c380:	3301      	adds	r3, #1
 800c382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800c386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c38a:	3301      	adds	r3, #1
 800c38c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800c390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1d3      	bne.n	800c342 <_fx_directory_search+0x74e>
 800c39a:	e000      	b.n	800c39e <_fx_directory_search+0x7aa>
                        break;
 800c39c:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800c39e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10e      	bne.n	800c3c6 <_fx_directory_search+0x7d2>
 800c3a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3ac:	781a      	ldrb	r2, [r3, #0]
 800c3ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d106      	bne.n	800c3c6 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c3be:	e002      	b.n	800c3c6 <_fx_directory_search+0x7d2>
                continue;
 800c3c0:	bf00      	nop
 800c3c2:	e000      	b.n	800c3c6 <_fx_directory_search+0x7d2>
                continue;
 800c3c4:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800c3c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	61bb      	str	r3, [r7, #24]
 800c3ce:	61fa      	str	r2, [r7, #28]
 800c3d0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c3d4:	69b9      	ldr	r1, [r7, #24]
 800c3d6:	4291      	cmp	r1, r2
 800c3d8:	69f9      	ldr	r1, [r7, #28]
 800c3da:	eb71 0303 	sbcs.w	r3, r1, r3
 800c3de:	d206      	bcs.n	800c3ee <_fx_directory_search+0x7fa>
 800c3e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f43f af1f 	beq.w	800c228 <_fx_directory_search+0x634>
 800c3ea:	e000      	b.n	800c3ee <_fx_directory_search+0x7fa>
                break;
 800c3ec:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800c3ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800c3f6:	2304      	movs	r3, #4
 800c3f8:	e130      	b.n	800c65c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	7f1b      	ldrb	r3, [r3, #28]
 800c3fe:	f003 0310 	and.w	r3, r3, #16
 800c402:	2b00      	cmp	r3, #0
 800c404:	d04f      	beq.n	800c4a6 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c40c:	4619      	mov	r1, r3
 800c40e:	2370      	movs	r3, #112	; 0x70
 800c410:	461a      	mov	r2, r3
 800c412:	f008 fb4d 	bl	8014ab0 <memcpy>
            search_dir_ptr =  &search_dir;
 800c416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c41a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c41e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c422:	2300      	movs	r3, #0
 800c424:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800c426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d13f      	bne.n	800c4b0 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800c430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	2300      	movs	r3, #0
 800c438:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d02e      	beq.n	800c49e <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800c448:	6a3a      	ldr	r2, [r7, #32]
 800c44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c44e:	4610      	mov	r0, r2
 800c450:	4619      	mov	r1, r3
 800c452:	2370      	movs	r3, #112	; 0x70
 800c454:	461a      	mov	r2, r3
 800c456:	f008 fb2b 	bl	8014ab0 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c45a:	6a3a      	ldr	r2, [r7, #32]
 800c45c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c460:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800c462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c46c:	2300      	movs	r3, #0
 800c46e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c472:	e010      	b.n	800c496 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800c474:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c47c:	18d1      	adds	r1, r2, r3
 800c47e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c486:	441a      	add	r2, r3
 800c488:	780b      	ldrb	r3, [r1, #0]
 800c48a:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c48c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c490:	3301      	adds	r3, #1
 800c492:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c49a:	2bff      	cmp	r3, #255	; 0xff
 800c49c:	d9ea      	bls.n	800c474 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4a4:	e004      	b.n	800c4b0 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	e0d5      	b.n	800c65c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f47f add6 	bne.w	800c064 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800c4be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b5c      	cmp	r3, #92	; 0x5c
 800c4c6:	d028      	beq.n	800c51a <_fx_directory_search+0x926>
 800c4c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b2f      	cmp	r3, #47	; 0x2f
 800c4d0:	d023      	beq.n	800c51a <_fx_directory_search+0x926>
 800c4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d01f      	beq.n	800c51a <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c4da:	e012      	b.n	800c502 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800c4dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e4:	4413      	add	r3, r2
 800c4e6:	7819      	ldrb	r1, [r3, #0]
 800c4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c4f4:	460a      	mov	r2, r1
 800c4f6:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800c4f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c506:	2bfe      	cmp	r3, #254	; 0xfe
 800c508:	d807      	bhi.n	800c51a <_fx_directory_search+0x926>
 800c50a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c512:	4413      	add	r3, r2
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1e0      	bne.n	800c4dc <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800c51a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b5c      	cmp	r3, #92	; 0x5c
 800c522:	d012      	beq.n	800c54a <_fx_directory_search+0x956>
 800c524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	2b2f      	cmp	r3, #47	; 0x2f
 800c52c:	d00d      	beq.n	800c54a <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800c52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c532:	2bfe      	cmp	r3, #254	; 0xfe
 800c534:	d809      	bhi.n	800c54a <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800c536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c542:	4413      	add	r3, r2
 800c544:	222f      	movs	r2, #47	; 0x2f
 800c546:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800c550:	e017      	b.n	800c582 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800c552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c556:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c55a:	4413      	add	r3, r2
 800c55c:	7819      	ldrb	r1, [r3, #0]
 800c55e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c564:	4413      	add	r3, r2
 800c566:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c56a:	460a      	mov	r2, r1
 800c56c:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800c56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c572:	3301      	adds	r3, #1
 800c574:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800c578:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c57c:	3301      	adds	r3, #1
 800c57e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800c582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c586:	2bff      	cmp	r3, #255	; 0xff
 800c588:	d807      	bhi.n	800c59a <_fx_directory_search+0x9a6>
 800c58a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c58e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c592:	4413      	add	r3, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1db      	bne.n	800c552 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800c59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c59e:	2bff      	cmp	r3, #255	; 0xff
 800c5a0:	d808      	bhi.n	800c5b4 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800c5a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
 800c5b2:	e003      	b.n	800c5bc <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800c5bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00e      	beq.n	800c5e2 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c5ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	2270      	movs	r2, #112	; 0x70
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f008 fa6c 	bl	8014ab0 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800c5e0:	e003      	b.n	800c5ea <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ee:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	2270      	movs	r2, #112	; 0x70
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f008 fa5a 	bl	8014ab0 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c608:	2300      	movs	r3, #0
 800c60a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c60e:	e01e      	b.n	800c64e <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c618:	4413      	add	r3, r2
 800c61a:	7819      	ldrb	r1, [r3, #0]
 800c61c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c61e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c622:	4413      	add	r3, r2
 800c624:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800c628:	460a      	mov	r2, r1
 800c62a:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c634:	4413      	add	r3, r2
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d103      	bne.n	800c644 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800c63c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c640:	2bfe      	cmp	r3, #254	; 0xfe
 800c642:	d909      	bls.n	800c658 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c648:	3301      	adds	r3, #1
 800c64a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c64e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c652:	2bff      	cmp	r3, #255	; 0xff
 800c654:	d9dc      	bls.n	800c610 <_fx_directory_search+0xa1c>
 800c656:	e000      	b.n	800c65a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800c658:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c662:	46bd      	mov	sp, r7
 800c664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c668 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a49      	ldr	r2, [pc, #292]	; (800c79c <_fx_file_close+0x134>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d001      	beq.n	800c67e <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800c67a:	2307      	movs	r3, #7
 800c67c:	e08a      	b.n	800c794 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c682:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a42      	ldr	r2, [pc, #264]	; (800c7a0 <_fx_file_close+0x138>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d001      	beq.n	800c6a0 <_fx_file_close+0x38>
 800c69c:	2311      	movs	r3, #17
 800c69e:	e079      	b.n	800c794 <_fx_file_close+0x12c>
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c6a6:	f04f 31ff 	mov.w	r1, #4294967295
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f005 ff8c 	bl	80125c8 <_tx_mutex_get>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <_fx_file_close+0x52>
 800c6b6:	2311      	movs	r3, #17
 800c6b8:	e06c      	b.n	800c794 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d104      	bne.n	800c6ce <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800c6cc:	e014      	b.n	800c6f8 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800c6d6:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800c6e0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d104      	bne.n	800c6f8 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c6fe:	1e5a      	subs	r2, r3, #1
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a26      	ldr	r2, [pc, #152]	; (800c7a4 <_fx_file_close+0x13c>)
 800c70a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d138      	bne.n	800c786 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d034      	beq.n	800c786 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c71c:	f3ef 8310 	mrs	r3, PRIMASK
 800c720:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c722:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c724:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c726:	b672      	cpsid	i
    return(int_posture);
 800c728:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800c72a:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c72c:	4b1e      	ldr	r3, [pc, #120]	; (800c7a8 <_fx_file_close+0x140>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c736:	4b1d      	ldr	r3, [pc, #116]	; (800c7ac <_fx_file_close+0x144>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800c740:	4b1a      	ldr	r3, [pc, #104]	; (800c7ac <_fx_file_close+0x144>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f383 8810 	msr	PRIMASK, r3
}
 800c754:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800c75c:	6879      	ldr	r1, [r7, #4]
 800c75e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3368      	adds	r3, #104	; 0x68
 800c766:	4619      	mov	r1, r3
 800c768:	69f8      	ldr	r0, [r7, #28]
 800c76a:	f7fd ff65 	bl	800a638 <_fx_directory_entry_write>
 800c76e:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d007      	beq.n	800c786 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c77c:	4618      	mov	r0, r3
 800c77e:	f006 f99b 	bl	8012ab8 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	e006      	b.n	800c794 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c78c:	4618      	mov	r0, r3
 800c78e:	f006 f993 	bl	8012ab8 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	46494c45 	.word	0x46494c45
 800c7a0:	4d454449 	.word	0x4d454449
 800c7a4:	46494c43 	.word	0x46494c43
 800c7a8:	24003610 	.word	0x24003610
 800c7ac:	2400360c 	.word	0x2400360c

0800c7b0 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b0c5      	sub	sp, #276	; 0x114
 800c7b4:	af02      	add	r7, sp, #8
 800c7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7be:	6018      	str	r0, [r3, #0]
 800c7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c8:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800c7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800c7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c7fc:	e020      	b.n	800c840 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800c7fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b5c      	cmp	r3, #92	; 0x5c
 800c806:	d004      	beq.n	800c812 <_fx_file_create+0x62>
 800c808:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b2f      	cmp	r3, #47	; 0x2f
 800c810:	d103      	bne.n	800c81a <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800c812:	2300      	movs	r3, #0
 800c814:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c818:	e00d      	b.n	800c836 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800c81a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b20      	cmp	r3, #32
 800c822:	d103      	bne.n	800c82c <_fx_file_create+0x7c>
 800c824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800c82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c830:	3301      	adds	r3, #1
 800c832:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800c836:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c83a:	3301      	adds	r3, #1
 800c83c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c840:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1d9      	bne.n	800c7fe <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800c84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <_fx_file_create+0xaa>
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c856:	2bff      	cmp	r3, #255	; 0xff
 800c858:	d901      	bls.n	800c85e <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800c85a:	230c      	movs	r3, #12
 800c85c:	e10a      	b.n	800ca74 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800c85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c86c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c870:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800c872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c880:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800c884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c888:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c88c:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800c88e:	2300      	movs	r3, #0
 800c890:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800c894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c898:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c89c:	2200      	movs	r2, #0
 800c89e:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a74      	ldr	r2, [pc, #464]	; (800ca80 <_fx_file_create+0x2d0>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d001      	beq.n	800c8b6 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c8b2:	2311      	movs	r3, #17
 800c8b4:	e0de      	b.n	800ca74 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a6f      	ldr	r2, [pc, #444]	; (800ca80 <_fx_file_create+0x2d0>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d001      	beq.n	800c8cc <_fx_file_create+0x11c>
 800c8c8:	2311      	movs	r3, #17
 800c8ca:	e0d3      	b.n	800ca74 <_fx_file_create+0x2c4>
 800c8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c8da:	f04f 31ff 	mov.w	r1, #4294967295
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f005 fe72 	bl	80125c8 <_tx_mutex_get>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <_fx_file_create+0x13e>
 800c8ea:	2311      	movs	r3, #17
 800c8ec:	e0c2      	b.n	800ca74 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800c8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c90e:	4618      	mov	r0, r3
 800c910:	f006 f8d2 	bl	8012ab8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800c914:	2323      	movs	r3, #35	; 0x23
 800c916:	e0ad      	b.n	800ca74 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800c918:	f107 0408 	add.w	r4, r7, #8
 800c91c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c924:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800c928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800c930:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	4623      	mov	r3, r4
 800c938:	6809      	ldr	r1, [r1, #0]
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	f7ff f95a 	bl	800bbf4 <_fx_directory_search>
 800c940:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800c944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10b      	bne.n	800c964 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c95a:	4618      	mov	r0, r3
 800c95c:	f006 f8ac 	bl	8012ab8 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800c960:	230b      	movs	r3, #11
 800c962:	e087      	b.n	800ca74 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800c964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c968:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff f8df 	bl	800bb30 <_fx_directory_name_extract>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c97c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c986:	4618      	mov	r0, r3
 800c988:	f006 f896 	bl	8012ab8 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800c98c:	230d      	movs	r3, #13
 800c98e:	e071      	b.n	800ca74 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800c990:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c994:	f107 0108 	add.w	r1, r7, #8
 800c998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f7fe fc85 	bl	800b2b0 <_fx_directory_free_search>
 800c9a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00c      	beq.n	800c9cc <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f006 f879 	bl	8012ab8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c9c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9ca:	e053      	b.n	800ca74 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800c9cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c9d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff f8ab 	bl	800bb30 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9da:	f3ef 8310 	mrs	r3, PRIMASK
 800c9de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800c9e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800c9e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9ea:	b672      	cpsid	i
    return(int_posture);
 800c9ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800c9f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c9f4:	4b23      	ldr	r3, [pc, #140]	; (800ca84 <_fx_file_create+0x2d4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c9fc:	4b22      	ldr	r3, [pc, #136]	; (800ca88 <_fx_file_create+0x2d8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca10:	f383 8810 	msr	PRIMASK, r3
}
 800ca14:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800ca16:	2320      	movs	r3, #32
 800ca18:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800ca1c:	f04f 0200 	mov.w	r2, #0
 800ca20:	f04f 0300 	mov.w	r3, #0
 800ca24:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800ca2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b2e      	cmp	r3, #46	; 0x2e
 800ca34:	d106      	bne.n	800ca44 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800ca36:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800ca3a:	f043 0302 	orr.w	r3, r3, #2
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800ca44:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ca48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca50:	4611      	mov	r1, r2
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	f7fd fdf0 	bl	800a638 <_fx_directory_entry_write>
 800ca58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800ca5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f006 f824 	bl	8012ab8 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800ca70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd90      	pop	{r4, r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	4d454449 	.word	0x4d454449
 800ca84:	24003610 	.word	0x24003610
 800ca88:	2400360c 	.word	0x2400360c

0800ca8c <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800ca8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca90:	b0c2      	sub	sp, #264	; 0x108
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800ca98:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800caa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	4bcf      	ldr	r3, [pc, #828]	; (800cde8 <_fx_file_extended_seek+0x35c>)
 800caaa:	429a      	cmp	r2, r3
 800caac:	d001      	beq.n	800cab2 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800caae:	2307      	movs	r3, #7
 800cab0:	e2b4      	b.n	800d01c <_fx_file_extended_seek+0x590>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800cabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cac0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800cad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	4bc3      	ldr	r3, [pc, #780]	; (800cdec <_fx_file_extended_seek+0x360>)
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d001      	beq.n	800cae8 <_fx_file_extended_seek+0x5c>
 800cae4:	2311      	movs	r3, #17
 800cae6:	e299      	b.n	800d01c <_fx_file_extended_seek+0x590>
 800cae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800caf0:	f04f 31ff 	mov.w	r1, #4294967295
 800caf4:	4618      	mov	r0, r3
 800caf6:	f005 fd67 	bl	80125c8 <_tx_mutex_get>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <_fx_file_extended_seek+0x78>
 800cb00:	2311      	movs	r3, #17
 800cb02:	e28b      	b.n	800d01c <_fx_file_extended_seek+0x590>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800cb04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb08:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800cb0c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cb10:	428b      	cmp	r3, r1
 800cb12:	bf08      	it	eq
 800cb14:	4282      	cmpeq	r2, r0
 800cb16:	d108      	bne.n	800cb2a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb1c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb20:	4618      	mov	r0, r3
 800cb22:	f005 ffc9 	bl	8012ab8 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800cb26:	2300      	movs	r3, #0
 800cb28:	e278      	b.n	800d01c <_fx_file_extended_seek+0x590>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800cb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb36:	fb02 f303 	mul.w	r3, r2, r3
 800cb3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800cb3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d108      	bne.n	800cb58 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cb46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb4a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f005 ffb2 	bl	8012ab8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800cb54:	2302      	movs	r3, #2
 800cb56:	e261      	b.n	800d01c <_fx_file_extended_seek+0x590>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800cb58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb5c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800cb60:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cb64:	4290      	cmp	r0, r2
 800cb66:	eb71 0303 	sbcs.w	r3, r1, r3
 800cb6a:	d205      	bcs.n	800cb78 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800cb6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb70:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cb74:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800cb78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	469a      	mov	sl, r3
 800cb90:	4693      	mov	fp, r2
 800cb92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800cb96:	460b      	mov	r3, r1
 800cb98:	fb0a f203 	mul.w	r2, sl, r3
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	fb03 f30b 	mul.w	r3, r3, fp
 800cba2:	4413      	add	r3, r2
 800cba4:	4602      	mov	r2, r0
 800cba6:	fba2 450a 	umull	r4, r5, r2, sl
 800cbaa:	442b      	add	r3, r5
 800cbac:	461d      	mov	r5, r3
 800cbae:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cbb2:	42a2      	cmp	r2, r4
 800cbb4:	41ab      	sbcs	r3, r5
 800cbb6:	f0c0 8155 	bcc.w	800ce64 <_fx_file_extended_seek+0x3d8>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800cbba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbc6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cbca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbd4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800cbd8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800cbdc:	462b      	mov	r3, r5
 800cbde:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800cbe2:	4652      	mov	r2, sl
 800cbe4:	fb02 f203 	mul.w	r2, r2, r3
 800cbe8:	465b      	mov	r3, fp
 800cbea:	4621      	mov	r1, r4
 800cbec:	fb01 f303 	mul.w	r3, r1, r3
 800cbf0:	4413      	add	r3, r2
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4651      	mov	r1, sl
 800cbf6:	fba2 8901 	umull	r8, r9, r2, r1
 800cbfa:	444b      	add	r3, r9
 800cbfc:	4699      	mov	r9, r3
 800cbfe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cc02:	4590      	cmp	r8, r2
 800cc04:	eb79 0303 	sbcs.w	r3, r9, r3
 800cc08:	d225      	bcs.n	800cc56 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800cc0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc0e:	6a1b      	ldr	r3, [r3, #32]
 800cc10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800cc14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cc1e:	fb02 f303 	mul.w	r3, r2, r3
 800cc22:	2200      	movs	r2, #0
 800cc24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800cc2c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cc30:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800cc34:	4621      	mov	r1, r4
 800cc36:	1a51      	subs	r1, r2, r1
 800cc38:	6139      	str	r1, [r7, #16]
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	eb63 0301 	sbc.w	r3, r3, r1
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cc46:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800cc4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc54:	e0b7      	b.n	800cdc6 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800cc56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc5a:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800cc5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc60:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800cc62:	4413      	add	r3, r2
 800cc64:	3b01      	subs	r3, #1
 800cc66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800cc6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	1e5a      	subs	r2, r3, #1
 800cc72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cc76:	fb02 f303 	mul.w	r3, r2, r3
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc80:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800cc84:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cc88:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	1a51      	subs	r1, r2, r1
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	4629      	mov	r1, r5
 800cc94:	eb63 0301 	sbc.w	r3, r3, r1
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cc9e:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800cca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800ccae:	e08a      	b.n	800cdc6 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800ccb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800ccba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ccc4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ccc8:	f002 fd42 	bl	800f750 <_fx_utility_FAT_entry_read>
 800cccc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800ccd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d009      	beq.n	800ccec <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ccd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccdc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cce0:	4618      	mov	r0, r3
 800cce2:	f005 fee9 	bl	8012ab8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800cce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ccea:	e197      	b.n	800d01c <_fx_file_extended_seek+0x590>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800ccec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800ccf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800ccfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd00:	2200      	movs	r2, #0
 800cd02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd06:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800cd0a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cd0e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800cd12:	4621      	mov	r1, r4
 800cd14:	4291      	cmp	r1, r2
 800cd16:	4629      	mov	r1, r5
 800cd18:	eb71 0303 	sbcs.w	r3, r1, r3
 800cd1c:	d216      	bcs.n	800cd4c <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800cd1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd2c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cd30:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd34:	4621      	mov	r1, r4
 800cd36:	1a51      	subs	r1, r2, r1
 800cd38:	6039      	str	r1, [r7, #0]
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	eb63 0301 	sbc.w	r3, r3, r1
 800cd40:	607b      	str	r3, [r7, #4]
 800cd42:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cd46:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800cd4a:	e03c      	b.n	800cdc6 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800cd4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cd50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd54:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800cd56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd5a:	1e5a      	subs	r2, r3, #1
 800cd5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd60:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800cd62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd66:	2200      	movs	r2, #0
 800cd68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd70:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cd74:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	4283      	cmp	r3, r0
 800cd7e:	bf08      	it	eq
 800cd80:	428a      	cmpeq	r2, r1
 800cd82:	d135      	bne.n	800cdf0 <_fx_file_extended_seek+0x364>
 800cd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d931      	bls.n	800cdf0 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cd8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd94:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d227      	bcs.n	800cdf0 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800cda0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cda8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800cdaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdb6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800cdb8:	f04f 0200 	mov.w	r2, #0
 800cdbc:	f04f 0300 	mov.w	r3, #0
 800cdc0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800cdc4:	e014      	b.n	800cdf0 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cdc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d911      	bls.n	800cdf2 <_fx_file_extended_seek+0x366>
 800cdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cdd6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdde:	4293      	cmp	r3, r2
 800cde0:	f4ff af66 	bcc.w	800ccb0 <_fx_file_extended_seek+0x224>
 800cde4:	e005      	b.n	800cdf2 <_fx_file_extended_seek+0x366>
 800cde6:	bf00      	nop
 800cde8:	46494c45 	.word	0x46494c45
 800cdec:	4d454449 	.word	0x4d454449
                    break;
 800cdf0:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800cdf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdfc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800ce00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ce04:	2200      	movs	r2, #0
 800ce06:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce08:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce0a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800ce0e:	462b      	mov	r3, r5
 800ce10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ce14:	4642      	mov	r2, r8
 800ce16:	fb02 f203 	mul.w	r2, r2, r3
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	fb01 f303 	mul.w	r3, r1, r3
 800ce22:	4413      	add	r3, r2
 800ce24:	4622      	mov	r2, r4
 800ce26:	4641      	mov	r1, r8
 800ce28:	fba2 1201 	umull	r1, r2, r2, r1
 800ce2c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800ce30:	460a      	mov	r2, r1
 800ce32:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800ce36:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ce40:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800ce44:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800ce48:	4621      	mov	r1, r4
 800ce4a:	4291      	cmp	r1, r2
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4199      	sbcs	r1, r3
 800ce50:	d22f      	bcs.n	800ceb2 <_fx_file_extended_seek+0x426>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800ce52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce56:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f005 fe2c 	bl	8012ab8 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800ce60:	2308      	movs	r3, #8
 800ce62:	e0db      	b.n	800d01c <_fx_file_extended_seek+0x590>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800ce64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce68:	2200      	movs	r2, #0
 800ce6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ce6c:	677a      	str	r2, [r7, #116]	; 0x74
 800ce6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ce72:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ce76:	f7f3 fb4f 	bl	8000518 <__aeabi_uldivmod>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce82:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800ce84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce88:	695a      	ldr	r2, [r3, #20]
 800ce8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce90:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800ce92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce96:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800ce98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cea0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cea2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cea6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ceaa:	f7f3 fb35 	bl	8000518 <__aeabi_uldivmod>
 800ceae:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800ceb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	663b      	str	r3, [r7, #96]	; 0x60
 800ceba:	667a      	str	r2, [r7, #100]	; 0x64
 800cebc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cec0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800cec4:	4621      	mov	r1, r4
 800cec6:	4628      	mov	r0, r5
 800cec8:	4283      	cmp	r3, r0
 800ceca:	bf08      	it	eq
 800cecc:	428a      	cmpeq	r2, r1
 800cece:	d151      	bne.n	800cf74 <_fx_file_extended_seek+0x4e8>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ced0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800ced6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceda:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cedc:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800cede:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800cee2:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cee4:	fb01 f303 	mul.w	r3, r1, r3
 800cee8:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800ceea:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ceee:	1e51      	subs	r1, r2, #1
 800cef0:	65b9      	str	r1, [r7, #88]	; 0x58
 800cef2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefe:	2200      	movs	r2, #0
 800cf00:	653b      	str	r3, [r7, #80]	; 0x50
 800cf02:	657a      	str	r2, [r7, #84]	; 0x54
 800cf04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cf0c:	f7f3 fb04 	bl	8000518 <__aeabi_uldivmod>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf14:	4613      	mov	r3, r2
 800cf16:	4423      	add	r3, r4
 800cf18:	2200      	movs	r2, #0
 800cf1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cf1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cf26:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800cf2a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cf2e:	1e51      	subs	r1, r2, #1
 800cf30:	6439      	str	r1, [r7, #64]	; 0x40
 800cf32:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cf36:	647b      	str	r3, [r7, #68]	; 0x44
 800cf38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3e:	2200      	movs	r2, #0
 800cf40:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf42:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cf44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cf4c:	f7f3 fae4 	bl	8000518 <__aeabi_uldivmod>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf58:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800cf5a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800cf5e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cf62:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800cf66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf70:	631a      	str	r2, [r3, #48]	; 0x30
 800cf72:	e04b      	b.n	800d00c <_fx_file_extended_seek+0x580>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800cf7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf80:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800cf82:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800cf86:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf88:	fb01 f303 	mul.w	r3, r1, r3
 800cf8c:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800cf8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf94:	2200      	movs	r2, #0
 800cf96:	633b      	str	r3, [r7, #48]	; 0x30
 800cf98:	637a      	str	r2, [r7, #52]	; 0x34
 800cf9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cf9e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800cfa2:	f7f3 fab9 	bl	8000518 <__aeabi_uldivmod>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfaa:	4613      	mov	r3, r2
 800cfac:	4423      	add	r3, r4
 800cfae:	2200      	movs	r2, #0
 800cfb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cfbc:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800cfc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	623b      	str	r3, [r7, #32]
 800cfca:	627a      	str	r2, [r7, #36]	; 0x24
 800cfcc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cfd0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800cfd4:	f7f3 faa0 	bl	8000518 <__aeabi_uldivmod>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfe0:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800cfe2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800cfe6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cfea:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800cfee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff4:	2200      	movs	r2, #0
 800cff6:	61bb      	str	r3, [r7, #24]
 800cff8:	61fa      	str	r2, [r7, #28]
 800cffa:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800cffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d002:	f7f3 fa89 	bl	8000518 <__aeabi_uldivmod>
 800d006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d00a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800d00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d010:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d014:	4618      	mov	r0, r3
 800d016:	f005 fd4f 	bl	8012ab8 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d022:	46bd      	mov	sp, r7
 800d024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d028 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800d028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d02c:	b0e8      	sub	sp, #416	; 0x1a0
 800d02e:	af02      	add	r7, sp, #8
 800d030:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800d034:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800d038:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800d03c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800d040:	2300      	movs	r3, #0
 800d042:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800d046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	4bd9      	ldr	r3, [pc, #868]	; (800d3b4 <_fx_file_open+0x38c>)
 800d04e:	429a      	cmp	r2, r3
 800d050:	d002      	beq.n	800d058 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800d052:	2311      	movs	r3, #17
 800d054:	f000 bcc4 	b.w	800d9e0 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800d058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d05c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d066:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800d06a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d06e:	2300      	movs	r3, #0
 800d070:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800d074:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d006      	beq.n	800d08c <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800d07e:	4bce      	ldr	r3, [pc, #824]	; (800d3b8 <_fx_file_open+0x390>)
 800d080:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800d084:	2318      	movs	r3, #24
 800d086:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800d08a:	e006      	b.n	800d09a <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800d08c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800d090:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800d094:	2318      	movs	r3, #24
 800d096:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800d09a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d106      	bne.n	800d0b0 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800d0ae:	e002      	b.n	800d0b6 <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d0b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4bbd      	ldr	r3, [pc, #756]	; (800d3b4 <_fx_file_open+0x38c>)
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d002      	beq.n	800d0c8 <_fx_file_open+0xa0>
 800d0c2:	2311      	movs	r3, #17
 800d0c4:	f000 bc8c 	b.w	800d9e0 <_fx_file_open+0x9b8>
 800d0c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d0d0:	f04f 31ff 	mov.w	r1, #4294967295
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f005 fa77 	bl	80125c8 <_tx_mutex_get>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <_fx_file_open+0xbe>
 800d0e0:	2311      	movs	r3, #17
 800d0e2:	f000 bc7d 	b.w	800d9e0 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800d0e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0ea:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800d0ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0f2:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800d0f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800d0fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d106:	2300      	movs	r3, #0
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	2300      	movs	r3, #0
 800d10c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800d110:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800d114:	f7fe fd6e 	bl	800bbf4 <_fx_directory_search>
 800d118:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800d11c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d124:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d128:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d12c:	4618      	mov	r0, r3
 800d12e:	f005 fcc3 	bl	8012ab8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800d132:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d136:	f000 bc53 	b.w	800d9e0 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800d13a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d13e:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800d142:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d146:	4013      	ands	r3, r2
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d009      	beq.n	800d162 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d14e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d152:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d156:	4618      	mov	r0, r3
 800d158:	f005 fcae 	bl	8012ab8 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800d15c:	2305      	movs	r3, #5
 800d15e:	f000 bc3f 	b.w	800d9e0 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800d162:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d166:	2b01      	cmp	r3, #1
 800d168:	d160      	bne.n	800d22c <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800d16a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d16e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d009      	beq.n	800d18a <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800d176:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d17a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d17e:	4618      	mov	r0, r3
 800d180:	f005 fc9a 	bl	8012ab8 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800d184:	2323      	movs	r3, #35	; 0x23
 800d186:	f000 bc2b 	b.w	800d9e0 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800d18a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d18e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800d19a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d19e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f005 fc88 	bl	8012ab8 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800d1a8:	2306      	movs	r3, #6
 800d1aa:	f000 bc19 	b.w	800d9e0 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800d1ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d1b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800d1ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d1c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800d1c6:	e02d      	b.n	800d224 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800d1c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d1cc:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800d1d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1d4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800d1d8:	4299      	cmp	r1, r3
 800d1da:	bf08      	it	eq
 800d1dc:	4290      	cmpeq	r0, r2
 800d1de:	d117      	bne.n	800d210 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800d1e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d1e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800d1e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d10d      	bne.n	800d210 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800d1f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d1f8:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d108      	bne.n	800d210 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d1fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d202:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d206:	4618      	mov	r0, r3
 800d208:	f005 fc56 	bl	8012ab8 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800d20c:	2306      	movs	r3, #6
 800d20e:	e3e7      	b.n	800d9e0 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800d210:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d216:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800d21a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d21e:	3b01      	subs	r3, #1
 800d220:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800d224:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1cd      	bne.n	800d1c8 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800d22c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d234:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800d238:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d23c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800d240:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d24a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d250:	fb02 f303 	mul.w	r3, r2, r3
 800d254:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800d258:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d25c:	2300      	movs	r3, #0
 800d25e:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d260:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d264:	2b00      	cmp	r3, #0
 800d266:	d108      	bne.n	800d27a <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d26c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d270:	4618      	mov	r0, r3
 800d272:	f005 fc21 	bl	8012ab8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d276:	2302      	movs	r3, #2
 800d278:	e3b2      	b.n	800d9e0 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800d280:	2300      	movs	r3, #0
 800d282:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800d286:	2301      	movs	r3, #1
 800d288:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800d28c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d290:	2301      	movs	r3, #1
 800d292:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800d294:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 8103 	beq.w	800d4a4 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800d29e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d2a8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d2ac:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d2b0:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	eb11 0a02 	adds.w	sl, r1, r2
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	eb41 0b03 	adc.w	fp, r1, r3
 800d2c0:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800d2c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d2c8:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800d2cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d2d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d2da:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800d2de:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d2e2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d2e6:	f7f3 f917 	bl	8000518 <__aeabi_uldivmod>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d2fc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d300:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800d304:	4623      	mov	r3, r4
 800d306:	fb03 f201 	mul.w	r2, r3, r1
 800d30a:	462b      	mov	r3, r5
 800d30c:	fb00 f303 	mul.w	r3, r0, r3
 800d310:	4413      	add	r3, r2
 800d312:	4622      	mov	r2, r4
 800d314:	fba0 8902 	umull	r8, r9, r0, r2
 800d318:	444b      	add	r3, r9
 800d31a:	4699      	mov	r9, r3
 800d31c:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800d320:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800d324:	e12f      	b.n	800d586 <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800d326:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d32a:	3301      	adds	r3, #1
 800d32c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800d330:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800d334:	461a      	mov	r2, r3
 800d336:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800d33a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800d33e:	f002 fa07 	bl	800f750 <_fx_utility_FAT_entry_read>
 800d342:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800d346:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d009      	beq.n	800d362 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d34e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d352:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d356:	4618      	mov	r0, r3
 800d358:	f005 fbae 	bl	8012ab8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d35c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d360:	e33e      	b.n	800d9e0 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800d362:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d366:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d006      	beq.n	800d37c <_fx_file_open+0x354>
 800d36e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d374:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d378:	4293      	cmp	r3, r2
 800d37a:	d908      	bls.n	800d38e <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d37c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d380:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d384:	4618      	mov	r0, r3
 800d386:	f005 fb97 	bl	8012ab8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800d38a:	2303      	movs	r3, #3
 800d38c:	e328      	b.n	800d9e0 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800d38e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d398:	429a      	cmp	r2, r3
 800d39a:	d10f      	bne.n	800d3bc <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800d39c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00e      	beq.n	800d3c2 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800d3a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d3b0:	619a      	str	r2, [r3, #24]
 800d3b2:	e006      	b.n	800d3c2 <_fx_file_open+0x39a>
 800d3b4:	4d454449 	.word	0x4d454449
 800d3b8:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800d3c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d3c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800d3ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d3ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800d3d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d3dc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d3e0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d3e4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800d3e8:	4641      	mov	r1, r8
 800d3ea:	4291      	cmp	r1, r2
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	eb71 0303 	sbcs.w	r3, r1, r3
 800d3f2:	d216      	bcs.n	800d422 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800d3f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d3fe:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d402:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d406:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d40a:	4641      	mov	r1, r8
 800d40c:	1a51      	subs	r1, r2, r1
 800d40e:	6039      	str	r1, [r7, #0]
 800d410:	4649      	mov	r1, r9
 800d412:	eb63 0301 	sbc.w	r3, r3, r1
 800d416:	607b      	str	r3, [r7, #4]
 800d418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d41c:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800d420:	e040      	b.n	800d4a4 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800d422:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d426:	6a1b      	ldr	r3, [r3, #32]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d13b      	bne.n	800d4a4 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800d42c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d430:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800d434:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800d436:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d43a:	1e5a      	subs	r2, r3, #1
 800d43c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d440:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800d442:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d446:	2200      	movs	r2, #0
 800d448:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d44c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d450:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d454:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800d458:	4641      	mov	r1, r8
 800d45a:	4648      	mov	r0, r9
 800d45c:	4283      	cmp	r3, r0
 800d45e:	bf08      	it	eq
 800d460:	428a      	cmpeq	r2, r1
 800d462:	d11f      	bne.n	800d4a4 <_fx_file_open+0x47c>
 800d464:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d91b      	bls.n	800d4a4 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800d46c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d470:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d474:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d478:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d211      	bcs.n	800d4a4 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800d480:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d484:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d488:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800d48a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d496:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800d498:	f04f 0200 	mov.w	r2, #0
 800d49c:	f04f 0300 	mov.w	r3, #0
 800d4a0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800d4a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d90a      	bls.n	800d4c2 <_fx_file_open+0x49a>
 800d4ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d4b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d4b4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d4b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	f4ff af32 	bcc.w	800d326 <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d4c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d4ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800d4d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d4de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d4e2:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800d4ec:	4652      	mov	r2, sl
 800d4ee:	fb02 f203 	mul.w	r2, r2, r3
 800d4f2:	465b      	mov	r3, fp
 800d4f4:	4641      	mov	r1, r8
 800d4f6:	fb01 f303 	mul.w	r3, r1, r3
 800d4fa:	4413      	add	r3, r2
 800d4fc:	4642      	mov	r2, r8
 800d4fe:	4651      	mov	r1, sl
 800d500:	fba2 4501 	umull	r4, r5, r2, r1
 800d504:	442b      	add	r3, r5
 800d506:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800d508:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d50c:	2200      	movs	r2, #0
 800d50e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d512:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d516:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d51a:	4603      	mov	r3, r0
 800d51c:	fb03 f205 	mul.w	r2, r3, r5
 800d520:	460b      	mov	r3, r1
 800d522:	fb04 f303 	mul.w	r3, r4, r3
 800d526:	4413      	add	r3, r2
 800d528:	4602      	mov	r2, r0
 800d52a:	fba4 1202 	umull	r1, r2, r4, r2
 800d52e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800d532:	460a      	mov	r2, r1
 800d534:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800d538:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d53c:	4413      	add	r3, r2
 800d53e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d542:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800d546:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800d54a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800d54e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d552:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800d556:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d55a:	4282      	cmp	r2, r0
 800d55c:	418b      	sbcs	r3, r1
 800d55e:	d309      	bcc.n	800d574 <_fx_file_open+0x54c>
 800d560:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00e      	beq.n	800d586 <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800d568:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d56c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d570:	4293      	cmp	r3, r2
 800d572:	d908      	bls.n	800d586 <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800d574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d578:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d57c:	4618      	mov	r0, r3
 800d57e:	f005 fa9b 	bl	8012ab8 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800d582:	2308      	movs	r3, #8
 800d584:	e22c      	b.n	800d9e0 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800d586:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d58a:	4baa      	ldr	r3, [pc, #680]	; (800d834 <_fx_file_open+0x80c>)
 800d58c:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800d58e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d592:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800d596:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d59a:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800d59c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d5a4:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800d5a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d5ae:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800d5b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800d5b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d5c0:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800d5c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d5ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5ce:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800d5d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800d5d8:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800d5da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5de:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800d5e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5e6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800d5ea:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d5ee:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d5f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800d5f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800d600:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d604:	2b00      	cmp	r3, #0
 800d606:	d163      	bne.n	800d6d0 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800d608:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d60c:	695a      	ldr	r2, [r3, #20]
 800d60e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d612:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800d614:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d618:	2200      	movs	r2, #0
 800d61a:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d61c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d622:	2200      	movs	r2, #0
 800d624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d628:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800d62c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	3b02      	subs	r3, #2
 800d634:	2200      	movs	r2, #0
 800d636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d63a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d63e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d644:	2200      	movs	r2, #0
 800d646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d64a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800d64e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800d652:	462b      	mov	r3, r5
 800d654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d658:	4642      	mov	r2, r8
 800d65a:	fb02 f203 	mul.w	r2, r2, r3
 800d65e:	464b      	mov	r3, r9
 800d660:	4621      	mov	r1, r4
 800d662:	fb01 f303 	mul.w	r3, r1, r3
 800d666:	4413      	add	r3, r2
 800d668:	4622      	mov	r2, r4
 800d66a:	4641      	mov	r1, r8
 800d66c:	fba2 1201 	umull	r1, r2, r2, r1
 800d670:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d674:	460a      	mov	r2, r1
 800d676:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800d67a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800d67e:	4413      	add	r3, r2
 800d680:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d684:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800d688:	4623      	mov	r3, r4
 800d68a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d68e:	4602      	mov	r2, r0
 800d690:	189b      	adds	r3, r3, r2
 800d692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d696:	460b      	mov	r3, r1
 800d698:	462a      	mov	r2, r5
 800d69a:	eb42 0303 	adc.w	r3, r2, r3
 800d69e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d6aa:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800d6ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800d6b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800d6be:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d6c2:	f04f 0200 	mov.w	r2, #0
 800d6c6:	f04f 0300 	mov.w	r3, #0
 800d6ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800d6ce:	e140      	b.n	800d952 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800d6d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d6da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d6de:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d6e2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	4283      	cmp	r3, r0
 800d6ec:	bf08      	it	eq
 800d6ee:	428a      	cmpeq	r2, r1
 800d6f0:	f040 80a2 	bne.w	800d838 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d6f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d700:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d704:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d710:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d714:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d718:	460b      	mov	r3, r1
 800d71a:	3b02      	subs	r3, #2
 800d71c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d720:	4613      	mov	r3, r2
 800d722:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d72a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d72e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d730:	2200      	movs	r2, #0
 800d732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d736:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d73a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d73e:	462b      	mov	r3, r5
 800d740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d744:	4642      	mov	r2, r8
 800d746:	fb02 f203 	mul.w	r2, r2, r3
 800d74a:	464b      	mov	r3, r9
 800d74c:	4621      	mov	r1, r4
 800d74e:	fb01 f303 	mul.w	r3, r1, r3
 800d752:	4413      	add	r3, r2
 800d754:	4622      	mov	r2, r4
 800d756:	4641      	mov	r1, r8
 800d758:	fba2 1201 	umull	r1, r2, r2, r1
 800d75c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d760:	460a      	mov	r2, r1
 800d762:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800d766:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d76a:	4413      	add	r3, r2
 800d76c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d770:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d774:	4623      	mov	r3, r4
 800d776:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d77a:	4602      	mov	r2, r0
 800d77c:	189b      	adds	r3, r3, r2
 800d77e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d782:	460b      	mov	r3, r1
 800d784:	462a      	mov	r2, r5
 800d786:	eb42 0303 	adc.w	r3, r2, r3
 800d78a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d78e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d792:	1e51      	subs	r1, r2, #1
 800d794:	67b9      	str	r1, [r7, #120]	; 0x78
 800d796:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d79a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d79c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	673b      	str	r3, [r7, #112]	; 0x70
 800d7a6:	677a      	str	r2, [r7, #116]	; 0x74
 800d7a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d7ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d7b0:	f7f2 feb2 	bl	8000518 <__aeabi_uldivmod>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	66ba      	str	r2, [r7, #104]	; 0x68
 800d7bc:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d7be:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d7c2:	4623      	mov	r3, r4
 800d7c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	189b      	adds	r3, r3, r2
 800d7cc:	663b      	str	r3, [r7, #96]	; 0x60
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	462a      	mov	r2, r5
 800d7d2:	eb42 0303 	adc.w	r3, r2, r3
 800d7d6:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d7d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d7dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d7e0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d7e4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d7e8:	1e51      	subs	r1, r2, #1
 800d7ea:	65b9      	str	r1, [r7, #88]	; 0x58
 800d7ec:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	653b      	str	r3, [r7, #80]	; 0x50
 800d7fc:	657a      	str	r2, [r7, #84]	; 0x54
 800d7fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d802:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d806:	f7f2 fe87 	bl	8000518 <__aeabi_uldivmod>
 800d80a:	4602      	mov	r2, r0
 800d80c:	460b      	mov	r3, r1
 800d80e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d812:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d814:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d818:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d81c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d820:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d824:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d82a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d82e:	631a      	str	r2, [r3, #48]	; 0x30
 800d830:	e08f      	b.n	800d952 <_fx_file_open+0x92a>
 800d832:	bf00      	nop
 800d834:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d83e:	2200      	movs	r2, #0
 800d840:	64bb      	str	r3, [r7, #72]	; 0x48
 800d842:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d844:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	2200      	movs	r2, #0
 800d84c:	643b      	str	r3, [r7, #64]	; 0x40
 800d84e:	647a      	str	r2, [r7, #68]	; 0x44
 800d850:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d854:	460b      	mov	r3, r1
 800d856:	3b02      	subs	r3, #2
 800d858:	63bb      	str	r3, [r7, #56]	; 0x38
 800d85a:	4613      	mov	r3, r2
 800d85c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d860:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d862:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d868:	2200      	movs	r2, #0
 800d86a:	633b      	str	r3, [r7, #48]	; 0x30
 800d86c:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d86e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d872:	462b      	mov	r3, r5
 800d874:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d878:	4642      	mov	r2, r8
 800d87a:	fb02 f203 	mul.w	r2, r2, r3
 800d87e:	464b      	mov	r3, r9
 800d880:	4621      	mov	r1, r4
 800d882:	fb01 f303 	mul.w	r3, r1, r3
 800d886:	4413      	add	r3, r2
 800d888:	4622      	mov	r2, r4
 800d88a:	4641      	mov	r1, r8
 800d88c:	fba2 1201 	umull	r1, r2, r2, r1
 800d890:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d894:	460a      	mov	r2, r1
 800d896:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d89a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d89e:	4413      	add	r3, r2
 800d8a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d8a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d8a8:	4623      	mov	r3, r4
 800d8aa:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	189b      	adds	r3, r3, r2
 800d8b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	eb42 0303 	adc.w	r3, r2, r3
 800d8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d8be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	623b      	str	r3, [r7, #32]
 800d8c8:	627a      	str	r2, [r7, #36]	; 0x24
 800d8ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d8ce:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d8d2:	f7f2 fe21 	bl	8000518 <__aeabi_uldivmod>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	2300      	movs	r3, #0
 800d8dc:	61ba      	str	r2, [r7, #24]
 800d8de:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d8e0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d8e4:	4623      	mov	r3, r4
 800d8e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	189b      	adds	r3, r3, r2
 800d8ee:	613b      	str	r3, [r7, #16]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	eb42 0303 	adc.w	r3, r2, r3
 800d8f8:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d8fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d8fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d902:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d90c:	2200      	movs	r2, #0
 800d90e:	60bb      	str	r3, [r7, #8]
 800d910:	60fa      	str	r2, [r7, #12]
 800d912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d916:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d91a:	f7f2 fdfd 	bl	8000518 <__aeabi_uldivmod>
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d926:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d928:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d92c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d930:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d934:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800d938:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d93c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d940:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d942:	fbb3 f1f2 	udiv	r1, r3, r2
 800d946:	fb01 f202 	mul.w	r2, r1, r2
 800d94a:	1a9a      	subs	r2, r3, r2
 800d94c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d950:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800d952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d956:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d01f      	beq.n	800d99e <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800d95e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d962:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d968:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800d96c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d970:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d974:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d978:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800d97a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d97e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d982:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800d984:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d988:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800d98c:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800d98e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d992:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d996:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d99a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d99c:	e00f      	b.n	800d9be <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800d99e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d9a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d9a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800d9aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d9ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d9b2:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800d9b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d9b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d9bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800d9be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d9c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d9cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800d9d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d9d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f005 f86d 	bl	8012ab8 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d9ec <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800d9ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9f0:	b0aa      	sub	sp, #168	; 0xa8
 800d9f2:	af04      	add	r7, sp, #16
 800d9f4:	66f8      	str	r0, [r7, #108]	; 0x6c
 800d9f6:	66b9      	str	r1, [r7, #104]	; 0x68
 800d9f8:	667a      	str	r2, [r7, #100]	; 0x64
 800d9fa:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	4b9d      	ldr	r3, [pc, #628]	; (800dc78 <_fx_file_read+0x28c>)
 800da02:	429a      	cmp	r2, r3
 800da04:	d001      	beq.n	800da0a <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800da06:	2307      	movs	r3, #7
 800da08:	e28d      	b.n	800df26 <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800da0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da0e:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800da10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da12:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da1a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800da1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da22:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800da24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	4b94      	ldr	r3, [pc, #592]	; (800dc7c <_fx_file_read+0x290>)
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d001      	beq.n	800da32 <_fx_file_read+0x46>
 800da2e:	2311      	movs	r3, #17
 800da30:	e279      	b.n	800df26 <_fx_file_read+0x53a>
 800da32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800da38:	f04f 31ff 	mov.w	r1, #4294967295
 800da3c:	4618      	mov	r0, r3
 800da3e:	f004 fdc3 	bl	80125c8 <_tx_mutex_get>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <_fx_file_read+0x60>
 800da48:	2311      	movs	r3, #17
 800da4a:	e26c      	b.n	800df26 <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800da4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da4e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800da52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da54:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800da58:	4290      	cmp	r0, r2
 800da5a:	eb71 0303 	sbcs.w	r3, r1, r3
 800da5e:	d30a      	bcc.n	800da76 <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800da60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800da66:	4618      	mov	r0, r3
 800da68:	f005 f826 	bl	8012ab8 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800da6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da6e:	2200      	movs	r2, #0
 800da70:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800da72:	2309      	movs	r3, #9
 800da74:	e257      	b.n	800df26 <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800da76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800da7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da7e:	2200      	movs	r2, #0
 800da80:	4698      	mov	r8, r3
 800da82:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800da84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da86:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800da8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800da90:	1a84      	subs	r4, r0, r2
 800da92:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800da96:	4544      	cmp	r4, r8
 800da98:	eb75 0309 	sbcs.w	r3, r5, r9
 800da9c:	d209      	bcs.n	800dab2 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800da9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800daa4:	4611      	mov	r1, r2
 800daa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800daac:	4613      	mov	r3, r2
 800daae:	1acb      	subs	r3, r1, r3
 800dab0:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800dab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800dab8:	e20a      	b.n	800ded0 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800daba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d105      	bne.n	800dace <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800dac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800dac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daca:	4293      	cmp	r3, r2
 800dacc:	d24d      	bcs.n	800db6a <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800dace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dad6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800dad8:	2304      	movs	r3, #4
 800dada:	9302      	str	r3, [sp, #8]
 800dadc:	2301      	movs	r3, #1
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	9200      	str	r2, [sp, #0]
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dae8:	f003 fa40 	bl	8010f6c <_fx_utility_logical_sector_read>
 800daec:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800daee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d007      	beq.n	800db04 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800daf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800daf6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dafa:	4618      	mov	r0, r3
 800dafc:	f004 ffdc 	bl	8012ab8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800db00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db02:	e210      	b.n	800df26 <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800db04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800db08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800db12:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800db16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d903      	bls.n	800db26 <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800db1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800db26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db28:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800db2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800db2e:	4413      	add	r3, r2
 800db30:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800db34:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800db38:	4618      	mov	r0, r3
 800db3a:	f003 fe13 	bl	8011764 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800db3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db46:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800db48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db4a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800db4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800db5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db62:	4413      	add	r3, r2
 800db64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db68:	e108      	b.n	800dd7c <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800db6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db72:	fbb3 f3f2 	udiv	r3, r3, r2
 800db76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800db7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db86:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800db88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800db8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db96:	e033      	b.n	800dc00 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800db98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800db9c:	461a      	mov	r2, r3
 800db9e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dba2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dba4:	f001 fdd4 	bl	800f750 <_fx_utility_FAT_entry_read>
 800dba8:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dbaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <_fx_file_read+0x1da>
 800dbb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d907      	bls.n	800dbc6 <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800dbb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dbbc:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800dbc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d20c      	bcs.n	800dbe0 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800dbc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbc8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f004 ff73 	bl	8012ab8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800dbd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <_fx_file_read+0x1f0>
                        {
                            return(status);
 800dbd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbda:	e1a4      	b.n	800df26 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800dbdc:	2308      	movs	r3, #8
 800dbde:	e1a2      	b.n	800df26 <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800dbe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dbe4:	1c5a      	adds	r2, r3, #1
 800dbe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d110      	bne.n	800dc0e <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800dbec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800dbf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbfa:	4413      	add	r3, r2
 800dbfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc00:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dc04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d3c5      	bcc.n	800db98 <_fx_file_read+0x1ac>
 800dc0c:	e000      	b.n	800dc10 <_fx_file_read+0x224>
                        break;
 800dc0e:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800dc10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dc14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d203      	bcs.n	800dc24 <_fx_file_read+0x238>
            {
                sectors = i;
 800dc1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800dc24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d129      	bne.n	800dc80 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc2e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dc32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc34:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dc36:	2304      	movs	r3, #4
 800dc38:	9302      	str	r3, [sp, #8]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	9200      	str	r2, [sp, #0]
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc46:	f003 f991 	bl	8010f6c <_fx_utility_logical_sector_read>
 800dc4a:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800dc4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d007      	beq.n	800dc62 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dc52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc54:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f004 ff2d 	bl	8012ab8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800dc5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc60:	e161      	b.n	800df26 <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800dc62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc64:	6898      	ldr	r0, [r3, #8]
 800dc66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dc70:	f003 fd78 	bl	8011764 <_fx_utility_memory_copy>
 800dc74:	e02f      	b.n	800dcd6 <_fx_file_read+0x2ea>
 800dc76:	bf00      	nop
 800dc78:	46494c45 	.word	0x46494c45
 800dc7c:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800dc80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc82:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800dc86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dc8c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800dc90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc92:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800dc96:	2304      	movs	r3, #4
 800dc98:	9302      	str	r3, [sp, #8]
 800dc9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dcac:	f003 f95e 	bl	8010f6c <_fx_utility_logical_sector_read>
 800dcb0:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800dcb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800dcc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d007      	beq.n	800dcd6 <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dcc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcc8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dccc:	4618      	mov	r0, r3
 800dcce:	f004 fef3 	bl	8012ab8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800dcd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcd4:	e127      	b.n	800df26 <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800dcd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800dcdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dce0:	3b01      	subs	r3, #1
 800dce2:	2200      	movs	r2, #0
 800dce4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dce6:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800dce8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800dcec:	4623      	mov	r3, r4
 800dcee:	18c3      	adds	r3, r0, r3
 800dcf0:	653b      	str	r3, [r7, #80]	; 0x50
 800dcf2:	462b      	mov	r3, r5
 800dcf4:	eb41 0303 	adc.w	r3, r1, r3
 800dcf8:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800dcfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcfc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800dd00:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800dd04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd06:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800dd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd10:	4413      	add	r3, r2
 800dd12:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800dd14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800dd18:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800dd1c:	18ca      	adds	r2, r1, r3
 800dd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd20:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800dd22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd2a:	4413      	add	r3, r2
 800dd2c:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800dd2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd32:	fbb1 f3f2 	udiv	r3, r1, r2
 800dd36:	fb02 f303 	mul.w	r3, r2, r3
 800dd3a:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800dd3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800dd40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800dd44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd46:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800dd48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd4e:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800dd50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd58:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800dd5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd60:	1a9b      	subs	r3, r3, r2
 800dd62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800dd66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd6e:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800dd72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd76:	4413      	add	r3, r2
 800dd78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800dd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800dd80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800dd84:	429a      	cmp	r2, r3
 800dd86:	f0c0 80a3 	bcc.w	800ded0 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800dd8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d11a      	bne.n	800ddc8 <_fx_file_read+0x3dc>
 800dd92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd94:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dd98:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	64b9      	str	r1, [r7, #72]	; 0x48
 800dd9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dda0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800dda4:	4621      	mov	r1, r4
 800dda6:	1851      	adds	r1, r2, r1
 800dda8:	6439      	str	r1, [r7, #64]	; 0x40
 800ddaa:	4629      	mov	r1, r5
 800ddac:	414b      	adcs	r3, r1
 800ddae:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800ddb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddb2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800ddb6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800ddba:	4621      	mov	r1, r4
 800ddbc:	4291      	cmp	r1, r2
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	eb71 0303 	sbcs.w	r3, r1, r3
 800ddc4:	f080 808a 	bcs.w	800dedc <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800ddc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddcc:	1c5a      	adds	r2, r3, #1
 800ddce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800ddd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800ddd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d368      	bcc.n	800deb0 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800ddde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dde0:	6a19      	ldr	r1, [r3, #32]
 800dde2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800dde6:	461a      	mov	r2, r3
 800dde8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ddea:	f001 fcb1 	bl	800f750 <_fx_utility_FAT_entry_read>
 800ddee:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800ddf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10a      	bne.n	800de0c <_fx_file_read+0x420>
 800ddf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d907      	bls.n	800de0c <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800ddfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800de02:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800de06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800de08:	429a      	cmp	r2, r3
 800de0a:	d20c      	bcs.n	800de26 <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800de0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de0e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de12:	4618      	mov	r0, r3
 800de14:	f004 fe50 	bl	8012ab8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800de18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <_fx_file_read+0x436>
                        {
                            return(status);
 800de1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de20:	e081      	b.n	800df26 <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800de22:	2308      	movs	r3, #8
 800de24:	e07f      	b.n	800df26 <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800de26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800de28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de2a:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800de2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de30:	1c5a      	adds	r2, r3, #1
 800de32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de34:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800de36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de3a:	2200      	movs	r2, #0
 800de3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800de3e:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800de40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de42:	2200      	movs	r2, #0
 800de44:	633b      	str	r3, [r7, #48]	; 0x30
 800de46:	637a      	str	r2, [r7, #52]	; 0x34
 800de48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800de4c:	460b      	mov	r3, r1
 800de4e:	3b02      	subs	r3, #2
 800de50:	62bb      	str	r3, [r7, #40]	; 0x28
 800de52:	4613      	mov	r3, r2
 800de54:	f143 33ff 	adc.w	r3, r3, #4294967295
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800de5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de5e:	2200      	movs	r2, #0
 800de60:	623b      	str	r3, [r7, #32]
 800de62:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800de64:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800de68:	462b      	mov	r3, r5
 800de6a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800de6e:	4642      	mov	r2, r8
 800de70:	fb02 f203 	mul.w	r2, r2, r3
 800de74:	464b      	mov	r3, r9
 800de76:	4621      	mov	r1, r4
 800de78:	fb01 f303 	mul.w	r3, r1, r3
 800de7c:	4413      	add	r3, r2
 800de7e:	4622      	mov	r2, r4
 800de80:	4641      	mov	r1, r8
 800de82:	fba2 ab01 	umull	sl, fp, r2, r1
 800de86:	445b      	add	r3, fp
 800de88:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800de8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800de8e:	460b      	mov	r3, r1
 800de90:	eb13 030a 	adds.w	r3, r3, sl
 800de94:	61bb      	str	r3, [r7, #24]
 800de96:	4613      	mov	r3, r2
 800de98:	eb43 030b 	adc.w	r3, r3, fp
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dea0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dea4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800dea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800deaa:	2300      	movs	r3, #0
 800deac:	6393      	str	r3, [r2, #56]	; 0x38
 800deae:	e00c      	b.n	800deca <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800deb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deb2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800deb6:	1c51      	adds	r1, r2, #1
 800deb8:	6139      	str	r1, [r7, #16]
 800deba:	f143 0300 	adc.w	r3, r3, #0
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dec6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800deca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800decc:	2300      	movs	r3, #0
 800dece:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800ded0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f47f adf0 	bne.w	800daba <_fx_file_read+0xce>
 800deda:	e000      	b.n	800dede <_fx_file_read+0x4f2>
                break;
 800dedc:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800dede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dee0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dee4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dee6:	2000      	movs	r0, #0
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800def0:	4621      	mov	r1, r4
 800def2:	1851      	adds	r1, r2, r1
 800def4:	6039      	str	r1, [r7, #0]
 800def6:	4629      	mov	r1, r5
 800def8:	eb43 0101 	adc.w	r1, r3, r1
 800defc:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800defe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df00:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df04:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800df08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df0c:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800df0e:	4b08      	ldr	r3, [pc, #32]	; (800df30 <_fx_file_read+0x544>)
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800df18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df1a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800df1e:	4618      	mov	r0, r3
 800df20:	f004 fdca 	bl	8012ab8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3798      	adds	r7, #152	; 0x98
 800df2a:	46bd      	mov	sp, r7
 800df2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df30:	2400360c 	.word	0x2400360c

0800df34 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	2000      	movs	r0, #0
 800df42:	460a      	mov	r2, r1
 800df44:	4603      	mov	r3, r0
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7fe fda0 	bl	800ca8c <_fx_file_extended_seek>
 800df4c:	4603      	mov	r3, r0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a3f      	ldr	r2, [pc, #252]	; (800e070 <_fx_media_abort+0x118>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d001      	beq.n	800df7c <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800df78:	2311      	movs	r3, #17
 800df7a:	e074      	b.n	800e066 <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a3b      	ldr	r2, [pc, #236]	; (800e070 <_fx_media_abort+0x118>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d001      	beq.n	800df8a <_fx_media_abort+0x32>
 800df86:	2311      	movs	r3, #17
 800df88:	e06d      	b.n	800e066 <_fx_media_abort+0x10e>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800df90:	f04f 31ff 	mov.w	r1, #4294967295
 800df94:	4618      	mov	r0, r3
 800df96:	f004 fb17 	bl	80125c8 <_tx_mutex_get>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <_fx_media_abort+0x4c>
 800dfa0:	2311      	movs	r3, #17
 800dfa2:	e060      	b.n	800e066 <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dfaa:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dfb2:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800dfb4:	e008      	b.n	800dfc8 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	4a2e      	ldr	r2, [pc, #184]	; (800e074 <_fx_media_abort+0x11c>)
 800dfba:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfc0:	61bb      	str	r3, [r7, #24]
        open_count--;
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1f3      	bne.n	800dfb6 <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2290      	movs	r2, #144	; 0x90
 800dfda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfe8:	f3ef 8310 	mrs	r3, PRIMASK
 800dfec:	613b      	str	r3, [r7, #16]
    return(posture);
 800dfee:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800dff0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dff2:	b672      	cpsid	i
    return(int_posture);
 800dff4:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800dff6:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800dff8:	4b1f      	ldr	r3, [pc, #124]	; (800e078 <_fx_media_abort+0x120>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d103      	bne.n	800e008 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e000:	4b1e      	ldr	r3, [pc, #120]	; (800e07c <_fx_media_abort+0x124>)
 800e002:	2200      	movs	r2, #0
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	e019      	b.n	800e03c <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e014:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e024:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e028:	4b14      	ldr	r3, [pc, #80]	; (800e07c <_fx_media_abort+0x124>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d104      	bne.n	800e03c <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e038:	4a10      	ldr	r2, [pc, #64]	; (800e07c <_fx_media_abort+0x124>)
 800e03a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e03c:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <_fx_media_abort+0x120>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3b01      	subs	r3, #1
 800e042:	4a0d      	ldr	r2, [pc, #52]	; (800e078 <_fx_media_abort+0x120>)
 800e044:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a0d      	ldr	r2, [pc, #52]	; (800e080 <_fx_media_abort+0x128>)
 800e04a:	601a      	str	r2, [r3, #0]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f383 8810 	msr	PRIMASK, r3
}
 800e056:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e05e:	4618      	mov	r0, r3
 800e060:	f004 fa08 	bl	8012474 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3720      	adds	r7, #32
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	4d454449 	.word	0x4d454449
 800e074:	46494c41 	.word	0x46494c41
 800e078:	24003608 	.word	0x24003608
 800e07c:	24003604 	.word	0x24003604
 800e080:	4d454441 	.word	0x4d454441

0800e084 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800e084:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e088:	b084      	sub	sp, #16
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e094:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	330b      	adds	r3, #11
 800e09a:	4618      	mov	r0, r3
 800e09c:	f001 faf2 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d101      	bne.n	800e0b2 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800e0ae:	2302      	movs	r3, #2
 800e0b0:	e08c      	b.n	800e1cc <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3318      	adds	r3, #24
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f001 fae4 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	331a      	adds	r3, #26
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f001 fadc 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3313      	adds	r3, #19
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f001 fad4 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2200      	movs	r2, #0
 800e0e0:	4698      	mov	r8, r3
 800e0e2:	4691      	mov	r9, r2
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	d10b      	bne.n	800e10c <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3320      	adds	r3, #32
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f001 faeb 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2200      	movs	r2, #0
 800e102:	461c      	mov	r4, r3
 800e104:	4615      	mov	r5, r2
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e112:	4313      	orrs	r3, r2
 800e114:	d101      	bne.n	800e11a <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800e116:	2302      	movs	r3, #2
 800e118:	e058      	b.n	800e1cc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	330e      	adds	r3, #14
 800e11e:	4618      	mov	r0, r3
 800e120:	f001 fab0 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e124:	4602      	mov	r2, r0
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800e132:	2302      	movs	r3, #2
 800e134:	e04a      	b.n	800e1cc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	330d      	adds	r3, #13
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	461a      	mov	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800e14a:	2302      	movs	r3, #2
 800e14c:	e03e      	b.n	800e1cc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	3316      	adds	r3, #22
 800e152:	4618      	mov	r0, r3
 800e154:	f001 fa96 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e158:	4602      	mov	r2, r0
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e162:	2b00      	cmp	r3, #0
 800e164:	d107      	bne.n	800e176 <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	3324      	adds	r3, #36	; 0x24
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 fab2 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800e170:	4602      	mov	r2, r0
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d101      	bne.n	800e182 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800e17e:	2302      	movs	r3, #2
 800e180:	e024      	b.n	800e1cc <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3310      	adds	r3, #16
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	461a      	mov	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800e196:	2301      	movs	r3, #1
 800e198:	e018      	b.n	800e1cc <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	331c      	adds	r3, #28
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f001 fa98 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	3311      	adds	r3, #17
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f001 fa68 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	332c      	adds	r3, #44	; 0x2c
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f001 fa88 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800e1d8 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b092      	sub	sp, #72	; 0x48
 800e1dc:	af04      	add	r7, sp, #16
 800e1de:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4aa6      	ldr	r2, [pc, #664]	; (800e480 <_fx_media_close+0x2a8>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d001      	beq.n	800e1ee <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e1ea:	2311      	movs	r3, #17
 800e1ec:	e1c2      	b.n	800e574 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4aa3      	ldr	r2, [pc, #652]	; (800e480 <_fx_media_close+0x2a8>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d001      	beq.n	800e1fc <_fx_media_close+0x24>
 800e1f8:	2311      	movs	r3, #17
 800e1fa:	e1bb      	b.n	800e574 <_fx_media_close+0x39c>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e202:	f04f 31ff 	mov.w	r1, #4294967295
 800e206:	4618      	mov	r0, r3
 800e208:	f004 f9de 	bl	80125c8 <_tx_mutex_get>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <_fx_media_close+0x3e>
 800e212:	2311      	movs	r3, #17
 800e214:	e1ae      	b.n	800e574 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e21c:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e224:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800e226:	e046      	b.n	800e2b6 <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d139      	bne.n	800e2a4 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e232:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e234:	2b00      	cmp	r3, #0
 800e236:	d035      	beq.n	800e2a4 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e238:	f3ef 8310 	mrs	r3, PRIMASK
 800e23c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e23e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e240:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e242:	b672      	cpsid	i
    return(int_posture);
 800e244:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800e246:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e248:	4b8e      	ldr	r3, [pc, #568]	; (800e484 <_fx_media_close+0x2ac>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e252:	4b8d      	ldr	r3, [pc, #564]	; (800e488 <_fx_media_close+0x2b0>)
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	f383 8810 	msr	PRIMASK, r3
}
 800e266:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e26e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e270:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e276:	3368      	adds	r3, #104	; 0x68
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7fc f9dc 	bl	800a638 <_fx_directory_entry_write>
 800e280:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00a      	beq.n	800e29e <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e28e:	4618      	mov	r0, r3
 800e290:	f004 fc12 	bl	8012ab8 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff fe5f 	bl	800df58 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800e29a:	2390      	movs	r3, #144	; 0x90
 800e29c:	e16a      	b.n	800e574 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a6:	4a79      	ldr	r2, [pc, #484]	; (800e48c <_fx_media_close+0x2b4>)
 800e2a8:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ae:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800e2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800e2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1b5      	bne.n	800e228 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f001 fd64 	bl	800fd8a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f002 f8b2 	bl	801042c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	9102      	str	r1, [sp, #8]
 800e2d2:	e9cd 2300 	strd	r2, r3, [sp]
 800e2d6:	f04f 0201 	mov.w	r2, #1
 800e2da:	f04f 0300 	mov.w	r3, #0
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f002 fc2e 	bl	8010b40 <_fx_utility_logical_sector_flush>
 800e2e4:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00a      	beq.n	800e302 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f004 fbe0 	bl	8012ab8 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7ff fe2d 	bl	800df58 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800e2fe:	2390      	movs	r3, #144	; 0x90
 800e300:	e138      	b.n	800e574 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e306:	2b00      	cmp	r3, #0
 800e308:	f000 80ca 	beq.w	800e4a0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e314:	429a      	cmp	r2, r3
 800e316:	f000 80c3 	beq.w	800e4a0 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800e320:	2b00      	cmp	r3, #0
 800e322:	f040 80bd 	bne.w	800e4a0 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	69d9      	ldr	r1, [r3, #28]
 800e332:	f04f 32ff 	mov.w	r2, #4294967295
 800e336:	f04f 33ff 	mov.w	r3, #4294967295
 800e33a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	69db      	ldr	r3, [r3, #28]
 800e342:	2200      	movs	r2, #0
 800e344:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2290      	movs	r2, #144	; 0x90
 800e352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e35a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2203      	movs	r2, #3
 800e374:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00a      	beq.n	800e3b0 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f004 fb89 	bl	8012ab8 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff fdd6 	bl	800df58 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800e3ac:	2390      	movs	r3, #144	; 0x90
 800e3ae:	e0e1      	b.n	800e574 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3b6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800e3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ba:	f001 f98b 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800e3be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	4a33      	ldr	r2, [pc, #204]	; (800e490 <_fx_media_close+0x2b8>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d16b      	bne.n	800e4a0 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f001 f980 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800e3d4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	4a2e      	ldr	r2, [pc, #184]	; (800e494 <_fx_media_close+0x2bc>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d160      	bne.n	800e4a0 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f001 f98f 	bl	800f70e <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	4610      	mov	r0, r2
 800e400:	f001 f985 	bl	800f70e <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2201      	movs	r2, #1
 800e408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2290      	movs	r2, #144	; 0x90
 800e410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2203      	movs	r2, #3
 800e432:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2201      	movs	r2, #1
 800e43a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e464:	2b00      	cmp	r3, #0
 800e466:	d017      	beq.n	800e498 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e46e:	4618      	mov	r0, r3
 800e470:	f004 fb22 	bl	8012ab8 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff fd6f 	bl	800df58 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800e47a:	2390      	movs	r3, #144	; 0x90
 800e47c:	e07a      	b.n	800e574 <_fx_media_close+0x39c>
 800e47e:	bf00      	nop
 800e480:	4d454449 	.word	0x4d454449
 800e484:	24003610 	.word	0x24003610
 800e488:	2400360c 	.word	0x2400360c
 800e48c:	46494c43 	.word	0x46494c43
 800e490:	41615252 	.word	0x41615252
 800e494:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2290      	movs	r2, #144	; 0x90
 800e4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2290      	movs	r2, #144	; 0x90
 800e4d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e4e2:	f3ef 8310 	mrs	r3, PRIMASK
 800e4e6:	613b      	str	r3, [r7, #16]
    return(posture);
 800e4e8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e4ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e4ec:	b672      	cpsid	i
    return(int_posture);
 800e4ee:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e4f0:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e4f2:	4b22      	ldr	r3, [pc, #136]	; (800e57c <_fx_media_close+0x3a4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d103      	bne.n	800e502 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e4fa:	4b21      	ldr	r3, [pc, #132]	; (800e580 <_fx_media_close+0x3a8>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	e019      	b.n	800e536 <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e50e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e51e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e522:	4b17      	ldr	r3, [pc, #92]	; (800e580 <_fx_media_close+0x3a8>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d104      	bne.n	800e536 <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e532:	4a13      	ldr	r2, [pc, #76]	; (800e580 <_fx_media_close+0x3a8>)
 800e534:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e536:	4b11      	ldr	r3, [pc, #68]	; (800e57c <_fx_media_close+0x3a4>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	4a0f      	ldr	r2, [pc, #60]	; (800e57c <_fx_media_close+0x3a4>)
 800e53e:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a10      	ldr	r2, [pc, #64]	; (800e584 <_fx_media_close+0x3ac>)
 800e544:	601a      	str	r2, [r3, #0]
 800e546:	6a3b      	ldr	r3, [r7, #32]
 800e548:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	f383 8810 	msr	PRIMASK, r3
}
 800e550:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e558:	4618      	mov	r0, r3
 800e55a:	f003 ff8b 	bl	8012474 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e564:	2b00      	cmp	r3, #0
 800e566:	d004      	beq.n	800e572 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3738      	adds	r7, #56	; 0x38
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	24003608 	.word	0x24003608
 800e580:	24003604 	.word	0x24003604
 800e584:	4d454443 	.word	0x4d454443

0800e588 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800e588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e58c:	b09a      	sub	sp, #104	; 0x68
 800e58e:	af04      	add	r7, sp, #16
 800e590:	60f8      	str	r0, [r7, #12]
 800e592:	60b9      	str	r1, [r7, #8]
 800e594:	607a      	str	r2, [r7, #4]
 800e596:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800e598:	4bba      	ldr	r3, [pc, #744]	; (800e884 <_fx_media_open+0x2fc>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	4bba      	ldr	r3, [pc, #744]	; (800e888 <_fx_media_open+0x300>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	4bba      	ldr	r3, [pc, #744]	; (800e88c <_fx_media_open+0x304>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800e5ac:	4bb8      	ldr	r3, [pc, #736]	; (800e890 <_fx_media_open+0x308>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d102      	bne.n	800e5ba <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800e5b4:	2322      	movs	r3, #34	; 0x22
 800e5b6:	f000 bd53 	b.w	800f060 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5cc:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e5d2:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e5da:	461a      	mov	r2, r3
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800e5ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5f0:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2200      	movs	r2, #0
 800e726:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2200      	movs	r2, #0
 800e736:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2290      	movs	r2, #144	; 0x90
 800e7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800e816:	2390      	movs	r3, #144	; 0x90
 800e818:	f000 bc22 	b.w	800f060 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800e822:	1c5a      	adds	r2, r3, #1
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2205      	movs	r2, #5
 800e82e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2290      	movs	r2, #144	; 0x90
 800e836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e83e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2201      	movs	r2, #1
 800e846:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e862:	2b00      	cmp	r3, #0
 800e864:	d016      	beq.n	800e894 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2208      	movs	r2, #8
 800e86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2290      	movs	r2, #144	; 0x90
 800e872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800e880:	2301      	movs	r3, #1
 800e882:	e3ed      	b.n	800f060 <_fx_media_open+0xad8>
 800e884:	2400361c 	.word	0x2400361c
 800e888:	24003620 	.word	0x24003620
 800e88c:	24003624 	.word	0x24003624
 800e890:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f7ff fbf5 	bl	800e084 <_fx_media_boot_info_extract>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00e      	beq.n	800e8be <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2208      	movs	r2, #8
 800e8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2290      	movs	r2, #144	; 0x90
 800e8ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	e3d0      	b.n	800f060 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8c4:	3330      	adds	r3, #48	; 0x30
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f000 fedc 	bl	800f684 <_fx_utility_16_unsigned_read>
 800e8cc:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d20e      	bcs.n	800e8f6 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2208      	movs	r2, #8
 800e8dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2290      	movs	r2, #144	; 0x90
 800e8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800e8f2:	2321      	movs	r3, #33	; 0x21
 800e8f4:	e3b4      	b.n	800f060 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e8fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	695b      	ldr	r3, [r3, #20]
 800e908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e90c:	d903      	bls.n	800e916 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e914:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	695b      	ldr	r3, [r3, #20]
 800e91a:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800e922:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800e924:	e01c      	b.n	800e960 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800e926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e92a:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800e92c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e92e:	f04f 32ff 	mov.w	r2, #4294967295
 800e932:	f04f 33ff 	mov.w	r3, #4294967295
 800e936:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800e93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e93c:	2200      	movs	r2, #0
 800e93e:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800e940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e942:	2200      	movs	r2, #0
 800e944:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800e946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e948:	f103 0218 	add.w	r2, r3, #24
 800e94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e94e:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800e950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e952:	3318      	adds	r3, #24
 800e954:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e95a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e95c:	4413      	add	r3, r2
 800e95e:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800e960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e962:	1e5a      	subs	r2, r3, #1
 800e964:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1dd      	bne.n	800e926 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800e96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e96c:	3b18      	subs	r3, #24
 800e96e:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800e970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e972:	2200      	movs	r2, #0
 800e974:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800e976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e978:	1e5a      	subs	r2, r3, #1
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2200      	movs	r2, #0
 800e98c:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	2b0f      	cmp	r3, #15
 800e99a:	d91a      	bls.n	800e9d2 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	695a      	ldr	r2, [r3, #20]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	695b      	ldr	r3, [r3, #20]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	6959      	ldr	r1, [r3, #20]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d10c      	bne.n	800e9d2 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	089b      	lsrs	r3, r3, #2
 800e9c4:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800e9cc:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800e9d0:	e002      	b.n	800e9d8 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9dc:	e023      	b.n	800ea26 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800e9de:	68f9      	ldr	r1, [r7, #12]
 800e9e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	4413      	add	r3, r2
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	440b      	add	r3, r1
 800e9ec:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800e9f4:	68f9      	ldr	r1, [r7, #12]
 800e9f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	005b      	lsls	r3, r3, #1
 800e9fc:	4413      	add	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	440b      	add	r3, r1
 800ea02:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800ea0a:	68f9      	ldr	r1, [r7, #12]
 800ea0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea0e:	4613      	mov	r3, r2
 800ea10:	005b      	lsls	r3, r3, #1
 800ea12:	4413      	add	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	440b      	add	r3, r1
 800ea18:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800ea20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea22:	3301      	adds	r3, #1
 800ea24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea28:	2b0f      	cmp	r3, #15
 800ea2a:	d9d8      	bls.n	800e9de <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea30:	e009      	b.n	800ea46 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea36:	4413      	add	r3, r2
 800ea38:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800ea40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea42:	3301      	adds	r3, #1
 800ea44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea48:	2b7f      	cmp	r3, #127	; 0x7f
 800ea4a:	d9f2      	bls.n	800ea32 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800ea54:	68f9      	ldr	r1, [r7, #12]
 800ea56:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800ea58:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800ea5c:	441a      	add	r2, r3
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea66:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800ea6c:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800ea6e:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800ea74:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800ea84:	441a      	add	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ea90:	68f9      	ldr	r1, [r7, #12]
 800ea92:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800ea94:	2000      	movs	r0, #0
 800ea96:	460c      	mov	r4, r1
 800ea98:	4605      	mov	r5, r0
 800ea9a:	ebb2 0804 	subs.w	r8, r2, r4
 800ea9e:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	469a      	mov	sl, r3
 800eaaa:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800eaac:	4652      	mov	r2, sl
 800eaae:	465b      	mov	r3, fp
 800eab0:	4640      	mov	r0, r8
 800eab2:	4649      	mov	r1, r9
 800eab4:	f7f1 fd30 	bl	8000518 <__aeabi_uldivmod>
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d819      	bhi.n	800eb00 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2201      	movs	r2, #1
 800ead0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eae4:	461a      	mov	r2, r3
 800eae6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800eaea:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eafa:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800eafe:	e037      	b.n	800eb70 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb04:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d819      	bhi.n	800eb40 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eb24:	461a      	mov	r2, r3
 800eb26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800eb2a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eb34:	461a      	mov	r2, r3
 800eb36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb3a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800eb3e:	e017      	b.n	800eb70 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb50:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eb58:	461a      	mov	r2, r3
 800eb5a:	4b95      	ldr	r3, [pc, #596]	; (800edb0 <_fx_media_open+0x828>)
 800eb5c:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eb66:	461a      	mov	r2, r3
 800eb68:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800eb6c:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d15f      	bne.n	800ec38 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d801      	bhi.n	800eb84 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800eb80:	2302      	movs	r3, #2
 800eb82:	e26d      	b.n	800f060 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8c:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800eb8e:	68f9      	ldr	r1, [r7, #12]
 800eb90:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800eb92:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800eb96:	441a      	add	r2, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba4:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800eba6:	f107 0310 	add.w	r3, r7, #16
 800ebaa:	461a      	mov	r2, r3
 800ebac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f000 fdce 	bl	800f750 <_fx_utility_FAT_entry_read>
 800ebb4:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800ebb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebb8:	3301      	adds	r3, #1
 800ebba:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00e      	beq.n	800ebe0 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2208      	movs	r2, #8
 800ebc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2290      	movs	r2, #144	; 0x90
 800ebce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800ebdc:	2303      	movs	r3, #3
 800ebde:	e23f      	b.n	800f060 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d004      	beq.n	800ebf2 <_fx_media_open+0x66a>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d90e      	bls.n	800ec10 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2290      	movs	r2, #144	; 0x90
 800ebfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800ec0c:	2303      	movs	r3, #3
 800ec0e:	e227      	b.n	800f060 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	4a68      	ldr	r2, [pc, #416]	; (800edb4 <_fx_media_open+0x82c>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d802      	bhi.n	800ec1e <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800ec1c:	e7c3      	b.n	800eba6 <_fx_media_open+0x61e>
                break;
 800ec1e:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec26:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ec2e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ec32:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 808e 	beq.w	800ed6c <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	69d9      	ldr	r1, [r3, #28]
 800ec5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec60:	f04f 33ff 	mov.w	r3, #4294967295
 800ec64:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	69db      	ldr	r3, [r3, #28]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2290      	movs	r2, #144	; 0x90
 800ec7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2201      	movs	r2, #1
 800ec96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2203      	movs	r2, #3
 800ec9e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800eca8:	1c5a      	adds	r2, r3, #1
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d150      	bne.n	800ed66 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecca:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800eccc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecce:	f000 fd01 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800ecd2:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	4a38      	ldr	r2, [pc, #224]	; (800edb8 <_fx_media_open+0x830>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d140      	bne.n	800ed5e <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecde:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 fcf6 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800ece8:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	4a33      	ldr	r2, [pc, #204]	; (800edbc <_fx_media_open+0x834>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d131      	bne.n	800ed56 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f000 fceb 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800ed0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed0e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 fcde 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d80c      	bhi.n	800ed46 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed36:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d804      	bhi.n	800ed46 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d812      	bhi.n	800ed6c <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ed54:	e00a      	b.n	800ed6c <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	669a      	str	r2, [r3, #104]	; 0x68
 800ed5c:	e006      	b.n	800ed6c <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2200      	movs	r2, #0
 800ed62:	669a      	str	r2, [r3, #104]	; 0x68
 800ed64:	e002      	b.n	800ed6c <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d040      	beq.n	800edf6 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800ed74:	2302      	movs	r3, #2
 800ed76:	657b      	str	r3, [r7, #84]	; 0x54
 800ed78:	e036      	b.n	800ede8 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800ed7a:	f107 0310 	add.w	r3, r7, #16
 800ed7e:	461a      	mov	r2, r3
 800ed80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f000 fce4 	bl	800f750 <_fx_utility_FAT_entry_read>
 800ed88:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800ed8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d017      	beq.n	800edc0 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2208      	movs	r2, #8
 800ed94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2290      	movs	r2, #144	; 0x90
 800ed9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800edaa:	2303      	movs	r3, #3
 800edac:	e158      	b.n	800f060 <_fx_media_open+0xad8>
 800edae:	bf00      	nop
 800edb0:	0ffffff0 	.word	0x0ffffff0
 800edb4:	0fffffef 	.word	0x0fffffef
 800edb8:	41615252 	.word	0x41615252
 800edbc:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10d      	bne.n	800ede2 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d103      	bne.n	800ede2 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800ede2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede4:	3301      	adds	r3, #1
 800ede6:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edec:	3302      	adds	r3, #2
 800edee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d3c2      	bcc.n	800ed7a <_fx_media_open+0x7f2>
 800edf4:	e0b4      	b.n	800ef60 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f040 80b0 	bne.w	800ef60 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ee06:	2101      	movs	r1, #1
 800ee08:	9102      	str	r1, [sp, #8]
 800ee0a:	e9cd 2300 	strd	r2, r3, [sp]
 800ee0e:	f04f 0201 	mov.w	r2, #1
 800ee12:	f04f 0300 	mov.w	r3, #0
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f001 fe92 	bl	8010b40 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee20:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800ee26:	2300      	movs	r3, #0
 800ee28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee2a:	e093      	b.n	800ef54 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee32:	4413      	add	r3, r2
 800ee34:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	695b      	ldr	r3, [r3, #20]
 800ee44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d902      	bls.n	800ee50 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2290      	movs	r2, #144	; 0x90
 800ee5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	689a      	ldr	r2, [r3, #8]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00e      	beq.n	800eeb4 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2208      	movs	r2, #8
 800ee9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2290      	movs	r2, #144	; 0x90
 800eea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800eeb0:	2303      	movs	r3, #3
 800eeb2:	e0d5      	b.n	800f060 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eeb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeba:	fb02 f303 	mul.w	r3, r2, r3
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800eec0:	2300      	movs	r3, #0
 800eec2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eec4:	e03d      	b.n	800ef42 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d009      	beq.n	800eee2 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	689a      	ldr	r2, [r3, #8]
 800eed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eed4:	4413      	add	r3, r2
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800eeda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eedc:	3304      	adds	r3, #4
 800eede:	64bb      	str	r3, [r7, #72]	; 0x48
 800eee0:	e011      	b.n	800ef06 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	689a      	ldr	r2, [r3, #8]
 800eee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee8:	4413      	add	r3, r2
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	689a      	ldr	r2, [r3, #8]
 800eef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef4:	3301      	adds	r3, #1
 800eef6:	4413      	add	r3, r2
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800eefc:	430b      	orrs	r3, r1
 800eefe:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800ef00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef02:	3302      	adds	r3, #2
 800ef04:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d10d      	bne.n	800ef28 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef10:	1c5a      	adds	r2, r3, #1
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d103      	bne.n	800ef28 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800ef28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef32:	3302      	adds	r3, #2
 800ef34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d303      	bcc.n	800ef42 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef3e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800ef40:	e003      	b.n	800ef4a <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800ef42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d3bd      	bcc.n	800eec6 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	695b      	ldr	r3, [r3, #20]
 800ef4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef50:	4413      	add	r3, r2
 800ef52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	f4ff af66 	bcc.w	800ee2c <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d103      	bne.n	800ef72 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800efc6:	2200      	movs	r2, #0
 800efc8:	4928      	ldr	r1, [pc, #160]	; (800f06c <_fx_media_open+0xae4>)
 800efca:	4618      	mov	r0, r3
 800efcc:	f003 f9f8 	bl	80123c0 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efd0:	f3ef 8310 	mrs	r3, PRIMASK
 800efd4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800efd6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800efd8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800efda:	b672      	cpsid	i
    return(int_posture);
 800efdc:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800efde:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4a23      	ldr	r2, [pc, #140]	; (800f070 <_fx_media_open+0xae8>)
 800efe4:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800efe6:	4b23      	ldr	r3, [pc, #140]	; (800f074 <_fx_media_open+0xaec>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d017      	beq.n	800f01e <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800efee:	4b21      	ldr	r3, [pc, #132]	; (800f074 <_fx_media_open+0xaec>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800eff6:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800eff8:	4b1e      	ldr	r3, [pc, #120]	; (800f074 <_fx_media_open+0xaec>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800f002:	6a3b      	ldr	r3, [r7, #32]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6a3a      	ldr	r2, [r7, #32]
 800f00e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800f012:	4b18      	ldr	r3, [pc, #96]	; (800f074 <_fx_media_open+0xaec>)
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800f01c:	e00a      	b.n	800f034 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800f01e:	4a15      	ldr	r2, [pc, #84]	; (800f074 <_fx_media_open+0xaec>)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800f034:	4b10      	ldr	r3, [pc, #64]	; (800f078 <_fx_media_open+0xaf0>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3301      	adds	r3, #1
 800f03a:	4a0f      	ldr	r2, [pc, #60]	; (800f078 <_fx_media_open+0xaf0>)
 800f03c:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	4798      	blx	r3
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f383 8810 	msr	PRIMASK, r3
}
 800f05c:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3758      	adds	r7, #88	; 0x58
 800f064:	46bd      	mov	sp, r7
 800f066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f06a:	bf00      	nop
 800f06c:	08014b7c 	.word	0x08014b7c
 800f070:	4d454449 	.word	0x4d454449
 800f074:	24003604 	.word	0x24003604
 800f078:	24003608 	.word	0x24003608

0800f07c <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800f07c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f080:	b090      	sub	sp, #64	; 0x40
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
 800f08a:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800f090:	2300      	movs	r3, #0
 800f092:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800f094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	2be9      	cmp	r3, #233	; 0xe9
 800f09a:	d008      	beq.n	800f0ae <_fx_partition_offset_calculate+0x32>
 800f09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2beb      	cmp	r3, #235	; 0xeb
 800f0a2:	d17d      	bne.n	800f1a0 <_fx_partition_offset_calculate+0x124>
 800f0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a6:	3302      	adds	r3, #2
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	2b90      	cmp	r3, #144	; 0x90
 800f0ac:	d178      	bne.n	800f1a0 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800f0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b0:	3316      	adds	r3, #22
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d118      	bne.n	800f0ea <_fx_partition_offset_calculate+0x6e>
 800f0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ba:	3317      	adds	r3, #23
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d113      	bne.n	800f0ea <_fx_partition_offset_calculate+0x6e>
 800f0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c4:	3324      	adds	r3, #36	; 0x24
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10e      	bne.n	800f0ea <_fx_partition_offset_calculate+0x6e>
 800f0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ce:	3325      	adds	r3, #37	; 0x25
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d109      	bne.n	800f0ea <_fx_partition_offset_calculate+0x6e>
 800f0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d8:	3326      	adds	r3, #38	; 0x26
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d104      	bne.n	800f0ea <_fx_partition_offset_calculate+0x6e>
 800f0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e2:	3327      	adds	r3, #39	; 0x27
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d05a      	beq.n	800f1a0 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800f0ea:	f04f 0200 	mov.w	r2, #0
 800f0ee:	f04f 0300 	mov.w	r3, #0
 800f0f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800f0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0f8:	3313      	adds	r3, #19
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d104      	bne.n	800f10a <_fx_partition_offset_calculate+0x8e>
 800f100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f102:	3314      	adds	r3, #20
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00d      	beq.n	800f126 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800f10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10c:	3314      	adds	r3, #20
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	021b      	lsls	r3, r3, #8
 800f112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f114:	3213      	adds	r2, #19
 800f116:	7812      	ldrb	r2, [r2, #0]
 800f118:	4313      	orrs	r3, r2
 800f11a:	2200      	movs	r2, #0
 800f11c:	4698      	mov	r8, r3
 800f11e:	4691      	mov	r9, r2
 800f120:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800f124:	e02a      	b.n	800f17c <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800f126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f128:	3320      	adds	r3, #32
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d10e      	bne.n	800f14e <_fx_partition_offset_calculate+0xd2>
 800f130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f132:	3321      	adds	r3, #33	; 0x21
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d109      	bne.n	800f14e <_fx_partition_offset_calculate+0xd2>
 800f13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f13c:	3322      	adds	r3, #34	; 0x22
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d104      	bne.n	800f14e <_fx_partition_offset_calculate+0xd2>
 800f144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f146:	3323      	adds	r3, #35	; 0x23
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d016      	beq.n	800f17c <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f150:	3323      	adds	r3, #35	; 0x23
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f158:	3322      	adds	r3, #34	; 0x22
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f15e:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f162:	3321      	adds	r3, #33	; 0x21
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f168:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800f16a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f16c:	3220      	adds	r2, #32
 800f16e:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f170:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f172:	2200      	movs	r2, #0
 800f174:	461c      	mov	r4, r3
 800f176:	4615      	mov	r5, r2
 800f178:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800f17c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f180:	4313      	orrs	r3, r2
 800f182:	d00d      	beq.n	800f1a0 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800f196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800f19c:	2300      	movs	r3, #0
 800f19e:	e032      	b.n	800f206 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800f1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b55      	cmp	r3, #85	; 0x55
 800f1aa:	d105      	bne.n	800f1b8 <_fx_partition_offset_calculate+0x13c>
 800f1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2baa      	cmp	r3, #170	; 0xaa
 800f1b6:	d001      	beq.n	800f1bc <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800f1b8:	2304      	movs	r3, #4
 800f1ba:	e024      	b.n	800f206 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800f1bc:	f107 0110 	add.w	r1, r7, #16
 800f1c0:	f107 0014 	add.w	r0, r7, #20
 800f1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f000 f822 	bl	800f210 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d301      	bcc.n	800f1d8 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800f1d4:	2304      	movs	r3, #4
 800f1d6:	e016      	b.n	800f206 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d007      	beq.n	800f1ee <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	3340      	adds	r3, #64	; 0x40
 800f1e4:	443b      	add	r3, r7
 800f1e6:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	00db      	lsls	r3, r3, #3
 800f1f8:	3340      	adds	r3, #64	; 0x40
 800f1fa:	443b      	add	r3, r7
 800f1fc:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3740      	adds	r7, #64	; 0x40
 800f20a:	46bd      	mov	sp, r7
 800f20c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f210 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800f210:	b480      	push	{r7}
 800f212:	b089      	sub	sp, #36	; 0x24
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800f21e:	2300      	movs	r3, #0
 800f220:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800f222:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800f226:	61fb      	str	r3, [r7, #28]
 800f228:	e06f      	b.n	800f30a <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	3304      	adds	r3, #4
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	4413      	add	r3, r2
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10e      	bne.n	800f256 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	4413      	add	r3, r2
 800f242:	2200      	movs	r2, #0
 800f244:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	4413      	add	r3, r2
 800f250:	2200      	movs	r2, #0
 800f252:	605a      	str	r2, [r3, #4]
 800f254:	e051      	b.n	800f2fa <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	3308      	adds	r3, #8
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	4413      	add	r3, r2
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	3309      	adds	r3, #9
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	4413      	add	r3, r2
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	021b      	lsls	r3, r3, #8
 800f26e:	697a      	ldr	r2, [r7, #20]
 800f270:	4313      	orrs	r3, r2
 800f272:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	330a      	adds	r3, #10
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	4413      	add	r3, r2
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	041b      	lsls	r3, r3, #16
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	4313      	orrs	r3, r2
 800f284:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	330b      	adds	r3, #11
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	4413      	add	r3, r2
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	061b      	lsls	r3, r3, #24
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	4313      	orrs	r3, r2
 800f296:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	00db      	lsls	r3, r3, #3
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	6979      	ldr	r1, [r7, #20]
 800f2a4:	69ba      	ldr	r2, [r7, #24]
 800f2a6:	440a      	add	r2, r1
 800f2a8:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	330c      	adds	r3, #12
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	330d      	adds	r3, #13
 800f2ba:	683a      	ldr	r2, [r7, #0]
 800f2bc:	4413      	add	r3, r2
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	021b      	lsls	r3, r3, #8
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	330e      	adds	r3, #14
 800f2cc:	683a      	ldr	r2, [r7, #0]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	041b      	lsls	r3, r3, #16
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	330f      	adds	r3, #15
 800f2de:	683a      	ldr	r2, [r7, #0]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	061b      	lsls	r3, r3, #24
 800f2e6:	697a      	ldr	r2, [r7, #20]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	00db      	lsls	r3, r3, #3
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	3310      	adds	r3, #16
 800f308:	61fb      	str	r3, [r7, #28]
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800f310:	d98b      	bls.n	800f22a <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3724      	adds	r7, #36	; 0x24
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800f326:	4b27      	ldr	r3, [pc, #156]	; (800f3c4 <_fx_system_initialize+0xa4>)
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800f32c:	4b26      	ldr	r3, [pc, #152]	; (800f3c8 <_fx_system_initialize+0xa8>)
 800f32e:	2200      	movs	r2, #0
 800f330:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800f332:	4b26      	ldr	r3, [pc, #152]	; (800f3cc <_fx_system_initialize+0xac>)
 800f334:	f644 2221 	movw	r2, #18977	; 0x4a21
 800f338:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800f33a:	4b25      	ldr	r3, [pc, #148]	; (800f3d0 <_fx_system_initialize+0xb0>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800f340:	4b24      	ldr	r3, [pc, #144]	; (800f3d4 <_fx_system_initialize+0xb4>)
 800f342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f346:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800f348:	4b23      	ldr	r3, [pc, #140]	; (800f3d8 <_fx_system_initialize+0xb8>)
 800f34a:	2210      	movs	r2, #16
 800f34c:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800f34e:	2301      	movs	r3, #1
 800f350:	9302      	str	r3, [sp, #8]
 800f352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f356:	9301      	str	r3, [sp, #4]
 800f358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	4b1f      	ldr	r3, [pc, #124]	; (800f3dc <_fx_system_initialize+0xbc>)
 800f360:	4a1f      	ldr	r2, [pc, #124]	; (800f3e0 <_fx_system_initialize+0xc0>)
 800f362:	4920      	ldr	r1, [pc, #128]	; (800f3e4 <_fx_system_initialize+0xc4>)
 800f364:	4820      	ldr	r0, [pc, #128]	; (800f3e8 <_fx_system_initialize+0xc8>)
 800f366:	f004 fda3 	bl	8013eb0 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800f36a:	4b20      	ldr	r3, [pc, #128]	; (800f3ec <_fx_system_initialize+0xcc>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f372:	4a1e      	ldr	r2, [pc, #120]	; (800f3ec <_fx_system_initialize+0xcc>)
 800f374:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800f376:	4b1d      	ldr	r3, [pc, #116]	; (800f3ec <_fx_system_initialize+0xcc>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f37e:	4a1b      	ldr	r2, [pc, #108]	; (800f3ec <_fx_system_initialize+0xcc>)
 800f380:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800f382:	4b1b      	ldr	r3, [pc, #108]	; (800f3f0 <_fx_system_initialize+0xd0>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f38a:	4a19      	ldr	r2, [pc, #100]	; (800f3f0 <_fx_system_initialize+0xd0>)
 800f38c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800f38e:	4b18      	ldr	r3, [pc, #96]	; (800f3f0 <_fx_system_initialize+0xd0>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f396:	4a16      	ldr	r2, [pc, #88]	; (800f3f0 <_fx_system_initialize+0xd0>)
 800f398:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800f39a:	4b15      	ldr	r3, [pc, #84]	; (800f3f0 <_fx_system_initialize+0xd0>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f043 0310 	orr.w	r3, r3, #16
 800f3a2:	4a13      	ldr	r2, [pc, #76]	; (800f3f0 <_fx_system_initialize+0xd0>)
 800f3a4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800f3a6:	4b13      	ldr	r3, [pc, #76]	; (800f3f4 <_fx_system_initialize+0xd4>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800f3ae:	4a11      	ldr	r2, [pc, #68]	; (800f3f4 <_fx_system_initialize+0xd4>)
 800f3b0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800f3b2:	4b10      	ldr	r3, [pc, #64]	; (800f3f4 <_fx_system_initialize+0xd4>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800f3ba:	4a0e      	ldr	r2, [pc, #56]	; (800f3f4 <_fx_system_initialize+0xd4>)
 800f3bc:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800f3be:	bf00      	nop
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	24003604 	.word	0x24003604
 800f3c8:	24003608 	.word	0x24003608
 800f3cc:	2400360c 	.word	0x2400360c
 800f3d0:	24003610 	.word	0x24003610
 800f3d4:	24003614 	.word	0x24003614
 800f3d8:	24003618 	.word	0x24003618
 800f3dc:	46585359 	.word	0x46585359
 800f3e0:	0800f3f9 	.word	0x0800f3f9
 800f3e4:	08014b90 	.word	0x08014b90
 800f3e8:	24003628 	.word	0x24003628
 800f3ec:	2400361c 	.word	0x2400361c
 800f3f0:	24003620 	.word	0x24003620
 800f3f4:	24003624 	.word	0x24003624

0800f3f8 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b089      	sub	sp, #36	; 0x24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a9c      	ldr	r2, [pc, #624]	; (800f674 <_fx_system_timer_entry+0x27c>)
 800f404:	4293      	cmp	r3, r2
 800f406:	f040 8130 	bne.w	800f66a <_fx_system_timer_entry+0x272>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800f40a:	4b9b      	ldr	r3, [pc, #620]	; (800f678 <_fx_system_timer_entry+0x280>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f003 031f 	and.w	r3, r3, #31
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800f416:	4b98      	ldr	r3, [pc, #608]	; (800f678 <_fx_system_timer_entry+0x280>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	095b      	lsrs	r3, r3, #5
 800f41c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f420:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800f422:	4b95      	ldr	r3, [pc, #596]	; (800f678 <_fx_system_timer_entry+0x280>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	0adb      	lsrs	r3, r3, #11
 800f428:	f003 031f 	and.w	r3, r3, #31
 800f42c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800f42e:	4b93      	ldr	r3, [pc, #588]	; (800f67c <_fx_system_timer_entry+0x284>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f003 031f 	and.w	r3, r3, #31
 800f436:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800f438:	4b90      	ldr	r3, [pc, #576]	; (800f67c <_fx_system_timer_entry+0x284>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	095b      	lsrs	r3, r3, #5
 800f43e:	f003 030f 	and.w	r3, r3, #15
 800f442:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800f444:	4b8d      	ldr	r3, [pc, #564]	; (800f67c <_fx_system_timer_entry+0x284>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	0a5b      	lsrs	r3, r3, #9
 800f44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f44e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800f452:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	330a      	adds	r3, #10
 800f458:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	2b3b      	cmp	r3, #59	; 0x3b
 800f45e:	f240 80eb 	bls.w	800f638 <_fx_system_timer_entry+0x240>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	4a86      	ldr	r2, [pc, #536]	; (800f680 <_fx_system_timer_entry+0x288>)
 800f466:	fba2 2303 	umull	r2, r3, r2, r3
 800f46a:	095b      	lsrs	r3, r3, #5
 800f46c:	69ba      	ldr	r2, [r7, #24]
 800f46e:	4413      	add	r3, r2
 800f470:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800f472:	69fa      	ldr	r2, [r7, #28]
 800f474:	4b82      	ldr	r3, [pc, #520]	; (800f680 <_fx_system_timer_entry+0x288>)
 800f476:	fba3 1302 	umull	r1, r3, r3, r2
 800f47a:	0959      	lsrs	r1, r3, #5
 800f47c:	460b      	mov	r3, r1
 800f47e:	011b      	lsls	r3, r3, #4
 800f480:	1a5b      	subs	r3, r3, r1
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	2b3b      	cmp	r3, #59	; 0x3b
 800f48c:	f240 80d4 	bls.w	800f638 <_fx_system_timer_entry+0x240>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	4a7b      	ldr	r2, [pc, #492]	; (800f680 <_fx_system_timer_entry+0x288>)
 800f494:	fba2 2303 	umull	r2, r3, r2, r3
 800f498:	095b      	lsrs	r3, r3, #5
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	4413      	add	r3, r2
 800f49e:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800f4a0:	69ba      	ldr	r2, [r7, #24]
 800f4a2:	4b77      	ldr	r3, [pc, #476]	; (800f680 <_fx_system_timer_entry+0x288>)
 800f4a4:	fba3 1302 	umull	r1, r3, r3, r2
 800f4a8:	0959      	lsrs	r1, r3, #5
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	011b      	lsls	r3, r3, #4
 800f4ae:	1a5b      	subs	r3, r3, r1
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	2b17      	cmp	r3, #23
 800f4ba:	f240 80bd 	bls.w	800f638 <_fx_system_timer_entry+0x240>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	617b      	str	r3, [r7, #20]
                    day++;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	2b0b      	cmp	r3, #11
 800f4ce:	f200 80c9 	bhi.w	800f664 <_fx_system_timer_entry+0x26c>
 800f4d2:	a201      	add	r2, pc, #4	; (adr r2, 800f4d8 <_fx_system_timer_entry+0xe0>)
 800f4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d8:	0800f509 	.word	0x0800f509
 800f4dc:	0800f51b 	.word	0x0800f51b
 800f4e0:	0800f549 	.word	0x0800f549
 800f4e4:	0800f55b 	.word	0x0800f55b
 800f4e8:	0800f56d 	.word	0x0800f56d
 800f4ec:	0800f57f 	.word	0x0800f57f
 800f4f0:	0800f591 	.word	0x0800f591
 800f4f4:	0800f5a3 	.word	0x0800f5a3
 800f4f8:	0800f5b5 	.word	0x0800f5b5
 800f4fc:	0800f5c7 	.word	0x0800f5c7
 800f500:	0800f5d9 	.word	0x0800f5d9
 800f504:	0800f5eb 	.word	0x0800f5eb

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	2b1f      	cmp	r3, #31
 800f50c:	d97d      	bls.n	800f60a <_fx_system_timer_entry+0x212>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f50e:	2301      	movs	r3, #1
 800f510:	613b      	str	r3, [r7, #16]
                            month++;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3301      	adds	r3, #1
 800f516:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f518:	e077      	b.n	800f60a <_fx_system_timer_entry+0x212>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	f003 0303 	and.w	r3, r3, #3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d108      	bne.n	800f536 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	2b1d      	cmp	r3, #29
 800f528:	d971      	bls.n	800f60e <_fx_system_timer_entry+0x216>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800f52a:	2301      	movs	r3, #1
 800f52c:	613b      	str	r3, [r7, #16]
                                month++;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3301      	adds	r3, #1
 800f532:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800f534:	e06b      	b.n	800f60e <_fx_system_timer_entry+0x216>
                            if (day > 28)
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	2b1c      	cmp	r3, #28
 800f53a:	d968      	bls.n	800f60e <_fx_system_timer_entry+0x216>
                                day = 1;
 800f53c:	2301      	movs	r3, #1
 800f53e:	613b      	str	r3, [r7, #16]
                                month++;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	3301      	adds	r3, #1
 800f544:	60fb      	str	r3, [r7, #12]
                        break;
 800f546:	e062      	b.n	800f60e <_fx_system_timer_entry+0x216>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	2b1f      	cmp	r3, #31
 800f54c:	d961      	bls.n	800f612 <_fx_system_timer_entry+0x21a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f54e:	2301      	movs	r3, #1
 800f550:	613b      	str	r3, [r7, #16]
                            month++;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	3301      	adds	r3, #1
 800f556:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f558:	e05b      	b.n	800f612 <_fx_system_timer_entry+0x21a>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2b1e      	cmp	r3, #30
 800f55e:	d95a      	bls.n	800f616 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f560:	2301      	movs	r3, #1
 800f562:	613b      	str	r3, [r7, #16]
                            month++;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	3301      	adds	r3, #1
 800f568:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f56a:	e054      	b.n	800f616 <_fx_system_timer_entry+0x21e>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	2b1f      	cmp	r3, #31
 800f570:	d953      	bls.n	800f61a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f572:	2301      	movs	r3, #1
 800f574:	613b      	str	r3, [r7, #16]
                            month++;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3301      	adds	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f57c:	e04d      	b.n	800f61a <_fx_system_timer_entry+0x222>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	2b1e      	cmp	r3, #30
 800f582:	d94c      	bls.n	800f61e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f584:	2301      	movs	r3, #1
 800f586:	613b      	str	r3, [r7, #16]
                            month++;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	3301      	adds	r3, #1
 800f58c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f58e:	e046      	b.n	800f61e <_fx_system_timer_entry+0x226>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	2b1f      	cmp	r3, #31
 800f594:	d945      	bls.n	800f622 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f596:	2301      	movs	r3, #1
 800f598:	613b      	str	r3, [r7, #16]
                            month++;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3301      	adds	r3, #1
 800f59e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f5a0:	e03f      	b.n	800f622 <_fx_system_timer_entry+0x22a>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	2b1f      	cmp	r3, #31
 800f5a6:	d93e      	bls.n	800f626 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	613b      	str	r3, [r7, #16]
                            month++;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f5b2:	e038      	b.n	800f626 <_fx_system_timer_entry+0x22e>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	2b1e      	cmp	r3, #30
 800f5b8:	d937      	bls.n	800f62a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	613b      	str	r3, [r7, #16]
                            month++;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f5c4:	e031      	b.n	800f62a <_fx_system_timer_entry+0x232>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	2b1f      	cmp	r3, #31
 800f5ca:	d930      	bls.n	800f62e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	613b      	str	r3, [r7, #16]
                            month++;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f5d6:	e02a      	b.n	800f62e <_fx_system_timer_entry+0x236>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	2b1e      	cmp	r3, #30
 800f5dc:	d929      	bls.n	800f632 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	613b      	str	r3, [r7, #16]
                            month++;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f5e8:	e023      	b.n	800f632 <_fx_system_timer_entry+0x23a>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	2b1f      	cmp	r3, #31
 800f5ee:	d922      	bls.n	800f636 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	613b      	str	r3, [r7, #16]
                            month = 1;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	f640 023b 	movw	r2, #2107	; 0x83b
 800f604:	4293      	cmp	r3, r2
 800f606:	d82f      	bhi.n	800f668 <_fx_system_timer_entry+0x270>
                            {
                                return;
                            }
                        }
                        break;
 800f608:	e015      	b.n	800f636 <_fx_system_timer_entry+0x23e>
                        break;
 800f60a:	bf00      	nop
 800f60c:	e014      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f60e:	bf00      	nop
 800f610:	e012      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f612:	bf00      	nop
 800f614:	e010      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f616:	bf00      	nop
 800f618:	e00e      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f61a:	bf00      	nop
 800f61c:	e00c      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f61e:	bf00      	nop
 800f620:	e00a      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f622:	bf00      	nop
 800f624:	e008      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f626:	bf00      	nop
 800f628:	e006      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f62a:	bf00      	nop
 800f62c:	e004      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f62e:	bf00      	nop
 800f630:	e002      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f632:	bf00      	nop
 800f634:	e000      	b.n	800f638 <_fx_system_timer_entry+0x240>
                        break;
 800f636:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800f63e:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f644:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f64a:	4a0c      	ldr	r2, [pc, #48]	; (800f67c <_fx_system_timer_entry+0x284>)
 800f64c:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f656:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	085b      	lsrs	r3, r3, #1
 800f65c:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f65e:	4a06      	ldr	r2, [pc, #24]	; (800f678 <_fx_system_timer_entry+0x280>)
 800f660:	6013      	str	r3, [r2, #0]
 800f662:	e002      	b.n	800f66a <_fx_system_timer_entry+0x272>
                        return;             /* Skip updating date/time!  */
 800f664:	bf00      	nop
 800f666:	e000      	b.n	800f66a <_fx_system_timer_entry+0x272>
                                return;
 800f668:	bf00      	nop
    }
}
 800f66a:	3724      	adds	r7, #36	; 0x24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	46585359 	.word	0x46585359
 800f678:	24003610 	.word	0x24003610
 800f67c:	2400360c 	.word	0x2400360c
 800f680:	88888889 	.word	0x88888889

0800f684 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3301      	adds	r3, #1
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800f698:	4313      	orrs	r3, r2
 800f69a:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800f69c:	68fb      	ldr	r3, [r7, #12]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	b083      	sub	sp, #12
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	b2da      	uxtb	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	0a1a      	lsrs	r2, r3, #8
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	b2d2      	uxtb	r2, r2
 800f6c6:	701a      	strb	r2, [r3, #0]
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3303      	adds	r3, #3
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3302      	adds	r3, #2
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f6ec:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800f6f6:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800f700:	68fb      	ldr	r3, [r7, #12]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3714      	adds	r7, #20
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800f70e:	b480      	push	{r7}
 800f710:	b083      	sub	sp, #12
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	b2da      	uxtb	r2, r3
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	0a1a      	lsrs	r2, r3, #8
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	3301      	adds	r3, #1
 800f728:	b2d2      	uxtb	r2, r2
 800f72a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	0c1a      	lsrs	r2, r3, #16
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	3302      	adds	r3, #2
 800f734:	b2d2      	uxtb	r2, r2
 800f736:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	0e1a      	lsrs	r2, r3, #24
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3303      	adds	r3, #3
 800f740:	b2d2      	uxtb	r2, r2
 800f742:	701a      	strb	r2, [r3, #0]
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800f750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f754:	b098      	sub	sp, #96	; 0x60
 800f756:	af04      	add	r7, sp, #16
 800f758:	61f8      	str	r0, [r7, #28]
 800f75a:	61b9      	str	r1, [r7, #24]
 800f75c:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f764:	1c5a      	adds	r2, r3, #1
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f772:	1c5a      	adds	r2, r3, #1
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	f003 0303 	and.w	r3, r3, #3
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800f784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f786:	4613      	mov	r3, r2
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	4413      	add	r3, r2
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f792:	69fa      	ldr	r2, [r7, #28]
 800f794:	4413      	add	r3, r2
 800f796:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800f798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	69ba      	ldr	r2, [r7, #24]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d105      	bne.n	800f7ae <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800f7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	e1f4      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800f7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b0:	330c      	adds	r3, #12
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	69ba      	ldr	r2, [r7, #24]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d11d      	bne.n	800f7f6 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800f7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7bc:	330c      	adds	r3, #12
 800f7be:	685a      	ldr	r2, [r3, #4]
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f7c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800f7cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800f7d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d4:	4614      	mov	r4, r2
 800f7d6:	330c      	adds	r3, #12
 800f7d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e2:	330c      	adds	r3, #12
 800f7e4:	461c      	mov	r4, r3
 800f7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	e1d0      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800f7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f8:	3318      	adds	r3, #24
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	69ba      	ldr	r2, [r7, #24]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d127      	bne.n	800f852 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800f802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f804:	3318      	adds	r3, #24
 800f806:	685a      	ldr	r2, [r3, #4]
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f80e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f812:	ca07      	ldmia	r2, {r0, r1, r2}
 800f814:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800f818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f81c:	4614      	mov	r4, r2
 800f81e:	3318      	adds	r3, #24
 800f820:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f82a:	f103 0218 	add.w	r2, r3, #24
 800f82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f830:	4614      	mov	r4, r2
 800f832:	330c      	adds	r3, #12
 800f834:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f83e:	330c      	adds	r3, #12
 800f840:	461c      	mov	r4, r3
 800f842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f84a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f84e:	2300      	movs	r3, #0
 800f850:	e1a2      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800f852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f854:	3324      	adds	r3, #36	; 0x24
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	69ba      	ldr	r2, [r7, #24]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d131      	bne.n	800f8c2 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800f85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f860:	3324      	adds	r3, #36	; 0x24
 800f862:	685a      	ldr	r2, [r3, #4]
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f86a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f86e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f870:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800f874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f878:	4614      	mov	r4, r2
 800f87a:	3324      	adds	r3, #36	; 0x24
 800f87c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f880:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f886:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f88c:	4614      	mov	r4, r2
 800f88e:	3318      	adds	r3, #24
 800f890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f89a:	f103 0218 	add.w	r2, r3, #24
 800f89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	330c      	adds	r3, #12
 800f8a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ae:	330c      	adds	r3, #12
 800f8b0:	461c      	mov	r4, r3
 800f8b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e16a      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 800f8c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8c4:	1cda      	adds	r2, r3, #3
 800f8c6:	69f9      	ldr	r1, [r7, #28]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	4413      	add	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	440b      	add	r3, r1
 800f8d2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d008      	beq.n	800f8ee <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800f8dc:	69f8      	ldr	r0, [r7, #28]
 800f8de:	f000 fa54 	bl	800fd8a <_fx_utility_FAT_flush>
 800f8e2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 800f8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 800f8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ec:	e154      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f8f4:	1e5a      	subs	r2, r3, #1
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f000 80a7 	beq.w	800fa62 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	005a      	lsls	r2, r3, #1
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	4413      	add	r3, r2
 800f91c:	085b      	lsrs	r3, r3, #1
 800f91e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f926:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f92e:	4413      	add	r3, r2
 800f930:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f934:	2200      	movs	r2, #0
 800f936:	60bb      	str	r3, [r7, #8]
 800f938:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f93e:	2202      	movs	r2, #2
 800f940:	9202      	str	r2, [sp, #8]
 800f942:	2201      	movs	r2, #1
 800f944:	9201      	str	r2, [sp, #4]
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f94c:	69f8      	ldr	r0, [r7, #28]
 800f94e:	f001 fb0d 	bl	8010f6c <_fx_utility_logical_sector_read>
 800f952:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800f954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 800f95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95c:	e11c      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f964:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800f966:	69fa      	ldr	r2, [r7, #28]
 800f968:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f96a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800f96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	689a      	ldr	r2, [r3, #8]
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	4413      	add	r3, r2
 800f97c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	f003 0301 	and.w	r3, r3, #1
 800f984:	2b00      	cmp	r3, #0
 800f986:	d030      	beq.n	800f9ea <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 800f988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	091b      	lsrs	r3, r3, #4
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 800f992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f994:	3301      	adds	r3, #1
 800f996:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f99c:	3b01      	subs	r3, #1
 800f99e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d11b      	bne.n	800f9dc <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800f9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	603b      	str	r3, [r7, #0]
 800f9b0:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	9202      	str	r2, [sp, #8]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	9201      	str	r2, [sp, #4]
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9c4:	69f8      	ldr	r0, [r7, #28]
 800f9c6:	f001 fad1 	bl	8010f6c <_fx_utility_logical_sector_read>
 800f9ca:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d001      	beq.n	800f9d6 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 800f9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d4:	e0e0      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800f9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	011b      	lsls	r3, r3, #4
 800f9e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9e8:	e02f      	b.n	800fa4a <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 800f9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 800f9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d11b      	bne.n	800fa3a <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800fa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa04:	3301      	adds	r3, #1
 800fa06:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	469a      	mov	sl, r3
 800fa0e:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fa14:	2202      	movs	r2, #2
 800fa16:	9202      	str	r2, [sp, #8]
 800fa18:	2201      	movs	r2, #1
 800fa1a:	9201      	str	r2, [sp, #4]
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	4652      	mov	r2, sl
 800fa20:	465b      	mov	r3, fp
 800fa22:	69f8      	ldr	r0, [r7, #28]
 800fa24:	f001 faa2 	bl	8010f6c <_fx_utility_logical_sector_read>
 800fa28:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d001      	beq.n	800fa34 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 800fa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa32:	e0b1      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 800fa3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	021b      	lsls	r3, r3, #8
 800fa40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800fa44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa46:	4313      	orrs	r3, r2
 800fa48:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 800fa4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa4c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800fa50:	d303      	bcc.n	800fa5a <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 800fa52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa54:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800fa58:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	e078      	b.n	800fb54 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d139      	bne.n	800fade <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa76:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fa7e:	4413      	add	r3, r2
 800fa80:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa84:	2200      	movs	r2, #0
 800fa86:	4698      	mov	r8, r3
 800fa88:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fa8e:	2202      	movs	r2, #2
 800fa90:	9202      	str	r2, [sp, #8]
 800fa92:	2201      	movs	r2, #1
 800fa94:	9201      	str	r2, [sp, #4]
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	4642      	mov	r2, r8
 800fa9a:	464b      	mov	r3, r9
 800fa9c:	69f8      	ldr	r0, [r7, #28]
 800fa9e:	f001 fa65 	bl	8010f6c <_fx_utility_logical_sector_read>
 800faa2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800faa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 800faaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faac:	e074      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fab4:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800fab6:	69fa      	ldr	r2, [r7, #28]
 800fab8:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800faba:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800fabe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	4413      	add	r3, r2
 800facc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 800face:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fad0:	f7ff fdd8 	bl	800f684 <_fx_utility_16_unsigned_read>
 800fad4:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fada:	601a      	str	r2, [r3, #0]
 800fadc:	e03a      	b.n	800fb54 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faea:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800faf2:	4413      	add	r3, r2
 800faf4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb00:	fb01 f202 	mul.w	r2, r1, r2
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	461c      	mov	r4, r3
 800fb0e:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fb14:	2202      	movs	r2, #2
 800fb16:	9202      	str	r2, [sp, #8]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	9201      	str	r2, [sp, #4]
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	4622      	mov	r2, r4
 800fb20:	462b      	mov	r3, r5
 800fb22:	69f8      	ldr	r0, [r7, #28]
 800fb24:	f001 fa22 	bl	8010f6c <_fx_utility_logical_sector_read>
 800fb28:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800fb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d001      	beq.n	800fb34 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	e031      	b.n	800fb98 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	689a      	ldr	r2, [r3, #8]
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	4413      	add	r3, r2
 800fb3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 800fb3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fb40:	f7ff fdc8 	bl	800f6d4 <_fx_utility_32_unsigned_read>
 800fb44:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fb4c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb52:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800fb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb56:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fb5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb5c:	4614      	mov	r4, r2
 800fb5e:	3318      	adds	r3, #24
 800fb60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800fb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb6a:	f103 0218 	add.w	r2, r3, #24
 800fb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb70:	4614      	mov	r4, r2
 800fb72:	330c      	adds	r3, #12
 800fb74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800fb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7e:	330c      	adds	r3, #12
 800fb80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb82:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb84:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800fb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb94:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3750      	adds	r7, #80	; 0x50
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fba2 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 800fba2:	b590      	push	{r4, r7, lr}
 800fba4:	b089      	sub	sp, #36	; 0x24
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	60f8      	str	r0, [r7, #12]
 800fbaa:	60b9      	str	r1, [r7, #8]
 800fbac:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	f003 0303 	and.w	r3, r3, #3
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800fbd4:	69ba      	ldr	r2, [r7, #24]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4413      	add	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800fbe8:	2300      	movs	r3, #0
 800fbea:	61fb      	str	r3, [r7, #28]
 800fbec:	e051      	b.n	800fc92 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 800fbee:	69fa      	ldr	r2, [r7, #28]
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	4413      	add	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	68ba      	ldr	r2, [r7, #8]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d142      	bne.n	800fc8c <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 800fc06:	69fa      	ldr	r2, [r7, #28]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	4413      	add	r3, r2
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	461a      	mov	r2, r3
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	4413      	add	r3, r2
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 800fc1a:	69fa      	ldr	r2, [r7, #28]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	4413      	add	r3, r2
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	461a      	mov	r2, r3
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	4413      	add	r3, r2
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d027      	beq.n	800fc88 <_fx_utility_FAT_entry_write+0xe6>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d124      	bne.n	800fc88 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2206      	movs	r2, #6
 800fc50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2290      	movs	r2, #144	; 0x90
 800fc58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	3b02      	subs	r3, #2
 800fc64:	68f9      	ldr	r1, [r7, #12]
 800fc66:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800fc68:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800fc6c:	441a      	add	r2, r3
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e07a      	b.n	800fd82 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	61fb      	str	r3, [r7, #28]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	2b03      	cmp	r3, #3
 800fc96:	d9aa      	bls.n	800fbee <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800fc9e:	1e5a      	subs	r2, r3, #1
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	1cda      	adds	r2, r3, #3
 800fcb8:	68f9      	ldr	r1, [r7, #12]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	005b      	lsls	r3, r3, #1
 800fcbe:	4413      	add	r3, r2
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	440b      	add	r3, r1
 800fcc4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d108      	bne.n	800fce0 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f000 f85b 	bl	800fd8a <_fx_utility_FAT_flush>
 800fcd4:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	e050      	b.n	800fd82 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	4614      	mov	r4, r2
 800fcea:	3318      	adds	r3, #24
 800fcec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fcf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f103 0218 	add.w	r2, r3, #24
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	4614      	mov	r4, r2
 800fcfe:	330c      	adds	r3, #12
 800fd00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	330c      	adds	r3, #12
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd10:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	2201      	movs	r2, #1
 800fd18:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d027      	beq.n	800fd80 <_fx_utility_FAT_entry_write+0x1de>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d124      	bne.n	800fd80 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800fd3c:	1c5a      	adds	r2, r3, #1
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2206      	movs	r2, #6
 800fd48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2290      	movs	r2, #144	; 0x90
 800fd50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	3b02      	subs	r3, #2
 800fd5c:	68f9      	ldr	r1, [r7, #12]
 800fd5e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800fd60:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800fd64:	441a      	add	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3724      	adds	r7, #36	; 0x24
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd90      	pop	{r4, r7, pc}

0800fd8a <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 800fd8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd8e:	b09a      	sub	sp, #104	; 0x68
 800fd90:	af04      	add	r7, sp, #16
 800fd92:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800fda2:	2300      	movs	r3, #0
 800fda4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fda6:	e337      	b.n	8010418 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 800fda8:	69f9      	ldr	r1, [r7, #28]
 800fdaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdac:	4613      	mov	r3, r2
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	4413      	add	r3, r2
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	440b      	add	r3, r1
 800fdb6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 8325 	beq.w	801040c <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 800fdc2:	69f9      	ldr	r1, [r7, #28]
 800fdc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	4413      	add	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	440b      	add	r3, r1
 800fdd0:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 816c 	beq.w	80100ba <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800fde2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fde4:	005a      	lsls	r2, r3, #1
 800fde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fde8:	4413      	add	r3, r2
 800fdea:	085b      	lsrs	r3, r3, #1
 800fdec:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdf4:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fdfc:	4413      	add	r3, r2
 800fdfe:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 800fe00:	f04f 33ff 	mov.w	r3, #4294967295
 800fe04:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fe06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe08:	2200      	movs	r2, #0
 800fe0a:	461c      	mov	r4, r3
 800fe0c:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fe12:	2302      	movs	r3, #2
 800fe14:	9302      	str	r3, [sp, #8]
 800fe16:	2301      	movs	r3, #1
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	9200      	str	r2, [sp, #0]
 800fe1c:	4622      	mov	r2, r4
 800fe1e:	462b      	mov	r3, r5
 800fe20:	69f8      	ldr	r0, [r7, #28]
 800fe22:	f001 f8a3 	bl	8010f6c <_fx_utility_logical_sector_read>
 800fe26:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe30:	e2f7      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 800fe32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe38:	d037      	beq.n	800feaa <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 800fe40:	69f9      	ldr	r1, [r7, #28]
 800fe42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe44:	4613      	mov	r3, r2
 800fe46:	005b      	lsls	r3, r3, #1
 800fe48:	4413      	add	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	440b      	add	r3, r1
 800fe4e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800fe56:	69f9      	ldr	r1, [r7, #28]
 800fe58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	005b      	lsls	r3, r3, #1
 800fe5e:	4413      	add	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	440b      	add	r3, r1
 800fe64:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800fe6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe6e:	f003 0301 	and.w	r3, r3, #1
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d005      	beq.n	800fe82 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	091b      	lsrs	r3, r3, #4
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe7e:	7013      	strb	r3, [r2, #0]
 800fe80:	e010      	b.n	800fea4 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe8a:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	0a1b      	lsrs	r3, r3, #8
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	f003 030f 	and.w	r3, r3, #15
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fea2:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 800fea4:	f04f 33ff 	mov.w	r3, #4294967295
 800fea8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800feaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feac:	653b      	str	r3, [r7, #80]	; 0x50
 800feae:	e0a0      	b.n	800fff2 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 800feb0:	69f9      	ldr	r1, [r7, #28]
 800feb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feb4:	4613      	mov	r3, r2
 800feb6:	005b      	lsls	r3, r3, #1
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	440b      	add	r3, r1
 800febe:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f000 808a 	beq.w	800ffde <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800feca:	69f9      	ldr	r1, [r7, #28]
 800fecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fece:	4613      	mov	r3, r2
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	4413      	add	r3, r2
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	440b      	add	r3, r1
 800fed8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800fee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee2:	005a      	lsls	r2, r3, #1
 800fee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee6:	4413      	add	r3, r2
 800fee8:	085b      	lsrs	r3, r3, #1
 800feea:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fef2:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fefa:	4413      	add	r3, r2
 800fefc:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 800fefe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d16d      	bne.n	800ffe2 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800ff06:	69f9      	ldr	r1, [r7, #28]
 800ff08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	4413      	add	r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	440b      	add	r3, r1
 800ff14:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff22:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800ff28:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 800ff2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff36:	3b01      	subs	r3, #1
 800ff38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d101      	bne.n	800ff42 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 800ff3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff40:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	689a      	ldr	r2, [r3, #8]
 800ff46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff48:	4413      	add	r3, r2
 800ff4a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800ff4c:	69f9      	ldr	r1, [r7, #28]
 800ff4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff50:	4613      	mov	r3, r2
 800ff52:	005b      	lsls	r3, r3, #1
 800ff54:	4413      	add	r3, r2
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	440b      	add	r3, r1
 800ff5a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ff5e:	2200      	movs	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800ff62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff64:	f003 0301 	and.w	r3, r3, #1
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d01b      	beq.n	800ffa4 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 800ff6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	f003 030f 	and.w	r3, r3, #15
 800ff74:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 800ff76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	011b      	lsls	r3, r3, #4
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	4313      	orrs	r3, r2
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff88:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800ff8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d029      	beq.n	800ffe6 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	3301      	adds	r3, #1
 800ff96:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	091b      	lsrs	r3, r3, #4
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffa0:	7013      	strb	r3, [r2, #0]
 800ffa2:	e023      	b.n	800ffec <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 800ffa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffaa:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800ffac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d01a      	beq.n	800ffea <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 800ffb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800ffba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	b2da      	uxtb	r2, r3
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	0a1b      	lsrs	r3, r3, #8
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	f003 030f 	and.w	r3, r3, #15
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffda:	7013      	strb	r3, [r2, #0]
 800ffdc:	e006      	b.n	800ffec <_fx_utility_FAT_flush+0x262>
                        continue;
 800ffde:	bf00      	nop
 800ffe0:	e004      	b.n	800ffec <_fx_utility_FAT_flush+0x262>
                        continue;
 800ffe2:	bf00      	nop
 800ffe4:	e002      	b.n	800ffec <_fx_utility_FAT_flush+0x262>
                            continue;
 800ffe6:	bf00      	nop
 800ffe8:	e000      	b.n	800ffec <_fx_utility_FAT_flush+0x262>
                            continue;
 800ffea:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800ffec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffee:	3301      	adds	r3, #1
 800fff0:	653b      	str	r3, [r7, #80]	; 0x50
 800fff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff4:	2b0f      	cmp	r3, #15
 800fff6:	f67f af5b 	bls.w	800feb0 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fffc:	2200      	movs	r2, #0
 800fffe:	4698      	mov	r8, r3
 8010000:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010006:	2302      	movs	r3, #2
 8010008:	9302      	str	r3, [sp, #8]
 801000a:	2301      	movs	r3, #1
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	9200      	str	r2, [sp, #0]
 8010010:	4642      	mov	r2, r8
 8010012:	464b      	mov	r3, r9
 8010014:	69f8      	ldr	r0, [r7, #28]
 8010016:	f001 fa3d 	bl	8011494 <_fx_utility_logical_sector_write>
 801001a:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 8010022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010024:	e1fd      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801002a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801002e:	2b00      	cmp	r3, #0
 8010030:	d105      	bne.n	801003e <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010036:	0a9b      	lsrs	r3, r3, #10
 8010038:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801003c:	e006      	b.n	801004c <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010042:	0a9b      	lsrs	r3, r3, #10
 8010044:	b2db      	uxtb	r3, r3
 8010046:	3301      	adds	r3, #1
 8010048:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 801004c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010050:	2b00      	cmp	r3, #0
 8010052:	d101      	bne.n	8010058 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 8010054:	2302      	movs	r3, #2
 8010056:	e1e4      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801005c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801005e:	1ad2      	subs	r2, r2, r3
 8010060:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010064:	fbb2 f3f3 	udiv	r3, r2, r3
 8010068:	08db      	lsrs	r3, r3, #3
 801006a:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801006c:	69fa      	ldr	r2, [r7, #28]
 801006e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010070:	4413      	add	r3, r2
 8010072:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801007e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010080:	1a9a      	subs	r2, r3, r2
 8010082:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010086:	fbb2 f3f3 	udiv	r3, r2, r3
 801008a:	f003 0207 	and.w	r2, r3, #7
 801008e:	2301      	movs	r3, #1
 8010090:	4093      	lsls	r3, r2
 8010092:	b25b      	sxtb	r3, r3
 8010094:	430b      	orrs	r3, r1
 8010096:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010098:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801009a:	69fa      	ldr	r2, [r7, #28]
 801009c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009e:	4413      	add	r3, r2
 80100a0:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80100a4:	460b      	mov	r3, r1
 80100a6:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 80100a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ae:	f000 81af 	beq.w	8010410 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 80100b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100b4:	3301      	adds	r3, #1
 80100b6:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80100b8:	e6a5      	b.n	800fe06 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f040 80d2 	bne.w	8010268 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 80100c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100d0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80100d8:	4413      	add	r3, r2
 80100da:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80100dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100de:	2200      	movs	r2, #0
 80100e0:	469a      	mov	sl, r3
 80100e2:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80100e8:	2302      	movs	r3, #2
 80100ea:	9302      	str	r3, [sp, #8]
 80100ec:	2301      	movs	r3, #1
 80100ee:	9301      	str	r3, [sp, #4]
 80100f0:	9200      	str	r2, [sp, #0]
 80100f2:	4652      	mov	r2, sl
 80100f4:	465b      	mov	r3, fp
 80100f6:	69f8      	ldr	r0, [r7, #28]
 80100f8:	f000 ff38 	bl	8010f6c <_fx_utility_logical_sector_read>
 80100fc:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	e18c      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801010a:	653b      	str	r3, [r7, #80]	; 0x50
 801010c:	e057      	b.n	80101be <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 801010e:	69f9      	ldr	r1, [r7, #28]
 8010110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010112:	4613      	mov	r3, r2
 8010114:	005b      	lsls	r3, r3, #1
 8010116:	4413      	add	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	440b      	add	r3, r1
 801011c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d045      	beq.n	80101b2 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010126:	69f9      	ldr	r1, [r7, #28]
 8010128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801012a:	4613      	mov	r3, r2
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	4413      	add	r3, r2
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	440b      	add	r3, r1
 8010134:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 801013c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010148:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010150:	4413      	add	r3, r2
 8010152:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010158:	429a      	cmp	r2, r3
 801015a:	d12c      	bne.n	80101b6 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010162:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010168:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801016c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	689a      	ldr	r2, [r3, #8]
 8010176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010178:	4413      	add	r3, r2
 801017a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801017c:	69f9      	ldr	r1, [r7, #28]
 801017e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010180:	4613      	mov	r3, r2
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	4413      	add	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	440b      	add	r3, r1
 801018a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8010192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010196:	f7ff fa88 	bl	800f6aa <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801019a:	69f9      	ldr	r1, [r7, #28]
 801019c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801019e:	4613      	mov	r3, r2
 80101a0:	005b      	lsls	r3, r3, #1
 80101a2:	4413      	add	r3, r2
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	440b      	add	r3, r1
 80101a8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80101ac:	2200      	movs	r2, #0
 80101ae:	601a      	str	r2, [r3, #0]
 80101b0:	e002      	b.n	80101b8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 80101b2:	bf00      	nop
 80101b4:	e000      	b.n	80101b8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 80101b6:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80101b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ba:	3301      	adds	r3, #1
 80101bc:	653b      	str	r3, [r7, #80]	; 0x50
 80101be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c0:	2b0f      	cmp	r3, #15
 80101c2:	d9a4      	bls.n	801010e <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80101c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c6:	2200      	movs	r2, #0
 80101c8:	613b      	str	r3, [r7, #16]
 80101ca:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80101d0:	2302      	movs	r3, #2
 80101d2:	9302      	str	r3, [sp, #8]
 80101d4:	2301      	movs	r3, #1
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	9200      	str	r2, [sp, #0]
 80101da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80101de:	69f8      	ldr	r0, [r7, #28]
 80101e0:	f001 f958 	bl	8011494 <_fx_utility_logical_sector_write>
 80101e4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80101e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 80101ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ee:	e118      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d105      	bne.n	8010208 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010200:	0a9b      	lsrs	r3, r3, #10
 8010202:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010206:	e006      	b.n	8010216 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801020c:	0a9b      	lsrs	r3, r3, #10
 801020e:	b2db      	uxtb	r3, r3
 8010210:	3301      	adds	r3, #1
 8010212:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801021c:	1ad2      	subs	r2, r2, r3
 801021e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010222:	fbb2 f3f3 	udiv	r3, r2, r3
 8010226:	08db      	lsrs	r3, r3, #3
 8010228:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801022a:	69fa      	ldr	r2, [r7, #28]
 801022c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022e:	4413      	add	r3, r2
 8010230:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801023c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801023e:	1a9a      	subs	r2, r3, r2
 8010240:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010244:	fbb2 f3f3 	udiv	r3, r2, r3
 8010248:	f003 0207 	and.w	r2, r3, #7
 801024c:	2301      	movs	r3, #1
 801024e:	4093      	lsls	r3, r2
 8010250:	b25b      	sxtb	r3, r3
 8010252:	430b      	orrs	r3, r1
 8010254:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010256:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010258:	69fa      	ldr	r2, [r7, #28]
 801025a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025c:	4413      	add	r3, r2
 801025e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010262:	460b      	mov	r3, r1
 8010264:	7013      	strb	r3, [r2, #0]
 8010266:	e0d4      	b.n	8010412 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 8010268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010274:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801027c:	4413      	add	r3, r2
 801027e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010282:	2200      	movs	r2, #0
 8010284:	60bb      	str	r3, [r7, #8]
 8010286:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801028c:	2302      	movs	r3, #2
 801028e:	9302      	str	r3, [sp, #8]
 8010290:	2301      	movs	r3, #1
 8010292:	9301      	str	r3, [sp, #4]
 8010294:	9200      	str	r2, [sp, #0]
 8010296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801029a:	69f8      	ldr	r0, [r7, #28]
 801029c:	f000 fe66 	bl	8010f6c <_fx_utility_logical_sector_read>
 80102a0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d001      	beq.n	80102ac <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 80102a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102aa:	e0ba      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80102ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ae:	653b      	str	r3, [r7, #80]	; 0x50
 80102b0:	e057      	b.n	8010362 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 80102b2:	69f9      	ldr	r1, [r7, #28]
 80102b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80102b6:	4613      	mov	r3, r2
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	4413      	add	r3, r2
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	440b      	add	r3, r1
 80102c0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d045      	beq.n	8010356 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 80102ca:	69f9      	ldr	r1, [r7, #28]
 80102cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80102ce:	4613      	mov	r3, r2
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	4413      	add	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	440b      	add	r3, r1
 80102d8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 80102e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102ec:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80102f4:	4413      	add	r3, r2
 80102f6:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 80102f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d12c      	bne.n	801035a <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010306:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801030c:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010316:	69fb      	ldr	r3, [r7, #28]
 8010318:	689a      	ldr	r2, [r3, #8]
 801031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801031c:	4413      	add	r3, r2
 801031e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010320:	69f9      	ldr	r1, [r7, #28]
 8010322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010324:	4613      	mov	r3, r2
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	4413      	add	r3, r2
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	440b      	add	r3, r1
 801032e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8010336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801033a:	f7ff f9e8 	bl	800f70e <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801033e:	69f9      	ldr	r1, [r7, #28]
 8010340:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010342:	4613      	mov	r3, r2
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	4413      	add	r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	440b      	add	r3, r1
 801034c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010350:	2200      	movs	r2, #0
 8010352:	601a      	str	r2, [r3, #0]
 8010354:	e002      	b.n	801035c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010356:	bf00      	nop
 8010358:	e000      	b.n	801035c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 801035a:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801035c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801035e:	3301      	adds	r3, #1
 8010360:	653b      	str	r3, [r7, #80]	; 0x50
 8010362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010364:	2b0f      	cmp	r3, #15
 8010366:	d9a4      	bls.n	80102b2 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801036a:	2200      	movs	r2, #0
 801036c:	603b      	str	r3, [r7, #0]
 801036e:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010374:	2302      	movs	r3, #2
 8010376:	9302      	str	r3, [sp, #8]
 8010378:	2301      	movs	r3, #1
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	9200      	str	r2, [sp, #0]
 801037e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010382:	69f8      	ldr	r0, [r7, #28]
 8010384:	f001 f886 	bl	8011494 <_fx_utility_logical_sector_write>
 8010388:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801038a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	e046      	b.n	8010422 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801039c:	2b00      	cmp	r3, #0
 801039e:	d105      	bne.n	80103ac <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103a4:	0a9b      	lsrs	r3, r3, #10
 80103a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80103aa:	e006      	b.n	80103ba <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103b0:	0a9b      	lsrs	r3, r3, #10
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	3301      	adds	r3, #1
 80103b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103c0:	1ad2      	subs	r2, r2, r3
 80103c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80103c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80103ca:	08db      	lsrs	r3, r3, #3
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80103ce:	69fa      	ldr	r2, [r7, #28]
 80103d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d2:	4413      	add	r3, r2
 80103d4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103e2:	1a9a      	subs	r2, r3, r2
 80103e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80103e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80103ec:	f003 0207 	and.w	r2, r3, #7
 80103f0:	2301      	movs	r3, #1
 80103f2:	4093      	lsls	r3, r2
 80103f4:	b25b      	sxtb	r3, r3
 80103f6:	430b      	orrs	r3, r1
 80103f8:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80103fa:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80103fc:	69fa      	ldr	r2, [r7, #28]
 80103fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010400:	4413      	add	r3, r2
 8010402:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010406:	460b      	mov	r3, r1
 8010408:	7013      	strb	r3, [r2, #0]
 801040a:	e002      	b.n	8010412 <_fx_utility_FAT_flush+0x688>
            continue;
 801040c:	bf00      	nop
 801040e:	e000      	b.n	8010412 <_fx_utility_FAT_flush+0x688>
                    break;
 8010410:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8010412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010414:	3301      	adds	r3, #1
 8010416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801041a:	2b0f      	cmp	r3, #15
 801041c:	f67f acc4 	bls.w	800fda8 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3758      	adds	r7, #88	; 0x58
 8010426:	46bd      	mov	sp, r7
 8010428:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801042c <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 801042c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010430:	b092      	sub	sp, #72	; 0x48
 8010432:	af04      	add	r7, sp, #16
 8010434:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801043a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801043e:	2b00      	cmp	r3, #0
 8010440:	d105      	bne.n	801044e <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010446:	0a9b      	lsrs	r3, r3, #10
 8010448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801044c:	e006      	b.n	801045c <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010452:	0a9b      	lsrs	r3, r3, #10
 8010454:	b2db      	uxtb	r3, r3
 8010456:	3301      	adds	r3, #1
 8010458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801045c:	2300      	movs	r3, #0
 801045e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010460:	e089      	b.n	8010576 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8010462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010464:	08db      	lsrs	r3, r3, #3
 8010466:	69fa      	ldr	r2, [r7, #28]
 8010468:	4413      	add	r3, r2
 801046a:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 801046e:	461a      	mov	r2, r3
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	f003 0307 	and.w	r3, r3, #7
 8010476:	fa42 f303 	asr.w	r3, r2, r3
 801047a:	f003 0301 	and.w	r3, r3, #1
 801047e:	2b00      	cmp	r3, #0
 8010480:	d075      	beq.n	801056e <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8010482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010488:	fb03 f202 	mul.w	r2, r3, r2
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010490:	4413      	add	r3, r2
 8010492:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8010494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801049a:	4413      	add	r3, r2
 801049c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a6:	4413      	add	r3, r2
 80104a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d95a      	bls.n	8010564 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b6:	4413      	add	r3, r2
 80104b8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 80104ba:	e053      	b.n	8010564 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80104bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104be:	2200      	movs	r2, #0
 80104c0:	613b      	str	r3, [r7, #16]
 80104c2:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80104c8:	2302      	movs	r3, #2
 80104ca:	9302      	str	r3, [sp, #8]
 80104cc:	2301      	movs	r3, #1
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	9200      	str	r2, [sp, #0]
 80104d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80104d6:	69f8      	ldr	r0, [r7, #28]
 80104d8:	f000 fd48 	bl	8010f6c <_fx_utility_logical_sector_read>
 80104dc:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80104de:	6a3b      	ldr	r3, [r7, #32]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d001      	beq.n	80104e8 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	e05c      	b.n	80105a2 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104ec:	3b01      	subs	r3, #1
 80104ee:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 80104f0:	e032      	b.n	8010558 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80104f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f4:	2200      	movs	r2, #0
 80104f6:	60bb      	str	r3, [r7, #8]
 80104f8:	60fa      	str	r2, [r7, #12]
 80104fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fc:	2200      	movs	r2, #0
 80104fe:	4698      	mov	r8, r3
 8010500:	4691      	mov	r9, r2
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010506:	2200      	movs	r2, #0
 8010508:	469a      	mov	sl, r3
 801050a:	4693      	mov	fp, r2
 801050c:	fb0a f209 	mul.w	r2, sl, r9
 8010510:	fb08 f30b 	mul.w	r3, r8, fp
 8010514:	4413      	add	r3, r2
 8010516:	fba8 450a 	umull	r4, r5, r8, sl
 801051a:	442b      	add	r3, r5
 801051c:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 801051e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010522:	460b      	mov	r3, r1
 8010524:	191b      	adds	r3, r3, r4
 8010526:	603b      	str	r3, [r7, #0]
 8010528:	4613      	mov	r3, r2
 801052a:	416b      	adcs	r3, r5
 801052c:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801052e:	69fb      	ldr	r3, [r7, #28]
 8010530:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010532:	2302      	movs	r3, #2
 8010534:	9302      	str	r3, [sp, #8]
 8010536:	2301      	movs	r3, #1
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	9200      	str	r2, [sp, #0]
 801053c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010540:	69f8      	ldr	r0, [r7, #28]
 8010542:	f000 ffa7 	bl	8011494 <_fx_utility_logical_sector_write>
 8010546:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010548:	6a3b      	ldr	r3, [r7, #32]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	e027      	b.n	80105a2 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 8010552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010554:	3b01      	subs	r3, #1
 8010556:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8010558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1c9      	bne.n	80104f2 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 801055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010560:	3301      	adds	r3, #1
 8010562:	637b      	str	r3, [r7, #52]	; 0x34
 8010564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	429a      	cmp	r2, r3
 801056a:	d3a7      	bcc.n	80104bc <_fx_utility_FAT_map_flush+0x90>
 801056c:	e000      	b.n	8010570 <_fx_utility_FAT_map_flush+0x144>
            continue;
 801056e:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	3301      	adds	r3, #1
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801057c:	f4ff af71 	bcc.w	8010462 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8010580:	2300      	movs	r3, #0
 8010582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010584:	e009      	b.n	801059a <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058a:	4413      	add	r3, r2
 801058c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010590:	2200      	movs	r2, #0
 8010592:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	3301      	adds	r3, #1
 8010598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	2b7f      	cmp	r3, #127	; 0x7f
 801059e:	d9f2      	bls.n	8010586 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3738      	adds	r7, #56	; 0x38
 80105a6:	46bd      	mov	sp, r7
 80105a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080105ac <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b08f      	sub	sp, #60	; 0x3c
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f000 8275 	beq.w	8010aac <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80105c2:	683a      	ldr	r2, [r7, #0]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80105ca:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80105ce:	4013      	ands	r3, r2
 80105d0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6a1a      	ldr	r2, [r3, #32]
 80105d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d8:	f003 031f 	and.w	r3, r3, #31
 80105dc:	2101      	movs	r1, #1
 80105de:	fa01 f303 	lsl.w	r3, r1, r3
 80105e2:	431a      	orrs	r2, r3
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 80105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80105ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105f0:	4613      	mov	r3, r2
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	4413      	add	r3, r2
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	4413      	add	r3, r2
 8010600:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8010602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010604:	7c5b      	ldrb	r3, [r3, #17]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d015      	beq.n	8010636 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 801060a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010614:	4299      	cmp	r1, r3
 8010616:	bf08      	it	eq
 8010618:	4290      	cmpeq	r0, r2
 801061a:	d10c      	bne.n	8010636 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801061c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010632:	2300      	movs	r3, #0
 8010634:	e27e      	b.n	8010b34 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8010636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010638:	3318      	adds	r3, #24
 801063a:	7c5b      	ldrb	r3, [r3, #17]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d060      	beq.n	8010702 <_fx_utility_logical_sector_cache_entry_read+0x156>
 8010640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010642:	3318      	adds	r3, #24
 8010644:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010648:	e9d7 0100 	ldrd	r0, r1, [r7]
 801064c:	4299      	cmp	r1, r3
 801064e:	bf08      	it	eq
 8010650:	4290      	cmpeq	r0, r2
 8010652:	d156      	bne.n	8010702 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010656:	3318      	adds	r3, #24
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801066c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010674:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010678:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801067c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067e:	7c1b      	ldrb	r3, [r3, #16]
 8010680:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010686:	7c5b      	ldrb	r3, [r3, #17]
 8010688:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068e:	7c9b      	ldrb	r3, [r3, #18]
 8010690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010696:	3318      	adds	r3, #24
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069c:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 801069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a0:	3318      	adds	r3, #24
 80106a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80106a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80106a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80106ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ae:	3318      	adds	r3, #24
 80106b0:	7c1a      	ldrb	r2, [r3, #16]
 80106b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b4:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 80106b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b8:	3318      	adds	r3, #24
 80106ba:	7c5a      	ldrb	r2, [r3, #17]
 80106bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106be:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	3318      	adds	r3, #24
 80106c4:	7c9a      	ldrb	r2, [r3, #18]
 80106c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c8:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80106ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106cc:	3318      	adds	r3, #24
 80106ce:	693a      	ldr	r2, [r7, #16]
 80106d0:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	f103 0118 	add.w	r1, r3, #24
 80106d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80106dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80106e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e2:	3318      	adds	r3, #24
 80106e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80106e8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ec:	3318      	adds	r3, #24
 80106ee:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80106f2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80106f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f6:	3318      	adds	r3, #24
 80106f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80106fc:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80106fe:	2300      	movs	r3, #0
 8010700:	e218      	b.n	8010b34 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8010702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010704:	3330      	adds	r3, #48	; 0x30
 8010706:	7c5b      	ldrb	r3, [r3, #17]
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 8086 	beq.w	801081a <_fx_utility_logical_sector_cache_entry_read+0x26e>
 801070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010710:	3330      	adds	r3, #48	; 0x30
 8010712:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010716:	e9d7 0100 	ldrd	r0, r1, [r7]
 801071a:	4299      	cmp	r1, r3
 801071c:	bf08      	it	eq
 801071e:	4290      	cmpeq	r0, r2
 8010720:	d17b      	bne.n	801081a <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010724:	3330      	adds	r3, #48	; 0x30
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010732:	1c5a      	adds	r2, r3, #1
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801073a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010742:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010746:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074c:	7c1b      	ldrb	r3, [r3, #16]
 801074e:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010754:	7c5b      	ldrb	r3, [r3, #17]
 8010756:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075c:	7c9b      	ldrb	r3, [r3, #18]
 801075e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	3330      	adds	r3, #48	; 0x30
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801076a:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 801076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801076e:	3330      	adds	r3, #48	; 0x30
 8010770:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010776:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077c:	3330      	adds	r3, #48	; 0x30
 801077e:	7c1a      	ldrb	r2, [r3, #16]
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8010784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010786:	3330      	adds	r3, #48	; 0x30
 8010788:	7c5a      	ldrb	r2, [r3, #17]
 801078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078c:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 801078e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010790:	3330      	adds	r3, #48	; 0x30
 8010792:	7c9a      	ldrb	r2, [r3, #18]
 8010794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010796:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079a:	f103 0218 	add.w	r2, r3, #24
 801079e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a0:	3330      	adds	r3, #48	; 0x30
 80107a2:	6812      	ldr	r2, [r2, #0]
 80107a4:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80107a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a8:	3318      	adds	r3, #24
 80107aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107ac:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80107b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80107b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80107b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ba:	f103 0218 	add.w	r2, r3, #24
 80107be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c0:	3330      	adds	r3, #48	; 0x30
 80107c2:	7c12      	ldrb	r2, [r2, #16]
 80107c4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80107c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c8:	f103 0218 	add.w	r2, r3, #24
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	3330      	adds	r3, #48	; 0x30
 80107d0:	7c52      	ldrb	r2, [r2, #17]
 80107d2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80107d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d6:	f103 0218 	add.w	r2, r3, #24
 80107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107dc:	3330      	adds	r3, #48	; 0x30
 80107de:	7c92      	ldrb	r2, [r2, #18]
 80107e0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80107e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e4:	3318      	adds	r3, #24
 80107e6:	693a      	ldr	r2, [r7, #16]
 80107e8:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80107ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ec:	f103 0118 	add.w	r1, r3, #24
 80107f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80107f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107fa:	3318      	adds	r3, #24
 80107fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010800:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010804:	3318      	adds	r3, #24
 8010806:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801080a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080e:	3318      	adds	r3, #24
 8010810:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010814:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010816:	2300      	movs	r3, #0
 8010818:	e18c      	b.n	8010b34 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 801081a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801081c:	3348      	adds	r3, #72	; 0x48
 801081e:	7c5b      	ldrb	r3, [r3, #17]
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 80ac 	beq.w	801097e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8010826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010828:	3348      	adds	r3, #72	; 0x48
 801082a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801082e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010832:	4299      	cmp	r1, r3
 8010834:	bf08      	it	eq
 8010836:	4290      	cmpeq	r0, r2
 8010838:	f040 80a1 	bne.w	801097e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801083c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801083e:	3348      	adds	r3, #72	; 0x48
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801084c:	1c5a      	adds	r2, r3, #1
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010860:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010866:	7c1b      	ldrb	r3, [r3, #16]
 8010868:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801086c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801086e:	7c5b      	ldrb	r3, [r3, #17]
 8010870:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010876:	7c9b      	ldrb	r3, [r3, #18]
 8010878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801087e:	3348      	adds	r3, #72	; 0x48
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8010886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010888:	3348      	adds	r3, #72	; 0x48
 801088a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801088e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010890:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8010894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010896:	3348      	adds	r3, #72	; 0x48
 8010898:	7c1a      	ldrb	r2, [r3, #16]
 801089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801089c:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 801089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a0:	3348      	adds	r3, #72	; 0x48
 80108a2:	7c5a      	ldrb	r2, [r3, #17]
 80108a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a6:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 80108a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108aa:	3348      	adds	r3, #72	; 0x48
 80108ac:	7c9a      	ldrb	r2, [r3, #18]
 80108ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80108b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ba:	3348      	adds	r3, #72	; 0x48
 80108bc:	6812      	ldr	r2, [r2, #0]
 80108be:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80108c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c2:	3330      	adds	r3, #48	; 0x30
 80108c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108c6:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80108ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80108ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80108d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108da:	3348      	adds	r3, #72	; 0x48
 80108dc:	7c12      	ldrb	r2, [r2, #16]
 80108de:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 80108e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e8:	3348      	adds	r3, #72	; 0x48
 80108ea:	7c52      	ldrb	r2, [r2, #17]
 80108ec:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 80108ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f6:	3348      	adds	r3, #72	; 0x48
 80108f8:	7c92      	ldrb	r2, [r2, #18]
 80108fa:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80108fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fe:	f103 0218 	add.w	r2, r3, #24
 8010902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010904:	3330      	adds	r3, #48	; 0x30
 8010906:	6812      	ldr	r2, [r2, #0]
 8010908:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090c:	3318      	adds	r3, #24
 801090e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010910:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010914:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010918:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801091c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801091e:	f103 0218 	add.w	r2, r3, #24
 8010922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010924:	3330      	adds	r3, #48	; 0x30
 8010926:	7c12      	ldrb	r2, [r2, #16]
 8010928:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092c:	f103 0218 	add.w	r2, r3, #24
 8010930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010932:	3330      	adds	r3, #48	; 0x30
 8010934:	7c52      	ldrb	r2, [r2, #17]
 8010936:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093a:	f103 0218 	add.w	r2, r3, #24
 801093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010940:	3330      	adds	r3, #48	; 0x30
 8010942:	7c92      	ldrb	r2, [r2, #18]
 8010944:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010948:	3318      	adds	r3, #24
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801094e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010950:	f103 0118 	add.w	r1, r3, #24
 8010954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010958:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095e:	3318      	adds	r3, #24
 8010960:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010964:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010968:	3318      	adds	r3, #24
 801096a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801096e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010972:	3318      	adds	r3, #24
 8010974:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010978:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801097a:	2300      	movs	r3, #0
 801097c:	e0da      	b.n	8010b34 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801097e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010980:	3348      	adds	r3, #72	; 0x48
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 8010986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010988:	3348      	adds	r3, #72	; 0x48
 801098a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801098e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8010992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010994:	3348      	adds	r3, #72	; 0x48
 8010996:	7c1b      	ldrb	r3, [r3, #16]
 8010998:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 801099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099e:	3348      	adds	r3, #72	; 0x48
 80109a0:	7c5b      	ldrb	r3, [r3, #17]
 80109a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 80109a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a8:	3348      	adds	r3, #72	; 0x48
 80109aa:	7c9b      	ldrb	r3, [r3, #18]
 80109ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80109b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b8:	3348      	adds	r3, #72	; 0x48
 80109ba:	6812      	ldr	r2, [r2, #0]
 80109bc:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80109be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c0:	3330      	adds	r3, #48	; 0x30
 80109c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109c4:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80109c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80109cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80109d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d8:	3348      	adds	r3, #72	; 0x48
 80109da:	7c12      	ldrb	r2, [r2, #16]
 80109dc:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 80109de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e6:	3348      	adds	r3, #72	; 0x48
 80109e8:	7c52      	ldrb	r2, [r2, #17]
 80109ea:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 80109ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f4:	3348      	adds	r3, #72	; 0x48
 80109f6:	7c92      	ldrb	r2, [r2, #18]
 80109f8:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80109fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109fc:	f103 0218 	add.w	r2, r3, #24
 8010a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a02:	3330      	adds	r3, #48	; 0x30
 8010a04:	6812      	ldr	r2, [r2, #0]
 8010a06:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0a:	3318      	adds	r3, #24
 8010a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a0e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010a12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010a16:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a1c:	f103 0218 	add.w	r2, r3, #24
 8010a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a22:	3330      	adds	r3, #48	; 0x30
 8010a24:	7c12      	ldrb	r2, [r2, #16]
 8010a26:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a2a:	f103 0218 	add.w	r2, r3, #24
 8010a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a30:	3330      	adds	r3, #48	; 0x30
 8010a32:	7c52      	ldrb	r2, [r2, #17]
 8010a34:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a38:	f103 0218 	add.w	r2, r3, #24
 8010a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3e:	3330      	adds	r3, #48	; 0x30
 8010a40:	7c92      	ldrb	r2, [r2, #18]
 8010a42:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8010a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a46:	3318      	adds	r3, #24
 8010a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a4a:	6812      	ldr	r2, [r2, #0]
 8010a4c:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8010a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a50:	f103 0118 	add.w	r1, r3, #24
 8010a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010a5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	3318      	adds	r3, #24
 8010a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a64:	7c12      	ldrb	r2, [r2, #16]
 8010a66:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8010a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6a:	3318      	adds	r3, #24
 8010a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a6e:	7c52      	ldrb	r2, [r2, #17]
 8010a70:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8010a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a74:	3318      	adds	r3, #24
 8010a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a78:	7c92      	ldrb	r2, [r2, #18]
 8010a7a:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8010a7c:	693a      	ldr	r2, [r7, #16]
 8010a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a80:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8010a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a88:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8010a8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a92:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8010a94:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9a:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8010a9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa2:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8010aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	601a      	str	r2, [r3, #0]
 8010aaa:	e042      	b.n	8010b32 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	695b      	ldr	r3, [r3, #20]
 8010ab0:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	69db      	ldr	r3, [r3, #28]
 8010ab6:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8010ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aba:	2200      	movs	r2, #0
 8010abc:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 8010abe:	e033      	b.n	8010b28 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8010ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac2:	7c5b      	ldrb	r3, [r3, #17]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d025      	beq.n	8010b14 <_fx_utility_logical_sector_cache_entry_read+0x568>
 8010ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ad2:	4299      	cmp	r1, r3
 8010ad4:	bf08      	it	eq
 8010ad6:	4290      	cmpeq	r0, r2
 8010ad8:	d11c      	bne.n	8010b14 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8010ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d00b      	beq.n	8010b02 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8010aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aec:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 8010aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010af0:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8010af2:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8010af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afa:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b00:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010b08:	1c5a      	adds	r2, r3, #1
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8010b10:	2300      	movs	r3, #0
 8010b12:	e00f      	b.n	8010b34 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8010b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b16:	695b      	ldr	r3, [r3, #20]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d005      	beq.n	8010b28 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8010b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b20:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8010b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b24:	695b      	ldr	r3, [r3, #20]
 8010b26:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8010b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2a:	1e5a      	subs	r2, r3, #1
 8010b2c:	633a      	str	r2, [r7, #48]	; 0x30
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1c6      	bne.n	8010ac0 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 8010b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	373c      	adds	r7, #60	; 0x3c
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8010b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b44:	b094      	sub	sp, #80	; 0x50
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	61f8      	str	r0, [r7, #28]
 8010b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 8010b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010b56:	1884      	adds	r4, r0, r2
 8010b58:	eb41 0503 	adc.w	r5, r1, r3
 8010b5c:	1e63      	subs	r3, r4, #1
 8010b5e:	60bb      	str	r3, [r7, #8]
 8010b60:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010b64:	60fb      	str	r3, [r7, #12]
 8010b66:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010b6a:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b72:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	691b      	ldr	r3, [r3, #16]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f040 80b4 	bne.w	8010ce6 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	695b      	ldr	r3, [r3, #20]
 8010b82:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	69db      	ldr	r3, [r3, #28]
 8010b88:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8010b8a:	e09f      	b.n	8010ccc <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8010b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d103      	bne.n	8010b9a <_fx_utility_logical_sector_flush+0x5a>
 8010b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f000 81de 	beq.w	8010f56 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8010b9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	f000 81db 	beq.w	8010f5a <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8010ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ba6:	7c5b      	ldrb	r3, [r3, #17]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 808c 	beq.w	8010cc6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8010bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010bb8:	4290      	cmp	r0, r2
 8010bba:	eb71 0303 	sbcs.w	r3, r1, r3
 8010bbe:	f0c0 8082 	bcc.w	8010cc6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8010bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010bc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010bcc:	4290      	cmp	r0, r2
 8010bce:	eb71 0303 	sbcs.w	r3, r1, r3
 8010bd2:	d378      	bcc.n	8010cc6 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bd6:	7c1b      	ldrb	r3, [r3, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d04d      	beq.n	8010c78 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d148      	bne.n	8010c78 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	2290      	movs	r2, #144	; 0x90
 8010c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c24:	7c9b      	ldrb	r3, [r3, #18]
 8010c26:	461a      	mov	r2, r3
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c30:	7c9b      	ldrb	r3, [r3, #18]
 8010c32:	2b04      	cmp	r3, #4
 8010c34:	d003      	beq.n	8010c3e <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010c44:	69f8      	ldr	r0, [r7, #28]
 8010c46:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d003      	beq.n	8010c62 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c60:	e17f      	b.n	8010f62 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c64:	2200      	movs	r2, #0
 8010c66:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6c:	1e5a      	subs	r2, r3, #1
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8010c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c74:	3b01      	subs	r3, #1
 8010c76:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 8010c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d018      	beq.n	8010cb0 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c80:	2200      	movs	r2, #0
 8010c82:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010c84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010c86:	f04f 32ff 	mov.w	r2, #4294967295
 8010c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010c8e:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c94:	7c1b      	ldrb	r3, [r3, #16]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00a      	beq.n	8010cb0 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca4:	1e5a      	subs	r2, r3, #1
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	3b01      	subs	r3, #1
 8010cae:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 8010cb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010cb4:	1e51      	subs	r1, r2, #1
 8010cb6:	6039      	str	r1, [r7, #0]
 8010cb8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010cbc:	607b      	str	r3, [r7, #4]
 8010cbe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010cc2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8010cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8010ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cce:	1e5a      	subs	r2, r3, #1
 8010cd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f000 8144 	beq.w	8010f60 <_fx_utility_logical_sector_flush+0x420>
 8010cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	f47f af54 	bne.w	8010b8c <_fx_utility_logical_sector_flush+0x4c>
 8010ce4:	e13c      	b.n	8010f60 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	695b      	ldr	r3, [r3, #20]
 8010cea:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 8010cec:	2300      	movs	r3, #0
 8010cee:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	6a1b      	ldr	r3, [r3, #32]
 8010cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8010cf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010cfa:	2a20      	cmp	r2, #32
 8010cfc:	f173 0300 	sbcs.w	r3, r3, #0
 8010d00:	d202      	bcs.n	8010d08 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 8010d02:	2301      	movs	r3, #1
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d06:	e121      	b.n	8010f4c <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8010d0c:	e11e      	b.n	8010f4c <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d103      	bne.n	8010d1c <_fx_utility_logical_sector_flush+0x1dc>
 8010d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 8121 	beq.w	8010f5e <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8010d1c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010d20:	4313      	orrs	r3, r2
 8010d22:	f000 811d 	beq.w	8010f60 <_fx_utility_logical_sector_flush+0x420>
 8010d26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010d2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010d2e:	4290      	cmp	r0, r2
 8010d30:	eb71 0303 	sbcs.w	r3, r1, r3
 8010d34:	f0c0 8114 	bcc.w	8010f60 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 8010d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d015      	beq.n	8010d6a <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8010d3e:	693a      	ldr	r2, [r7, #16]
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010d46:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	f003 031f 	and.w	r3, r3, #31
 8010d54:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8010d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d5c:	e00d      	b.n	8010d7a <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 8010d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d60:	085b      	lsrs	r3, r3, #1
 8010d62:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 8010d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d66:	3301      	adds	r3, #1
 8010d68:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 8010d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d0f4      	beq.n	8010d5e <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8010d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8010d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d80:	4613      	mov	r3, r2
 8010d82:	005b      	lsls	r3, r3, #1
 8010d84:	4413      	add	r3, r2
 8010d86:	00db      	lsls	r3, r3, #3
 8010d88:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8010d8c:	69fa      	ldr	r2, [r7, #28]
 8010d8e:	4413      	add	r3, r2
 8010d90:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 8010d92:	2300      	movs	r3, #0
 8010d94:	647b      	str	r3, [r7, #68]	; 0x44
 8010d96:	e0a7      	b.n	8010ee8 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8010d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d9a:	7c5b      	ldrb	r3, [r3, #17]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f000 8089 	beq.w	8010eb4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010da4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8010da8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010dac:	4290      	cmp	r0, r2
 8010dae:	eb71 0303 	sbcs.w	r3, r1, r3
 8010db2:	d37f      	bcc.n	8010eb4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8010db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010db6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010dba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010dbe:	4290      	cmp	r0, r2
 8010dc0:	eb71 0303 	sbcs.w	r3, r1, r3
 8010dc4:	d376      	bcc.n	8010eb4 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc8:	7c1b      	ldrb	r3, [r3, #16]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d04d      	beq.n	8010e6a <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d148      	bne.n	8010e6a <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010dde:	1c5a      	adds	r2, r3, #1
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	2201      	movs	r2, #1
 8010dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	2290      	movs	r2, #144	; 0x90
 8010df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010e06:	69fb      	ldr	r3, [r7, #28]
 8010e08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e16:	7c9b      	ldrb	r3, [r3, #18]
 8010e18:	461a      	mov	r2, r3
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e22:	7c9b      	ldrb	r3, [r3, #18]
 8010e24:	2b04      	cmp	r3, #4
 8010e26:	d003      	beq.n	8010e30 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010e36:	69f8      	ldr	r0, [r7, #28]
 8010e38:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 8010e42:	69fb      	ldr	r3, [r7, #28]
 8010e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d003      	beq.n	8010e54 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e52:	e086      	b.n	8010f62 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e56:	2200      	movs	r2, #0
 8010e58:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5e:	1e5a      	subs	r2, r3, #1
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8010e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e66:	3b01      	subs	r3, #1
 8010e68:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 8010e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d018      	beq.n	8010ea2 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e72:	2200      	movs	r2, #0
 8010e74:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010e76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010e78:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e80:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e86:	7c1b      	ldrb	r3, [r3, #16]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d00a      	beq.n	8010ea2 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e8e:	2200      	movs	r2, #0
 8010e90:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e96:	1e5a      	subs	r2, r3, #1
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 8010ea2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010ea6:	f112 38ff 	adds.w	r8, r2, #4294967295
 8010eaa:	f143 39ff 	adc.w	r9, r3, #4294967295
 8010eae:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8010eb2:	e006      	b.n	8010ec2 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8010eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb6:	7c5b      	ldrb	r3, [r3, #17]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d002      	beq.n	8010ec2 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 8010ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d102      	bne.n	8010ece <_fx_utility_logical_sector_flush+0x38e>
 8010ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d011      	beq.n	8010ef2 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8010ece:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	d102      	bne.n	8010edc <_fx_utility_logical_sector_flush+0x39c>
 8010ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00c      	beq.n	8010ef6 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 8010edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ede:	3318      	adds	r3, #24
 8010ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 8010ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8010ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010eea:	2b03      	cmp	r3, #3
 8010eec:	f67f af54 	bls.w	8010d98 <_fx_utility_logical_sector_flush+0x258>
 8010ef0:	e002      	b.n	8010ef8 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8010ef2:	bf00      	nop
 8010ef4:	e000      	b.n	8010ef8 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8010ef6:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8010ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efa:	3380      	adds	r3, #128	; 0x80
 8010efc:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 8010efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f02:	429a      	cmp	r2, r3
 8010f04:	f4ff af3b 	bcc.w	8010d7e <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8010f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00c      	beq.n	8010f28 <_fx_utility_logical_sector_flush+0x3e8>
 8010f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d109      	bne.n	8010f28 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	6a1a      	ldr	r2, [r3, #32]
 8010f18:	2101      	movs	r1, #1
 8010f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8010f20:	43db      	mvns	r3, r3
 8010f22:	401a      	ands	r2, r3
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8010f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d008      	beq.n	8010f40 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 8010f2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f32:	f112 0a01 	adds.w	sl, r2, #1
 8010f36:	f143 0b00 	adc.w	fp, r3, #0
 8010f3a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8010f3e:	e005      	b.n	8010f4c <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 8010f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f42:	085b      	lsrs	r3, r3, #1
 8010f44:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 8010f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f48:	3301      	adds	r3, #1
 8010f4a:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 8010f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f47f aedd 	bne.w	8010d0e <_fx_utility_logical_sector_flush+0x1ce>
 8010f54:	e004      	b.n	8010f60 <_fx_utility_logical_sector_flush+0x420>
                break;
 8010f56:	bf00      	nop
 8010f58:	e002      	b.n	8010f60 <_fx_utility_logical_sector_flush+0x420>
                break;
 8010f5a:	bf00      	nop
 8010f5c:	e000      	b.n	8010f60 <_fx_utility_logical_sector_flush+0x420>
                break;
 8010f5e:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3750      	adds	r7, #80	; 0x50
 8010f66:	46bd      	mov	sp, r7
 8010f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010f6c <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8010f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f70:	b09c      	sub	sp, #112	; 0x70
 8010f72:	af04      	add	r7, sp, #16
 8010f74:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010f76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8010f7a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010f7e:	2b02      	cmp	r3, #2
 8010f80:	d106      	bne.n	8010f90 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8010f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f84:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010f88:	1c5a      	adds	r2, r3, #1
 8010f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f8c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8010f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f92:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8010f96:	1c5a      	adds	r2, r3, #1
 8010f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f9a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8010f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fa0:	689a      	ldr	r2, [r3, #8]
 8010fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	f0c0 80d9 	bcc.w	801115e <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8010fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fae:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8010fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	f200 80d2 	bhi.w	801115e <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8010fba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010fbe:	9300      	str	r3, [sp, #0]
 8010fc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010fc4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010fc6:	f7ff faf1 	bl	80105ac <_fx_utility_logical_sector_cache_entry_read>
 8010fca:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8010fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	e259      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8010fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010fdc:	1c5a      	adds	r2, r3, #1
 8010fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fe0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 8010fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fe6:	7c5b      	ldrb	r3, [r3, #17]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d049      	beq.n	8011080 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8010fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fee:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d045      	beq.n	8011080 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8010ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010ffa:	1c5a      	adds	r2, r3, #1
 8010ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ffe:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011004:	2201      	movs	r2, #1
 8011006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801100a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100c:	2290      	movs	r2, #144	; 0x90
 801100e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801101c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801101e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8011028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801102a:	2201      	movs	r2, #1
 801102c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011032:	7c9b      	ldrb	r3, [r3, #18]
 8011034:	461a      	mov	r2, r3
 8011036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011038:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801103c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801103e:	7c9b      	ldrb	r3, [r3, #18]
 8011040:	2b04      	cmp	r3, #4
 8011042:	d003      	beq.n	801104c <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011046:	2201      	movs	r2, #1
 8011048:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801104c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801104e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011052:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011054:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011058:	2200      	movs	r2, #0
 801105a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 801105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011064:	2b00      	cmp	r3, #0
 8011066:	d003      	beq.n	8011070 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8011068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801106a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801106e:	e20c      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011072:	2200      	movs	r2, #0
 8011074:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8011076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107a:	1e5a      	subs	r2, r3, #1
 801107c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801107e:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8011080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011082:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011086:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801108a:	4290      	cmp	r0, r2
 801108c:	eb71 0303 	sbcs.w	r3, r1, r3
 8011090:	d301      	bcc.n	8011096 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 8011092:	2389      	movs	r3, #137	; 0x89
 8011094:	e1f9      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011098:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 801109c:	1c5a      	adds	r2, r3, #1
 801109e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80110a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a6:	2200      	movs	r2, #0
 80110a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80110ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ae:	2290      	movs	r2, #144	; 0x90
 80110b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80110b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80110be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80110c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 80110c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c8:	2201      	movs	r2, #1
 80110ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80110ce:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80110d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 80110d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80110dc:	2b04      	cmp	r3, #4
 80110de:	d103      	bne.n	80110e8 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80110e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110e2:	2201      	movs	r2, #1
 80110e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80110e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80110ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80110f0:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80110f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f4:	2200      	movs	r2, #0
 80110f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 80110fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011100:	2b00      	cmp	r3, #0
 8011102:	d11a      	bne.n	801113a <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8011104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801110a:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801110e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011110:	2201      	movs	r2, #1
 8011112:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8011114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011116:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801111a:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 801111c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801111e:	2b00      	cmp	r3, #0
 8011120:	d015      	beq.n	801114e <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8011122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8011124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011126:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8011128:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 801112a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801112c:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 801112e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011130:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011136:	61da      	str	r2, [r3, #28]
 8011138:	e009      	b.n	801114e <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801113a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801113c:	2200      	movs	r2, #0
 801113e:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011142:	f04f 32ff 	mov.w	r2, #4294967295
 8011146:	f04f 33ff 	mov.w	r3, #4294967295
 801114a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801114e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011154:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801115c:	e195      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 801115e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011162:	2200      	movs	r2, #0
 8011164:	469a      	mov	sl, r3
 8011166:	4693      	mov	fp, r2
 8011168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801116c:	eb1a 0402 	adds.w	r4, sl, r2
 8011170:	eb4b 0503 	adc.w	r5, fp, r3
 8011174:	f114 38ff 	adds.w	r8, r4, #4294967295
 8011178:	f145 39ff 	adc.w	r9, r5, #4294967295
 801117c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801117e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011182:	2300      	movs	r3, #0
 8011184:	63ba      	str	r2, [r7, #56]	; 0x38
 8011186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011188:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801118c:	460b      	mov	r3, r1
 801118e:	4543      	cmp	r3, r8
 8011190:	4613      	mov	r3, r2
 8011192:	eb73 0309 	sbcs.w	r3, r3, r9
 8011196:	d22c      	bcs.n	80111f2 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8011198:	2389      	movs	r3, #137	; 0x89
 801119a:	e176      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 801119c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80111a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80111a8:	f7ff fa00 	bl	80105ac <_fx_utility_logical_sector_cache_entry_read>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d124      	bne.n	80111fc <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 80111b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b4:	6898      	ldr	r0, [r3, #8]
 80111b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ba:	461a      	mov	r2, r3
 80111bc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80111c0:	f000 fad0 	bl	8011764 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80111c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80111cc:	4413      	add	r3, r2
 80111ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 80111d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80111d6:	1c51      	adds	r1, r2, #1
 80111d8:	61b9      	str	r1, [r7, #24]
 80111da:	f143 0300 	adc.w	r3, r3, #0
 80111de:	61fb      	str	r3, [r7, #28]
 80111e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80111e4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 80111e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111ec:	3b01      	subs	r3, #1
 80111ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 80111f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1d0      	bne.n	801119c <_fx_utility_logical_sector_read+0x230>
 80111fa:	e000      	b.n	80111fe <_fx_utility_logical_sector_read+0x292>
                break;
 80111fc:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 80111fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011202:	2200      	movs	r2, #0
 8011204:	633b      	str	r3, [r7, #48]	; 0x30
 8011206:	637a      	str	r2, [r7, #52]	; 0x34
 8011208:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801120c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011210:	4621      	mov	r1, r4
 8011212:	1889      	adds	r1, r1, r2
 8011214:	62b9      	str	r1, [r7, #40]	; 0x28
 8011216:	4629      	mov	r1, r5
 8011218:	eb43 0101 	adc.w	r1, r3, r1
 801121c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801121e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011222:	460b      	mov	r3, r1
 8011224:	3b01      	subs	r3, #1
 8011226:	613b      	str	r3, [r7, #16]
 8011228:	4613      	mov	r3, r2
 801122a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801122e:	617b      	str	r3, [r7, #20]
 8011230:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011234:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8011238:	e02b      	b.n	8011292 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 801123a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011244:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011246:	f7ff f9b1 	bl	80105ac <_fx_utility_logical_sector_cache_entry_read>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d125      	bne.n	801129c <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011252:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8011254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011258:	3b01      	subs	r3, #1
 801125a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801125c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801125e:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011266:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8011268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801126c:	461a      	mov	r2, r3
 801126e:	f000 fa79 	bl	8011764 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8011272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011276:	1e51      	subs	r1, r2, #1
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801127e:	60fb      	str	r3, [r7, #12]
 8011280:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011284:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8011288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801128c:	3b01      	subs	r3, #1
 801128e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8011292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1cf      	bne.n	801123a <_fx_utility_logical_sector_read+0x2ce>
 801129a:	e000      	b.n	801129e <_fx_utility_logical_sector_read+0x332>
                break;
 801129c:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 801129e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d101      	bne.n	80112aa <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 80112a6:	2300      	movs	r3, #0
 80112a8:	e0ef      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 80112aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80112ae:	2200      	movs	r2, #0
 80112b0:	623b      	str	r3, [r7, #32]
 80112b2:	627a      	str	r2, [r7, #36]	; 0x24
 80112b4:	2301      	movs	r3, #1
 80112b6:	9302      	str	r3, [sp, #8]
 80112b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80112bc:	e9cd 3400 	strd	r3, r4, [sp]
 80112c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80112c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80112c6:	f7ff fc3b 	bl	8010b40 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80112ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112cc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80112d0:	1c5a      	adds	r2, r3, #1
 80112d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112d4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80112d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112da:	2200      	movs	r2, #0
 80112dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80112e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112e2:	2290      	movs	r2, #144	; 0x90
 80112e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80112e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80112ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80112f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80112f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80112fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011300:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011304:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801130a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801130e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011312:	2b04      	cmp	r3, #4
 8011314:	d103      	bne.n	801131e <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011318:	2201      	movs	r2, #1
 801131a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801131e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011320:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011324:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011326:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801132a:	2200      	movs	r2, #0
 801132c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8011330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011336:	2b00      	cmp	r3, #0
 8011338:	f040 80a4 	bne.w	8011484 <_fx_utility_logical_sector_read+0x518>
 801133c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801133e:	695b      	ldr	r3, [r3, #20]
 8011340:	089b      	lsrs	r3, r3, #2
 8011342:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011346:	429a      	cmp	r2, r3
 8011348:	f080 809c 	bcs.w	8011484 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 801134c:	e095      	b.n	801147a <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801134e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011358:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801135a:	f7ff f927 	bl	80105ac <_fx_utility_logical_sector_cache_entry_read>
 801135e:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8011360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8011366:	2300      	movs	r3, #0
 8011368:	e08f      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 801136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801136c:	7c5b      	ldrb	r3, [r3, #17]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d049      	beq.n	8011406 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8011372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011374:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011376:	2b00      	cmp	r3, #0
 8011378:	d045      	beq.n	8011406 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 801137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011380:	1c5a      	adds	r2, r3, #1
 8011382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011384:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801138a:	2201      	movs	r2, #1
 801138c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011392:	2290      	movs	r2, #144	; 0x90
 8011394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80113a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80113a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 80113ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b0:	2201      	movs	r2, #1
 80113b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80113b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113b8:	7c9b      	ldrb	r3, [r3, #18]
 80113ba:	461a      	mov	r2, r3
 80113bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80113c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c4:	7c9b      	ldrb	r3, [r3, #18]
 80113c6:	2b04      	cmp	r3, #4
 80113c8:	d003      	beq.n	80113d2 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80113ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113cc:	2201      	movs	r2, #1
 80113ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80113d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80113d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80113da:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80113dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113de:	2200      	movs	r2, #0
 80113e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 80113e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d003      	beq.n	80113f6 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 80113ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113f4:	e049      	b.n	801148a <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80113f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113f8:	2200      	movs	r2, #0
 80113fa:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 80113fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011400:	1e5a      	subs	r2, r3, #1
 8011402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011404:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8011406:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011408:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801140c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011412:	2201      	movs	r2, #1
 8011414:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8011416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011418:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801141c:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 801141e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00a      	beq.n	801143a <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8011426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011428:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 801142a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 801142c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801142e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011432:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011436:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011438:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801143a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801143c:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 801143e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011442:	461a      	mov	r2, r3
 8011444:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011448:	f000 f98c 	bl	8011764 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 801144c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011450:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011454:	4413      	add	r3, r2
 8011456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 801145a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801145e:	1c51      	adds	r1, r2, #1
 8011460:	6039      	str	r1, [r7, #0]
 8011462:	f143 0300 	adc.w	r3, r3, #0
 8011466:	607b      	str	r3, [r7, #4]
 8011468:	e9d7 3400 	ldrd	r3, r4, [r7]
 801146c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8011470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011474:	3b01      	subs	r3, #1
 8011476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 801147a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801147e:	2b00      	cmp	r3, #0
 8011480:	f47f af65 	bne.w	801134e <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 801148a:	4618      	mov	r0, r3
 801148c:	3760      	adds	r7, #96	; 0x60
 801148e:	46bd      	mov	sp, r7
 8011490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011494 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8011494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011498:	b096      	sub	sp, #88	; 0x58
 801149a:	af04      	add	r7, sp, #16
 801149c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801149e:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 80114a2:	2300      	movs	r3, #0
 80114a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80114a8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80114ac:	2b02      	cmp	r3, #2
 80114ae:	d106      	bne.n	80114be <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 80114b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80114b6:	1c5a      	adds	r2, r3, #1
 80114b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ba:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 80114be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80114c4:	1c5a      	adds	r2, r3, #1
 80114c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80114cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ce:	689a      	ldr	r2, [r3, #8]
 80114d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114d2:	4293      	cmp	r3, r2
 80114d4:	f0c0 80d8 	bcc.w	8011688 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 80114d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114da:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80114dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114de:	4293      	cmp	r3, r2
 80114e0:	f200 80d2 	bhi.w	8011688 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 80114e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d030      	beq.n	801154e <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 80114ec:	6a3a      	ldr	r2, [r7, #32]
 80114ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80114f4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80114f8:	4013      	ands	r3, r2
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80114fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011500:	4613      	mov	r3, r2
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	4413      	add	r3, r2
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801150c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801150e:	4413      	add	r3, r2
 8011510:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011512:	2300      	movs	r3, #0
 8011514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011516:	e016      	b.n	8011546 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801151a:	7c5b      	ldrb	r3, [r3, #17]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00c      	beq.n	801153a <_fx_utility_logical_sector_write+0xa6>
 8011520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011522:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011526:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801152a:	4299      	cmp	r1, r3
 801152c:	bf08      	it	eq
 801152e:	4290      	cmpeq	r0, r2
 8011530:	d103      	bne.n	801153a <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8011532:	2301      	movs	r3, #1
 8011534:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011538:	e02d      	b.n	8011596 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801153a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801153c:	3301      	adds	r3, #1
 801153e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011542:	3318      	adds	r3, #24
 8011544:	647b      	str	r3, [r7, #68]	; 0x44
 8011546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011548:	2b03      	cmp	r3, #3
 801154a:	d9e5      	bls.n	8011518 <_fx_utility_logical_sector_write+0x84>
 801154c:	e023      	b.n	8011596 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	695b      	ldr	r3, [r3, #20]
 8011552:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	69db      	ldr	r3, [r3, #28]
 8011558:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 801155a:	e017      	b.n	801158c <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801155c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801155e:	7c5b      	ldrb	r3, [r3, #17]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00c      	beq.n	801157e <_fx_utility_logical_sector_write+0xea>
 8011564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011566:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801156a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801156e:	4299      	cmp	r1, r3
 8011570:	bf08      	it	eq
 8011572:	4290      	cmpeq	r0, r2
 8011574:	d103      	bne.n	801157e <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8011576:	2301      	movs	r3, #1
 8011578:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801157c:	e00b      	b.n	8011596 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 801157e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d002      	beq.n	801158c <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8011586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 801158c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801158e:	1e5a      	subs	r2, r3, #1
 8011590:	643a      	str	r2, [r7, #64]	; 0x40
 8011592:	2b00      	cmp	r3, #0
 8011594:	d1e2      	bne.n	801155c <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8011596:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00d      	beq.n	80115ba <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115a0:	7c1b      	ldrb	r3, [r3, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d107      	bne.n	80115b6 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 80115a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115aa:	1c5a      	adds	r2, r3, #1
 80115ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ae:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 80115b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115b2:	2201      	movs	r2, #1
 80115b4:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 80115b6:	2300      	movs	r3, #0
 80115b8:	e0cf      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80115ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80115be:	4313      	orrs	r3, r2
 80115c0:	d004      	beq.n	80115cc <_fx_utility_logical_sector_write+0x138>
 80115c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80115c6:	1c51      	adds	r1, r2, #1
 80115c8:	430b      	orrs	r3, r1
 80115ca:	d101      	bne.n	80115d0 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 80115cc:	2389      	movs	r3, #137	; 0x89
 80115ce:	e0c4      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 80115d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115d2:	2200      	movs	r2, #0
 80115d4:	61bb      	str	r3, [r7, #24]
 80115d6:	61fa      	str	r2, [r7, #28]
 80115d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80115dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80115e0:	4621      	mov	r1, r4
 80115e2:	1889      	adds	r1, r1, r2
 80115e4:	6139      	str	r1, [r7, #16]
 80115e6:	4629      	mov	r1, r5
 80115e8:	eb43 0101 	adc.w	r1, r3, r1
 80115ec:	6179      	str	r1, [r7, #20]
 80115ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80115f2:	460b      	mov	r3, r1
 80115f4:	f113 3aff 	adds.w	sl, r3, #4294967295
 80115f8:	4613      	mov	r3, r2
 80115fa:	f143 3bff 	adc.w	fp, r3, #4294967295
 80115fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011600:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011604:	4592      	cmp	sl, r2
 8011606:	eb7b 0303 	sbcs.w	r3, fp, r3
 801160a:	d301      	bcc.n	8011610 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 801160c:	2389      	movs	r3, #137	; 0x89
 801160e:	e0a4      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011612:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011616:	1c5a      	adds	r2, r3, #1
 8011618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011620:	2201      	movs	r2, #1
 8011622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011628:	2290      	movs	r2, #144	; 0x90
 801162a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011636:	6a3a      	ldr	r2, [r7, #32]
 8011638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011642:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011646:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011650:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011654:	2b04      	cmp	r3, #4
 8011656:	d003      	beq.n	8011660 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165a:	2201      	movs	r2, #1
 801165c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011662:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011668:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166c:	2200      	movs	r2, #0
 801166e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 801167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011682:	e06a      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 8011684:	2300      	movs	r3, #0
 8011686:	e068      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8011688:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801168c:	4313      	orrs	r3, r2
 801168e:	d004      	beq.n	801169a <_fx_utility_logical_sector_write+0x206>
 8011690:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011694:	1c51      	adds	r1, r2, #1
 8011696:	430b      	orrs	r3, r1
 8011698:	d101      	bne.n	801169e <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 801169a:	2389      	movs	r3, #137	; 0x89
 801169c:	e05d      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801169e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116a0:	2200      	movs	r2, #0
 80116a2:	60bb      	str	r3, [r7, #8]
 80116a4:	60fa      	str	r2, [r7, #12]
 80116a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116aa:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80116ae:	4651      	mov	r1, sl
 80116b0:	eb11 0802 	adds.w	r8, r1, r2
 80116b4:	4659      	mov	r1, fp
 80116b6:	eb41 0903 	adc.w	r9, r1, r3
 80116ba:	f118 34ff 	adds.w	r4, r8, #4294967295
 80116be:	f149 35ff 	adc.w	r5, r9, #4294967295
 80116c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80116c8:	4294      	cmp	r4, r2
 80116ca:	eb75 0303 	sbcs.w	r3, r5, r3
 80116ce:	d301      	bcc.n	80116d4 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 80116d0:	2389      	movs	r3, #137	; 0x89
 80116d2:	e042      	b.n	801175a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 80116d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116d6:	2200      	movs	r2, #0
 80116d8:	603b      	str	r3, [r7, #0]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	2301      	movs	r3, #1
 80116de:	9302      	str	r3, [sp, #8]
 80116e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80116e4:	e9cd 3400 	strd	r3, r4, [sp]
 80116e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116ee:	f7ff fa27 	bl	8010b40 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 80116f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80116f8:	1c5a      	adds	r2, r3, #1
 80116fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011702:	2201      	movs	r2, #1
 8011704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170a:	2290      	movs	r2, #144	; 0x90
 801170c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011718:	6a3a      	ldr	r2, [r7, #32]
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011724:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011728:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8011732:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011736:	2b04      	cmp	r3, #4
 8011738:	d003      	beq.n	8011742 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	2201      	movs	r2, #1
 801173e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011744:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801174a:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174e:	2200      	movs	r2, #0
 8011750:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 801175a:	4618      	mov	r0, r3
 801175c:	3748      	adds	r7, #72	; 0x48
 801175e:	46bd      	mov	sp, r7
 8011760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011764 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	68f9      	ldr	r1, [r7, #12]
 8011774:	68b8      	ldr	r0, [r7, #8]
 8011776:	f003 f99b 	bl	8014ab0 <memcpy>
}
 801177a:	bf00      	nop
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
	...

08011784 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d101      	bne.n	8011796 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8011792:	2318      	movs	r3, #24
 8011794:	e018      	b.n	80117c8 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011796:	f3ef 8305 	mrs	r3, IPSR
 801179a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801179c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801179e:	4b0c      	ldr	r3, [pc, #48]	; (80117d0 <_fxe_file_close+0x4c>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	4313      	orrs	r3, r2
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d108      	bne.n	80117ba <_fxe_file_close+0x36>
 80117a8:	4b0a      	ldr	r3, [pc, #40]	; (80117d4 <_fxe_file_close+0x50>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d004      	beq.n	80117ba <_fxe_file_close+0x36>
 80117b0:	4b08      	ldr	r3, [pc, #32]	; (80117d4 <_fxe_file_close+0x50>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4a08      	ldr	r2, [pc, #32]	; (80117d8 <_fxe_file_close+0x54>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d101      	bne.n	80117be <_fxe_file_close+0x3a>
 80117ba:	2320      	movs	r3, #32
 80117bc:	e004      	b.n	80117c8 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7fa ff52 	bl	800c668 <_fx_file_close>
 80117c4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 80117c6:	68fb      	ldr	r3, [r7, #12]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	2400006c 	.word	0x2400006c
 80117d4:	2400368c 	.word	0x2400368c
 80117d8:	240037d4 	.word	0x240037d4

080117dc <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d101      	bne.n	80117f0 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 80117ec:	2318      	movs	r3, #24
 80117ee:	e019      	b.n	8011824 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117f0:	f3ef 8305 	mrs	r3, IPSR
 80117f4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80117f6:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80117f8:	4b0c      	ldr	r3, [pc, #48]	; (801182c <_fxe_file_create+0x50>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4313      	orrs	r3, r2
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d108      	bne.n	8011814 <_fxe_file_create+0x38>
 8011802:	4b0b      	ldr	r3, [pc, #44]	; (8011830 <_fxe_file_create+0x54>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d004      	beq.n	8011814 <_fxe_file_create+0x38>
 801180a:	4b09      	ldr	r3, [pc, #36]	; (8011830 <_fxe_file_create+0x54>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	4a09      	ldr	r2, [pc, #36]	; (8011834 <_fxe_file_create+0x58>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d101      	bne.n	8011818 <_fxe_file_create+0x3c>
 8011814:	2320      	movs	r3, #32
 8011816:	e005      	b.n	8011824 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7fa ffc8 	bl	800c7b0 <_fx_file_create>
 8011820:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8011822:	68fb      	ldr	r3, [r7, #12]
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	2400006c 	.word	0x2400006c
 8011830:	2400368c 	.word	0x2400368c
 8011834:	240037d4 	.word	0x240037d4

08011838 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b088      	sub	sp, #32
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
 8011844:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00b      	beq.n	8011864 <_fxe_file_open+0x2c>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4a36      	ldr	r2, [pc, #216]	; (801192c <_fxe_file_open+0xf4>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d106      	bne.n	8011864 <_fxe_file_open+0x2c>
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d003      	beq.n	8011864 <_fxe_file_open+0x2c>
 801185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8011862:	d001      	beq.n	8011868 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8011864:	2318      	movs	r3, #24
 8011866:	e05d      	b.n	8011924 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d007      	beq.n	801187e <_fxe_file_open+0x46>
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	2b02      	cmp	r3, #2
 8011872:	d004      	beq.n	801187e <_fxe_file_open+0x46>
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d001      	beq.n	801187e <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 801187a:	2306      	movs	r3, #6
 801187c:	e052      	b.n	8011924 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801187e:	f3ef 8305 	mrs	r3, IPSR
 8011882:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011884:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011886:	4b2a      	ldr	r3, [pc, #168]	; (8011930 <_fxe_file_open+0xf8>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4313      	orrs	r3, r2
 801188c:	2b00      	cmp	r3, #0
 801188e:	d108      	bne.n	80118a2 <_fxe_file_open+0x6a>
 8011890:	4b28      	ldr	r3, [pc, #160]	; (8011934 <_fxe_file_open+0xfc>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d004      	beq.n	80118a2 <_fxe_file_open+0x6a>
 8011898:	4b26      	ldr	r3, [pc, #152]	; (8011934 <_fxe_file_open+0xfc>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a26      	ldr	r2, [pc, #152]	; (8011938 <_fxe_file_open+0x100>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d101      	bne.n	80118a6 <_fxe_file_open+0x6e>
 80118a2:	2320      	movs	r3, #32
 80118a4:	e03e      	b.n	8011924 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4a20      	ldr	r2, [pc, #128]	; (801192c <_fxe_file_open+0xf4>)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d001      	beq.n	80118b4 <_fxe_file_open+0x7c>
 80118b0:	2311      	movs	r3, #17
 80118b2:	e037      	b.n	8011924 <_fxe_file_open+0xec>
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80118ba:	f04f 31ff 	mov.w	r1, #4294967295
 80118be:	4618      	mov	r0, r3
 80118c0:	f000 fe82 	bl	80125c8 <_tx_mutex_get>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d001      	beq.n	80118ce <_fxe_file_open+0x96>
 80118ca:	2311      	movs	r3, #17
 80118cc:	e02a      	b.n	8011924 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80118d4:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80118dc:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 80118de:	e00e      	b.n	80118fe <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 80118e0:	68ba      	ldr	r2, [r7, #8]
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d107      	bne.n	80118f8 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80118ee:	4618      	mov	r0, r3
 80118f0:	f001 f8e2 	bl	8012ab8 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 80118f4:	2318      	movs	r3, #24
 80118f6:	e015      	b.n	8011924 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118fc:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	1e5a      	subs	r2, r3, #1
 8011902:	61ba      	str	r2, [r7, #24]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d1eb      	bne.n	80118e0 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801190e:	4618      	mov	r0, r3
 8011910:	f001 f8d2 	bl	8012ab8 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	68b9      	ldr	r1, [r7, #8]
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f7fb fb84 	bl	800d028 <_fx_file_open>
 8011920:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8011922:	697b      	ldr	r3, [r7, #20]
}
 8011924:	4618      	mov	r0, r3
 8011926:	3720      	adds	r7, #32
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	4d454449 	.word	0x4d454449
 8011930:	2400006c 	.word	0x2400006c
 8011934:	2400368c 	.word	0x2400368c
 8011938:	240037d4 	.word	0x240037d4

0801193c <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b086      	sub	sp, #24
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
 8011948:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d005      	beq.n	801195c <_fxe_file_read+0x20>
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <_fxe_file_read+0x20>
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d101      	bne.n	8011960 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 801195c:	2318      	movs	r3, #24
 801195e:	e01b      	b.n	8011998 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011960:	f3ef 8305 	mrs	r3, IPSR
 8011964:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011966:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011968:	4b0d      	ldr	r3, [pc, #52]	; (80119a0 <_fxe_file_read+0x64>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4313      	orrs	r3, r2
 801196e:	2b00      	cmp	r3, #0
 8011970:	d108      	bne.n	8011984 <_fxe_file_read+0x48>
 8011972:	4b0c      	ldr	r3, [pc, #48]	; (80119a4 <_fxe_file_read+0x68>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d004      	beq.n	8011984 <_fxe_file_read+0x48>
 801197a:	4b0a      	ldr	r3, [pc, #40]	; (80119a4 <_fxe_file_read+0x68>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4a0a      	ldr	r2, [pc, #40]	; (80119a8 <_fxe_file_read+0x6c>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d101      	bne.n	8011988 <_fxe_file_read+0x4c>
 8011984:	2320      	movs	r3, #32
 8011986:	e007      	b.n	8011998 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	68b9      	ldr	r1, [r7, #8]
 801198e:	68f8      	ldr	r0, [r7, #12]
 8011990:	f7fc f82c 	bl	800d9ec <_fx_file_read>
 8011994:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8011996:	697b      	ldr	r3, [r7, #20]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3718      	adds	r7, #24
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	2400006c 	.word	0x2400006c
 80119a4:	2400368c 	.word	0x2400368c
 80119a8:	240037d4 	.word	0x240037d4

080119ac <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 80119bc:	2318      	movs	r3, #24
 80119be:	e019      	b.n	80119f4 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80119c0:	f3ef 8305 	mrs	r3, IPSR
 80119c4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80119c6:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80119c8:	4b0c      	ldr	r3, [pc, #48]	; (80119fc <_fxe_file_seek+0x50>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4313      	orrs	r3, r2
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d108      	bne.n	80119e4 <_fxe_file_seek+0x38>
 80119d2:	4b0b      	ldr	r3, [pc, #44]	; (8011a00 <_fxe_file_seek+0x54>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d004      	beq.n	80119e4 <_fxe_file_seek+0x38>
 80119da:	4b09      	ldr	r3, [pc, #36]	; (8011a00 <_fxe_file_seek+0x54>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4a09      	ldr	r2, [pc, #36]	; (8011a04 <_fxe_file_seek+0x58>)
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d101      	bne.n	80119e8 <_fxe_file_seek+0x3c>
 80119e4:	2320      	movs	r3, #32
 80119e6:	e005      	b.n	80119f4 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7fc faa2 	bl	800df34 <_fx_file_seek>
 80119f0:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 80119f2:	68fb      	ldr	r3, [r7, #12]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3710      	adds	r7, #16
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	2400006c 	.word	0x2400006c
 8011a00:	2400368c 	.word	0x2400368c
 8011a04:	240037d4 	.word	0x240037d4

08011a08 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b084      	sub	sp, #16
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d101      	bne.n	8011a1a <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 8011a16:	2318      	movs	r3, #24
 8011a18:	e018      	b.n	8011a4c <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a1a:	f3ef 8305 	mrs	r3, IPSR
 8011a1e:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011a20:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011a22:	4b0c      	ldr	r3, [pc, #48]	; (8011a54 <_fxe_media_close+0x4c>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4313      	orrs	r3, r2
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d108      	bne.n	8011a3e <_fxe_media_close+0x36>
 8011a2c:	4b0a      	ldr	r3, [pc, #40]	; (8011a58 <_fxe_media_close+0x50>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d004      	beq.n	8011a3e <_fxe_media_close+0x36>
 8011a34:	4b08      	ldr	r3, [pc, #32]	; (8011a58 <_fxe_media_close+0x50>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4a08      	ldr	r2, [pc, #32]	; (8011a5c <_fxe_media_close+0x54>)
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d101      	bne.n	8011a42 <_fxe_media_close+0x3a>
 8011a3e:	2320      	movs	r3, #32
 8011a40:	e004      	b.n	8011a4c <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7fc fbc8 	bl	800e1d8 <_fx_media_close>
 8011a48:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	2400006c 	.word	0x2400006c
 8011a58:	2400368c 	.word	0x2400368c
 8011a5c:	240037d4 	.word	0x240037d4

08011a60 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b08e      	sub	sp, #56	; 0x38
 8011a64:	af02      	add	r7, sp, #8
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
 8011a6c:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d00a      	beq.n	8011a8a <_fxe_media_open+0x2a>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d007      	beq.n	8011a8a <_fxe_media_open+0x2a>
 8011a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <_fxe_media_open+0x2a>
 8011a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a82:	f242 42b8 	movw	r2, #9400	; 0x24b8
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d001      	beq.n	8011a8e <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 8011a8a:	2318      	movs	r3, #24
 8011a8c:	e071      	b.n	8011b72 <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a8e:	f3ef 8305 	mrs	r3, IPSR
 8011a92:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011a94:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011a96:	4b39      	ldr	r3, [pc, #228]	; (8011b7c <_fxe_media_open+0x11c>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d108      	bne.n	8011ab2 <_fxe_media_open+0x52>
 8011aa0:	4b37      	ldr	r3, [pc, #220]	; (8011b80 <_fxe_media_open+0x120>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d004      	beq.n	8011ab2 <_fxe_media_open+0x52>
 8011aa8:	4b35      	ldr	r3, [pc, #212]	; (8011b80 <_fxe_media_open+0x120>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a35      	ldr	r2, [pc, #212]	; (8011b84 <_fxe_media_open+0x124>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d101      	bne.n	8011ab6 <_fxe_media_open+0x56>
 8011ab2:	2320      	movs	r3, #32
 8011ab4:	e05d      	b.n	8011b72 <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8011ab6:	4b34      	ldr	r3, [pc, #208]	; (8011b88 <_fxe_media_open+0x128>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	425b      	negs	r3, r3
 8011ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d004      	beq.n	8011ad6 <_fxe_media_open+0x76>
 8011acc:	4b2e      	ldr	r3, [pc, #184]	; (8011b88 <_fxe_media_open+0x128>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d001      	beq.n	8011ada <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8011ad6:	2302      	movs	r3, #2
 8011ad8:	e04b      	b.n	8011b72 <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8011ada:	4b2c      	ldr	r3, [pc, #176]	; (8011b8c <_fxe_media_open+0x12c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae2:	425b      	negs	r3, r3
 8011ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ae6:	4013      	ands	r3, r2
 8011ae8:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d004      	beq.n	8011afa <_fxe_media_open+0x9a>
 8011af0:	4b26      	ldr	r3, [pc, #152]	; (8011b8c <_fxe_media_open+0x12c>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d001      	beq.n	8011afe <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8011afa:	2302      	movs	r3, #2
 8011afc:	e039      	b.n	8011b72 <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 8011afe:	f001 fd3f 	bl	8013580 <_tx_thread_identify>
 8011b02:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8011b04:	f107 0314 	add.w	r3, r7, #20
 8011b08:	461a      	mov	r2, r3
 8011b0a:	2100      	movs	r1, #0
 8011b0c:	6a38      	ldr	r0, [r7, #32]
 8011b0e:	f001 fd91 	bl	8013634 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8011b12:	4b1f      	ldr	r3, [pc, #124]	; (8011b90 <_fxe_media_open+0x130>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8011b18:	4b1e      	ldr	r3, [pc, #120]	; (8011b94 <_fxe_media_open+0x134>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 8011b1e:	e010      	b.n	8011b42 <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d108      	bne.n	8011b3a <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	f107 0214 	add.w	r2, r7, #20
 8011b2e:	4619      	mov	r1, r3
 8011b30:	6a38      	ldr	r0, [r7, #32]
 8011b32:	f001 fd7f 	bl	8013634 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 8011b36:	2318      	movs	r3, #24
 8011b38:	e01b      	b.n	8011b72 <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 8011b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8011b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 8011b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b44:	1e5a      	subs	r2, r3, #1
 8011b46:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d1e9      	bne.n	8011b20 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	f107 0214 	add.w	r2, r7, #20
 8011b52:	4619      	mov	r1, r3
 8011b54:	6a38      	ldr	r0, [r7, #32]
 8011b56:	f001 fd6d 	bl	8013634 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 8011b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5c:	9301      	str	r3, [sp, #4]
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b60:	9300      	str	r3, [sp, #0]
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	68b9      	ldr	r1, [r7, #8]
 8011b68:	68f8      	ldr	r0, [r7, #12]
 8011b6a:	f7fc fd0d 	bl	800e588 <_fx_media_open>
 8011b6e:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 8011b70:	69fb      	ldr	r3, [r7, #28]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3730      	adds	r7, #48	; 0x30
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	2400006c 	.word	0x2400006c
 8011b80:	2400368c 	.word	0x2400368c
 8011b84:	240037d4 	.word	0x240037d4
 8011b88:	24003614 	.word	0x24003614
 8011b8c:	24003618 	.word	0x24003618
 8011b90:	24003604 	.word	0x24003604
 8011b94:	24003608 	.word	0x24003608

08011b98 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b096      	sub	sp, #88	; 0x58
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	60f8      	str	r0, [r7, #12]
 8011ba0:	60b9      	str	r1, [r7, #8]
 8011ba2:	607a      	str	r2, [r7, #4]
 8011ba4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	3303      	adds	r3, #3
 8011baa:	f023 0303 	bic.w	r3, r3, #3
 8011bae:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8011bb4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011bb8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011bba:	b672      	cpsid	i
    return(int_posture);
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8011bbe:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011bc0:	4b55      	ldr	r3, [pc, #340]	; (8011d18 <_tx_byte_allocate+0x180>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bce:	621a      	str	r2, [r3, #32]
 8011bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bd2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	f383 8810 	msr	PRIMASK, r3
}
 8011bda:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	68f8      	ldr	r0, [r7, #12]
 8011be0:	f000 f9b2 	bl	8011f48 <_tx_byte_pool_search>
 8011be4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011be6:	f3ef 8310 	mrs	r3, PRIMASK
 8011bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011bee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011bf0:	b672      	cpsid	i
    return(int_posture);
 8011bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011bf4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8011bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d002      	beq.n	8011c02 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c00:	e006      	b.n	8011c10 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	6a1b      	ldr	r3, [r3, #32]
 8011c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d101      	bne.n	8011c10 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8011c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d0d9      	beq.n	8011bca <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c1a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8011c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d008      	beq.n	8011c34 <_tx_byte_allocate+0x9c>
 8011c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c24:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	f383 8810 	msr	PRIMASK, r3
}
 8011c2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	653b      	str	r3, [r7, #80]	; 0x50
 8011c32:	e06c      	b.n	8011d0e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d061      	beq.n	8011cfe <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8011c3a:	4b38      	ldr	r3, [pc, #224]	; (8011d1c <_tx_byte_allocate+0x184>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d007      	beq.n	8011c52 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8011c42:	2310      	movs	r3, #16
 8011c44:	653b      	str	r3, [r7, #80]	; 0x50
 8011c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	f383 8810 	msr	PRIMASK, r3
}
 8011c50:	e05d      	b.n	8011d0e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8011c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c54:	4a32      	ldr	r2, [pc, #200]	; (8011d20 <_tx_byte_allocate+0x188>)
 8011c56:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8011c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8011c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8011c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011c70:	1c5a      	adds	r2, r3, #1
 8011c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c7c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d109      	bne.n	8011ca2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c92:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c98:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c9e:	675a      	str	r2, [r3, #116]	; 0x74
 8011ca0:	e011      	b.n	8011cc6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cac:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cb2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cb8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cbe:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cc4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8011cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cc8:	2209      	movs	r2, #9
 8011cca:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cce:	2201      	movs	r2, #1
 8011cd0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cd4:	683a      	ldr	r2, [r7, #0]
 8011cd6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011cd8:	4b10      	ldr	r3, [pc, #64]	; (8011d1c <_tx_byte_allocate+0x184>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	4a0f      	ldr	r2, [pc, #60]	; (8011d1c <_tx_byte_allocate+0x184>)
 8011ce0:	6013      	str	r3, [r2, #0]
 8011ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ce4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	f383 8810 	msr	PRIMASK, r3
}
 8011cec:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011cee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011cf0:	f001 ff1a 	bl	8013b28 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8011cfc:	e007      	b.n	8011d0e <_tx_byte_allocate+0x176>
 8011cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	f383 8810 	msr	PRIMASK, r3
}
 8011d08:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8011d0a:	2310      	movs	r3, #16
 8011d0c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8011d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3758      	adds	r7, #88	; 0x58
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	2400368c 	.word	0x2400368c
 8011d1c:	24003724 	.word	0x24003724
 8011d20:	08011d25 	.word	0x08011d25

08011d24 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b08e      	sub	sp, #56	; 0x38
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8011d32:	623b      	str	r3, [r7, #32]
    return(posture);
 8011d34:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011d36:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d38:	b672      	cpsid	i
    return(int_posture);
 8011d3a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8011d3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d42:	4a33      	ldr	r2, [pc, #204]	; (8011e10 <_tx_byte_pool_cleanup+0xec>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d158      	bne.n	8011dfa <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011d4e:	683a      	ldr	r2, [r7, #0]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d152      	bne.n	8011dfa <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d58:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d04c      	beq.n	8011dfa <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8011d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4a2b      	ldr	r2, [pc, #172]	; (8011e14 <_tx_byte_pool_cleanup+0xf0>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d147      	bne.n	8011dfa <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8011d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d043      	beq.n	8011dfa <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2200      	movs	r2, #0
 8011d76:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8011d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d7c:	1e5a      	subs	r2, r3, #1
 8011d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d80:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8011d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d86:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d103      	bne.n	8011d96 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	2200      	movs	r2, #0
 8011d92:	625a      	str	r2, [r3, #36]	; 0x24
 8011d94:	e013      	b.n	8011dbe <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d9a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dac:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8011dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d102      	bne.n	8011dbe <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dbc:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dc2:	2b09      	cmp	r3, #9
 8011dc4:	d119      	bne.n	8011dfa <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2210      	movs	r2, #16
 8011dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011dce:	4b12      	ldr	r3, [pc, #72]	; (8011e18 <_tx_byte_pool_cleanup+0xf4>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	4a10      	ldr	r2, [pc, #64]	; (8011e18 <_tx_byte_pool_cleanup+0xf4>)
 8011dd6:	6013      	str	r3, [r2, #0]
 8011dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dda:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	f383 8810 	msr	PRIMASK, r3
}
 8011de2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f001 fd9f 	bl	8013928 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011dea:	f3ef 8310 	mrs	r3, PRIMASK
 8011dee:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011df0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011df2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011df4:	b672      	cpsid	i
    return(int_posture);
 8011df6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011df8:	637b      	str	r3, [r7, #52]	; 0x34
 8011dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f383 8810 	msr	PRIMASK, r3
}
 8011e04:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011e06:	bf00      	nop
 8011e08:	3738      	adds	r7, #56	; 0x38
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	08011d25 	.word	0x08011d25
 8011e14:	42595445 	.word	0x42595445
 8011e18:	24003724 	.word	0x24003724

08011e1c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b08e      	sub	sp, #56	; 0x38
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
 8011e28:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8011e2a:	2234      	movs	r2, #52	; 0x34
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f002 fe12 	bl	8014a58 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	f023 0303 	bic.w	r3, r3, #3
 8011e3a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	683a      	ldr	r2, [r7, #0]
 8011e4c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	f1a3 0208 	sub.w	r2, r3, #8
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2202      	movs	r2, #2
 8011e68:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8011e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	4413      	add	r3, r2
 8011e74:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8011e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e78:	3b04      	subs	r3, #4
 8011e7a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e88:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8011e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e8c:	3b04      	subs	r3, #4
 8011e8e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8011ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ea6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8011eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eae:	3304      	adds	r3, #4
 8011eb0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8011eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8011eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb8:	4a1f      	ldr	r2, [pc, #124]	; (8011f38 <_tx_byte_pool_create+0x11c>)
 8011eba:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ec6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011ec8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011eca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ecc:	b672      	cpsid	i
    return(int_posture);
 8011ece:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8011ed0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	4a19      	ldr	r2, [pc, #100]	; (8011f3c <_tx_byte_pool_create+0x120>)
 8011ed6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8011ed8:	4b19      	ldr	r3, [pc, #100]	; (8011f40 <_tx_byte_pool_create+0x124>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d109      	bne.n	8011ef4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8011ee0:	4a18      	ldr	r2, [pc, #96]	; (8011f44 <_tx_byte_pool_create+0x128>)
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	68fa      	ldr	r2, [r7, #12]
 8011eea:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8011ef2:	e011      	b.n	8011f18 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011ef4:	4b13      	ldr	r3, [pc, #76]	; (8011f44 <_tx_byte_pool_create+0x128>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8011efa:	6a3b      	ldr	r3, [r7, #32]
 8011efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011efe:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8011f00:	6a3b      	ldr	r3, [r7, #32]
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	69fa      	ldr	r2, [r7, #28]
 8011f10:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6a3a      	ldr	r2, [r7, #32]
 8011f16:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8011f18:	4b09      	ldr	r3, [pc, #36]	; (8011f40 <_tx_byte_pool_create+0x124>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	4a08      	ldr	r2, [pc, #32]	; (8011f40 <_tx_byte_pool_create+0x124>)
 8011f20:	6013      	str	r3, [r2, #0]
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	f383 8810 	msr	PRIMASK, r3
}
 8011f2c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3738      	adds	r7, #56	; 0x38
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	ffffeeee 	.word	0xffffeeee
 8011f3c:	42595445 	.word	0x42595445
 8011f40:	24003680 	.word	0x24003680
 8011f44:	2400367c 	.word	0x2400367c

08011f48 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b097      	sub	sp, #92	; 0x5c
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8011f52:	2300      	movs	r3, #0
 8011f54:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f56:	f3ef 8310 	mrs	r3, PRIMASK
 8011f5a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011f5e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f60:	b672      	cpsid	i
    return(int_posture);
 8011f62:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8011f64:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	689a      	ldr	r2, [r3, #8]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	3b02      	subs	r3, #2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	4413      	add	r3, r2
 8011f74:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8011f76:	683a      	ldr	r2, [r7, #0]
 8011f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d308      	bcc.n	8011f90 <_tx_byte_pool_search+0x48>
 8011f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	f383 8810 	msr	PRIMASK, r3
}
 8011f88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8011f8e:	e0dd      	b.n	801214c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011f90:	4b72      	ldr	r3, [pc, #456]	; (801215c <_tx_byte_pool_search+0x214>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f9a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	695b      	ldr	r3, [r3, #20]
 8011fa0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8011faa:	2300      	movs	r3, #0
 8011fac:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb0:	3304      	adds	r3, #4
 8011fb2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a68      	ldr	r2, [pc, #416]	; (8012160 <_tx_byte_pool_search+0x218>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d143      	bne.n	801204a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8011fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d104      	bne.n	8011fd2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fcc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd4:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8011fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8011fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fe0:	1ad3      	subs	r3, r2, r3
 8011fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe6:	3b08      	subs	r3, #8
 8011fe8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8011fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d257      	bcs.n	80120a2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8012000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	4a56      	ldr	r2, [pc, #344]	; (8012160 <_tx_byte_pool_search+0x218>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d113      	bne.n	8012032 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012014:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	1e5a      	subs	r2, r3, #1
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	695b      	ldr	r3, [r3, #20]
 8012024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012026:	429a      	cmp	r2, r3
 8012028:	d114      	bne.n	8012054 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801202e:	615a      	str	r2, [r3, #20]
 8012030:	e010      	b.n	8012054 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012034:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8012036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801203e:	2b00      	cmp	r3, #0
 8012040:	d008      	beq.n	8012054 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8012042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012044:	3b01      	subs	r3, #1
 8012046:	64bb      	str	r3, [r7, #72]	; 0x48
 8012048:	e004      	b.n	8012054 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8012054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012056:	2b00      	cmp	r3, #0
 8012058:	d002      	beq.n	8012060 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801205a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801205c:	3b01      	subs	r3, #1
 801205e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012062:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f383 8810 	msr	PRIMASK, r3
}
 801206a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801206c:	f3ef 8310 	mrs	r3, PRIMASK
 8012070:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012072:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012074:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012076:	b672      	cpsid	i
    return(int_posture);
 8012078:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801207a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6a1b      	ldr	r3, [r3, #32]
 8012080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012082:	429a      	cmp	r2, r3
 8012084:	d009      	beq.n	801209a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	695b      	ldr	r3, [r3, #20]
 801208a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	3301      	adds	r3, #1
 8012092:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012098:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801209c:	2b00      	cmp	r3, #0
 801209e:	d186      	bne.n	8011fae <_tx_byte_pool_search+0x66>
 80120a0:	e000      	b.n	80120a4 <_tx_byte_pool_search+0x15c>
                    break;
 80120a2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80120a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d048      	beq.n	801213c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80120aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	1ad3      	subs	r3, r2, r3
 80120b0:	2b13      	cmp	r3, #19
 80120b2:	d91e      	bls.n	80120f2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	3308      	adds	r3, #8
 80120b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120ba:	4413      	add	r3, r2
 80120bc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80120be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c0:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80120c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c4:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80120c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	3304      	adds	r3, #4
 80120d2:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80120d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120da:	4a21      	ldr	r2, [pc, #132]	; (8012160 <_tx_byte_pool_search+0x218>)
 80120dc:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80120e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120ec:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80120f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120f4:	3304      	adds	r3, #4
 80120f6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80120f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fa:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80120fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	689a      	ldr	r2, [r3, #8]
 8012106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	f1a3 0208 	sub.w	r2, r3, #8
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	695b      	ldr	r3, [r3, #20]
 8012116:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012118:	429a      	cmp	r2, r3
 801211a:	d105      	bne.n	8012128 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8012120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	615a      	str	r2, [r3, #20]
 8012128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801212a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f383 8810 	msr	PRIMASK, r3
}
 8012132:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8012134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012136:	3308      	adds	r3, #8
 8012138:	653b      	str	r3, [r7, #80]	; 0x50
 801213a:	e007      	b.n	801214c <_tx_byte_pool_search+0x204>
 801213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801213e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	f383 8810 	msr	PRIMASK, r3
}
 8012146:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8012148:	2300      	movs	r3, #0
 801214a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801214c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801214e:	4618      	mov	r0, r3
 8012150:	375c      	adds	r7, #92	; 0x5c
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr
 801215a:	bf00      	nop
 801215c:	2400368c 	.word	0x2400368c
 8012160:	ffffeeee 	.word	0xffffeeee

08012164 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8012168:	f001 fa28 	bl	80135bc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 801216c:	f001 ff26 	bl	8013fbc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8012170:	4b12      	ldr	r3, [pc, #72]	; (80121bc <_tx_initialize_high_level+0x58>)
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]
 8012176:	4b12      	ldr	r3, [pc, #72]	; (80121c0 <_tx_initialize_high_level+0x5c>)
 8012178:	2200      	movs	r2, #0
 801217a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 801217c:	4b11      	ldr	r3, [pc, #68]	; (80121c4 <_tx_initialize_high_level+0x60>)
 801217e:	2200      	movs	r2, #0
 8012180:	601a      	str	r2, [r3, #0]
 8012182:	4b11      	ldr	r3, [pc, #68]	; (80121c8 <_tx_initialize_high_level+0x64>)
 8012184:	2200      	movs	r2, #0
 8012186:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8012188:	4b10      	ldr	r3, [pc, #64]	; (80121cc <_tx_initialize_high_level+0x68>)
 801218a:	2200      	movs	r2, #0
 801218c:	601a      	str	r2, [r3, #0]
 801218e:	4b10      	ldr	r3, [pc, #64]	; (80121d0 <_tx_initialize_high_level+0x6c>)
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8012194:	4b0f      	ldr	r3, [pc, #60]	; (80121d4 <_tx_initialize_high_level+0x70>)
 8012196:	2200      	movs	r2, #0
 8012198:	601a      	str	r2, [r3, #0]
 801219a:	4b0f      	ldr	r3, [pc, #60]	; (80121d8 <_tx_initialize_high_level+0x74>)
 801219c:	2200      	movs	r2, #0
 801219e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80121a0:	4b0e      	ldr	r3, [pc, #56]	; (80121dc <_tx_initialize_high_level+0x78>)
 80121a2:	2200      	movs	r2, #0
 80121a4:	601a      	str	r2, [r3, #0]
 80121a6:	4b0e      	ldr	r3, [pc, #56]	; (80121e0 <_tx_initialize_high_level+0x7c>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80121ac:	4b0d      	ldr	r3, [pc, #52]	; (80121e4 <_tx_initialize_high_level+0x80>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	601a      	str	r2, [r3, #0]
 80121b2:	4b0d      	ldr	r3, [pc, #52]	; (80121e8 <_tx_initialize_high_level+0x84>)
 80121b4:	2200      	movs	r2, #0
 80121b6:	601a      	str	r2, [r3, #0]
#endif
}
 80121b8:	bf00      	nop
 80121ba:	bd80      	pop	{r7, pc}
 80121bc:	24003654 	.word	0x24003654
 80121c0:	24003658 	.word	0x24003658
 80121c4:	2400365c 	.word	0x2400365c
 80121c8:	24003660 	.word	0x24003660
 80121cc:	24003664 	.word	0x24003664
 80121d0:	24003668 	.word	0x24003668
 80121d4:	24003674 	.word	0x24003674
 80121d8:	24003678 	.word	0x24003678
 80121dc:	2400367c 	.word	0x2400367c
 80121e0:	24003680 	.word	0x24003680
 80121e4:	2400366c 	.word	0x2400366c
 80121e8:	24003670 	.word	0x24003670

080121ec <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80121f0:	4b10      	ldr	r3, [pc, #64]	; (8012234 <_tx_initialize_kernel_enter+0x48>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80121f8:	d00c      	beq.n	8012214 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80121fa:	4b0e      	ldr	r3, [pc, #56]	; (8012234 <_tx_initialize_kernel_enter+0x48>)
 80121fc:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8012200:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8012202:	f7ee f86d 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8012206:	f7ff ffad 	bl	8012164 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801220a:	4b0b      	ldr	r3, [pc, #44]	; (8012238 <_tx_initialize_kernel_enter+0x4c>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	3301      	adds	r3, #1
 8012210:	4a09      	ldr	r2, [pc, #36]	; (8012238 <_tx_initialize_kernel_enter+0x4c>)
 8012212:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8012214:	4b07      	ldr	r3, [pc, #28]	; (8012234 <_tx_initialize_kernel_enter+0x48>)
 8012216:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801221a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801221c:	4b07      	ldr	r3, [pc, #28]	; (801223c <_tx_initialize_kernel_enter+0x50>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4618      	mov	r0, r3
 8012222:	f7ee faf7 	bl	8000814 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8012226:	4b03      	ldr	r3, [pc, #12]	; (8012234 <_tx_initialize_kernel_enter+0x48>)
 8012228:	2200      	movs	r2, #0
 801222a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801222c:	f7ee f898 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8012230:	bf00      	nop
 8012232:	bd80      	pop	{r7, pc}
 8012234:	2400006c 	.word	0x2400006c
 8012238:	24003724 	.word	0x24003724
 801223c:	24003684 	.word	0x24003684

08012240 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b08e      	sub	sp, #56	; 0x38
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801224a:	f3ef 8310 	mrs	r3, PRIMASK
 801224e:	623b      	str	r3, [r7, #32]
    return(posture);
 8012250:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012252:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012254:	b672      	cpsid	i
    return(int_posture);
 8012256:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8012258:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801225e:	4a33      	ldr	r2, [pc, #204]	; (801232c <_tx_mutex_cleanup+0xec>)
 8012260:	4293      	cmp	r3, r2
 8012262:	d158      	bne.n	8012316 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801226a:	683a      	ldr	r2, [r7, #0]
 801226c:	429a      	cmp	r2, r3
 801226e:	d152      	bne.n	8012316 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012274:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8012276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012278:	2b00      	cmp	r3, #0
 801227a:	d04c      	beq.n	8012316 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a2b      	ldr	r2, [pc, #172]	; (8012330 <_tx_mutex_cleanup+0xf0>)
 8012282:	4293      	cmp	r3, r2
 8012284:	d147      	bne.n	8012316 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012288:	69db      	ldr	r3, [r3, #28]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d043      	beq.n	8012316 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2200      	movs	r2, #0
 8012292:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8012294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012296:	69db      	ldr	r3, [r3, #28]
 8012298:	1e5a      	subs	r2, r3, #1
 801229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229c:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a0:	69db      	ldr	r3, [r3, #28]
 80122a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d103      	bne.n	80122b2 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80122aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ac:	2200      	movs	r2, #0
 80122ae:	619a      	str	r2, [r3, #24]
 80122b0:	e013      	b.n	80122da <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122bc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80122be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122c2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122c8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80122ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122cc:	699b      	ldr	r3, [r3, #24]
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d102      	bne.n	80122da <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80122d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122d8:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122de:	2b0d      	cmp	r3, #13
 80122e0:	d119      	bne.n	8012316 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	221d      	movs	r2, #29
 80122e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80122ea:	4b12      	ldr	r3, [pc, #72]	; (8012334 <_tx_mutex_cleanup+0xf4>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	3301      	adds	r3, #1
 80122f0:	4a10      	ldr	r2, [pc, #64]	; (8012334 <_tx_mutex_cleanup+0xf4>)
 80122f2:	6013      	str	r3, [r2, #0]
 80122f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	f383 8810 	msr	PRIMASK, r3
}
 80122fe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f001 fb11 	bl	8013928 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012306:	f3ef 8310 	mrs	r3, PRIMASK
 801230a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801230c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801230e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012310:	b672      	cpsid	i
    return(int_posture);
 8012312:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012314:	637b      	str	r3, [r7, #52]	; 0x34
 8012316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012318:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f383 8810 	msr	PRIMASK, r3
}
 8012320:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012322:	bf00      	nop
 8012324:	3738      	adds	r7, #56	; 0x38
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	08012241 	.word	0x08012241
 8012330:	4d555445 	.word	0x4d555445
 8012334:	24003724 	.word	0x24003724

08012338 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b08a      	sub	sp, #40	; 0x28
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012340:	f3ef 8310 	mrs	r3, PRIMASK
 8012344:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012346:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012348:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801234a:	b672      	cpsid	i
    return(int_posture);
 801234c:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801234e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012350:	4b1a      	ldr	r3, [pc, #104]	; (80123bc <_tx_mutex_thread_release+0x84>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	3301      	adds	r3, #1
 8012356:	4a19      	ldr	r2, [pc, #100]	; (80123bc <_tx_mutex_thread_release+0x84>)
 8012358:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012360:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8012362:	6a3b      	ldr	r3, [r7, #32]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d017      	beq.n	8012398 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8012368:	6a3b      	ldr	r3, [r7, #32]
 801236a:	2201      	movs	r2, #1
 801236c:	609a      	str	r2, [r3, #8]
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f383 8810 	msr	PRIMASK, r3
}
 8012378:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 801237a:	6a38      	ldr	r0, [r7, #32]
 801237c:	f000 fb9c 	bl	8012ab8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012380:	f3ef 8310 	mrs	r3, PRIMASK
 8012384:	617b      	str	r3, [r7, #20]
    return(posture);
 8012386:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012388:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801238a:	b672      	cpsid	i
    return(int_posture);
 801238c:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 801238e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012396:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d1dd      	bne.n	801235a <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801239e:	4b07      	ldr	r3, [pc, #28]	; (80123bc <_tx_mutex_thread_release+0x84>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	3b01      	subs	r3, #1
 80123a4:	4a05      	ldr	r2, [pc, #20]	; (80123bc <_tx_mutex_thread_release+0x84>)
 80123a6:	6013      	str	r3, [r2, #0]
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	f383 8810 	msr	PRIMASK, r3
}
 80123b2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80123b4:	bf00      	nop
 80123b6:	3728      	adds	r7, #40	; 0x28
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	24003724 	.word	0x24003724

080123c0 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b08a      	sub	sp, #40	; 0x28
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80123cc:	2234      	movs	r2, #52	; 0x34
 80123ce:	2100      	movs	r1, #0
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f002 fb41 	bl	8014a58 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123e2:	f3ef 8310 	mrs	r3, PRIMASK
 80123e6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80123e8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80123ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80123ec:	b672      	cpsid	i
    return(int_posture);
 80123ee:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80123f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	4a1a      	ldr	r2, [pc, #104]	; (8012460 <_tx_mutex_create+0xa0>)
 80123f6:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80123f8:	4b1a      	ldr	r3, [pc, #104]	; (8012464 <_tx_mutex_create+0xa4>)
 80123fa:	4a1b      	ldr	r2, [pc, #108]	; (8012468 <_tx_mutex_create+0xa8>)
 80123fc:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80123fe:	4b1b      	ldr	r3, [pc, #108]	; (801246c <_tx_mutex_create+0xac>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d109      	bne.n	801241a <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8012406:	4a1a      	ldr	r2, [pc, #104]	; (8012470 <_tx_mutex_create+0xb0>)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	68fa      	ldr	r2, [r7, #12]
 8012410:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	625a      	str	r2, [r3, #36]	; 0x24
 8012418:	e011      	b.n	801243e <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 801241a:	4b15      	ldr	r3, [pc, #84]	; (8012470 <_tx_mutex_create+0xb0>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8012420:	6a3b      	ldr	r3, [r7, #32]
 8012422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012424:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8012426:	6a3b      	ldr	r3, [r7, #32]
 8012428:	68fa      	ldr	r2, [r7, #12]
 801242a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	68fa      	ldr	r2, [r7, #12]
 8012430:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	69fa      	ldr	r2, [r7, #28]
 8012436:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6a3a      	ldr	r2, [r7, #32]
 801243c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 801243e:	4b0b      	ldr	r3, [pc, #44]	; (801246c <_tx_mutex_create+0xac>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	3301      	adds	r3, #1
 8012444:	4a09      	ldr	r2, [pc, #36]	; (801246c <_tx_mutex_create+0xac>)
 8012446:	6013      	str	r3, [r2, #0]
 8012448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	f383 8810 	msr	PRIMASK, r3
}
 8012452:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	3728      	adds	r7, #40	; 0x28
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	4d555445 	.word	0x4d555445
 8012464:	24003728 	.word	0x24003728
 8012468:	08012339 	.word	0x08012339
 801246c:	24003670 	.word	0x24003670
 8012470:	2400366c 	.word	0x2400366c

08012474 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b096      	sub	sp, #88	; 0x58
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801247c:	f3ef 8310 	mrs	r3, PRIMASK
 8012480:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012484:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012486:	b672      	cpsid	i
    return(int_posture);
 8012488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 801248a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8012492:	4b4a      	ldr	r3, [pc, #296]	; (80125bc <_tx_mutex_delete+0x148>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3b01      	subs	r3, #1
 8012498:	4a48      	ldr	r2, [pc, #288]	; (80125bc <_tx_mutex_delete+0x148>)
 801249a:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801249c:	4b47      	ldr	r3, [pc, #284]	; (80125bc <_tx_mutex_delete+0x148>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d103      	bne.n	80124ac <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 80124a4:	4b46      	ldr	r3, [pc, #280]	; (80125c0 <_tx_mutex_delete+0x14c>)
 80124a6:	2200      	movs	r2, #0
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	e013      	b.n	80124d4 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6a1b      	ldr	r3, [r3, #32]
 80124b0:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b6:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 80124b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124bc:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 80124be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124c2:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 80124c4:	4b3e      	ldr	r3, [pc, #248]	; (80125c0 <_tx_mutex_delete+0x14c>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d102      	bne.n	80124d4 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 80124ce:	4a3c      	ldr	r2, [pc, #240]	; (80125c0 <_tx_mutex_delete+0x14c>)
 80124d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124d2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80124d4:	4b3b      	ldr	r3, [pc, #236]	; (80125c4 <_tx_mutex_delete+0x150>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	3301      	adds	r3, #1
 80124da:	4a3a      	ldr	r2, [pc, #232]	; (80125c4 <_tx_mutex_delete+0x150>)
 80124dc:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	699b      	ldr	r3, [r3, #24]
 80124e2:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	69db      	ldr	r3, [r3, #28]
 80124ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80124fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d013      	beq.n	801252a <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2201      	movs	r2, #1
 8012506:	609a      	str	r2, [r3, #8]
 8012508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801250a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	f383 8810 	msr	PRIMASK, r3
}
 8012512:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f000 facf 	bl	8012ab8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801251a:	f3ef 8310 	mrs	r3, PRIMASK
 801251e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8012520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8012522:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012524:	b672      	cpsid	i
    return(int_posture);
 8012526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8012528:	657b      	str	r3, [r7, #84]	; 0x54
 801252a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801252c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012530:	f383 8810 	msr	PRIMASK, r3
}
 8012534:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8012536:	e024      	b.n	8012582 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8012538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801253a:	3b01      	subs	r3, #1
 801253c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801253e:	f3ef 8310 	mrs	r3, PRIMASK
 8012542:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012544:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012546:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012548:	b672      	cpsid	i
    return(int_posture);
 801254a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801254c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801254e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012550:	2200      	movs	r2, #0
 8012552:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8012554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012556:	2201      	movs	r2, #1
 8012558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801255c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012560:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8012562:	4b18      	ldr	r3, [pc, #96]	; (80125c4 <_tx_mutex_delete+0x150>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	3301      	adds	r3, #1
 8012568:	4a16      	ldr	r2, [pc, #88]	; (80125c4 <_tx_mutex_delete+0x150>)
 801256a:	6013      	str	r3, [r2, #0]
 801256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801256e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012570:	6a3b      	ldr	r3, [r7, #32]
 8012572:	f383 8810 	msr	PRIMASK, r3
}
 8012576:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012578:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801257a:	f001 f9d5 	bl	8013928 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012580:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8012582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1d7      	bne.n	8012538 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012588:	f3ef 8310 	mrs	r3, PRIMASK
 801258c:	613b      	str	r3, [r7, #16]
    return(posture);
 801258e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8012590:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012592:	b672      	cpsid	i
    return(int_posture);
 8012594:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8012596:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8012598:	4b0a      	ldr	r3, [pc, #40]	; (80125c4 <_tx_mutex_delete+0x150>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3b01      	subs	r3, #1
 801259e:	4a09      	ldr	r2, [pc, #36]	; (80125c4 <_tx_mutex_delete+0x150>)
 80125a0:	6013      	str	r3, [r2, #0]
 80125a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	f383 8810 	msr	PRIMASK, r3
}
 80125ac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80125ae:	f001 f981 	bl	80138b4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80125b2:	2300      	movs	r3, #0
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3758      	adds	r7, #88	; 0x58
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	24003670 	.word	0x24003670
 80125c0:	2400366c 	.word	0x2400366c
 80125c4:	24003724 	.word	0x24003724

080125c8 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b092      	sub	sp, #72	; 0x48
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125d2:	f3ef 8310 	mrs	r3, PRIMASK
 80125d6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80125da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125dc:	b672      	cpsid	i
    return(int_posture);
 80125de:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80125e0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80125e2:	4b7a      	ldr	r3, [pc, #488]	; (80127cc <_tx_mutex_get+0x204>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	689b      	ldr	r3, [r3, #8]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d144      	bne.n	801267a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2201      	movs	r2, #1
 80125f4:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125fa:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80125fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d032      	beq.n	8012668 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	691b      	ldr	r3, [r3, #16]
 8012606:	2b01      	cmp	r3, #1
 8012608:	d106      	bne.n	8012618 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801260a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801260c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2220      	movs	r2, #32
 8012616:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801261a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801261e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00f      	beq.n	8012646 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8012626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801262a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8012632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801263c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012642:	62da      	str	r2, [r3, #44]	; 0x2c
 8012644:	e009      	b.n	801265a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801265c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012664:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8012668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801266a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	f383 8810 	msr	PRIMASK, r3
}
 8012672:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8012674:	2300      	movs	r3, #0
 8012676:	647b      	str	r3, [r7, #68]	; 0x44
 8012678:	e0a2      	b.n	80127c0 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012680:	429a      	cmp	r2, r3
 8012682:	d10d      	bne.n	80126a0 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	609a      	str	r2, [r3, #8]
 801268e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012690:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012692:	69bb      	ldr	r3, [r7, #24]
 8012694:	f383 8810 	msr	PRIMASK, r3
}
 8012698:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801269a:	2300      	movs	r3, #0
 801269c:	647b      	str	r3, [r7, #68]	; 0x44
 801269e:	e08f      	b.n	80127c0 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 8084 	beq.w	80127b0 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80126a8:	4b49      	ldr	r3, [pc, #292]	; (80127d0 <_tx_mutex_get+0x208>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d008      	beq.n	80126c2 <_tx_mutex_get+0xfa>
 80126b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	f383 8810 	msr	PRIMASK, r3
}
 80126ba:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80126bc:	231d      	movs	r3, #29
 80126be:	647b      	str	r3, [r7, #68]	; 0x44
 80126c0:	e07e      	b.n	80127c0 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80126c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ca:	4a42      	ldr	r2, [pc, #264]	; (80127d4 <_tx_mutex_get+0x20c>)
 80126cc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80126ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80126d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80126da:	1c5a      	adds	r2, r3, #1
 80126dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	69db      	ldr	r3, [r3, #28]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d109      	bne.n	80126fe <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126ee:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80126f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126f4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80126f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126fa:	675a      	str	r2, [r3, #116]	; 0x74
 80126fc:	e011      	b.n	8012722 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	699b      	ldr	r3, [r3, #24]
 8012702:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012708:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801270e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012714:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801271a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801271e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012720:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	69db      	ldr	r3, [r3, #28]
 8012726:	1c5a      	adds	r2, r3, #1
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272e:	220d      	movs	r2, #13
 8012730:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012734:	2201      	movs	r2, #1
 8012736:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273a:	683a      	ldr	r2, [r7, #0]
 801273c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801273e:	4b24      	ldr	r3, [pc, #144]	; (80127d0 <_tx_mutex_get+0x208>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	3301      	adds	r3, #1
 8012744:	4a22      	ldr	r2, [pc, #136]	; (80127d0 <_tx_mutex_get+0x208>)
 8012746:	6013      	str	r3, [r2, #0]
 8012748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801274a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	f383 8810 	msr	PRIMASK, r3
}
 8012752:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d121      	bne.n	80127a0 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012764:	429a      	cmp	r2, r3
 8012766:	d903      	bls.n	8012770 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8012768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8012770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801277a:	429a      	cmp	r2, r3
 801277c:	d204      	bcs.n	8012788 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012790:	429a      	cmp	r2, r3
 8012792:	d905      	bls.n	80127a0 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8012794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012798:	4619      	mov	r1, r3
 801279a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801279c:	f000 f8ce 	bl	801293c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80127a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80127a2:	f001 f9c1 	bl	8013b28 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80127a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127ac:	647b      	str	r3, [r7, #68]	; 0x44
 80127ae:	e007      	b.n	80127c0 <_tx_mutex_get+0x1f8>
 80127b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f383 8810 	msr	PRIMASK, r3
}
 80127ba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80127bc:	231d      	movs	r3, #29
 80127be:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80127c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3748      	adds	r7, #72	; 0x48
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	2400368c 	.word	0x2400368c
 80127d0:	24003724 	.word	0x24003724
 80127d4:	08012241 	.word	0x08012241

080127d8 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b092      	sub	sp, #72	; 0x48
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127e0:	f3ef 8310 	mrs	r3, PRIMASK
 80127e4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80127e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80127e8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127ea:	b672      	cpsid	i
    return(int_posture);
 80127ec:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80127ee:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	69db      	ldr	r3, [r3, #28]
 80127f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80127f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d805      	bhi.n	8012808 <_tx_mutex_prioritize+0x30>
 80127fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	f383 8810 	msr	PRIMASK, r3
}
 8012806:	e092      	b.n	801292e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8012808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801280a:	2b02      	cmp	r3, #2
 801280c:	d114      	bne.n	8012838 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	699b      	ldr	r3, [r3, #24]
 8012812:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012818:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012822:	429a      	cmp	r2, r3
 8012824:	d202      	bcs.n	801282c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801282a:	619a      	str	r2, [r3, #24]
 801282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801282e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	f383 8810 	msr	PRIMASK, r3
}
 8012836:	e07a      	b.n	801292e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	699b      	ldr	r3, [r3, #24]
 801283c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012840:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8012842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012846:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8012848:	4b3b      	ldr	r3, [pc, #236]	; (8012938 <_tx_mutex_prioritize+0x160>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	3301      	adds	r3, #1
 801284e:	4a3a      	ldr	r2, [pc, #232]	; (8012938 <_tx_mutex_prioritize+0x160>)
 8012850:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8012852:	2300      	movs	r3, #0
 8012854:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8012856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801285a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801285e:	429a      	cmp	r2, r3
 8012860:	d201      	bcs.n	8012866 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8012862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012868:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	f383 8810 	msr	PRIMASK, r3
}
 8012870:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012872:	f3ef 8310 	mrs	r3, PRIMASK
 8012876:	617b      	str	r3, [r7, #20]
    return(posture);
 8012878:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801287a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801287c:	b672      	cpsid	i
    return(int_posture);
 801287e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012880:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	699b      	ldr	r3, [r3, #24]
 8012886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012888:	429a      	cmp	r2, r3
 801288a:	d002      	beq.n	8012892 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 801288c:	2301      	movs	r3, #1
 801288e:	633b      	str	r3, [r7, #48]	; 0x30
 8012890:	e006      	b.n	80128a0 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012898:	429a      	cmp	r2, r3
 801289a:	d001      	beq.n	80128a0 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 801289c:	2301      	movs	r3, #1
 801289e:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80128a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d103      	bne.n	80128ae <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80128a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128aa:	643b      	str	r3, [r7, #64]	; 0x40
 80128ac:	e00c      	b.n	80128c8 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	699b      	ldr	r3, [r3, #24]
 80128b2:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	69db      	ldr	r3, [r3, #28]
 80128b8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80128ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128bc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80128be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80128c4:	2300      	movs	r3, #0
 80128c6:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 80128c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d1c2      	bne.n	8012856 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80128d0:	4b19      	ldr	r3, [pc, #100]	; (8012938 <_tx_mutex_prioritize+0x160>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	4a18      	ldr	r2, [pc, #96]	; (8012938 <_tx_mutex_prioritize+0x160>)
 80128d8:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80128da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128de:	429a      	cmp	r2, r3
 80128e0:	d01d      	beq.n	801291e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80128e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80128e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ec:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80128ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128f2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80128f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128f8:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80128fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128fe:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8012900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012904:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8012906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801290a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 801290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012910:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8012912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012916:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801291c:	619a      	str	r2, [r3, #24]
 801291e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012920:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	f383 8810 	msr	PRIMASK, r3
}
 8012928:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801292a:	f000 ffc3 	bl	80138b4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801292e:	2300      	movs	r3, #0
#endif
}
 8012930:	4618      	mov	r0, r3
 8012932:	3748      	adds	r7, #72	; 0x48
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	24003724 	.word	0x24003724

0801293c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b090      	sub	sp, #64	; 0x40
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012946:	f3ef 8310 	mrs	r3, PRIMASK
 801294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801294e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012950:	b672      	cpsid	i
    return(int_posture);
 8012952:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012954:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801295a:	2b00      	cmp	r3, #0
 801295c:	d017      	beq.n	801298e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	683a      	ldr	r2, [r7, #0]
 8012962:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	429a      	cmp	r2, r3
 801296e:	d905      	bls.n	801297c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	63da      	str	r2, [r3, #60]	; 0x3c
 801297a:	e002      	b.n	8012982 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	683a      	ldr	r2, [r7, #0]
 8012980:	63da      	str	r2, [r3, #60]	; 0x3c
 8012982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012984:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	f383 8810 	msr	PRIMASK, r3
}
 801298c:	e089      	b.n	8012aa2 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 801298e:	4b47      	ldr	r3, [pc, #284]	; (8012aac <_tx_mutex_priority_change+0x170>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012998:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 801299a:	4b45      	ldr	r3, [pc, #276]	; (8012ab0 <_tx_mutex_priority_change+0x174>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	3302      	adds	r3, #2
 80129a0:	4a43      	ldr	r2, [pc, #268]	; (8012ab0 <_tx_mutex_priority_change+0x174>)
 80129a2:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	220e      	movs	r2, #14
 80129a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2201      	movs	r2, #1
 80129ae:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80129b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129ba:	69bb      	ldr	r3, [r7, #24]
 80129bc:	f383 8810 	msr	PRIMASK, r3
}
 80129c0:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f001 f8b0 	bl	8013b28 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80129c8:	f3ef 8310 	mrs	r3, PRIMASK
 80129cc:	623b      	str	r3, [r7, #32]
    return(posture);
 80129ce:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80129d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80129d2:	b672      	cpsid	i
    return(int_posture);
 80129d4:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80129d6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	683a      	ldr	r2, [r7, #0]
 80129dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d905      	bls.n	80129f6 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80129f4:	e002      	b.n	80129fc <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	683a      	ldr	r2, [r7, #0]
 80129fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80129fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f383 8810 	msr	PRIMASK, r3
}
 8012a06:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f000 ff8d 	bl	8013928 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8012a12:	617b      	str	r3, [r7, #20]
    return(posture);
 8012a14:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012a16:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a18:	b672      	cpsid	i
    return(int_posture);
 8012a1a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8012a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8012a1e:	4b23      	ldr	r3, [pc, #140]	; (8012aac <_tx_mutex_priority_change+0x170>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d034      	beq.n	8012a96 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d130      	bne.n	8012a96 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d811      	bhi.n	8012a64 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d126      	bne.n	8012a96 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8012a48:	4a18      	ldr	r2, [pc, #96]	; (8012aac <_tx_mutex_priority_change+0x170>)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8012a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d21f      	bcs.n	8012a96 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a5a:	4916      	ldr	r1, [pc, #88]	; (8012ab4 <_tx_mutex_priority_change+0x178>)
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012a62:	e018      	b.n	8012a96 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d212      	bcs.n	8012a96 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d80c      	bhi.n	8012a96 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012a7c:	4a0b      	ldr	r2, [pc, #44]	; (8012aac <_tx_mutex_priority_change+0x170>)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8012a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d205      	bcs.n	8012a96 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a8e:	4909      	ldr	r1, [pc, #36]	; (8012ab4 <_tx_mutex_priority_change+0x178>)
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a98:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	f383 8810 	msr	PRIMASK, r3
}
 8012aa0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012aa2:	bf00      	nop
 8012aa4:	3740      	adds	r7, #64	; 0x40
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	24003690 	.word	0x24003690
 8012ab0:	24003724 	.word	0x24003724
 8012ab4:	240036a4 	.word	0x240036a4

08012ab8 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b0a6      	sub	sp, #152	; 0x98
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8012ac0:	2320      	movs	r3, #32
 8012ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8012aca:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8012acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8012ace:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ad0:	b672      	cpsid	i
    return(int_posture);
 8012ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8012ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	689b      	ldr	r3, [r3, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f000 81ff 	beq.w	8012ee0 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012ae8:	4ba3      	ldr	r3, [pc, #652]	; (8012d78 <_tx_mutex_put+0x2c0>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d00d      	beq.n	8012b14 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8012af8:	4ba0      	ldr	r3, [pc, #640]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d109      	bne.n	8012b14 <_tx_mutex_put+0x5c>
 8012b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b04:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b08:	f383 8810 	msr	PRIMASK, r3
}
 8012b0c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8012b0e:	231e      	movs	r3, #30
 8012b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8012b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012b18:	2b20      	cmp	r3, #32
 8012b1a:	f040 81eb 	bne.w	8012ef4 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	1e5a      	subs	r2, r3, #1
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00a      	beq.n	8012b46 <_tx_mutex_put+0x8e>
 8012b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b34:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b38:	f383 8810 	msr	PRIMASK, r3
}
 8012b3c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012b44:	e1d6      	b.n	8012ef4 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8012b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d10a      	bne.n	8012b62 <_tx_mutex_put+0xaa>
 8012b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b50:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b54:	f383 8810 	msr	PRIMASK, r3
}
 8012b58:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012b60:	e1c8      	b.n	8012ef4 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8012b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012b68:	1e5a      	subs	r2, r3, #1
 8012b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8012b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d104      	bne.n	8012b84 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8012b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8012b82:	e019      	b.n	8012bb8 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b90:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8012b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012b98:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8012b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ba0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8012ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d104      	bne.n	8012bb8 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8012bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012bb4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	699b      	ldr	r3, [r3, #24]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d110      	bne.n	8012be2 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d10c      	bne.n	8012be2 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	60da      	str	r2, [r3, #12]
 8012bce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012bd2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bd6:	f383 8810 	msr	PRIMASK, r3
}
 8012bda:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8012be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012be6:	2b20      	cmp	r3, #32
 8012be8:	f040 8184 	bne.w	8012ef4 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8012bec:	2300      	movs	r3, #0
 8012bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8012bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d155      	bne.n	8012cb0 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012c04:	4b5d      	ldr	r3, [pc, #372]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	4a5c      	ldr	r2, [pc, #368]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012c0c:	6013      	str	r3, [r2, #0]
 8012c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c12:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c16:	f383 8810 	msr	PRIMASK, r3
}
 8012c1a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012c1c:	2320      	movs	r3, #32
 8012c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012c2c:	e01f      	b.n	8012c6e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8012c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c32:	691b      	ldr	r3, [r3, #16]
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d10b      	bne.n	8012c50 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8012c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d904      	bls.n	8012c50 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8012c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8012c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8012c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012c60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d102      	bne.n	8012c6e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1db      	bne.n	8012c2e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c76:	f3ef 8310 	mrs	r3, PRIMASK
 8012c7a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8012c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8012c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c80:	b672      	cpsid	i
    return(int_posture);
 8012c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012c84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012c88:	4b3c      	ldr	r3, [pc, #240]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	3b01      	subs	r3, #1
 8012c8e:	4a3b      	ldr	r2, [pc, #236]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012c90:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8012c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8012c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d203      	bcs.n	8012cb0 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8012ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	69db      	ldr	r3, [r3, #28]
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d920      	bls.n	8012cfa <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d11c      	bne.n	8012cfa <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8012cc0:	4b2e      	ldr	r3, [pc, #184]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	4a2d      	ldr	r2, [pc, #180]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012cc8:	6013      	str	r3, [r2, #0]
 8012cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012cce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd2:	f383 8810 	msr	PRIMASK, r3
}
 8012cd6:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff fd7d 	bl	80127d8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012cde:	f3ef 8310 	mrs	r3, PRIMASK
 8012ce2:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012ce6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ce8:	b672      	cpsid	i
    return(int_posture);
 8012cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8012cec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8012cf0:	4b22      	ldr	r3, [pc, #136]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	4a21      	ldr	r2, [pc, #132]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012cf8:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	699b      	ldr	r3, [r3, #24]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d13e      	bne.n	8012d80 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012d02:	4b1e      	ldr	r3, [pc, #120]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	3301      	adds	r3, #1
 8012d08:	4a1c      	ldr	r2, [pc, #112]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012d0a:	6013      	str	r3, [r2, #0]
 8012d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d14:	f383 8810 	msr	PRIMASK, r3
}
 8012d18:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2220      	movs	r2, #32
 8012d1e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d26:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d006      	beq.n	8012d3c <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7ff fe00 	bl	801293c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8012d40:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012d44:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d46:	b672      	cpsid	i
    return(int_posture);
 8012d48:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8012d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012d4e:	4b0b      	ldr	r3, [pc, #44]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	3b01      	subs	r3, #1
 8012d54:	4a09      	ldr	r2, [pc, #36]	; (8012d7c <_tx_mutex_put+0x2c4>)
 8012d56:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	60da      	str	r2, [r3, #12]
 8012d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d62:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d66:	f383 8810 	msr	PRIMASK, r3
}
 8012d6a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8012d6c:	f000 fda2 	bl	80138b4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8012d70:	2300      	movs	r3, #0
 8012d72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012d76:	e0bd      	b.n	8012ef4 <_tx_mutex_put+0x43c>
 8012d78:	2400368c 	.word	0x2400368c
 8012d7c:	24003724 	.word	0x24003724
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	699b      	ldr	r3, [r3, #24]
 8012d84:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	691b      	ldr	r3, [r3, #16]
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d10a      	bne.n	8012da4 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8012d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2220      	movs	r2, #32
 8012da2:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8012da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012daa:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8012dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d10a      	bne.n	8012dc8 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8012dc6:	e016      	b.n	8012df6 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8012dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8012dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd8:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8012dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8012de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012dec:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012df4:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8012df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dfc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2201      	movs	r2, #1
 8012e04:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012e0a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	69db      	ldr	r3, [r3, #28]
 8012e10:	1e5a      	subs	r2, r3, #1
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	69db      	ldr	r3, [r3, #28]
 8012e1a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8012e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d103      	bne.n	8012e2a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2200      	movs	r2, #0
 8012e26:	619a      	str	r2, [r3, #24]
 8012e28:	e00e      	b.n	8012e48 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8012e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e2e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012e34:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8012e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e3a:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e40:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8012e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012e46:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e50:	2200      	movs	r2, #0
 8012e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012e56:	4b2a      	ldr	r3, [pc, #168]	; (8012f00 <_tx_mutex_put+0x448>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	4a28      	ldr	r2, [pc, #160]	; (8012f00 <_tx_mutex_put+0x448>)
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012e64:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	f383 8810 	msr	PRIMASK, r3
}
 8012e6c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	691b      	ldr	r3, [r3, #16]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d12d      	bne.n	8012ed2 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	69db      	ldr	r3, [r3, #28]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d01c      	beq.n	8012eb8 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f7ff fcaa 	bl	80127d8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e84:	f3ef 8310 	mrs	r3, PRIMASK
 8012e88:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e8a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e8c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e8e:	b672      	cpsid	i
    return(int_posture);
 8012e90:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8012e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	699b      	ldr	r3, [r3, #24]
 8012e9a:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8012e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d003      	beq.n	8012eaa <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8012ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	629a      	str	r2, [r3, #40]	; 0x28
 8012eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012eae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	f383 8810 	msr	PRIMASK, r3
}
 8012eb6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8012eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ebe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d005      	beq.n	8012ed2 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8012ec6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012eca:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8012ece:	f7ff fd35 	bl	801293c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8012ed2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012ed4:	f000 fd28 	bl	8013928 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012ede:	e009      	b.n	8012ef4 <_tx_mutex_put+0x43c>
 8012ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ee4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	f383 8810 	msr	PRIMASK, r3
}
 8012eec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8012eee:	231e      	movs	r3, #30
 8012ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8012ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3798      	adds	r7, #152	; 0x98
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	24003724 	.word	0x24003724

08012f04 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b08e      	sub	sp, #56	; 0x38
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f12:	623b      	str	r3, [r7, #32]
    return(posture);
 8012f14:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012f16:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f18:	b672      	cpsid	i
    return(int_posture);
 8012f1a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8012f1c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f22:	4a33      	ldr	r2, [pc, #204]	; (8012ff0 <_tx_semaphore_cleanup+0xec>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d158      	bne.n	8012fda <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d152      	bne.n	8012fda <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f38:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d04c      	beq.n	8012fda <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8012f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4a2b      	ldr	r2, [pc, #172]	; (8012ff4 <_tx_semaphore_cleanup+0xf0>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d147      	bne.n	8012fda <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	691b      	ldr	r3, [r3, #16]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d043      	beq.n	8012fda <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8012f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5a:	691b      	ldr	r3, [r3, #16]
 8012f5c:	1e5a      	subs	r2, r3, #1
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f64:	691b      	ldr	r3, [r3, #16]
 8012f66:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d103      	bne.n	8012f76 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8012f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f70:	2200      	movs	r2, #0
 8012f72:	60da      	str	r2, [r3, #12]
 8012f74:	e013      	b.n	8012f9e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f7a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f80:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f86:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f8c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8012f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d102      	bne.n	8012f9e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8012f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f9c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fa2:	2b06      	cmp	r3, #6
 8012fa4:	d119      	bne.n	8012fda <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	220d      	movs	r2, #13
 8012faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012fae:	4b12      	ldr	r3, [pc, #72]	; (8012ff8 <_tx_semaphore_cleanup+0xf4>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	4a10      	ldr	r2, [pc, #64]	; (8012ff8 <_tx_semaphore_cleanup+0xf4>)
 8012fb6:	6013      	str	r3, [r2, #0]
 8012fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	f383 8810 	msr	PRIMASK, r3
}
 8012fc2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 fcaf 	bl	8013928 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fca:	f3ef 8310 	mrs	r3, PRIMASK
 8012fce:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012fd0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012fd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fd4:	b672      	cpsid	i
    return(int_posture);
 8012fd6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8012fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fdc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f383 8810 	msr	PRIMASK, r3
}
 8012fe4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012fe6:	bf00      	nop
 8012fe8:	3738      	adds	r7, #56	; 0x38
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	08012f05 	.word	0x08012f05
 8012ff4:	53454d41 	.word	0x53454d41
 8012ff8:	24003724 	.word	0x24003724

08012ffc <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b08a      	sub	sp, #40	; 0x28
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	60b9      	str	r1, [r7, #8]
 8013006:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8013008:	221c      	movs	r2, #28
 801300a:	2100      	movs	r1, #0
 801300c:	68f8      	ldr	r0, [r7, #12]
 801300e:	f001 fd23 	bl	8014a58 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	68ba      	ldr	r2, [r7, #8]
 8013016:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801301e:	f3ef 8310 	mrs	r3, PRIMASK
 8013022:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013024:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013026:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013028:	b672      	cpsid	i
    return(int_posture);
 801302a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 801302c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	4a18      	ldr	r2, [pc, #96]	; (8013094 <_tx_semaphore_create+0x98>)
 8013032:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8013034:	4b18      	ldr	r3, [pc, #96]	; (8013098 <_tx_semaphore_create+0x9c>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d109      	bne.n	8013050 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801303c:	4a17      	ldr	r2, [pc, #92]	; (801309c <_tx_semaphore_create+0xa0>)
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	68fa      	ldr	r2, [r7, #12]
 8013046:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	68fa      	ldr	r2, [r7, #12]
 801304c:	619a      	str	r2, [r3, #24]
 801304e:	e011      	b.n	8013074 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8013050:	4b12      	ldr	r3, [pc, #72]	; (801309c <_tx_semaphore_create+0xa0>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8013056:	6a3b      	ldr	r3, [r7, #32]
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 801305c:	6a3b      	ldr	r3, [r7, #32]
 801305e:	68fa      	ldr	r2, [r7, #12]
 8013060:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8013062:	69fb      	ldr	r3, [r7, #28]
 8013064:	68fa      	ldr	r2, [r7, #12]
 8013066:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	69fa      	ldr	r2, [r7, #28]
 801306c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	6a3a      	ldr	r2, [r7, #32]
 8013072:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8013074:	4b08      	ldr	r3, [pc, #32]	; (8013098 <_tx_semaphore_create+0x9c>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	3301      	adds	r3, #1
 801307a:	4a07      	ldr	r2, [pc, #28]	; (8013098 <_tx_semaphore_create+0x9c>)
 801307c:	6013      	str	r3, [r2, #0]
 801307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013080:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	f383 8810 	msr	PRIMASK, r3
}
 8013088:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3728      	adds	r7, #40	; 0x28
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	53454d41 	.word	0x53454d41
 8013098:	24003658 	.word	0x24003658
 801309c:	24003654 	.word	0x24003654

080130a0 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b092      	sub	sp, #72	; 0x48
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130a8:	f3ef 8310 	mrs	r3, PRIMASK
 80130ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80130ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80130b0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80130b2:	b672      	cpsid	i
    return(int_posture);
 80130b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80130b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80130be:	4b3d      	ldr	r3, [pc, #244]	; (80131b4 <_tx_semaphore_delete+0x114>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	4a3b      	ldr	r2, [pc, #236]	; (80131b4 <_tx_semaphore_delete+0x114>)
 80130c6:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80130c8:	4b3a      	ldr	r3, [pc, #232]	; (80131b4 <_tx_semaphore_delete+0x114>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d103      	bne.n	80130d8 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80130d0:	4b39      	ldr	r3, [pc, #228]	; (80131b8 <_tx_semaphore_delete+0x118>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	601a      	str	r2, [r3, #0]
 80130d6:	e013      	b.n	8013100 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	695b      	ldr	r3, [r3, #20]
 80130dc:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	699b      	ldr	r3, [r3, #24]
 80130e2:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130e8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80130ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130ee:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80130f0:	4b31      	ldr	r3, [pc, #196]	; (80131b8 <_tx_semaphore_delete+0x118>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d102      	bne.n	8013100 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80130fa:	4a2f      	ldr	r2, [pc, #188]	; (80131b8 <_tx_semaphore_delete+0x118>)
 80130fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fe:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013100:	4b2e      	ldr	r3, [pc, #184]	; (80131bc <_tx_semaphore_delete+0x11c>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	3301      	adds	r3, #1
 8013106:	4a2d      	ldr	r2, [pc, #180]	; (80131bc <_tx_semaphore_delete+0x11c>)
 8013108:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	691b      	ldr	r3, [r3, #16]
 801311a:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2200      	movs	r2, #0
 8013120:	611a      	str	r2, [r3, #16]
 8013122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013124:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013128:	f383 8810 	msr	PRIMASK, r3
}
 801312c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801312e:	e024      	b.n	801317a <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8013130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013132:	3b01      	subs	r3, #1
 8013134:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013136:	f3ef 8310 	mrs	r3, PRIMASK
 801313a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801313c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801313e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013140:	b672      	cpsid	i
    return(int_posture);
 8013142:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8013144:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013148:	2200      	movs	r2, #0
 801314a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801314c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801314e:	2201      	movs	r2, #1
 8013150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8013154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013158:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801315a:	4b18      	ldr	r3, [pc, #96]	; (80131bc <_tx_semaphore_delete+0x11c>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	3301      	adds	r3, #1
 8013160:	4a16      	ldr	r2, [pc, #88]	; (80131bc <_tx_semaphore_delete+0x11c>)
 8013162:	6013      	str	r3, [r2, #0]
 8013164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013166:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013168:	6a3b      	ldr	r3, [r7, #32]
 801316a:	f383 8810 	msr	PRIMASK, r3
}
 801316e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013170:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013172:	f000 fbd9 	bl	8013928 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8013176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013178:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 801317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801317c:	2b00      	cmp	r3, #0
 801317e:	d1d7      	bne.n	8013130 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013180:	f3ef 8310 	mrs	r3, PRIMASK
 8013184:	613b      	str	r3, [r7, #16]
    return(posture);
 8013186:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013188:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801318a:	b672      	cpsid	i
    return(int_posture);
 801318c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 801318e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013190:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <_tx_semaphore_delete+0x11c>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	3b01      	subs	r3, #1
 8013196:	4a09      	ldr	r2, [pc, #36]	; (80131bc <_tx_semaphore_delete+0x11c>)
 8013198:	6013      	str	r3, [r2, #0]
 801319a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801319c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	f383 8810 	msr	PRIMASK, r3
}
 80131a4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80131a6:	f000 fb85 	bl	80138b4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80131aa:	2300      	movs	r3, #0
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3748      	adds	r7, #72	; 0x48
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	24003658 	.word	0x24003658
 80131b8:	24003654 	.word	0x24003654
 80131bc:	24003724 	.word	0x24003724

080131c0 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b08e      	sub	sp, #56	; 0x38
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80131ca:	2300      	movs	r3, #0
 80131cc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131ce:	f3ef 8310 	mrs	r3, PRIMASK
 80131d2:	623b      	str	r3, [r7, #32]
    return(posture);
 80131d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80131d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80131d8:	b672      	cpsid	i
    return(int_posture);
 80131da:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80131dc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	689b      	ldr	r3, [r3, #8]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d00a      	beq.n	80131fc <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	1e5a      	subs	r2, r3, #1
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	609a      	str	r2, [r3, #8]
 80131f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	f383 8810 	msr	PRIMASK, r3
}
 80131fa:	e068      	b.n	80132ce <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d05d      	beq.n	80132be <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013202:	4b35      	ldr	r3, [pc, #212]	; (80132d8 <_tx_semaphore_get+0x118>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d008      	beq.n	801321c <_tx_semaphore_get+0x5c>
 801320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	f383 8810 	msr	PRIMASK, r3
}
 8013214:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8013216:	230d      	movs	r3, #13
 8013218:	637b      	str	r3, [r7, #52]	; 0x34
 801321a:	e058      	b.n	80132ce <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801321c:	4b2f      	ldr	r3, [pc, #188]	; (80132dc <_tx_semaphore_get+0x11c>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8013222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013224:	4a2e      	ldr	r2, [pc, #184]	; (80132e0 <_tx_semaphore_get+0x120>)
 8013226:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8013228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013230:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013234:	1c5a      	adds	r2, r3, #1
 8013236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013238:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	691b      	ldr	r3, [r3, #16]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d109      	bne.n	8013258 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013248:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801324e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8013250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013254:	675a      	str	r2, [r3, #116]	; 0x74
 8013256:	e011      	b.n	801327c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013262:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013268:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801326e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013274:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801327a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	691b      	ldr	r3, [r3, #16]
 8013280:	1c5a      	adds	r2, r3, #1
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8013286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013288:	2206      	movs	r2, #6
 801328a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328e:	2201      	movs	r2, #1
 8013290:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	683a      	ldr	r2, [r7, #0]
 8013296:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013298:	4b0f      	ldr	r3, [pc, #60]	; (80132d8 <_tx_semaphore_get+0x118>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	3301      	adds	r3, #1
 801329e:	4a0e      	ldr	r2, [pc, #56]	; (80132d8 <_tx_semaphore_get+0x118>)
 80132a0:	6013      	str	r3, [r2, #0]
 80132a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	f383 8810 	msr	PRIMASK, r3
}
 80132ac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80132ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132b0:	f000 fc3a 	bl	8013b28 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80132b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132ba:	637b      	str	r3, [r7, #52]	; 0x34
 80132bc:	e007      	b.n	80132ce <_tx_semaphore_get+0x10e>
 80132be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	f383 8810 	msr	PRIMASK, r3
}
 80132c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80132ca:	230d      	movs	r3, #13
 80132cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80132ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3738      	adds	r7, #56	; 0x38
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	24003724 	.word	0x24003724
 80132dc:	2400368c 	.word	0x2400368c
 80132e0:	08012f05 	.word	0x08012f05

080132e4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b08c      	sub	sp, #48	; 0x30
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132ec:	f3ef 8310 	mrs	r3, PRIMASK
 80132f0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80132f2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80132f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132f6:	b672      	cpsid	i
    return(int_posture);
 80132f8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80132fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8013302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013304:	2b00      	cmp	r3, #0
 8013306:	d10a      	bne.n	801331e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	689b      	ldr	r3, [r3, #8]
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	609a      	str	r2, [r3, #8]
 8013312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013314:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	f383 8810 	msr	PRIMASK, r3
}
 801331c:	e033      	b.n	8013386 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8013324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013326:	3b01      	subs	r3, #1
 8013328:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332c:	2b00      	cmp	r3, #0
 801332e:	d103      	bne.n	8013338 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2200      	movs	r2, #0
 8013334:	60da      	str	r2, [r3, #12]
 8013336:	e00e      	b.n	8013356 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8013338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801333c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6a3a      	ldr	r2, [r7, #32]
 8013342:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013348:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801334a:	6a3b      	ldr	r3, [r7, #32]
 801334c:	69fa      	ldr	r2, [r7, #28]
 801334e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013350:	69fb      	ldr	r3, [r7, #28]
 8013352:	6a3a      	ldr	r2, [r7, #32]
 8013354:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801335a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335e:	2200      	movs	r2, #0
 8013360:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013364:	2200      	movs	r2, #0
 8013366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801336a:	4b09      	ldr	r3, [pc, #36]	; (8013390 <_tx_semaphore_put+0xac>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	3301      	adds	r3, #1
 8013370:	4a07      	ldr	r2, [pc, #28]	; (8013390 <_tx_semaphore_put+0xac>)
 8013372:	6013      	str	r3, [r2, #0]
 8013374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013376:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	f383 8810 	msr	PRIMASK, r3
}
 801337e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013382:	f000 fad1 	bl	8013928 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8013386:	2300      	movs	r3, #0
}
 8013388:	4618      	mov	r0, r3
 801338a:	3730      	adds	r7, #48	; 0x30
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	24003724 	.word	0x24003724

08013394 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b092      	sub	sp, #72	; 0x48
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
 80133a0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80133a2:	2300      	movs	r3, #0
 80133a4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80133a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133a8:	21ef      	movs	r1, #239	; 0xef
 80133aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80133ac:	f001 fb54 	bl	8014a58 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80133b0:	22b0      	movs	r2, #176	; 0xb0
 80133b2:	2100      	movs	r1, #0
 80133b4:	68f8      	ldr	r0, [r7, #12]
 80133b6:	f001 fb4f 	bl	8014a58 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	68ba      	ldr	r2, [r7, #8]
 80133be:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	683a      	ldr	r2, [r7, #0]
 80133ca:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133d0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133d6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133dc:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133ea:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133f0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2220      	movs	r2, #32
 80133f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80133fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80133fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013400:	3b01      	subs	r3, #1
 8013402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013404:	4413      	add	r3, r2
 8013406:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801340c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801340e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013412:	429a      	cmp	r2, r3
 8013414:	d007      	beq.n	8013426 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2200      	movs	r2, #0
 801341a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	2200      	movs	r2, #0
 8013420:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8013424:	e006      	b.n	8013434 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801342a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013430:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2203      	movs	r2, #3
 8013438:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	4a48      	ldr	r2, [pc, #288]	; (8013560 <_tx_thread_create+0x1cc>)
 801343e:	655a      	str	r2, [r3, #84]	; 0x54
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8013446:	4947      	ldr	r1, [pc, #284]	; (8013564 <_tx_thread_create+0x1d0>)
 8013448:	68f8      	ldr	r0, [r7, #12]
 801344a:	f7ec ffe9 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801344e:	f3ef 8310 	mrs	r3, PRIMASK
 8013452:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013456:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013458:	b672      	cpsid	i
    return(int_posture);
 801345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801345c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	4a41      	ldr	r2, [pc, #260]	; (8013568 <_tx_thread_create+0x1d4>)
 8013462:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8013464:	4b41      	ldr	r3, [pc, #260]	; (801356c <_tx_thread_create+0x1d8>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d10b      	bne.n	8013484 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801346c:	4a40      	ldr	r2, [pc, #256]	; (8013570 <_tx_thread_create+0x1dc>)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	68fa      	ldr	r2, [r7, #12]
 8013476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68fa      	ldr	r2, [r7, #12]
 801347e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8013482:	e016      	b.n	80134b2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8013484:	4b3a      	ldr	r3, [pc, #232]	; (8013570 <_tx_thread_create+0x1dc>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013490:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8013492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80134b2:	4b2e      	ldr	r3, [pc, #184]	; (801356c <_tx_thread_create+0x1d8>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	3301      	adds	r3, #1
 80134b8:	4a2c      	ldr	r2, [pc, #176]	; (801356c <_tx_thread_create+0x1d8>)
 80134ba:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80134bc:	4b2d      	ldr	r3, [pc, #180]	; (8013574 <_tx_thread_create+0x1e0>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	3301      	adds	r3, #1
 80134c2:	4a2c      	ldr	r2, [pc, #176]	; (8013574 <_tx_thread_create+0x1e0>)
 80134c4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80134c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d129      	bne.n	8013520 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80134cc:	f3ef 8305 	mrs	r3, IPSR
 80134d0:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80134d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80134d4:	4b28      	ldr	r3, [pc, #160]	; (8013578 <_tx_thread_create+0x1e4>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4313      	orrs	r3, r2
 80134da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80134de:	d30d      	bcc.n	80134fc <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80134e0:	4b26      	ldr	r3, [pc, #152]	; (801357c <_tx_thread_create+0x1e8>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80134e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d009      	beq.n	8013500 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80134ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f0:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80134f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80134fa:	e001      	b.n	8013500 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80134fc:	2300      	movs	r3, #0
 80134fe:	647b      	str	r3, [r7, #68]	; 0x44
 8013500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013502:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013504:	6a3b      	ldr	r3, [r7, #32]
 8013506:	f383 8810 	msr	PRIMASK, r3
}
 801350a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	f000 fa0b 	bl	8013928 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8013512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013514:	2b00      	cmp	r3, #0
 8013516:	d01e      	beq.n	8013556 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8013518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801351a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801351c:	63da      	str	r2, [r3, #60]	; 0x3c
 801351e:	e01a      	b.n	8013556 <_tx_thread_create+0x1c2>
 8013520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013522:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	f383 8810 	msr	PRIMASK, r3
}
 801352a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801352c:	f3ef 8310 	mrs	r3, PRIMASK
 8013530:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013532:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013534:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013536:	b672      	cpsid	i
    return(int_posture);
 8013538:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801353a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801353c:	4b0d      	ldr	r3, [pc, #52]	; (8013574 <_tx_thread_create+0x1e0>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	3b01      	subs	r3, #1
 8013542:	4a0c      	ldr	r2, [pc, #48]	; (8013574 <_tx_thread_create+0x1e0>)
 8013544:	6013      	str	r3, [r2, #0]
 8013546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013548:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	f383 8810 	msr	PRIMASK, r3
}
 8013550:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013552:	f000 f9af 	bl	80138b4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3748      	adds	r7, #72	; 0x48
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	08013dfd 	.word	0x08013dfd
 8013564:	0801371d 	.word	0x0801371d
 8013568:	54485244 	.word	0x54485244
 801356c:	24003698 	.word	0x24003698
 8013570:	24003694 	.word	0x24003694
 8013574:	24003724 	.word	0x24003724
 8013578:	2400006c 	.word	0x2400006c
 801357c:	24003690 	.word	0x24003690

08013580 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8013580:	b480      	push	{r7}
 8013582:	b087      	sub	sp, #28
 8013584:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013586:	f3ef 8310 	mrs	r3, PRIMASK
 801358a:	60bb      	str	r3, [r7, #8]
    return(posture);
 801358c:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 801358e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013590:	b672      	cpsid	i
    return(int_posture);
 8013592:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013594:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013596:	4b08      	ldr	r3, [pc, #32]	; (80135b8 <_tx_thread_identify+0x38>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	613b      	str	r3, [r7, #16]
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	f383 8810 	msr	PRIMASK, r3
}
 80135a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80135a8:	693b      	ldr	r3, [r7, #16]
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	371c      	adds	r7, #28
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	2400368c 	.word	0x2400368c

080135bc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80135c0:	4b12      	ldr	r3, [pc, #72]	; (801360c <_tx_thread_initialize+0x50>)
 80135c2:	2200      	movs	r2, #0
 80135c4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80135c6:	4b12      	ldr	r3, [pc, #72]	; (8013610 <_tx_thread_initialize+0x54>)
 80135c8:	2200      	movs	r2, #0
 80135ca:	601a      	str	r2, [r3, #0]
 80135cc:	4b11      	ldr	r3, [pc, #68]	; (8013614 <_tx_thread_initialize+0x58>)
 80135ce:	2200      	movs	r2, #0
 80135d0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80135d2:	4b11      	ldr	r3, [pc, #68]	; (8013618 <_tx_thread_initialize+0x5c>)
 80135d4:	2220      	movs	r2, #32
 80135d6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80135d8:	2280      	movs	r2, #128	; 0x80
 80135da:	2100      	movs	r1, #0
 80135dc:	480f      	ldr	r0, [pc, #60]	; (801361c <_tx_thread_initialize+0x60>)
 80135de:	f001 fa3b 	bl	8014a58 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80135e2:	4b0f      	ldr	r3, [pc, #60]	; (8013620 <_tx_thread_initialize+0x64>)
 80135e4:	2200      	movs	r2, #0
 80135e6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80135e8:	4b0e      	ldr	r3, [pc, #56]	; (8013624 <_tx_thread_initialize+0x68>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80135ee:	4b0e      	ldr	r3, [pc, #56]	; (8013628 <_tx_thread_initialize+0x6c>)
 80135f0:	2200      	movs	r2, #0
 80135f2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80135f4:	4b0d      	ldr	r3, [pc, #52]	; (801362c <_tx_thread_initialize+0x70>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80135fa:	4b0d      	ldr	r3, [pc, #52]	; (8013630 <_tx_thread_initialize+0x74>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8013602:	4a0b      	ldr	r2, [pc, #44]	; (8013630 <_tx_thread_initialize+0x74>)
 8013604:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8013606:	bf00      	nop
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	2400368c 	.word	0x2400368c
 8013610:	24003690 	.word	0x24003690
 8013614:	2400369c 	.word	0x2400369c
 8013618:	240036a0 	.word	0x240036a0
 801361c:	240036a4 	.word	0x240036a4
 8013620:	24003694 	.word	0x24003694
 8013624:	24003698 	.word	0x24003698
 8013628:	24003724 	.word	0x24003724
 801362c:	24003728 	.word	0x24003728
 8013630:	2400372c 	.word	0x2400372c

08013634 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b08c      	sub	sp, #48	; 0x30
 8013638:	af00      	add	r7, sp, #0
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013640:	2300      	movs	r3, #0
 8013642:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	429a      	cmp	r2, r3
 801364e:	d004      	beq.n	801365a <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d001      	beq.n	801365a <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8013656:	2300      	movs	r3, #0
 8013658:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801365a:	f3ef 8310 	mrs	r3, PRIMASK
 801365e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013662:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013664:	b672      	cpsid	i
    return(int_posture);
 8013666:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8013668:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013670:	68ba      	ldr	r2, [r7, #8]
 8013672:	429a      	cmp	r2, r3
 8013674:	d902      	bls.n	801367c <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8013676:	2318      	movs	r3, #24
 8013678:	62bb      	str	r3, [r7, #40]	; 0x28
 801367a:	e03e      	b.n	80136fa <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	68ba      	ldr	r2, [r7, #8]
 801368a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013694:	68ba      	ldr	r2, [r7, #8]
 8013696:	429a      	cmp	r2, r3
 8013698:	d203      	bcs.n	80136a2 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	63da      	str	r2, [r3, #60]	; 0x3c
 80136a0:	e004      	b.n	80136ac <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136b0:	4b17      	ldr	r3, [pc, #92]	; (8013710 <_tx_thread_preemption_change+0xdc>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d920      	bls.n	80136fa <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 80136b8:	4b15      	ldr	r3, [pc, #84]	; (8013710 <_tx_thread_preemption_change+0xdc>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	68ba      	ldr	r2, [r7, #8]
 80136be:	429a      	cmp	r2, r3
 80136c0:	d91b      	bls.n	80136fa <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 80136c2:	4b14      	ldr	r3, [pc, #80]	; (8013714 <_tx_thread_preemption_change+0xe0>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68fa      	ldr	r2, [r7, #12]
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d116      	bne.n	80136fa <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80136cc:	4b10      	ldr	r3, [pc, #64]	; (8013710 <_tx_thread_preemption_change+0xdc>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4a11      	ldr	r2, [pc, #68]	; (8013718 <_tx_thread_preemption_change+0xe4>)
 80136d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d6:	4a0f      	ldr	r2, [pc, #60]	; (8013714 <_tx_thread_preemption_change+0xe0>)
 80136d8:	6013      	str	r3, [r2, #0]
 80136da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	f383 8810 	msr	PRIMASK, r3
}
 80136e4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 80136e6:	f000 f8e5 	bl	80138b4 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136ea:	f3ef 8310 	mrs	r3, PRIMASK
 80136ee:	61fb      	str	r3, [r7, #28]
    return(posture);
 80136f0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80136f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80136f4:	b672      	cpsid	i
    return(int_posture);
 80136f6:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 80136f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	f383 8810 	msr	PRIMASK, r3
}
 8013704:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8013706:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013708:	4618      	mov	r0, r3
 801370a:	3730      	adds	r7, #48	; 0x30
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	240036a0 	.word	0x240036a0
 8013714:	24003690 	.word	0x24003690
 8013718:	240036a4 	.word	0x240036a4

0801371c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b088      	sub	sp, #32
 8013720:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013722:	4b21      	ldr	r3, [pc, #132]	; (80137a8 <_tx_thread_shell_entry+0x8c>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801372c:	69fa      	ldr	r2, [r7, #28]
 801372e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013730:	4610      	mov	r0, r2
 8013732:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8013734:	4b1d      	ldr	r3, [pc, #116]	; (80137ac <_tx_thread_shell_entry+0x90>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d003      	beq.n	8013744 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801373c:	4b1b      	ldr	r3, [pc, #108]	; (80137ac <_tx_thread_shell_entry+0x90>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	69f8      	ldr	r0, [r7, #28]
 8013742:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013744:	f3ef 8310 	mrs	r3, PRIMASK
 8013748:	607b      	str	r3, [r7, #4]
    return(posture);
 801374a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801374c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801374e:	b672      	cpsid	i
    return(int_posture);
 8013750:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8013752:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	2201      	movs	r2, #1
 8013758:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	2201      	movs	r2, #1
 801375e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	2200      	movs	r2, #0
 8013764:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013766:	4b12      	ldr	r3, [pc, #72]	; (80137b0 <_tx_thread_shell_entry+0x94>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	3301      	adds	r3, #1
 801376c:	4a10      	ldr	r2, [pc, #64]	; (80137b0 <_tx_thread_shell_entry+0x94>)
 801376e:	6013      	str	r3, [r2, #0]
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	f383 8810 	msr	PRIMASK, r3
}
 801377a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801377c:	f3ef 8314 	mrs	r3, CONTROL
 8013780:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8013782:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8013784:	617b      	str	r3, [r7, #20]
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	f023 0304 	bic.w	r3, r3, #4
 801378c:	617b      	str	r3, [r7, #20]
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	f383 8814 	msr	CONTROL, r3
}
 8013798:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801379a:	69f8      	ldr	r0, [r7, #28]
 801379c:	f000 f9c4 	bl	8013b28 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80137a0:	bf00      	nop
 80137a2:	3720      	adds	r7, #32
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	2400368c 	.word	0x2400368c
 80137ac:	24003728 	.word	0x24003728
 80137b0:	24003724 	.word	0x24003724

080137b4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b08e      	sub	sp, #56	; 0x38
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137bc:	f3ef 8310 	mrs	r3, PRIMASK
 80137c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80137c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80137c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80137c6:	b672      	cpsid	i
    return(int_posture);
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80137ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80137cc:	4b35      	ldr	r3, [pc, #212]	; (80138a4 <_tx_thread_sleep+0xf0>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80137d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d108      	bne.n	80137ea <_tx_thread_sleep+0x36>
 80137d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137dc:	6a3b      	ldr	r3, [r7, #32]
 80137de:	f383 8810 	msr	PRIMASK, r3
}
 80137e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80137e4:	2313      	movs	r3, #19
 80137e6:	637b      	str	r3, [r7, #52]	; 0x34
 80137e8:	e056      	b.n	8013898 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80137ea:	f3ef 8305 	mrs	r3, IPSR
 80137ee:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80137f0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80137f2:	4b2d      	ldr	r3, [pc, #180]	; (80138a8 <_tx_thread_sleep+0xf4>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4313      	orrs	r3, r2
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d008      	beq.n	801380e <_tx_thread_sleep+0x5a>
 80137fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013800:	69bb      	ldr	r3, [r7, #24]
 8013802:	f383 8810 	msr	PRIMASK, r3
}
 8013806:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013808:	2313      	movs	r3, #19
 801380a:	637b      	str	r3, [r7, #52]	; 0x34
 801380c:	e044      	b.n	8013898 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013810:	4a26      	ldr	r2, [pc, #152]	; (80138ac <_tx_thread_sleep+0xf8>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d108      	bne.n	8013828 <_tx_thread_sleep+0x74>
 8013816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013818:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	f383 8810 	msr	PRIMASK, r3
}
 8013820:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8013822:	2313      	movs	r3, #19
 8013824:	637b      	str	r3, [r7, #52]	; 0x34
 8013826:	e037      	b.n	8013898 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d108      	bne.n	8013840 <_tx_thread_sleep+0x8c>
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	f383 8810 	msr	PRIMASK, r3
}
 8013838:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801383a:	2300      	movs	r3, #0
 801383c:	637b      	str	r3, [r7, #52]	; 0x34
 801383e:	e02b      	b.n	8013898 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013840:	4b1b      	ldr	r3, [pc, #108]	; (80138b0 <_tx_thread_sleep+0xfc>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d008      	beq.n	801385a <_tx_thread_sleep+0xa6>
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f383 8810 	msr	PRIMASK, r3
}
 8013852:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8013854:	2313      	movs	r3, #19
 8013856:	637b      	str	r3, [r7, #52]	; 0x34
 8013858:	e01e      	b.n	8013898 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385c:	2204      	movs	r2, #4
 801385e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013862:	2201      	movs	r2, #1
 8013864:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013868:	2200      	movs	r2, #0
 801386a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013874:	4b0e      	ldr	r3, [pc, #56]	; (80138b0 <_tx_thread_sleep+0xfc>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	3301      	adds	r3, #1
 801387a:	4a0d      	ldr	r2, [pc, #52]	; (80138b0 <_tx_thread_sleep+0xfc>)
 801387c:	6013      	str	r3, [r2, #0]
 801387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013880:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	f383 8810 	msr	PRIMASK, r3
}
 8013888:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801388a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801388c:	f000 f94c 	bl	8013b28 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013896:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8013898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801389a:	4618      	mov	r0, r3
 801389c:	3738      	adds	r7, #56	; 0x38
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	2400368c 	.word	0x2400368c
 80138a8:	2400006c 	.word	0x2400006c
 80138ac:	240037d4 	.word	0x240037d4
 80138b0:	24003724 	.word	0x24003724

080138b4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80138b4:	b480      	push	{r7}
 80138b6:	b089      	sub	sp, #36	; 0x24
 80138b8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80138ba:	4b17      	ldr	r3, [pc, #92]	; (8013918 <_tx_thread_system_preempt_check+0x64>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d121      	bne.n	801390a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80138c6:	4b15      	ldr	r3, [pc, #84]	; (801391c <_tx_thread_system_preempt_check+0x68>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80138cc:	4b14      	ldr	r3, [pc, #80]	; (8013920 <_tx_thread_system_preempt_check+0x6c>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80138d2:	69ba      	ldr	r2, [r7, #24]
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d017      	beq.n	801390a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80138da:	4b12      	ldr	r3, [pc, #72]	; (8013924 <_tx_thread_system_preempt_check+0x70>)
 80138dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138e2:	f3ef 8305 	mrs	r3, IPSR
 80138e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80138e8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10c      	bne.n	8013908 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80138ee:	f3ef 8310 	mrs	r3, PRIMASK
 80138f2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80138f4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80138f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80138f8:	b662      	cpsie	i
}
 80138fa:	bf00      	nop
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f383 8810 	msr	PRIMASK, r3
}
 8013906:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8013908:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801390a:	bf00      	nop
 801390c:	3724      	adds	r7, #36	; 0x24
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	24003724 	.word	0x24003724
 801391c:	2400368c 	.word	0x2400368c
 8013920:	24003690 	.word	0x24003690
 8013924:	e000ed04 	.word	0xe000ed04

08013928 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b096      	sub	sp, #88	; 0x58
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013930:	f3ef 8310 	mrs	r3, PRIMASK
 8013934:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8013936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8013938:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801393a:	b672      	cpsid	i
    return(int_posture);
 801393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801393e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013944:	2b00      	cmp	r3, #0
 8013946:	d005      	beq.n	8013954 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	334c      	adds	r3, #76	; 0x4c
 801394c:	4618      	mov	r0, r3
 801394e:	f000 fc13 	bl	8014178 <_tx_timer_system_deactivate>
 8013952:	e002      	b.n	801395a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801395a:	4b6c      	ldr	r3, [pc, #432]	; (8013b0c <_tx_thread_system_resume+0x1e4>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	3b01      	subs	r3, #1
 8013960:	4a6a      	ldr	r2, [pc, #424]	; (8013b0c <_tx_thread_system_resume+0x1e4>)
 8013962:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013968:	2b00      	cmp	r3, #0
 801396a:	f040 8083 	bne.w	8013a74 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013972:	2b00      	cmp	r3, #0
 8013974:	f000 8097 	beq.w	8013aa6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801397c:	2b00      	cmp	r3, #0
 801397e:	d172      	bne.n	8013a66 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2200      	movs	r2, #0
 8013984:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801398c:	4a60      	ldr	r2, [pc, #384]	; (8013b10 <_tx_thread_system_resume+0x1e8>)
 801398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013994:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8013996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013998:	2b00      	cmp	r3, #0
 801399a:	d154      	bne.n	8013a46 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801399c:	495c      	ldr	r1, [pc, #368]	; (8013b10 <_tx_thread_system_resume+0x1e8>)
 801399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	687a      	ldr	r2, [r7, #4]
 80139aa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80139b2:	2201      	movs	r2, #1
 80139b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b6:	fa02 f303 	lsl.w	r3, r2, r3
 80139ba:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80139bc:	4b55      	ldr	r3, [pc, #340]	; (8013b14 <_tx_thread_system_resume+0x1ec>)
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139c2:	4313      	orrs	r3, r2
 80139c4:	4a53      	ldr	r2, [pc, #332]	; (8013b14 <_tx_thread_system_resume+0x1ec>)
 80139c6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80139c8:	4b53      	ldr	r3, [pc, #332]	; (8013b18 <_tx_thread_system_resume+0x1f0>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d269      	bcs.n	8013aa6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80139d2:	4a51      	ldr	r2, [pc, #324]	; (8013b18 <_tx_thread_system_resume+0x1f0>)
 80139d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80139d8:	4b50      	ldr	r3, [pc, #320]	; (8013b1c <_tx_thread_system_resume+0x1f4>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80139de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d103      	bne.n	80139ec <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80139e4:	4a4d      	ldr	r2, [pc, #308]	; (8013b1c <_tx_thread_system_resume+0x1f4>)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6013      	str	r3, [r2, #0]
 80139ea:	e05c      	b.n	8013aa6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80139ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d257      	bcs.n	8013aa6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80139f6:	4a49      	ldr	r2, [pc, #292]	; (8013b1c <_tx_thread_system_resume+0x1f4>)
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6013      	str	r3, [r2, #0]
 80139fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a02:	f383 8810 	msr	PRIMASK, r3
}
 8013a06:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013a08:	4b40      	ldr	r3, [pc, #256]	; (8013b0c <_tx_thread_system_resume+0x1e4>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8013a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d174      	bne.n	8013afe <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013a14:	4b42      	ldr	r3, [pc, #264]	; (8013b20 <_tx_thread_system_resume+0x1f8>)
 8013a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a1a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a1c:	f3ef 8305 	mrs	r3, IPSR
 8013a20:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8013a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d10c      	bne.n	8013a42 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a28:	f3ef 8310 	mrs	r3, PRIMASK
 8013a2c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8013a30:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013a32:	b662      	cpsie	i
}
 8013a34:	bf00      	nop
 8013a36:	6a3b      	ldr	r3, [r7, #32]
 8013a38:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	f383 8810 	msr	PRIMASK, r3
}
 8013a40:	bf00      	nop
}
 8013a42:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8013a44:	e05b      	b.n	8013afe <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8013a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a4a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8013a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a4e:	687a      	ldr	r2, [r7, #4]
 8013a50:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8013a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a5c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a62:	621a      	str	r2, [r3, #32]
 8013a64:	e01f      	b.n	8013aa6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2203      	movs	r2, #3
 8013a70:	631a      	str	r2, [r3, #48]	; 0x30
 8013a72:	e018      	b.n	8013aa6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	d014      	beq.n	8013aa6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a80:	2b02      	cmp	r3, #2
 8013a82:	d010      	beq.n	8013aa6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d106      	bne.n	8013a9a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	631a      	str	r2, [r3, #48]	; 0x30
 8013a98:	e005      	b.n	8013aa6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2203      	movs	r2, #3
 8013aa4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013aa6:	4b1f      	ldr	r3, [pc, #124]	; (8013b24 <_tx_thread_system_resume+0x1fc>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8013aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013aae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	f383 8810 	msr	PRIMASK, r3
}
 8013ab6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013ab8:	4b18      	ldr	r3, [pc, #96]	; (8013b1c <_tx_thread_system_resume+0x1f4>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d020      	beq.n	8013b04 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013ac2:	4b12      	ldr	r3, [pc, #72]	; (8013b0c <_tx_thread_system_resume+0x1e4>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8013ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d11a      	bne.n	8013b04 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013ace:	4b14      	ldr	r3, [pc, #80]	; (8013b20 <_tx_thread_system_resume+0x1f8>)
 8013ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ad6:	f3ef 8305 	mrs	r3, IPSR
 8013ada:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013adc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d10f      	bne.n	8013b02 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae6:	613b      	str	r3, [r7, #16]
    return(posture);
 8013ae8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8013aea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013aec:	b662      	cpsie	i
}
 8013aee:	bf00      	nop
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	f383 8810 	msr	PRIMASK, r3
}
 8013afa:	bf00      	nop
}
 8013afc:	e001      	b.n	8013b02 <_tx_thread_system_resume+0x1da>
                                return;
 8013afe:	bf00      	nop
 8013b00:	e000      	b.n	8013b04 <_tx_thread_system_resume+0x1dc>
 8013b02:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8013b04:	3758      	adds	r7, #88	; 0x58
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	24003724 	.word	0x24003724
 8013b10:	240036a4 	.word	0x240036a4
 8013b14:	2400369c 	.word	0x2400369c
 8013b18:	240036a0 	.word	0x240036a0
 8013b1c:	24003690 	.word	0x24003690
 8013b20:	e000ed04 	.word	0xe000ed04
 8013b24:	2400368c 	.word	0x2400368c

08013b28 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b09e      	sub	sp, #120	; 0x78
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013b30:	4b81      	ldr	r3, [pc, #516]	; (8013d38 <_tx_thread_system_suspend+0x210>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b36:	f3ef 8310 	mrs	r3, PRIMASK
 8013b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8013b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8013b3e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b40:	b672      	cpsid	i
    return(int_posture);
 8013b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013b44:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d112      	bne.n	8013b74 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b52:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8013b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d008      	beq.n	8013b6c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8013b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b60:	d004      	beq.n	8013b6c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	334c      	adds	r3, #76	; 0x4c
 8013b66:	4618      	mov	r0, r3
 8013b68:	f000 faa4 	bl	80140b4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	69db      	ldr	r3, [r3, #28]
 8013b70:	4a72      	ldr	r2, [pc, #456]	; (8013d3c <_tx_thread_system_suspend+0x214>)
 8013b72:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013b74:	4b72      	ldr	r3, [pc, #456]	; (8013d40 <_tx_thread_system_suspend+0x218>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	4a71      	ldr	r2, [pc, #452]	; (8013d40 <_tx_thread_system_suspend+0x218>)
 8013b7c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	f040 80a6 	bne.w	8013cd4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b92:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6a1b      	ldr	r3, [r3, #32]
 8013b98:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8013b9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d015      	beq.n	8013bce <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8013ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013bac:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8013bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013bb2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8013bb4:	4a63      	ldr	r2, [pc, #396]	; (8013d44 <_tx_thread_system_suspend+0x21c>)
 8013bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d157      	bne.n	8013c72 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8013bc2:	4960      	ldr	r1, [pc, #384]	; (8013d44 <_tx_thread_system_suspend+0x21c>)
 8013bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013bcc:	e051      	b.n	8013c72 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8013bce:	4a5d      	ldr	r2, [pc, #372]	; (8013d44 <_tx_thread_system_suspend+0x21c>)
 8013bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bd2:	2100      	movs	r1, #0
 8013bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8013bd8:	2201      	movs	r2, #1
 8013bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8013be0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8013be2:	4b59      	ldr	r3, [pc, #356]	; (8013d48 <_tx_thread_system_suspend+0x220>)
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013be8:	43db      	mvns	r3, r3
 8013bea:	4013      	ands	r3, r2
 8013bec:	4a56      	ldr	r2, [pc, #344]	; (8013d48 <_tx_thread_system_suspend+0x220>)
 8013bee:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8013bf4:	4b54      	ldr	r3, [pc, #336]	; (8013d48 <_tx_thread_system_suspend+0x220>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8013bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d12b      	bne.n	8013c58 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013c00:	4b52      	ldr	r3, [pc, #328]	; (8013d4c <_tx_thread_system_suspend+0x224>)
 8013c02:	2220      	movs	r2, #32
 8013c04:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8013c06:	4b52      	ldr	r3, [pc, #328]	; (8013d50 <_tx_thread_system_suspend+0x228>)
 8013c08:	2200      	movs	r2, #0
 8013c0a:	601a      	str	r2, [r3, #0]
 8013c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c0e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c12:	f383 8810 	msr	PRIMASK, r3
}
 8013c16:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013c18:	4b49      	ldr	r3, [pc, #292]	; (8013d40 <_tx_thread_system_suspend+0x218>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8013c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f040 8081 	bne.w	8013d28 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013c26:	4b4b      	ldr	r3, [pc, #300]	; (8013d54 <_tx_thread_system_suspend+0x22c>)
 8013c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c2c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c2e:	f3ef 8305 	mrs	r3, IPSR
 8013c32:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8013c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d10c      	bne.n	8013c54 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8013c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8013c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8013c42:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013c44:	b662      	cpsie	i
}
 8013c46:	bf00      	nop
 8013c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c4a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c4e:	f383 8810 	msr	PRIMASK, r3
}
 8013c52:	bf00      	nop
}
 8013c54:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8013c56:	e067      	b.n	8013d28 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8013c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c5a:	fa93 f3a3 	rbit	r3, r3
 8013c5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c62:	fab3 f383 	clz	r3, r3
 8013c66:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8013c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c6c:	4413      	add	r3, r2
 8013c6e:	4a37      	ldr	r2, [pc, #220]	; (8013d4c <_tx_thread_system_suspend+0x224>)
 8013c70:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8013c72:	4b37      	ldr	r3, [pc, #220]	; (8013d50 <_tx_thread_system_suspend+0x228>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d12b      	bne.n	8013cd4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013c7c:	4b33      	ldr	r3, [pc, #204]	; (8013d4c <_tx_thread_system_suspend+0x224>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	4a30      	ldr	r2, [pc, #192]	; (8013d44 <_tx_thread_system_suspend+0x21c>)
 8013c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c86:	4a32      	ldr	r2, [pc, #200]	; (8013d50 <_tx_thread_system_suspend+0x228>)
 8013c88:	6013      	str	r3, [r2, #0]
 8013c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c8c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c90:	f383 8810 	msr	PRIMASK, r3
}
 8013c94:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013c96:	4b2a      	ldr	r3, [pc, #168]	; (8013d40 <_tx_thread_system_suspend+0x218>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8013c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d144      	bne.n	8013d2c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013ca2:	4b2c      	ldr	r3, [pc, #176]	; (8013d54 <_tx_thread_system_suspend+0x22c>)
 8013ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ca8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013caa:	f3ef 8305 	mrs	r3, IPSR
 8013cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8013cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d10c      	bne.n	8013cd0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8013cba:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8013cbe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013cc0:	b662      	cpsie	i
}
 8013cc2:	bf00      	nop
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cc8:	6a3b      	ldr	r3, [r7, #32]
 8013cca:	f383 8810 	msr	PRIMASK, r3
}
 8013cce:	bf00      	nop
}
 8013cd0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8013cd2:	e02b      	b.n	8013d2c <_tx_thread_system_suspend+0x204>
 8013cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013cd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	f383 8810 	msr	PRIMASK, r3
}
 8013cde:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013ce0:	4b1b      	ldr	r3, [pc, #108]	; (8013d50 <_tx_thread_system_suspend+0x228>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d022      	beq.n	8013d30 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013cea:	4b15      	ldr	r3, [pc, #84]	; (8013d40 <_tx_thread_system_suspend+0x218>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8013cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d11c      	bne.n	8013d30 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013cf6:	4b17      	ldr	r3, [pc, #92]	; (8013d54 <_tx_thread_system_suspend+0x22c>)
 8013cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cfc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cfe:	f3ef 8305 	mrs	r3, IPSR
 8013d02:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013d04:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d10c      	bne.n	8013d24 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d0e:	617b      	str	r3, [r7, #20]
    return(posture);
 8013d10:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8013d12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013d14:	b662      	cpsie	i
}
 8013d16:	bf00      	nop
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f383 8810 	msr	PRIMASK, r3
}
 8013d22:	bf00      	nop
}
 8013d24:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8013d26:	e003      	b.n	8013d30 <_tx_thread_system_suspend+0x208>
                return;
 8013d28:	bf00      	nop
 8013d2a:	e002      	b.n	8013d32 <_tx_thread_system_suspend+0x20a>
            return;
 8013d2c:	bf00      	nop
 8013d2e:	e000      	b.n	8013d32 <_tx_thread_system_suspend+0x20a>
    return;
 8013d30:	bf00      	nop
}
 8013d32:	3778      	adds	r7, #120	; 0x78
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	2400368c 	.word	0x2400368c
 8013d3c:	24003c90 	.word	0x24003c90
 8013d40:	24003724 	.word	0x24003724
 8013d44:	240036a4 	.word	0x240036a4
 8013d48:	2400369c 	.word	0x2400369c
 8013d4c:	240036a0 	.word	0x240036a0
 8013d50:	24003690 	.word	0x24003690
 8013d54:	e000ed04 	.word	0xe000ed04

08013d58 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b087      	sub	sp, #28
 8013d5c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013d5e:	4b21      	ldr	r3, [pc, #132]	; (8013de4 <_tx_thread_time_slice+0x8c>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d64:	f3ef 8310 	mrs	r3, PRIMASK
 8013d68:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8013d6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d6e:	b672      	cpsid	i
    return(int_posture);
 8013d70:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8013d72:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013d74:	4b1c      	ldr	r3, [pc, #112]	; (8013de8 <_tx_thread_time_slice+0x90>)
 8013d76:	2200      	movs	r2, #0
 8013d78:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d024      	beq.n	8013dca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d120      	bne.n	8013dca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	69da      	ldr	r2, [r3, #28]
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	699b      	ldr	r3, [r3, #24]
 8013d94:	4a15      	ldr	r2, [pc, #84]	; (8013dec <_tx_thread_time_slice+0x94>)
 8013d96:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	6a1b      	ldr	r3, [r3, #32]
 8013d9c:	697a      	ldr	r2, [r7, #20]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d013      	beq.n	8013dca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d10d      	bne.n	8013dca <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db2:	697a      	ldr	r2, [r7, #20]
 8013db4:	6a12      	ldr	r2, [r2, #32]
 8013db6:	490e      	ldr	r1, [pc, #56]	; (8013df0 <_tx_thread_time_slice+0x98>)
 8013db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013dbc:	4b0d      	ldr	r3, [pc, #52]	; (8013df4 <_tx_thread_time_slice+0x9c>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	4a0b      	ldr	r2, [pc, #44]	; (8013df0 <_tx_thread_time_slice+0x98>)
 8013dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dc6:	4a0c      	ldr	r2, [pc, #48]	; (8013df8 <_tx_thread_time_slice+0xa0>)
 8013dc8:	6013      	str	r3, [r2, #0]
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f383 8810 	msr	PRIMASK, r3
}
 8013dd4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8013dd6:	bf00      	nop
 8013dd8:	371c      	adds	r7, #28
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop
 8013de4:	2400368c 	.word	0x2400368c
 8013de8:	24003734 	.word	0x24003734
 8013dec:	24003c90 	.word	0x24003c90
 8013df0:	240036a4 	.word	0x240036a4
 8013df4:	240036a0 	.word	0x240036a0
 8013df8:	24003690 	.word	0x24003690

08013dfc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b08a      	sub	sp, #40	; 0x28
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e08:	f3ef 8310 	mrs	r3, PRIMASK
 8013e0c:	617b      	str	r3, [r7, #20]
    return(posture);
 8013e0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013e10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e12:	b672      	cpsid	i
    return(int_posture);
 8013e14:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8013e16:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e1c:	2b04      	cmp	r3, #4
 8013e1e:	d10e      	bne.n	8013e3e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8013e20:	4b13      	ldr	r3, [pc, #76]	; (8013e70 <_tx_thread_timeout+0x74>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	3301      	adds	r3, #1
 8013e26:	4a12      	ldr	r2, [pc, #72]	; (8013e70 <_tx_thread_timeout+0x74>)
 8013e28:	6013      	str	r3, [r2, #0]
 8013e2a:	6a3b      	ldr	r3, [r7, #32]
 8013e2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	f383 8810 	msr	PRIMASK, r3
}
 8013e34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e38:	f7ff fd76 	bl	8013928 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8013e3c:	e013      	b.n	8013e66 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8013e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e42:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013e4a:	61bb      	str	r3, [r7, #24]
 8013e4c:	6a3b      	ldr	r3, [r7, #32]
 8013e4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	f383 8810 	msr	PRIMASK, r3
}
 8013e56:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d003      	beq.n	8013e66 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8013e5e:	69fb      	ldr	r3, [r7, #28]
 8013e60:	69b9      	ldr	r1, [r7, #24]
 8013e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e64:	4798      	blx	r3
}
 8013e66:	bf00      	nop
 8013e68:	3728      	adds	r7, #40	; 0x28
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	24003724 	.word	0x24003724

08013e74 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b087      	sub	sp, #28
 8013e78:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e7e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8013e80:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8013e82:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e84:	b672      	cpsid	i
    return(int_posture);
 8013e86:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8013e88:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8013e8a:	4b08      	ldr	r3, [pc, #32]	; (8013eac <_tx_time_get+0x38>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	613b      	str	r3, [r7, #16]
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f383 8810 	msr	PRIMASK, r3
}
 8013e9a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8013e9c:	693b      	ldr	r3, [r7, #16]
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	371c      	adds	r7, #28
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	24003730 	.word	0x24003730

08013eb0 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b08a      	sub	sp, #40	; 0x28
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8013ebe:	222c      	movs	r2, #44	; 0x2c
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	f000 fdc8 	bl	8014a58 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	68ba      	ldr	r2, [r7, #8]
 8013ecc:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ed2:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ed8:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	683a      	ldr	r2, [r7, #0]
 8013ee4:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8013eea:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013eec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013eee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ef0:	b672      	cpsid	i
    return(int_posture);
 8013ef2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013ef4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	4a1c      	ldr	r2, [pc, #112]	; (8013f6c <_tx_timer_create+0xbc>)
 8013efa:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8013efc:	4b1c      	ldr	r3, [pc, #112]	; (8013f70 <_tx_timer_create+0xc0>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d109      	bne.n	8013f18 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8013f04:	4a1b      	ldr	r2, [pc, #108]	; (8013f74 <_tx_timer_create+0xc4>)
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	68fa      	ldr	r2, [r7, #12]
 8013f0e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	68fa      	ldr	r2, [r7, #12]
 8013f14:	629a      	str	r2, [r3, #40]	; 0x28
 8013f16:	e011      	b.n	8013f3c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8013f18:	4b16      	ldr	r3, [pc, #88]	; (8013f74 <_tx_timer_create+0xc4>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8013f1e:	6a3b      	ldr	r3, [r7, #32]
 8013f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f22:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8013f24:	6a3b      	ldr	r3, [r7, #32]
 8013f26:	68fa      	ldr	r2, [r7, #12]
 8013f28:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	68fa      	ldr	r2, [r7, #12]
 8013f2e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	69fa      	ldr	r2, [r7, #28]
 8013f34:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6a3a      	ldr	r2, [r7, #32]
 8013f3a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8013f3c:	4b0c      	ldr	r3, [pc, #48]	; (8013f70 <_tx_timer_create+0xc0>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	3301      	adds	r3, #1
 8013f42:	4a0b      	ldr	r2, [pc, #44]	; (8013f70 <_tx_timer_create+0xc0>)
 8013f44:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8013f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d104      	bne.n	8013f56 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	3308      	adds	r3, #8
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 f8af 	bl	80140b4 <_tx_timer_system_activate>
 8013f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f58:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	f383 8810 	msr	PRIMASK, r3
}
 8013f60:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3728      	adds	r7, #40	; 0x28
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	4154494d 	.word	0x4154494d
 8013f70:	240037cc 	.word	0x240037cc
 8013f74:	240037c8 	.word	0x240037c8

08013f78 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013f82:	607b      	str	r3, [r7, #4]
    return(posture);
 8013f84:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013f86:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f88:	b672      	cpsid	i
    return(int_posture);
 8013f8a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8013f8c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8013f8e:	4b09      	ldr	r3, [pc, #36]	; (8013fb4 <_tx_timer_expiration_process+0x3c>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	3301      	adds	r3, #1
 8013f94:	4a07      	ldr	r2, [pc, #28]	; (8013fb4 <_tx_timer_expiration_process+0x3c>)
 8013f96:	6013      	str	r3, [r2, #0]
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	f383 8810 	msr	PRIMASK, r3
}
 8013fa2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8013fa4:	4804      	ldr	r0, [pc, #16]	; (8013fb8 <_tx_timer_expiration_process+0x40>)
 8013fa6:	f7ff fcbf 	bl	8013928 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013faa:	bf00      	nop
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	24003724 	.word	0x24003724
 8013fb8:	240037d4 	.word	0x240037d4

08013fbc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8013fbc:	b590      	push	{r4, r7, lr}
 8013fbe:	b089      	sub	sp, #36	; 0x24
 8013fc0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8013fc2:	4b28      	ldr	r3, [pc, #160]	; (8014064 <_tx_timer_initialize+0xa8>)
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8013fc8:	4b27      	ldr	r3, [pc, #156]	; (8014068 <_tx_timer_initialize+0xac>)
 8013fca:	2200      	movs	r2, #0
 8013fcc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013fce:	4b27      	ldr	r3, [pc, #156]	; (801406c <_tx_timer_initialize+0xb0>)
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8013fd4:	4b26      	ldr	r3, [pc, #152]	; (8014070 <_tx_timer_initialize+0xb4>)
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8013fda:	4b26      	ldr	r3, [pc, #152]	; (8014074 <_tx_timer_initialize+0xb8>)
 8013fdc:	2200      	movs	r2, #0
 8013fde:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8013fe0:	2280      	movs	r2, #128	; 0x80
 8013fe2:	2100      	movs	r1, #0
 8013fe4:	4824      	ldr	r0, [pc, #144]	; (8014078 <_tx_timer_initialize+0xbc>)
 8013fe6:	f000 fd37 	bl	8014a58 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8013fea:	4b24      	ldr	r3, [pc, #144]	; (801407c <_tx_timer_initialize+0xc0>)
 8013fec:	4a22      	ldr	r2, [pc, #136]	; (8014078 <_tx_timer_initialize+0xbc>)
 8013fee:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8013ff0:	4b23      	ldr	r3, [pc, #140]	; (8014080 <_tx_timer_initialize+0xc4>)
 8013ff2:	4a21      	ldr	r2, [pc, #132]	; (8014078 <_tx_timer_initialize+0xbc>)
 8013ff4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8013ff6:	4b23      	ldr	r3, [pc, #140]	; (8014084 <_tx_timer_initialize+0xc8>)
 8013ff8:	4a23      	ldr	r2, [pc, #140]	; (8014088 <_tx_timer_initialize+0xcc>)
 8013ffa:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8013ffc:	4b21      	ldr	r3, [pc, #132]	; (8014084 <_tx_timer_initialize+0xc8>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	3304      	adds	r3, #4
 8014002:	4a20      	ldr	r2, [pc, #128]	; (8014084 <_tx_timer_initialize+0xc8>)
 8014004:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8014006:	4b21      	ldr	r3, [pc, #132]	; (801408c <_tx_timer_initialize+0xd0>)
 8014008:	4a21      	ldr	r2, [pc, #132]	; (8014090 <_tx_timer_initialize+0xd4>)
 801400a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801400c:	4b21      	ldr	r3, [pc, #132]	; (8014094 <_tx_timer_initialize+0xd8>)
 801400e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014012:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8014014:	4b20      	ldr	r3, [pc, #128]	; (8014098 <_tx_timer_initialize+0xdc>)
 8014016:	2200      	movs	r2, #0
 8014018:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801401a:	4b1c      	ldr	r3, [pc, #112]	; (801408c <_tx_timer_initialize+0xd0>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	4a1d      	ldr	r2, [pc, #116]	; (8014094 <_tx_timer_initialize+0xd8>)
 8014020:	6812      	ldr	r2, [r2, #0]
 8014022:	491d      	ldr	r1, [pc, #116]	; (8014098 <_tx_timer_initialize+0xdc>)
 8014024:	6809      	ldr	r1, [r1, #0]
 8014026:	481c      	ldr	r0, [pc, #112]	; (8014098 <_tx_timer_initialize+0xdc>)
 8014028:	6800      	ldr	r0, [r0, #0]
 801402a:	2400      	movs	r4, #0
 801402c:	9405      	str	r4, [sp, #20]
 801402e:	2400      	movs	r4, #0
 8014030:	9404      	str	r4, [sp, #16]
 8014032:	9003      	str	r0, [sp, #12]
 8014034:	9102      	str	r1, [sp, #8]
 8014036:	9201      	str	r2, [sp, #4]
 8014038:	9300      	str	r3, [sp, #0]
 801403a:	4b18      	ldr	r3, [pc, #96]	; (801409c <_tx_timer_initialize+0xe0>)
 801403c:	4a18      	ldr	r2, [pc, #96]	; (80140a0 <_tx_timer_initialize+0xe4>)
 801403e:	4919      	ldr	r1, [pc, #100]	; (80140a4 <_tx_timer_initialize+0xe8>)
 8014040:	4819      	ldr	r0, [pc, #100]	; (80140a8 <_tx_timer_initialize+0xec>)
 8014042:	f7ff f9a7 	bl	8013394 <_tx_thread_create>
 8014046:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d1e5      	bne.n	801401a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801404e:	4b17      	ldr	r3, [pc, #92]	; (80140ac <_tx_timer_initialize+0xf0>)
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8014054:	4b16      	ldr	r3, [pc, #88]	; (80140b0 <_tx_timer_initialize+0xf4>)
 8014056:	2200      	movs	r2, #0
 8014058:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801405a:	bf00      	nop
 801405c:	370c      	adds	r7, #12
 801405e:	46bd      	mov	sp, r7
 8014060:	bd90      	pop	{r4, r7, pc}
 8014062:	bf00      	nop
 8014064:	24003730 	.word	0x24003730
 8014068:	24003c90 	.word	0x24003c90
 801406c:	24003734 	.word	0x24003734
 8014070:	240037c4 	.word	0x240037c4
 8014074:	240037d0 	.word	0x240037d0
 8014078:	24003738 	.word	0x24003738
 801407c:	240037b8 	.word	0x240037b8
 8014080:	240037c0 	.word	0x240037c0
 8014084:	240037bc 	.word	0x240037bc
 8014088:	240037b4 	.word	0x240037b4
 801408c:	24003884 	.word	0x24003884
 8014090:	24003890 	.word	0x24003890
 8014094:	24003888 	.word	0x24003888
 8014098:	2400388c 	.word	0x2400388c
 801409c:	4154494d 	.word	0x4154494d
 80140a0:	080141e9 	.word	0x080141e9
 80140a4:	08014ba4 	.word	0x08014ba4
 80140a8:	240037d4 	.word	0x240037d4
 80140ac:	240037c8 	.word	0x240037c8
 80140b0:	240037cc 	.word	0x240037cc

080140b4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b089      	sub	sp, #36	; 0x24
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d04a      	beq.n	801415e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ce:	d046      	beq.n	801415e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	699b      	ldr	r3, [r3, #24]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d142      	bne.n	801415e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	2b20      	cmp	r3, #32
 80140dc:	d902      	bls.n	80140e4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80140de:	231f      	movs	r3, #31
 80140e0:	61bb      	str	r3, [r7, #24]
 80140e2:	e002      	b.n	80140ea <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	3b01      	subs	r3, #1
 80140e8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80140ea:	4b20      	ldr	r3, [pc, #128]	; (801416c <_tx_timer_system_activate+0xb8>)
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	4413      	add	r3, r2
 80140f4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80140f6:	4b1e      	ldr	r3, [pc, #120]	; (8014170 <_tx_timer_system_activate+0xbc>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	69fa      	ldr	r2, [r7, #28]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d30b      	bcc.n	8014118 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8014100:	4b1b      	ldr	r3, [pc, #108]	; (8014170 <_tx_timer_system_activate+0xbc>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	69fa      	ldr	r2, [r7, #28]
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	109b      	asrs	r3, r3, #2
 801410a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801410c:	4b19      	ldr	r3, [pc, #100]	; (8014174 <_tx_timer_system_activate+0xc0>)
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4413      	add	r3, r2
 8014116:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d109      	bne.n	8014134 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	601a      	str	r2, [r3, #0]
 8014132:	e011      	b.n	8014158 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	695b      	ldr	r3, [r3, #20]
 801413e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	68fa      	ldr	r2, [r7, #12]
 8014150:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	68ba      	ldr	r2, [r7, #8]
 8014156:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	69fa      	ldr	r2, [r7, #28]
 801415c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801415e:	bf00      	nop
 8014160:	3724      	adds	r7, #36	; 0x24
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	240037c0 	.word	0x240037c0
 8014170:	240037bc 	.word	0x240037bc
 8014174:	240037b8 	.word	0x240037b8

08014178 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014178:	b480      	push	{r7}
 801417a:	b087      	sub	sp, #28
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	699b      	ldr	r3, [r3, #24]
 8014184:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d026      	beq.n	80141da <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	691b      	ldr	r3, [r3, #16]
 8014190:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	429a      	cmp	r2, r3
 8014198:	d108      	bne.n	80141ac <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d117      	bne.n	80141d4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	2200      	movs	r2, #0
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	e013      	b.n	80141d4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	695b      	ldr	r3, [r3, #20]
 80141b0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	68fa      	ldr	r2, [r7, #12]
 80141b6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	693a      	ldr	r2, [r7, #16]
 80141bc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d105      	bne.n	80141d4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	697a      	ldr	r2, [r7, #20]
 80141cc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	693a      	ldr	r2, [r7, #16]
 80141d2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2200      	movs	r2, #0
 80141d8:	619a      	str	r2, [r3, #24]
    }
}
 80141da:	bf00      	nop
 80141dc:	371c      	adds	r7, #28
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
	...

080141e8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b098      	sub	sp, #96	; 0x60
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80141f0:	2300      	movs	r3, #0
 80141f2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	4a73      	ldr	r2, [pc, #460]	; (80143c4 <_tx_timer_thread_entry+0x1dc>)
 80141f8:	4293      	cmp	r3, r2
 80141fa:	f040 80de 	bne.w	80143ba <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141fe:	f3ef 8310 	mrs	r3, PRIMASK
 8014202:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8014206:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014208:	b672      	cpsid	i
    return(int_posture);
 801420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801420c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801420e:	4b6e      	ldr	r3, [pc, #440]	; (80143c8 <_tx_timer_thread_entry+0x1e0>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f107 020c 	add.w	r2, r7, #12
 8014222:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8014224:	4b68      	ldr	r3, [pc, #416]	; (80143c8 <_tx_timer_thread_entry+0x1e0>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2200      	movs	r2, #0
 801422a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801422c:	4b66      	ldr	r3, [pc, #408]	; (80143c8 <_tx_timer_thread_entry+0x1e0>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	3304      	adds	r3, #4
 8014232:	4a65      	ldr	r2, [pc, #404]	; (80143c8 <_tx_timer_thread_entry+0x1e0>)
 8014234:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8014236:	4b64      	ldr	r3, [pc, #400]	; (80143c8 <_tx_timer_thread_entry+0x1e0>)
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	4b64      	ldr	r3, [pc, #400]	; (80143cc <_tx_timer_thread_entry+0x1e4>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	429a      	cmp	r2, r3
 8014240:	d103      	bne.n	801424a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8014242:	4b63      	ldr	r3, [pc, #396]	; (80143d0 <_tx_timer_thread_entry+0x1e8>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a60      	ldr	r2, [pc, #384]	; (80143c8 <_tx_timer_thread_entry+0x1e0>)
 8014248:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801424a:	4b62      	ldr	r3, [pc, #392]	; (80143d4 <_tx_timer_thread_entry+0x1ec>)
 801424c:	2200      	movs	r2, #0
 801424e:	601a      	str	r2, [r3, #0]
 8014250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014252:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014256:	f383 8810 	msr	PRIMASK, r3
}
 801425a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801425c:	f3ef 8310 	mrs	r3, PRIMASK
 8014260:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8014262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8014264:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8014266:	b672      	cpsid	i
    return(int_posture);
 8014268:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801426a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801426c:	e07f      	b.n	801436e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	691b      	ldr	r3, [r3, #16]
 8014276:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8014278:	2300      	movs	r3, #0
 801427a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801427c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801427e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014280:	429a      	cmp	r2, r3
 8014282:	d102      	bne.n	801428a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8014284:	2300      	movs	r3, #0
 8014286:	60fb      	str	r3, [r7, #12]
 8014288:	e00e      	b.n	80142a8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801428a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801428c:	695b      	ldr	r3, [r3, #20]
 801428e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014294:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801429a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801429c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801429e:	f107 020c 	add.w	r2, r7, #12
 80142a2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80142a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80142a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b20      	cmp	r3, #32
 80142ae:	d911      	bls.n	80142d4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80142b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80142b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ba:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80142bc:	2300      	movs	r3, #0
 80142be:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80142c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142c2:	f107 0208 	add.w	r2, r7, #8
 80142c6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80142c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142cc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80142ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142d0:	60bb      	str	r3, [r7, #8]
 80142d2:	e01a      	b.n	801430a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80142d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142d6:	689b      	ldr	r3, [r3, #8]
 80142d8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80142da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80142e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142e2:	685a      	ldr	r2, [r3, #4]
 80142e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142e6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80142e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d009      	beq.n	8014304 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80142f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142f2:	f107 0208 	add.w	r2, r7, #8
 80142f6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80142f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142fc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80142fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014300:	60bb      	str	r3, [r7, #8]
 8014302:	e002      	b.n	801430a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8014304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014306:	2200      	movs	r2, #0
 8014308:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801430a:	4a33      	ldr	r2, [pc, #204]	; (80143d8 <_tx_timer_thread_entry+0x1f0>)
 801430c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801430e:	6013      	str	r3, [r2, #0]
 8014310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014312:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014316:	f383 8810 	msr	PRIMASK, r3
}
 801431a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801431c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801431e:	2b00      	cmp	r3, #0
 8014320:	d002      	beq.n	8014328 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8014322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014324:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014326:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014328:	f3ef 8310 	mrs	r3, PRIMASK
 801432c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014330:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014332:	b672      	cpsid	i
    return(int_posture);
 8014334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014336:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8014338:	4b27      	ldr	r3, [pc, #156]	; (80143d8 <_tx_timer_thread_entry+0x1f0>)
 801433a:	2200      	movs	r2, #0
 801433c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014342:	429a      	cmp	r2, r3
 8014344:	d105      	bne.n	8014352 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8014346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014348:	2200      	movs	r2, #0
 801434a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801434c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801434e:	f7ff feb1 	bl	80140b4 <_tx_timer_system_activate>
 8014352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014354:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	f383 8810 	msr	PRIMASK, r3
}
 801435c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801435e:	f3ef 8310 	mrs	r3, PRIMASK
 8014362:	623b      	str	r3, [r7, #32]
    return(posture);
 8014364:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014366:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014368:	b672      	cpsid	i
    return(int_posture);
 801436a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 801436c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	2b00      	cmp	r3, #0
 8014372:	f47f af7c 	bne.w	801426e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8014376:	4b17      	ldr	r3, [pc, #92]	; (80143d4 <_tx_timer_thread_entry+0x1ec>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d116      	bne.n	80143ac <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801437e:	4b17      	ldr	r3, [pc, #92]	; (80143dc <_tx_timer_thread_entry+0x1f4>)
 8014380:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014384:	2203      	movs	r2, #3
 8014386:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801438a:	2201      	movs	r2, #1
 801438c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801438e:	4b14      	ldr	r3, [pc, #80]	; (80143e0 <_tx_timer_thread_entry+0x1f8>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	3301      	adds	r3, #1
 8014394:	4a12      	ldr	r2, [pc, #72]	; (80143e0 <_tx_timer_thread_entry+0x1f8>)
 8014396:	6013      	str	r3, [r2, #0]
 8014398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801439a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	f383 8810 	msr	PRIMASK, r3
}
 80143a2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80143a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80143a6:	f7ff fbbf 	bl	8013b28 <_tx_thread_system_suspend>
 80143aa:	e728      	b.n	80141fe <_tx_timer_thread_entry+0x16>
 80143ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	f383 8810 	msr	PRIMASK, r3
}
 80143b6:	bf00      	nop
            TX_DISABLE
 80143b8:	e721      	b.n	80141fe <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80143ba:	bf00      	nop
 80143bc:	3760      	adds	r7, #96	; 0x60
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	4154494d 	.word	0x4154494d
 80143c8:	240037c0 	.word	0x240037c0
 80143cc:	240037bc 	.word	0x240037bc
 80143d0:	240037b8 	.word	0x240037b8
 80143d4:	240037c4 	.word	0x240037c4
 80143d8:	240037d0 	.word	0x240037d0
 80143dc:	240037d4 	.word	0x240037d4
 80143e0:	24003724 	.word	0x24003724

080143e4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b08a      	sub	sp, #40	; 0x28
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	60f8      	str	r0, [r7, #12]
 80143ec:	60b9      	str	r1, [r7, #8]
 80143ee:	607a      	str	r2, [r7, #4]
 80143f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80143f2:	2300      	movs	r3, #0
 80143f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d102      	bne.n	8014402 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80143fc:	2302      	movs	r3, #2
 80143fe:	627b      	str	r3, [r7, #36]	; 0x24
 8014400:	e029      	b.n	8014456 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	4a2d      	ldr	r2, [pc, #180]	; (80144bc <_txe_byte_allocate+0xd8>)
 8014408:	4293      	cmp	r3, r2
 801440a:	d002      	beq.n	8014412 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801440c:	2302      	movs	r3, #2
 801440e:	627b      	str	r3, [r7, #36]	; 0x24
 8014410:	e021      	b.n	8014456 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d102      	bne.n	801441e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014418:	2303      	movs	r3, #3
 801441a:	627b      	str	r3, [r7, #36]	; 0x24
 801441c:	e01b      	b.n	8014456 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d102      	bne.n	801442a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014424:	2305      	movs	r3, #5
 8014426:	627b      	str	r3, [r7, #36]	; 0x24
 8014428:	e015      	b.n	8014456 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	69db      	ldr	r3, [r3, #28]
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	429a      	cmp	r2, r3
 8014432:	d902      	bls.n	801443a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014434:	2305      	movs	r3, #5
 8014436:	627b      	str	r3, [r7, #36]	; 0x24
 8014438:	e00d      	b.n	8014456 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d00a      	beq.n	8014456 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014440:	f3ef 8305 	mrs	r3, IPSR
 8014444:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8014446:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014448:	4b1d      	ldr	r3, [pc, #116]	; (80144c0 <_txe_byte_allocate+0xdc>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4313      	orrs	r3, r2
 801444e:	2b00      	cmp	r3, #0
 8014450:	d001      	beq.n	8014456 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014452:	2304      	movs	r3, #4
 8014454:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8014456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014458:	2b00      	cmp	r3, #0
 801445a:	d108      	bne.n	801446e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801445c:	4b19      	ldr	r3, [pc, #100]	; (80144c4 <_txe_byte_allocate+0xe0>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8014462:	6a3b      	ldr	r3, [r7, #32]
 8014464:	4a18      	ldr	r2, [pc, #96]	; (80144c8 <_txe_byte_allocate+0xe4>)
 8014466:	4293      	cmp	r3, r2
 8014468:	d101      	bne.n	801446e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801446a:	2313      	movs	r3, #19
 801446c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014470:	2b00      	cmp	r3, #0
 8014472:	d114      	bne.n	801449e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014474:	f3ef 8305 	mrs	r3, IPSR
 8014478:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801447a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801447c:	4b10      	ldr	r3, [pc, #64]	; (80144c0 <_txe_byte_allocate+0xdc>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	4313      	orrs	r3, r2
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00b      	beq.n	801449e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014486:	f3ef 8305 	mrs	r3, IPSR
 801448a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801448c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801448e:	4b0c      	ldr	r3, [pc, #48]	; (80144c0 <_txe_byte_allocate+0xdc>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	4313      	orrs	r3, r2
 8014494:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014498:	d201      	bcs.n	801449e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801449a:	2313      	movs	r3, #19
 801449c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d106      	bne.n	80144b2 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	68f8      	ldr	r0, [r7, #12]
 80144ac:	f7fd fb74 	bl	8011b98 <_tx_byte_allocate>
 80144b0:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3728      	adds	r7, #40	; 0x28
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	42595445 	.word	0x42595445
 80144c0:	2400006c 	.word	0x2400006c
 80144c4:	2400368c 	.word	0x2400368c
 80144c8:	240037d4 	.word	0x240037d4

080144cc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b092      	sub	sp, #72	; 0x48
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	60f8      	str	r0, [r7, #12]
 80144d4:	60b9      	str	r1, [r7, #8]
 80144d6:	607a      	str	r2, [r7, #4]
 80144d8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80144da:	2300      	movs	r3, #0
 80144dc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80144e4:	2302      	movs	r3, #2
 80144e6:	647b      	str	r3, [r7, #68]	; 0x44
 80144e8:	e075      	b.n	80145d6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80144ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144ec:	2b34      	cmp	r3, #52	; 0x34
 80144ee:	d002      	beq.n	80144f6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80144f0:	2302      	movs	r3, #2
 80144f2:	647b      	str	r3, [r7, #68]	; 0x44
 80144f4:	e06f      	b.n	80145d6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80144f6:	f3ef 8310 	mrs	r3, PRIMASK
 80144fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80144fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80144fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014500:	b672      	cpsid	i
    return(int_posture);
 8014502:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014504:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014506:	4b3b      	ldr	r3, [pc, #236]	; (80145f4 <_txe_byte_pool_create+0x128>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	3301      	adds	r3, #1
 801450c:	4a39      	ldr	r2, [pc, #228]	; (80145f4 <_txe_byte_pool_create+0x128>)
 801450e:	6013      	str	r3, [r2, #0]
 8014510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014512:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014516:	f383 8810 	msr	PRIMASK, r3
}
 801451a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801451c:	4b36      	ldr	r3, [pc, #216]	; (80145f8 <_txe_byte_pool_create+0x12c>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014522:	2300      	movs	r3, #0
 8014524:	643b      	str	r3, [r7, #64]	; 0x40
 8014526:	e009      	b.n	801453c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8014528:	68fa      	ldr	r2, [r7, #12]
 801452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801452c:	429a      	cmp	r2, r3
 801452e:	d00b      	beq.n	8014548 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8014530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014534:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014538:	3301      	adds	r3, #1
 801453a:	643b      	str	r3, [r7, #64]	; 0x40
 801453c:	4b2f      	ldr	r3, [pc, #188]	; (80145fc <_txe_byte_pool_create+0x130>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014542:	429a      	cmp	r2, r3
 8014544:	d3f0      	bcc.n	8014528 <_txe_byte_pool_create+0x5c>
 8014546:	e000      	b.n	801454a <_txe_byte_pool_create+0x7e>
                break;
 8014548:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801454a:	f3ef 8310 	mrs	r3, PRIMASK
 801454e:	623b      	str	r3, [r7, #32]
    return(posture);
 8014550:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014552:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014554:	b672      	cpsid	i
    return(int_posture);
 8014556:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014558:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801455a:	4b26      	ldr	r3, [pc, #152]	; (80145f4 <_txe_byte_pool_create+0x128>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	3b01      	subs	r3, #1
 8014560:	4a24      	ldr	r2, [pc, #144]	; (80145f4 <_txe_byte_pool_create+0x128>)
 8014562:	6013      	str	r3, [r2, #0]
 8014564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014566:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456a:	f383 8810 	msr	PRIMASK, r3
}
 801456e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014570:	f7ff f9a0 	bl	80138b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014578:	429a      	cmp	r2, r3
 801457a:	d102      	bne.n	8014582 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 801457c:	2302      	movs	r3, #2
 801457e:	647b      	str	r3, [r7, #68]	; 0x44
 8014580:	e029      	b.n	80145d6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d102      	bne.n	801458e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014588:	2303      	movs	r3, #3
 801458a:	647b      	str	r3, [r7, #68]	; 0x44
 801458c:	e023      	b.n	80145d6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	2b63      	cmp	r3, #99	; 0x63
 8014592:	d802      	bhi.n	801459a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8014594:	2305      	movs	r3, #5
 8014596:	647b      	str	r3, [r7, #68]	; 0x44
 8014598:	e01d      	b.n	80145d6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801459a:	4b19      	ldr	r3, [pc, #100]	; (8014600 <_txe_byte_pool_create+0x134>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80145a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a2:	4a18      	ldr	r2, [pc, #96]	; (8014604 <_txe_byte_pool_create+0x138>)
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d101      	bne.n	80145ac <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80145a8:	2313      	movs	r3, #19
 80145aa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80145ac:	f3ef 8305 	mrs	r3, IPSR
 80145b0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80145b2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80145b4:	4b14      	ldr	r3, [pc, #80]	; (8014608 <_txe_byte_pool_create+0x13c>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4313      	orrs	r3, r2
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d00b      	beq.n	80145d6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80145be:	f3ef 8305 	mrs	r3, IPSR
 80145c2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80145c4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80145c6:	4b10      	ldr	r3, [pc, #64]	; (8014608 <_txe_byte_pool_create+0x13c>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4313      	orrs	r3, r2
 80145cc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80145d0:	d201      	bcs.n	80145d6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80145d2:	2313      	movs	r3, #19
 80145d4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80145d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d106      	bne.n	80145ea <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	68b9      	ldr	r1, [r7, #8]
 80145e2:	68f8      	ldr	r0, [r7, #12]
 80145e4:	f7fd fc1a 	bl	8011e1c <_tx_byte_pool_create>
 80145e8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80145ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3748      	adds	r7, #72	; 0x48
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	24003724 	.word	0x24003724
 80145f8:	2400367c 	.word	0x2400367c
 80145fc:	24003680 	.word	0x24003680
 8014600:	2400368c 	.word	0x2400368c
 8014604:	240037d4 	.word	0x240037d4
 8014608:	2400006c 	.word	0x2400006c

0801460c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b092      	sub	sp, #72	; 0x48
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801461a:	2300      	movs	r3, #0
 801461c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d102      	bne.n	801462a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014624:	230c      	movs	r3, #12
 8014626:	647b      	str	r3, [r7, #68]	; 0x44
 8014628:	e054      	b.n	80146d4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	2b1c      	cmp	r3, #28
 801462e:	d002      	beq.n	8014636 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014630:	230c      	movs	r3, #12
 8014632:	647b      	str	r3, [r7, #68]	; 0x44
 8014634:	e04e      	b.n	80146d4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014636:	f3ef 8310 	mrs	r3, PRIMASK
 801463a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801463e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014640:	b672      	cpsid	i
    return(int_posture);
 8014642:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014644:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014646:	4b36      	ldr	r3, [pc, #216]	; (8014720 <_txe_semaphore_create+0x114>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	3301      	adds	r3, #1
 801464c:	4a34      	ldr	r2, [pc, #208]	; (8014720 <_txe_semaphore_create+0x114>)
 801464e:	6013      	str	r3, [r2, #0]
 8014650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014652:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014656:	f383 8810 	msr	PRIMASK, r3
}
 801465a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801465c:	4b31      	ldr	r3, [pc, #196]	; (8014724 <_txe_semaphore_create+0x118>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014662:	2300      	movs	r3, #0
 8014664:	643b      	str	r3, [r7, #64]	; 0x40
 8014666:	e009      	b.n	801467c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8014668:	68fa      	ldr	r2, [r7, #12]
 801466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801466c:	429a      	cmp	r2, r3
 801466e:	d00b      	beq.n	8014688 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8014670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014672:	695b      	ldr	r3, [r3, #20]
 8014674:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8014676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014678:	3301      	adds	r3, #1
 801467a:	643b      	str	r3, [r7, #64]	; 0x40
 801467c:	4b2a      	ldr	r3, [pc, #168]	; (8014728 <_txe_semaphore_create+0x11c>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014682:	429a      	cmp	r2, r3
 8014684:	d3f0      	bcc.n	8014668 <_txe_semaphore_create+0x5c>
 8014686:	e000      	b.n	801468a <_txe_semaphore_create+0x7e>
                break;
 8014688:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801468a:	f3ef 8310 	mrs	r3, PRIMASK
 801468e:	623b      	str	r3, [r7, #32]
    return(posture);
 8014690:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014692:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014694:	b672      	cpsid	i
    return(int_posture);
 8014696:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014698:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801469a:	4b21      	ldr	r3, [pc, #132]	; (8014720 <_txe_semaphore_create+0x114>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	3b01      	subs	r3, #1
 80146a0:	4a1f      	ldr	r2, [pc, #124]	; (8014720 <_txe_semaphore_create+0x114>)
 80146a2:	6013      	str	r3, [r2, #0]
 80146a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	f383 8810 	msr	PRIMASK, r3
}
 80146ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80146b0:	f7ff f900 	bl	80138b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80146b4:	68fa      	ldr	r2, [r7, #12]
 80146b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d102      	bne.n	80146c2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80146bc:	230c      	movs	r3, #12
 80146be:	647b      	str	r3, [r7, #68]	; 0x44
 80146c0:	e008      	b.n	80146d4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80146c2:	4b1a      	ldr	r3, [pc, #104]	; (801472c <_txe_semaphore_create+0x120>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80146c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ca:	4a19      	ldr	r2, [pc, #100]	; (8014730 <_txe_semaphore_create+0x124>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d101      	bne.n	80146d4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80146d0:	2313      	movs	r3, #19
 80146d2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80146d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d114      	bne.n	8014704 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146da:	f3ef 8305 	mrs	r3, IPSR
 80146de:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80146e0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80146e2:	4b14      	ldr	r3, [pc, #80]	; (8014734 <_txe_semaphore_create+0x128>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4313      	orrs	r3, r2
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d00b      	beq.n	8014704 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146ec:	f3ef 8305 	mrs	r3, IPSR
 80146f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80146f2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80146f4:	4b0f      	ldr	r3, [pc, #60]	; (8014734 <_txe_semaphore_create+0x128>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4313      	orrs	r3, r2
 80146fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80146fe:	d201      	bcs.n	8014704 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014700:	2313      	movs	r3, #19
 8014702:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014706:	2b00      	cmp	r3, #0
 8014708:	d105      	bne.n	8014716 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	68b9      	ldr	r1, [r7, #8]
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f7fe fc74 	bl	8012ffc <_tx_semaphore_create>
 8014714:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014718:	4618      	mov	r0, r3
 801471a:	3748      	adds	r7, #72	; 0x48
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	24003724 	.word	0x24003724
 8014724:	24003654 	.word	0x24003654
 8014728:	24003658 	.word	0x24003658
 801472c:	2400368c 	.word	0x2400368c
 8014730:	240037d4 	.word	0x240037d4
 8014734:	2400006c 	.word	0x2400006c

08014738 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014740:	2300      	movs	r3, #0
 8014742:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d102      	bne.n	8014750 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801474a:	230c      	movs	r3, #12
 801474c:	617b      	str	r3, [r7, #20]
 801474e:	e01c      	b.n	801478a <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4a13      	ldr	r2, [pc, #76]	; (80147a4 <_txe_semaphore_delete+0x6c>)
 8014756:	4293      	cmp	r3, r2
 8014758:	d002      	beq.n	8014760 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801475a:	230c      	movs	r3, #12
 801475c:	617b      	str	r3, [r7, #20]
 801475e:	e014      	b.n	801478a <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014760:	f3ef 8305 	mrs	r3, IPSR
 8014764:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014766:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014768:	4b0f      	ldr	r3, [pc, #60]	; (80147a8 <_txe_semaphore_delete+0x70>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	4313      	orrs	r3, r2
 801476e:	2b00      	cmp	r3, #0
 8014770:	d002      	beq.n	8014778 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014772:	2313      	movs	r3, #19
 8014774:	617b      	str	r3, [r7, #20]
 8014776:	e008      	b.n	801478a <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014778:	4b0c      	ldr	r3, [pc, #48]	; (80147ac <_txe_semaphore_delete+0x74>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	4a0b      	ldr	r2, [pc, #44]	; (80147b0 <_txe_semaphore_delete+0x78>)
 8014782:	4293      	cmp	r3, r2
 8014784:	d101      	bne.n	801478a <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014786:	2313      	movs	r3, #19
 8014788:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d103      	bne.n	8014798 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f7fe fc85 	bl	80130a0 <_tx_semaphore_delete>
 8014796:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014798:	697b      	ldr	r3, [r7, #20]
}
 801479a:	4618      	mov	r0, r3
 801479c:	3718      	adds	r7, #24
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	53454d41 	.word	0x53454d41
 80147a8:	2400006c 	.word	0x2400006c
 80147ac:	2400368c 	.word	0x2400368c
 80147b0:	240037d4 	.word	0x240037d4

080147b4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b086      	sub	sp, #24
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80147be:	2300      	movs	r3, #0
 80147c0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d102      	bne.n	80147ce <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80147c8:	230c      	movs	r3, #12
 80147ca:	617b      	str	r3, [r7, #20]
 80147cc:	e01f      	b.n	801480e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	4a15      	ldr	r2, [pc, #84]	; (8014828 <_txe_semaphore_get+0x74>)
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d002      	beq.n	80147de <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80147d8:	230c      	movs	r3, #12
 80147da:	617b      	str	r3, [r7, #20]
 80147dc:	e017      	b.n	801480e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d014      	beq.n	801480e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80147e4:	f3ef 8305 	mrs	r3, IPSR
 80147e8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80147ea:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80147ec:	4b0f      	ldr	r3, [pc, #60]	; (801482c <_txe_semaphore_get+0x78>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4313      	orrs	r3, r2
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d002      	beq.n	80147fc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80147f6:	2304      	movs	r3, #4
 80147f8:	617b      	str	r3, [r7, #20]
 80147fa:	e008      	b.n	801480e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80147fc:	4b0c      	ldr	r3, [pc, #48]	; (8014830 <_txe_semaphore_get+0x7c>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	4a0b      	ldr	r2, [pc, #44]	; (8014834 <_txe_semaphore_get+0x80>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d101      	bne.n	801480e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801480a:	2304      	movs	r3, #4
 801480c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d104      	bne.n	801481e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7fe fcd2 	bl	80131c0 <_tx_semaphore_get>
 801481c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801481e:	697b      	ldr	r3, [r7, #20]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3718      	adds	r7, #24
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	53454d41 	.word	0x53454d41
 801482c:	2400006c 	.word	0x2400006c
 8014830:	2400368c 	.word	0x2400368c
 8014834:	240037d4 	.word	0x240037d4

08014838 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d102      	bne.n	801484c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014846:	230c      	movs	r3, #12
 8014848:	60fb      	str	r3, [r7, #12]
 801484a:	e00b      	b.n	8014864 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	4a07      	ldr	r2, [pc, #28]	; (8014870 <_txe_semaphore_put+0x38>)
 8014852:	4293      	cmp	r3, r2
 8014854:	d002      	beq.n	801485c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014856:	230c      	movs	r3, #12
 8014858:	60fb      	str	r3, [r7, #12]
 801485a:	e003      	b.n	8014864 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7fe fd41 	bl	80132e4 <_tx_semaphore_put>
 8014862:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8014864:	68fb      	ldr	r3, [r7, #12]
}
 8014866:	4618      	mov	r0, r3
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	53454d41 	.word	0x53454d41

08014874 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b09a      	sub	sp, #104	; 0x68
 8014878:	af06      	add	r7, sp, #24
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014882:	2300      	movs	r3, #0
 8014884:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d102      	bne.n	8014892 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801488c:	230e      	movs	r3, #14
 801488e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014890:	e0bb      	b.n	8014a0a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8014892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014894:	2bb0      	cmp	r3, #176	; 0xb0
 8014896:	d002      	beq.n	801489e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014898:	230e      	movs	r3, #14
 801489a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801489c:	e0b5      	b.n	8014a0a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801489e:	f3ef 8310 	mrs	r3, PRIMASK
 80148a2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80148a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80148a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80148a8:	b672      	cpsid	i
    return(int_posture);
 80148aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80148ac:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80148ae:	4b64      	ldr	r3, [pc, #400]	; (8014a40 <_txe_thread_create+0x1cc>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	3301      	adds	r3, #1
 80148b4:	4a62      	ldr	r2, [pc, #392]	; (8014a40 <_txe_thread_create+0x1cc>)
 80148b6:	6013      	str	r3, [r2, #0]
 80148b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148be:	f383 8810 	msr	PRIMASK, r3
}
 80148c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80148c4:	2300      	movs	r3, #0
 80148c6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80148c8:	4b5e      	ldr	r3, [pc, #376]	; (8014a44 <_txe_thread_create+0x1d0>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80148ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80148d0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80148d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148d4:	3b01      	subs	r3, #1
 80148d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148d8:	4413      	add	r3, r2
 80148da:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80148dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148de:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80148e0:	2300      	movs	r3, #0
 80148e2:	647b      	str	r3, [r7, #68]	; 0x44
 80148e4:	e02b      	b.n	801493e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80148e6:	68fa      	ldr	r2, [r7, #12]
 80148e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d101      	bne.n	80148f2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80148ee:	2301      	movs	r3, #1
 80148f0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80148f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	d028      	beq.n	801494a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80148f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148fe:	429a      	cmp	r2, r3
 8014900:	d308      	bcc.n	8014914 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8014902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014908:	429a      	cmp	r2, r3
 801490a:	d203      	bcs.n	8014914 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801490c:	2300      	movs	r3, #0
 801490e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014910:	2301      	movs	r3, #1
 8014912:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801491a:	429a      	cmp	r2, r3
 801491c:	d308      	bcc.n	8014930 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014920:	691b      	ldr	r3, [r3, #16]
 8014922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014924:	429a      	cmp	r2, r3
 8014926:	d203      	bcs.n	8014930 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014928:	2300      	movs	r3, #0
 801492a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801492c:	2301      	movs	r3, #1
 801492e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8014930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014936:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801493a:	3301      	adds	r3, #1
 801493c:	647b      	str	r3, [r7, #68]	; 0x44
 801493e:	4b42      	ldr	r3, [pc, #264]	; (8014a48 <_txe_thread_create+0x1d4>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014944:	429a      	cmp	r2, r3
 8014946:	d3ce      	bcc.n	80148e6 <_txe_thread_create+0x72>
 8014948:	e000      	b.n	801494c <_txe_thread_create+0xd8>
                break;
 801494a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801494c:	f3ef 8310 	mrs	r3, PRIMASK
 8014950:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014952:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014954:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014956:	b672      	cpsid	i
    return(int_posture);
 8014958:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801495a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801495c:	4b38      	ldr	r3, [pc, #224]	; (8014a40 <_txe_thread_create+0x1cc>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	3b01      	subs	r3, #1
 8014962:	4a37      	ldr	r2, [pc, #220]	; (8014a40 <_txe_thread_create+0x1cc>)
 8014964:	6013      	str	r3, [r2, #0]
 8014966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014968:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801496a:	6a3b      	ldr	r3, [r7, #32]
 801496c:	f383 8810 	msr	PRIMASK, r3
}
 8014970:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014972:	f7fe ff9f 	bl	80138b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801497a:	429a      	cmp	r2, r3
 801497c:	d102      	bne.n	8014984 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801497e:	230e      	movs	r3, #14
 8014980:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014982:	e042      	b.n	8014a0a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8014984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014986:	2b00      	cmp	r3, #0
 8014988:	d102      	bne.n	8014990 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801498a:	2303      	movs	r3, #3
 801498c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801498e:	e03c      	b.n	8014a0a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d102      	bne.n	801499c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014996:	2303      	movs	r3, #3
 8014998:	64fb      	str	r3, [r7, #76]	; 0x4c
 801499a:	e036      	b.n	8014a0a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801499c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801499e:	2bc7      	cmp	r3, #199	; 0xc7
 80149a0:	d802      	bhi.n	80149a8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80149a2:	2305      	movs	r3, #5
 80149a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149a6:	e030      	b.n	8014a0a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80149a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149aa:	2b1f      	cmp	r3, #31
 80149ac:	d902      	bls.n	80149b4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80149ae:	230f      	movs	r3, #15
 80149b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149b2:	e02a      	b.n	8014a0a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80149b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80149b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d902      	bls.n	80149c2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80149bc:	2318      	movs	r3, #24
 80149be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149c0:	e023      	b.n	8014a0a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80149c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d902      	bls.n	80149ce <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80149c8:	2310      	movs	r3, #16
 80149ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149cc:	e01d      	b.n	8014a0a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80149ce:	4b1f      	ldr	r3, [pc, #124]	; (8014a4c <_txe_thread_create+0x1d8>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80149d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d6:	4a1e      	ldr	r2, [pc, #120]	; (8014a50 <_txe_thread_create+0x1dc>)
 80149d8:	4293      	cmp	r3, r2
 80149da:	d101      	bne.n	80149e0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80149dc:	2313      	movs	r3, #19
 80149de:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80149e0:	f3ef 8305 	mrs	r3, IPSR
 80149e4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80149e6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80149e8:	4b1a      	ldr	r3, [pc, #104]	; (8014a54 <_txe_thread_create+0x1e0>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	4313      	orrs	r3, r2
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d00b      	beq.n	8014a0a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80149f2:	f3ef 8305 	mrs	r3, IPSR
 80149f6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80149f8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80149fa:	4b16      	ldr	r3, [pc, #88]	; (8014a54 <_txe_thread_create+0x1e0>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	4313      	orrs	r3, r2
 8014a00:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014a04:	d201      	bcs.n	8014a0a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014a06:	2313      	movs	r3, #19
 8014a08:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d112      	bne.n	8014a36 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a12:	9305      	str	r3, [sp, #20]
 8014a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014a16:	9304      	str	r3, [sp, #16]
 8014a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a1a:	9303      	str	r3, [sp, #12]
 8014a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a1e:	9302      	str	r3, [sp, #8]
 8014a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a22:	9301      	str	r3, [sp, #4]
 8014a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	68b9      	ldr	r1, [r7, #8]
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f7fe fcb0 	bl	8013394 <_tx_thread_create>
 8014a34:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3750      	adds	r7, #80	; 0x50
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	24003724 	.word	0x24003724
 8014a44:	24003694 	.word	0x24003694
 8014a48:	24003698 	.word	0x24003698
 8014a4c:	2400368c 	.word	0x2400368c
 8014a50:	240037d4 	.word	0x240037d4
 8014a54:	2400006c 	.word	0x2400006c

08014a58 <memset>:
 8014a58:	4402      	add	r2, r0
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	d100      	bne.n	8014a62 <memset+0xa>
 8014a60:	4770      	bx	lr
 8014a62:	f803 1b01 	strb.w	r1, [r3], #1
 8014a66:	e7f9      	b.n	8014a5c <memset+0x4>

08014a68 <__libc_init_array>:
 8014a68:	b570      	push	{r4, r5, r6, lr}
 8014a6a:	4d0d      	ldr	r5, [pc, #52]	; (8014aa0 <__libc_init_array+0x38>)
 8014a6c:	4c0d      	ldr	r4, [pc, #52]	; (8014aa4 <__libc_init_array+0x3c>)
 8014a6e:	1b64      	subs	r4, r4, r5
 8014a70:	10a4      	asrs	r4, r4, #2
 8014a72:	2600      	movs	r6, #0
 8014a74:	42a6      	cmp	r6, r4
 8014a76:	d109      	bne.n	8014a8c <__libc_init_array+0x24>
 8014a78:	4d0b      	ldr	r5, [pc, #44]	; (8014aa8 <__libc_init_array+0x40>)
 8014a7a:	4c0c      	ldr	r4, [pc, #48]	; (8014aac <__libc_init_array+0x44>)
 8014a7c:	f000 f826 	bl	8014acc <_init>
 8014a80:	1b64      	subs	r4, r4, r5
 8014a82:	10a4      	asrs	r4, r4, #2
 8014a84:	2600      	movs	r6, #0
 8014a86:	42a6      	cmp	r6, r4
 8014a88:	d105      	bne.n	8014a96 <__libc_init_array+0x2e>
 8014a8a:	bd70      	pop	{r4, r5, r6, pc}
 8014a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a90:	4798      	blx	r3
 8014a92:	3601      	adds	r6, #1
 8014a94:	e7ee      	b.n	8014a74 <__libc_init_array+0xc>
 8014a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a9a:	4798      	blx	r3
 8014a9c:	3601      	adds	r6, #1
 8014a9e:	e7f2      	b.n	8014a86 <__libc_init_array+0x1e>
 8014aa0:	08014bd0 	.word	0x08014bd0
 8014aa4:	08014bd0 	.word	0x08014bd0
 8014aa8:	08014bd0 	.word	0x08014bd0
 8014aac:	08014bd4 	.word	0x08014bd4

08014ab0 <memcpy>:
 8014ab0:	440a      	add	r2, r1
 8014ab2:	4291      	cmp	r1, r2
 8014ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ab8:	d100      	bne.n	8014abc <memcpy+0xc>
 8014aba:	4770      	bx	lr
 8014abc:	b510      	push	{r4, lr}
 8014abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ac6:	4291      	cmp	r1, r2
 8014ac8:	d1f9      	bne.n	8014abe <memcpy+0xe>
 8014aca:	bd10      	pop	{r4, pc}

08014acc <_init>:
 8014acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ace:	bf00      	nop
 8014ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ad2:	bc08      	pop	{r3}
 8014ad4:	469e      	mov	lr, r3
 8014ad6:	4770      	bx	lr

08014ad8 <_fini>:
 8014ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ada:	bf00      	nop
 8014adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ade:	bc08      	pop	{r3}
 8014ae0:	469e      	mov	lr, r3
 8014ae2:	4770      	bx	lr
